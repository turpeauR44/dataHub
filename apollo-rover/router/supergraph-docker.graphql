schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type AccessPermission
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  label: String!
  permissionLevel: Int!
}

type AccessPermissionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  labelMin: String
  labelMax: String
  permissionLevelMin: Int
  permissionLevelMax: Int
  permissionLevelSum: Int
  permissionLevelAvg: Float
}

input AccessPermissionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  label: StringExactFilter_StringFullTextFilter
  permissionLevel: IntFilter
  has: [AccessPermissionHasFilter]
  and: [AccessPermissionFilter]
  or: [AccessPermissionFilter]
  not: AccessPermissionFilter
}

enum AccessPermissionHasFilter
  @join__type(graph: BASS)
{
  label @join__enumValue(graph: BASS)
  permissionLevel @join__enumValue(graph: BASS)
}

input AccessPermissionOrder
  @join__type(graph: BASS)
{
  asc: AccessPermissionOrderable
  desc: AccessPermissionOrderable
  then: AccessPermissionOrder
}

enum AccessPermissionOrderable
  @join__type(graph: BASS)
{
  label @join__enumValue(graph: BASS)
  permissionLevel @join__enumValue(graph: BASS)
}

input AccessPermissionPatch
  @join__type(graph: BASS)
{
  label: String
  permissionLevel: Int
}

input AccessPermissionRef
  @join__type(graph: BASS)
{
  iid: ID
  label: String
  permissionLevel: Int
}

enum Action
  @join__type(graph: BASS)
{
  Added @join__enumValue(graph: BASS)
  Deleted @join__enumValue(graph: BASS)
  Changed @join__enumValue(graph: BASS)
  Observed @join__enumValue(graph: BASS)
}

input AddAccessPermissionInput
  @join__type(graph: BASS)
{
  label: String!
  permissionLevel: Int!
}

type AddAccessPermissionPayload
  @join__type(graph: BASS)
{
  accessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  numUids: Int
}

input AddAlarmEventInput
  @join__type(graph: BASS)
{
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  alarmEvent: String!
  alarmLimit: String
  alarmType: String
  priority: String
  event: EventRef
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddAlarmEventPayload
  @join__type(graph: BASS)
{
  alarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
  numUids: Int
}

input AddCommentInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  text: String!
  timestamp: DateTime
  personVersion: PersonVersionRef!
  onSignature: SignatureRef
  signOff: SignatureRef
  event: EventRef
  alarmEvent: AlarmEventRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  materialActual: MaterialActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  personnelActual: PersonnelActualRef
  segmentParameter: SegmentParameterRef
  workRequest: WorkRequestRef
  jobOrder: JobOrderRef
  materialRequirement: MaterialRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  personnelRequirement: PersonnelRequirementRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  child: [CommentRef]
  parent: CommentRef
}

type AddCommentPayload
  @join__type(graph: BASS)
{
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input AddDataSourceInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [DataSourceVersionRef]
  activeVersion: DataSourceVersionRef
  nextVersion: String
  id: String!
  label: String!
  uiSortIndex: Int
  equipmentDataSources: [EquipmentDataSourceRef]
  propertyNameAliases: [PropertyNameAliasRef]
}

input AddDataSourceMethodArgumentInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  position: Int!
  dataType: DataType
  direction: MethodArgumentDirection!
  value: String
  dataSourceMethod: DataSourceMethodRef!
}

type AddDataSourceMethodArgumentPayload
  @join__type(graph: BASS)
{
  dataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
  numUids: Int
}

input AddDataSourceMethodInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  method: String!
  object: String
  error: String
  statusCode: Int
  dataSourceVersion: DataSourceVersionRef!
  arguments: [DataSourceMethodArgumentRef]
}

type AddDataSourceMethodPayload
  @join__type(graph: BASS)
{
  dataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
  numUids: Int
}

type AddDataSourcePayload
  @join__type(graph: BASS)
{
  dataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
  numUids: Int
}

input AddDataSourceTopicInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  label: String!
  dataType: DataType
  messageKeyDeterminedBy: MessageKey!
  dataSourceVersion: DataSourceVersionRef!
  propertyNameAliases: [PropertyNameAliasRef]
}

type AddDataSourceTopicPayload
  @join__type(graph: BASS)
{
  dataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
  numUids: Int
}

input AddDataSourceVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String!
  versionStatus: VersionState!
  dataSource: DataSourceRef!
  isActiveVersionOf: DataSourceRef
  id: String!
  description: String
  protocol: DataSourceProtocol!
  connectionString: String
  username: String
  password: String
  certificate: String
  topics: [DataSourceTopicRef]
  equipmentDataSources: [EquipmentDataSourceRef]
  physicalAssetDataSources: [PhysicalAssetDataSourceRef]
  methods: [DataSourceMethodRef]
}

type AddDataSourceVersionPayload
  @join__type(graph: BASS)
{
  dataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
  numUids: Int
}

input AddDataSubscriptionInput
  @join__type(graph: BASS)
{
  name: String!
  topic: String!
  query: String!
  split: Boolean!
}

type AddDataSubscriptionPayload
  @join__type(graph: BASS)
{
  dataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
  numUids: Int
}

input AddEnvironmentalVariableInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versions: [EnvironmentalVariableVersionRef]
  activeVersion: EnvironmentalVariableVersionRef
  nextVersion: String
  id: String!
}

type AddEnvironmentalVariablePayload
  @join__type(graph: BASS)
{
  environmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
  numUids: Int
}

input AddEnvironmentalVariableVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  environmentalVariable: EnvironmentalVariableRef!
  isActiveVersionOf: EnvironmentalVariableRef
  id: String!
  value: String!
}

type AddEnvironmentalVariableVersionPayload
  @join__type(graph: BASS)
{
  environmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
  numUids: Int
}

input AddEquipmentActualInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [EquipmentActualRef]
  parent: EquipmentActualRef
  properties: [EquipmentActualPropertyRef]
  testResults: [TestResultRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  equipmentVersion: EquipmentVersionRef
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddEquipmentActualPayload
  @join__type(graph: BASS)
{
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
  numUids: Int
}

input AddEquipmentActualPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  equipmentActual: EquipmentActualRef!
  children: [EquipmentActualPropertyRef]
  parent: EquipmentActualPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

type AddEquipmentActualPropertyPayload
  @join__type(graph: BASS)
{
  equipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
  numUids: Int
}

input AddEquipmentAssetMappingInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  startTime: DateTime
  endTime: DateTime
  equipment: EquipmentRef!
  physicalAsset: PhysicalAssetRef!
}

type AddEquipmentAssetMappingPayload
  @join__type(graph: BASS)
{
  equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
  numUids: Int
}

input AddEquipmentClassInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [EquipmentClassVersionRef]
  activeVersion: EquipmentClassVersionRef
  nextVersion: String
  id: String!
  label: String!
  isIncludedIn: [EquipmentClassVersionRef]
  isMadeUpOf: [EquipmentClassRef]
  isPartOf: [EquipmentClassRef]
  equipmentVersions: [EquipmentVersionRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  equipmentRequirements: [EquipmentRequirementRef]
  equipmentActual: [EquipmentActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  uiSortIndex: Int
}

type AddEquipmentClassPayload
  @join__type(graph: BASS)
{
  equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
  numUids: Int
}

input AddEquipmentClassPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  propertyType: Isa95PropertyType!
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  bindingType: PropertyBindingType
  equipmentClassVersion: EquipmentClassVersionRef!
  children: [EquipmentClassPropertyRef]
  parent: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
  equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
  equipmentActualProperties: [EquipmentActualPropertyRef]
  triggersRules: [RuleRef]
}

type AddEquipmentClassPropertyPayload
  @join__type(graph: BASS)
{
  equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
  numUids: Int
}

input AddEquipmentClassVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  equipmentClass: EquipmentClassRef!
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  isActiveVersionOf: EquipmentClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  equipmentLevel: EquipmentElementLevel
  properties: [EquipmentClassPropertyRef]
  rules: [RuleRef]
  includesPropertiesOf: [EquipmentClassRef]
  equipmentVersions: [EquipmentVersionRef]
  stateModels: [StateModelDefinitionRef]
  image: String
  displayName: String
  uiMonochromeIcon: String
  uiMonochromeIconColour: String
}

type AddEquipmentClassVersionPayload
  @join__type(graph: BASS)
{
  equipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
  numUids: Int
}

input AddEquipmentDataSourceInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  equipmentVersion: EquipmentVersionRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion: DataSourceVersionRef
  dataSource: DataSourceRef
}

type AddEquipmentDataSourcePayload
  @join__type(graph: BASS)
{
  equipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
  numUids: Int
}

input AddEquipmentInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [EquipmentVersionRef]
  activeVersion: EquipmentVersionRef
  nextVersion: String
  id: String!
  label: String!
  isMadeUpOf: [EquipmentRef]
  isPartOf: [EquipmentRef]
  equipmentAssetMapping: [EquipmentAssetMappingRef]
  physicalAsset: PhysicalAssetRef
  equipmentSpecifications: [EquipmentSpecificationRef]
  equipmentRequirements: [EquipmentRequirementRef]
  equipmentActual: [EquipmentActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
  materialSubLots: [MaterialSubLotRef]
  materialLots: [MaterialLotRef]
  uiSortIndex: Int
  events: [EventRef]
}

input AddEquipmentNameAliasInput
  @join__type(graph: BASS)
{
  equipment: EquipmentRef!
  alias: String!
  system: String!
}

type AddEquipmentNameAliasPayload
  @join__type(graph: BASS)
{
  equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
  numUids: Int
}

type AddEquipmentPayload
  @join__type(graph: BASS)
{
  equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
  numUids: Int
}

input AddEquipmentPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  bindingType: PropertyBindingType
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  equipmentVersion: EquipmentVersionRef!
  children: [EquipmentPropertyRef]
  parent: EquipmentPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
  equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
  equipmentActualProperties: [EquipmentActualPropertyRef]
}

input AddEquipmentPropertyOverrideInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  equipmentVersions: EquipmentVersionRef!
  propertyLabel: String!
  address: String
  expression: String
  value: String
  storeHistory: Boolean
  ignore: Boolean
}

type AddEquipmentPropertyOverridePayload
  @join__type(graph: BASS)
{
  equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
  numUids: Int
}

type AddEquipmentPropertyPayload
  @join__type(graph: BASS)
{
  equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
  numUids: Int
}

input AddEquipmentRequirementInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentLevel: EquipmentElementLevel
  segmentRequirement: SegmentRequirementRef
  children: [EquipmentRequirementRef]
  parent: EquipmentRequirementRef
  properties: [EquipmentRequirementPropertyRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddEquipmentRequirementPayload
  @join__type(graph: BASS)
{
  equipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
  numUids: Int
}

input AddEquipmentRequirementPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentRequirement: EquipmentRequirementRef!
  children: [EquipmentRequirementPropertyRef]
  parent: EquipmentRequirementPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
}

type AddEquipmentRequirementPropertyPayload
  @join__type(graph: BASS)
{
  equipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
  numUids: Int
}

input AddEquipmentSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [EquipmentSpecificationRef]
  parent: EquipmentSpecificationRef
  properties: [EquipmentSpecificationPropertyRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type AddEquipmentSpecificationPayload
  @join__type(graph: BASS)
{
  equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  numUids: Int
}

input AddEquipmentSpecificationPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [EquipmentSpecificationPropertyRef]
  parent: EquipmentSpecificationPropertyRef
  equipmentSpecification: EquipmentSpecificationRef!
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
}

type AddEquipmentSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  equipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
  numUids: Int
}

input AddEquipmentVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  equipment: EquipmentRef!
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  isActiveVersionOf: EquipmentRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentLevel: EquipmentElementLevel
  displayName: String
  timeZoneName: String
  equipmentClasses: [EquipmentClassRef]
  equipmentClassVersions: [EquipmentClassVersionRef]
  properties: [EquipmentPropertyRef]
  equipmentActual: [EquipmentActualRef]
  propertyOverrides: [EquipmentPropertyOverrideRef]
  propertyNameAliases: [PropertyNameAliasRef]
  workCalendar: WorkCalendarRef
  dataSources: [EquipmentDataSourceRef]
  stateModels: [StateModelDefinitionRef]
}

type AddEquipmentVersionPayload
  @join__type(graph: BASS)
{
  equipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
  numUids: Int
}

input AddEvaluatedPropertyInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testSpecification: TestSpecificationRef!
  criteria: [TestSpecificationCriteriaRef]
  personnelClassProperty: [PersonnelClassPropertyRef]
  personProperty: [PersonPropertyRef]
  equipmentClassProperty: [EquipmentClassPropertyRef]
  equipmentProperty: [EquipmentPropertyRef]
  physicalAssetClassProperty: [PhysicalAssetClassPropertyRef]
  physicalAssetProperty: [PhysicalAssetPropertyRef]
  materialClassProperty: [MaterialClassPropertyRef]
  materialDefinitionProperty: [MaterialDefinitionPropertyRef]
  materialLotProperty: [MaterialLotPropertyRef]
}

type AddEvaluatedPropertyPayload
  @join__type(graph: BASS)
{
  evaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
  numUids: Int
}

input AddEventAssociationInput
  @join__type(graph: BASS)
{
  id: String!
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  description: String
  from: EventRef!
  to: EventRef!
}

type AddEventAssociationPayload
  @join__type(graph: BASS)
{
  eventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
  numUids: Int
}

input AddEventInput
  @join__type(graph: BASS)
{
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  value: String
  previousValue: String
  messageText: String
  personID: String
  computerID: String
  proceduralElementReference: String
  category: String
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  attribute: String
  eventProperties: [EventPropertyRef]
  eventType: EventTypeRef
  equipment: EquipmentRef
  person: PersonRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  physicalAsset: PhysicalAssetRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  alarmEvents: [AlarmEventRef]
  eventAssociationsFrom: [EventAssociationRef]
  eventAssociationsTo: [EventAssociationRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddEventPayload
  @join__type(graph: BASS)
{
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input AddEventPropertyInput
  @join__type(graph: BASS)
{
  id: String!
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  description: String
  label: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  parent: EventPropertyRef
  children: [EventPropertyRef]
  event: EventRef
}

type AddEventPropertyPayload
  @join__type(graph: BASS)
{
  eventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
  numUids: Int
}

input AddEventSubtypeInput
  @join__type(graph: BASS)
{
  id: String!
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  label: String!
  eventTypes: [EventTypeRef!]
  parent: EventSubtypeRef
  children: [EventSubtypeRef]
}

type AddEventSubtypePayload
  @join__type(graph: BASS)
{
  eventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
  numUids: Int
}

input AddEventTypeInput
  @join__type(graph: BASS)
{
  id: String!
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  label: String!
  events: [EventRef]
  parent: EventTypeRef
  children: [EventTypeRef]
  eventSubtypes: [EventSubtypeRef]
}

type AddEventTypePayload
  @join__type(graph: BASS)
{
  eventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
  numUids: Int
}

input AddFormInput
  @join__type(graph: BASS)
{
  id: String!
  name: String
  workflowSpecificationNodes: [WorkflowSpecificationNodeRef]
  jsonSchema: String
  uiSchema: String
}

type AddFormPayload
  @join__type(graph: BASS)
{
  form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
  numUids: Int
}

input AddHierarchyScopeInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  equipmentLevel: EquipmentElementLevel
  children: [HierarchyScopeRef]
  parent: HierarchyScopeRef
  equipmentVersions: [EquipmentVersionRef]
  materialClassVersions: [MaterialClassVersionRef]
  materialDefinitionVersions: [MaterialDefinitionVersionRef]
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
}

type AddHierarchyScopePayload
  @join__type(graph: BASS)
{
  hierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
  numUids: Int
}

input AddInformationObjectInput
  @join__type(graph: BASS)
{
  operationsEventRecordEntry: OperationsEventRecordEntryRef
  comment: CommentRef
  event: EventRef
  operationalLocation: OperationalLocationRef
  operationalLocationVersion: OperationalLocationVersionRef
  operationalLocationClass: OperationalLocationClassRef
  operationalLocationClassVersion: OperationalLocationClassVersionRef
  personnelClass: PersonnelClassRef
  personnelClassVersion: PersonnelClassVersionRef
  person: PersonRef
  personVersion: PersonVersionRef
  equipmentClass: EquipmentClassRef
  equipmentClassVersion: EquipmentClassVersionRef
  equipment: EquipmentRef
  equipmentVersion: EquipmentVersionRef
  physicalAssetClass: PhysicalAssetClassRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  physicalAsset: PhysicalAssetRef
  physicalAssetVersion: PhysicalAssetVersionRef
  materialClass: MaterialClassRef
  materialClassVersion: MaterialClassVersionRef
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  processSegment: ProcessSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  testSpecification: TestSpecificationRef
  testResult: TestResultRef
  propertyMeasurement: PropertyMeasurementRef
  operationsEventClass: OperationsEventClassRef
  operationsEventClassVersion: OperationsEventClassVersionRef
  operationsEventDefinition: OperationsEventDefinitionRef
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
  operationsEvent: OperationsEventRef
  operationsDefinition: OperationsDefinitionRef
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  operationsSegment: OperationsSegmentRef
  operationsSchedule: OperationsScheduleRef
  operationsRequest: OperationsRequestRef
  operationsPerformance: OperationsPerformanceRef
  operationsResponse: OperationsResponseRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNodeType: WorkflowSpecificationNodeTypeRef
  workflowSpecificationConnectionType: WorkflowSpecificationConnectionTypeRef
  workSchedule: WorkScheduleRef
  workRequest: WorkRequestRef
  jobList: JobListRef
  jobOrder: JobOrderRef
  workPerformance: WorkPerformanceRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseList: JobResponseListRef
  workCalendar: WorkCalendarRef
  Other: String
}

type AddInformationObjectPayload
  @join__type(graph: BASS)
{
  informationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  numUids: Int
}

input AddJobListInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  workType: WorkType!
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  jobOrders: [JobOrderRef!]!
}

type AddJobListPayload
  @join__type(graph: BASS)
{
  jobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
  numUids: Int
}

input AddJobOrderInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  publishedDate: DateTime
  workType: WorkType
  scheduledStartDateTime: DateTime
  scheduledEndDateTime: DateTime
  priority: Int
  hierarchyScope: HierarchyScopeRef
  command: String
  dispatchStatus: DispatchStatus
  commandRule: String
  label: String
  workRequest: WorkRequestRef
  jobList: JobListRef
  workMaster: WorkMasterRef
  jobResponses: [JobResponseRef]
  segmentRequirement: SegmentRequirementRef
  parameters: [JobOrderParameterRef]
  personnelRequirements: [PersonnelRequirementRef]
  equipmentRequirements: [EquipmentRequirementRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  materialRequirements: [MaterialRequirementRef]
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNode: WorkflowSpecificationNodeRef
  workDirective: WorkDirectiveRef
  previous: [JobOrderRef]
  next: [JobOrderRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input AddJobOrderParameterInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  label: String
  jobOrder: JobOrderRef!
  children: [JobOrderParameterRef]
  parent: JobOrderParameterRef
  parameterSpecification: ParameterSpecificationRef
  processSegmentParameter: ProcessSegmentParameterRef
}

type AddJobOrderParameterPayload
  @join__type(graph: BASS)
{
  jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
  numUids: Int
}

type AddJobOrderPayload
  @join__type(graph: BASS)
{
  jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  numUids: Int
}

input AddJobResponseDataInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  label: String
  jobResponse: JobResponseRef!
  children: [JobResponseDataRef]
  parent: JobResponseDataRef
  events: [EventRef]
  comments: [CommentRef]
  signatures: [SignatureRef]
}

type AddJobResponseDataPayload
  @join__type(graph: BASS)
{
  jobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
  numUids: Int
}

input AddJobResponseInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  publishedDate: DateTime
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  jobState: JobState
  dataJSON: String
  productionDate: String
  workResponse: WorkResponseRef!
  segmentResponse: SegmentResponseRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNode: WorkflowSpecificationNodeRef
  jobOrder: JobOrderRef
  jobResponseList: JobResponseListRef
  personnelActual: [PersonnelActualRef]
  equipmentActual: [EquipmentActualRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  materialActual: [MaterialActualRef]
  data: [JobResponseDataRef]
  children: [JobResponseRef]
  parent: JobResponseRef
  events: [EventRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input AddJobResponseListInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  version: String!
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  jobResponses: [JobResponseRef!]!
}

type AddJobResponseListPayload
  @join__type(graph: BASS)
{
  jobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
  numUids: Int
}

type AddJobResponsePayload
  @join__type(graph: BASS)
{
  jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  numUids: Int
}

input AddLibreServiceInput
  @join__type(graph: BASS)
{
  name: String!
  heartbeat: DateTime
}

type AddLibreServicePayload
  @join__type(graph: BASS)
{
  libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
  numUids: Int
}

input AddMaterialActualInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentResponse: SegmentResponseRef
  children: [MaterialActualRef]
  parent: MaterialActualRef
  properties: [MaterialActualPropertyRef]
  testResults: [TestResultRef]
  materialClass: MaterialClassRef
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  materialLot: [MaterialLotRef]
  materialSubLot: [MaterialSubLotRef]
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddMaterialActualPayload
  @join__type(graph: BASS)
{
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  numUids: Int
}

input AddMaterialActualPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  materialActual: MaterialActualRef!
  children: [MaterialActualPropertyRef]
  parent: MaterialActualPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

type AddMaterialActualPropertyPayload
  @join__type(graph: BASS)
{
  materialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
  numUids: Int
}

input AddMaterialAlternateInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  effectiveDateTime: DateTime!
  priorityOrder: Int!
  materialDefinitionVersion: MaterialDefinitionVersionRef!
  alternateMaterial: MaterialDefinitionRef!
}

type AddMaterialAlternatePayload
  @join__type(graph: BASS)
{
  materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
  numUids: Int
}

input AddMaterialClassInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [MaterialClassVersionRef]
  activeVersion: MaterialClassVersionRef
  nextVersion: String
  id: String!
  label: String!
  isIncludedIn: [MaterialClassVersionRef]
  isAssembledFrom: [MaterialClassRef]
  isComponentOf: MaterialClassRef
  materialDefinitionVersions: [MaterialDefinitionVersionRef]
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type AddMaterialClassPayload
  @join__type(graph: BASS)
{
  materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
  numUids: Int
}

input AddMaterialClassPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  propertyType: Isa95PropertyType!
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  materialClassVersion: MaterialClassVersionRef!
  children: [MaterialClassPropertyRef]
  parent: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

type AddMaterialClassPropertyPayload
  @join__type(graph: BASS)
{
  materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
  numUids: Int
}

input AddMaterialClassVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  materialClass: MaterialClassRef!
  isActiveVersionOf: MaterialClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  properties: [MaterialClassPropertyRef]
  includesPropertiesOf: [MaterialClassRef]
  stateModels: [StateModelDefinitionRef]
}

type AddMaterialClassVersionPayload
  @join__type(graph: BASS)
{
  materialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
  numUids: Int
}

input AddMaterialDefinitionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [MaterialDefinitionVersionRef]
  activeVersion: MaterialDefinitionVersionRef
  nextVersion: String
  id: String!
  label: String!
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
  isAlternateFor: [MaterialAlternateRef]
  materialLots: [MaterialLotRef]
}

type AddMaterialDefinitionPayload
  @join__type(graph: BASS)
{
  materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
  numUids: Int
}

input AddMaterialDefinitionPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  materialDefinitionVersion: MaterialDefinitionVersionRef!
  children: [MaterialDefinitionPropertyRef]
  parent: MaterialDefinitionPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialLotProperty: MaterialLotPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

type AddMaterialDefinitionPropertyPayload
  @join__type(graph: BASS)
{
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
  numUids: Int
}

input AddMaterialDefinitionVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String!
  versionStatus: VersionState!
  materialDefinition: MaterialDefinitionRef!
  isActiveVersionOf: MaterialDefinitionRef
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  baseUnitOfMeasure: UnitOfMeasureRef
  materialClasses: [MaterialClassRef]
  properties: [MaterialDefinitionPropertyRef]
  materialActual: [MaterialActualRef]
  alternates: [MaterialAlternateRef]
  isAssembledFrom: [MaterialDefinitionVersionRef]
  isComponentOf: MaterialDefinitionVersionRef
  uomConversions: [UnitOfMeasureConversionRef]
  materialLots: [MaterialLotRef]
  stateModels: [StateModelDefinitionRef]
}

type AddMaterialDefinitionVersionPayload
  @join__type(graph: BASS)
{
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
  numUids: Int
}

input AddMaterialLotInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocationOperationalLocation: OperationalLocationRef
  storageLocationEquipment: EquipmentRef
  storageLocationPhysicalAsset: PhysicalAssetRef
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure: UnitOfMeasureRef
  isAssembledFromMaterialLot: [MaterialLotRef]
  isComponentOfMaterialLot: MaterialLotRef
  properties: [MaterialLotPropertyRef]
  materialDefinition: MaterialDefinitionRef!
  materialDefinitionVersion: MaterialDefinitionVersionRef!
  childSubLot: [MaterialSubLotRef]
  isAssembledFromMaterialSubLot: [MaterialSubLotRef]
  isComponentOfMaterialSubLot: MaterialSubLotRef
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  events: [EventRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
}

type AddMaterialLotPayload
  @join__type(graph: BASS)
{
  materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  numUids: Int
}

input AddMaterialLotPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  children: [MaterialLotPropertyRef]
  parent: MaterialLotPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

type AddMaterialLotPropertyPayload
  @join__type(graph: BASS)
{
  materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
  numUids: Int
}

input AddMaterialRequirementInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse!
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentRequirement: SegmentRequirementRef
  children: [MaterialRequirementRef]
  parent: MaterialRequirementRef
  properties: [MaterialRequirementPropertyRef]
  materialClass: MaterialClassRef
  material: MaterialDefinitionRef
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddMaterialRequirementPayload
  @join__type(graph: BASS)
{
  materialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  numUids: Int
}

input AddMaterialRequirementPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  materialRequirement: MaterialRequirementRef!
  children: [MaterialRequirementPropertyRef]
  parent: MaterialRequirementPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

type AddMaterialRequirementPropertyPayload
  @join__type(graph: BASS)
{
  materialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
  numUids: Int
}

input AddMaterialSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse!
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [MaterialSpecificationRef]
  parent: MaterialSpecificationRef
  properties: [MaterialSpecificationPropertyRef]
  materialsBill: OperationsMaterialBillRef
  materialClass: MaterialClassRef
  material: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type AddMaterialSpecificationPayload
  @join__type(graph: BASS)
{
  materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  numUids: Int
}

input AddMaterialSpecificationPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [MaterialSpecificationPropertyRef]
  parent: MaterialSpecificationPropertyRef
  materialSpecification: MaterialSpecificationRef!
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

type AddMaterialSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  materialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
  numUids: Int
}

input AddMaterialSubLotInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocationOperationalLocation: OperationalLocationRef
  storageLocationEquipment: EquipmentRef
  storageLocationPhysicalAsset: PhysicalAssetRef
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure: UnitOfMeasureRef
  children: [MaterialSubLotRef]
  parent: MaterialSubLotRef
  properties: [MaterialLotPropertyRef]
  isAssembledFromMaterialSubLot: [MaterialSubLotRef]
  isComponentOfMaterialSubLot: MaterialSubLotRef
  isComponentOfMaterialLot: MaterialLotRef
  isAssembledFromMaterialLot: [MaterialLotRef]
  parentMaterialLot: MaterialLotRef
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type AddMaterialSubLotPayload
  @join__type(graph: BASS)
{
  materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  numUids: Int
}

input AddMenuInput
  @join__type(graph: BASS)
{
  label: String!
  acl: [AccessPermissionRef]
  parent: MenuRef
  children: [MenuRef!]
  menuPage: String
  icon: String
  isSection: Boolean!
  isPage: Boolean!
  orderNumber: Int
}

type AddMenuPayload
  @join__type(graph: BASS)
{
  menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
  numUids: Int
}

input AddMultiplicityInput
  @join__type(graph: BASS)
{
  Min: Int
  Max: Int
}

type AddMultiplicityPayload
  @join__type(graph: BASS)
{
  multiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity]
  numUids: Int
}

input AddOperationalLocationClassInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationalLocationClassVersionRef]
  activeVersion: OperationalLocationClassVersionRef
  nextVersion: String
  id: String!
  label: String!
  includedIn: [OperationalLocationClassVersionRef]
  isPartOf: [OperationalLocationClassRef]
  isMadeUpOf: OperationalLocationClassRef
  operationalLocationVersions: [OperationalLocationVersionRef]
}

type AddOperationalLocationClassPayload
  @join__type(graph: BASS)
{
  operationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
  numUids: Int
}

input AddOperationalLocationClassPropertyInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  propertyType: Isa95PropertyType!
  isPartOf: [OperationalLocationClassPropertyRef]
  isMadeUpOf: OperationalLocationClassPropertyRef
  operationalLocationClassVersion: OperationalLocationClassVersionRef!
  mapsTo: [OperationalLocationPropertyRef]
}

type AddOperationalLocationClassPropertyPayload
  @join__type(graph: BASS)
{
  operationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
  numUids: Int
}

input AddOperationalLocationClassVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  isActiveVersionOf: OperationalLocationClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  name: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocationClass: OperationalLocationClassRef!
  includesPropertiesOf: [OperationalLocationClassRef]
  isPartOf: [OperationalLocationClassVersionRef]
  isMadeUpOf: OperationalLocationClassVersionRef
  properties: [OperationalLocationClassPropertyRef]
}

type AddOperationalLocationClassVersionPayload
  @join__type(graph: BASS)
{
  operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
  numUids: Int
}

input AddOperationalLocationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String!
  label: String!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationalLocationVersionRef]
  activeVersion: OperationalLocationVersionRef
  nextVersion: String
  isPartOf: [OperationalLocationRef]
  isMadeUpOf: OperationalLocationRef
}

type AddOperationalLocationPayload
  @join__type(graph: BASS)
{
  operationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
  numUids: Int
}

input AddOperationalLocationPropertyInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  isPartOf: [OperationalLocationPropertyRef]
  isMadeUpOf: OperationalLocationPropertyRef
  operationalLocationVersion: OperationalLocationVersionRef!
  mapsTo: OperationalLocationClassPropertyRef
}

type AddOperationalLocationPropertyPayload
  @join__type(graph: BASS)
{
  operationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
  numUids: Int
}

input AddOperationalLocationVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  isActiveVersionOf: OperationalLocationRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  name: String
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef!
  spatialDefinition: SpatialDefinitionRef
  operationalLocationClasses: [OperationalLocationClassRef]
  properties: [OperationalLocationPropertyRef]
  isPartOf: [OperationalLocationVersionRef]
  isMadeUpOf: OperationalLocationVersionRef
}

type AddOperationalLocationVersionPayload
  @join__type(graph: BASS)
{
  operationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion]
  numUids: Int
}

input AddOperationsDefinitionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsDefinitionVersionRef]
  activeVersion: OperationsDefinitionVersionRef
  nextVersion: String
  id: String!
  label: String!
  parent: OperationsDefinitionRef
  children: [OperationsDefinitionRef]
  workMasters: [WorkMasterRef]
  operationsRequests: [OperationsRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef]
}

type AddOperationsDefinitionPayload
  @join__type(graph: BASS)
{
  operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
  numUids: Int
}

input AddOperationsDefinitionVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String!
  versionStatus: VersionState!
  operationsDefinition: OperationsDefinitionRef!
  isActiveVersionOf: OperationsDefinitionRef
  id: String!
  billOfMaterial: String
  billOfResources: String
  description: String
  operationsType: WorkType!
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  segments: [OperationsSegmentRef]
  materialsBill: [OperationsMaterialBillRef]
}

type AddOperationsDefinitionVersionPayload
  @join__type(graph: BASS)
{
  operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
  numUids: Int
}

input AddOperationsEventClassInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsEventClassVersionRef]
  activeVersion: OperationsEventClassVersionRef
  nextVersion: String
  id: String!
  label: String!
  isAssembledFrom: [OperationsEventClassRef]
  isComponentOf: OperationsEventClassRef
  includesPropertiesOf: [OperationsEventClassRef]
  isIncludedIn: OperationsEventClassRef
  operationsEventDefinitionVersions: [OperationsEventDefinitionVersionRef]
}

type AddOperationsEventClassPayload
  @join__type(graph: BASS)
{
  operationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
  numUids: Int
}

input AddOperationsEventClassPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  operationsEventClassVersion: OperationsEventClassVersionRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  parent: OperationsEventClassPropertyRef
  children: [OperationsEventClassPropertyRef]
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
}

type AddOperationsEventClassPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
  numUids: Int
}

input AddOperationsEventClassRecordSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  operationsEventClassVersion: OperationsEventClassVersionRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity: MultiplicityRef
  action: [Action]
  actionMultiplicity: MultiplicityRef
}

type AddOperationsEventClassRecordSpecificationPayload
  @join__type(graph: BASS)
{
  operationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
  numUids: Int
}

input AddOperationsEventClassVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String!
  version: String!
  operationsEventClass: OperationsEventClassRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState!
  isActiveVersionOf: OperationsEventClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  properties: [OperationsEventClassPropertyRef]
  recordSpecifications: [OperationsEventClassRecordSpecificationRef]
  description: String
}

type AddOperationsEventClassVersionPayload
  @join__type(graph: BASS)
{
  operationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
  numUids: Int
}

input AddOperationsEventDefinitionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsEventDefinitionVersionRef]
  activeVersion: OperationsEventDefinitionVersionRef
  nextVersion: String
  id: String!
  label: String!
  hierarchyScope: HierarchyScopeRef
  isAssembledFrom: [OperationsEventDefinitionRef]
  isComponentOf: OperationsEventDefinitionRef
  includesPropertiesOf: [OperationsEventDefinitionRef]
  isIncludedIn: OperationsEventDefinitionRef
  operationsEvents: [OperationsEventRef]
}

type AddOperationsEventDefinitionPayload
  @join__type(graph: BASS)
{
  operationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
  numUids: Int
}

input AddOperationsEventDefinitionPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  operationsEventClassProperty: OperationsEventClassPropertyRef
  parent: OperationsEventDefinitionPropertyRef
  children: [OperationsEventDefinitionPropertyRef]
}

type AddOperationsEventDefinitionPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
  numUids: Int
}

input AddOperationsEventDefinitionRecordSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity: MultiplicityRef
  action: [Action]
  actionMultiplicity: MultiplicityRef
  operationsEventRecords: [OperationsEventRecordRef]
}

type AddOperationsEventDefinitionRecordSpecificationPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
  numUids: Int
}

input AddOperationsEventDefinitionVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  operationsEventDefinition: OperationsEventDefinitionRef!
  id: String!
  version: String!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState!
  isActiveVersionOf: OperationsEventDefinitionRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  operationsEventClasses: [OperationsEventClassRef]
  hierarchyScope: HierarchyScopeRef
  priority: [String]
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties: [OperationsEventDefinitionPropertyRef]
  recordSpecifications: [OperationsEventDefinitionRecordSpecificationRef]
}

type AddOperationsEventDefinitionVersionPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
  numUids: Int
}

input AddOperationsEventInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String!
  operationsEventDefinition: OperationsEventDefinitionRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime!
  hierarchyScope: HierarchyScopeRef
  priority: String
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties: [OperationsEventPropertyRef]
  records: [OperationsEventRecordRef]
  parent: OperationsEventRef
  children: [OperationsEventRef]
}

type AddOperationsEventPayload
  @join__type(graph: BASS)
{
  operationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
  numUids: Int
}

input AddOperationsEventPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  operationsEvent: OperationsEventRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  operationsEventDefinitionProperty: OperationsEventDefinitionPropertyRef
  parent: OperationsEventPropertyRef
  children: [OperationsEventPropertyRef]
}

type AddOperationsEventPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
  numUids: Int
}

input AddOperationsEventRecordEntryInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  recordId: String!
  operationsEventRecord: OperationsEventRecordRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime!
  hierarchyScope: HierarchyScopeRef
  data: String
  informationObject: InformationObjectRef
  parent: OperationsEventRecordEntryRef
  children: [OperationsEventRecordEntryRef]
}

type AddOperationsEventRecordEntryPayload
  @join__type(graph: BASS)
{
  operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
  numUids: Int
}

input AddOperationsEventRecordInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  operationsEvent: OperationsEventRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  action: Action
  recordTimestamp: DateTime
  hierarchyScope: HierarchyScopeRef
  operationsEventDefinitionRecordSpecification: OperationsEventDefinitionRecordSpecificationRef
  recordEntries: [OperationsEventRecordEntryRef]
  parent: OperationsEventRecordRef
  children: [OperationsEventRecordRef]
}

type AddOperationsEventRecordPayload
  @join__type(graph: BASS)
{
  operationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
  numUids: Int
}

input AddOperationsMaterialBillInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  useType: MaterialUse
  billOfMaterial: String
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  operationsSegments: [OperationsSegmentRef]
  materialBillItems: [MaterialSpecificationRef]
}

type AddOperationsMaterialBillPayload
  @join__type(graph: BASS)
{
  operationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
  numUids: Int
}

input AddOperationsPerformanceInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  operationsType: WorkType!
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  performanceState: JobState
  publishedDate: DateTime
  operationsResponses: [OperationsResponseRef!]!
  operationsSchedule: OperationsScheduleRef
}

type AddOperationsPerformancePayload
  @join__type(graph: BASS)
{
  operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
  numUids: Int
}

input AddOperationsRequestInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  operationsType: WorkType!
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  priority: String
  hierarchyScope: HierarchyScopeRef
  requestState: ScheduleState!
  notes: String
  operationsSchedule: OperationsScheduleRef!
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  segmentRequirements: [SegmentRequirementRef!]!
  workRequests: [WorkRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
}

type AddOperationsRequestPayload
  @join__type(graph: BASS)
{
  operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  numUids: Int
}

input AddOperationsResponseInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  operationsType: WorkType!
  startDateTime: DateTime!
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  responseState: JobState
  operationsPerformance: OperationsPerformanceRef!
  operationsRequest: OperationsRequestRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef!]!
  isActive: Boolean
  properties: [OperationsResponsePropertyRef]
}

type AddOperationsResponsePayload
  @join__type(graph: BASS)
{
  operationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
  numUids: Int
}

input AddOperationsResponsePropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  operationsResponse: OperationsResponseRef!
  children: [OperationsResponsePropertyRef]
  parent: OperationsResponsePropertyRef
}

type AddOperationsResponsePropertyPayload
  @join__type(graph: BASS)
{
  operationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
  numUids: Int
}

input AddOperationsScheduleInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  operationsType: WorkType!
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  scheduleState: ScheduleState
  operationsRequests: [OperationsRequestRef!]!
  operationsPerformance: [OperationsPerformanceRef]
}

type AddOperationsSchedulePayload
  @join__type(graph: BASS)
{
  operationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
  numUids: Int
}

input AddOperationsSegmentDependencyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  from: OperationsSegmentRef!
  to: OperationsSegmentRef!
  rules: [RuleRef]
}

type AddOperationsSegmentDependencyPayload
  @join__type(graph: BASS)
{
  operationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
  numUids: Int
}

input AddOperationsSegmentInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  duration: Float
  durationUoM: UnitOfMeasureRef
  operationsType: WorkType
  definitionType: DefinitionType
  billOfMaterial: String
  billOfResources: String
  positionX: Int
  positionY: Int
  operationsDefinitionVersion: OperationsDefinitionVersionRef!
  parent: OperationsSegmentRef
  children: [OperationsSegmentRef]
  processSegment: ProcessSegmentRef
  workMasters: [WorkMasterRef]
  makesUp: OperationsSegmentRef
  isMadeUpOf: [OperationsSegmentRef]
  inflows: [OperationsSegmentDependencyRef]
  outflows: [OperationsSegmentDependencyRef]
  materialsBill: [OperationsMaterialBillRef]
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  rules: [RuleRef]
  segmentRequirements: [SegmentRequirementRef]
  operationsRequests: [OperationsRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
}

type AddOperationsSegmentPayload
  @join__type(graph: BASS)
{
  operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  numUids: Int
}

input AddParameterSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  operationsSegment: OperationsSegmentRef
  children: [ParameterSpecificationRef]
  parent: ParameterSpecificationRef
  segmentParameters: [SegmentParameterRef]
  jobOrderParameter: [JobOrderParameterRef]
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type AddParameterSpecificationPayload
  @join__type(graph: BASS)
{
  parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
  numUids: Int
}

input AddPayloadFieldDefinitionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  name: String!
  expression: String!
}

type AddPayloadFieldDefinitionPayload
  @join__type(graph: BASS)
{
  payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
  numUids: Int
}

input AddPersonInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PersonVersionRef]
  activeVersion: PersonVersionRef
  nextVersion: String
  id: String!
  label: String!
  personnelSpecifications: [PersonnelSpecificationRef]
  personnelRequirements: [PersonnelRequirementRef]
  personnelActual: [PersonnelActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
}

input AddPersonnelActualInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  personnelUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [PersonnelActualRef]
  parent: PersonnelActualRef
  properties: [PersonnelActualPropertyRef]
  testResults: [TestResultRef]
  personnelClass: [PersonnelClassRef]
  person: [PersonRef]
  personVersion: [PersonVersionRef]
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddPersonnelActualPayload
  @join__type(graph: BASS)
{
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
  numUids: Int
}

input AddPersonnelActualPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  personnelActual: PersonnelActualRef!
  children: [PersonnelActualPropertyRef]
  parent: PersonnelActualPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

type AddPersonnelActualPropertyPayload
  @join__type(graph: BASS)
{
  personnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
  numUids: Int
}

input AddPersonnelClassInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PersonnelClassVersionRef]
  activeVersion: PersonnelClassVersionRef
  nextVersion: String
  id: String!
  label: String!
  isIncludedIn: [PersonnelClassVersionRef]
  personVersions: [PersonVersionRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  personnelRequirements: [PersonnelRequirementRef]
  personnelActual: [PersonnelActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type AddPersonnelClassPayload
  @join__type(graph: BASS)
{
  personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  numUids: Int
}

input AddPersonnelClassPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  propertyType: Isa95PropertyType!
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  personnelClassVersion: PersonnelClassVersionRef!
  children: [PersonnelClassPropertyRef]
  parent: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  personnelRequirementProperties: [PersonnelRequirementPropertyRef]
  personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
  personnelActualProperties: [PersonnelActualPropertyRef]
}

type AddPersonnelClassPropertyPayload
  @join__type(graph: BASS)
{
  personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
  numUids: Int
}

input AddPersonnelClassVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  personnelClass: PersonnelClassRef!
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  isActiveVersionOf: PersonnelClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  properties: [PersonnelClassPropertyRef]
  includesPropertiesOf: [PersonnelClassRef]
  stateModels: [StateModelDefinitionRef]
}

type AddPersonnelClassVersionPayload
  @join__type(graph: BASS)
{
  personnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
  numUids: Int
}

input AddPersonnelRequirementInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  segmentRequirement: SegmentRequirementRef
  children: [PersonnelRequirementRef]
  parent: PersonnelRequirementRef
  properties: [PersonnelRequirementPropertyRef]
  personnelClass: PersonnelClassRef
  person: PersonRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddPersonnelRequirementPayload
  @join__type(graph: BASS)
{
  personnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
  numUids: Int
}

input AddPersonnelRequirementPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  personnelRequirement: PersonnelRequirementRef!
  children: [PersonnelRequirementPropertyRef]
  parent: PersonnelRequirementPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
}

type AddPersonnelRequirementPropertyPayload
  @join__type(graph: BASS)
{
  personnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
  numUids: Int
}

input AddPersonnelSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  personnelUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [PersonnelSpecificationRef]
  parent: PersonnelSpecificationRef
  properties: [PersonnelSpecificationPropertyRef]
  personnelClass: PersonnelClassRef
  person: PersonRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: TestResultRef
}

type AddPersonnelSpecificationPayload
  @join__type(graph: BASS)
{
  personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  numUids: Int
}

input AddPersonnelSpecificationPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [PersonnelSpecificationPropertyRef]
  parent: PersonnelSpecificationPropertyRef
  personnelSpecification: PersonnelSpecificationRef!
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
}

type AddPersonnelSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  personnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
  numUids: Int
}

type AddPersonPayload
  @join__type(graph: BASS)
{
  person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  numUids: Int
}

input AddPersonPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  personVersion: PersonVersionRef!
  children: [PersonPropertyRef]
  parent: PersonPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
  personnelRequirementProperties: [PersonnelRequirementPropertyRef]
  personnelActualProperties: [PersonnelActualPropertyRef]
}

type AddPersonPropertyPayload
  @join__type(graph: BASS)
{
  personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
  numUids: Int
}

input AddPersonVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  person: PersonRef!
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  isActiveVersionOf: PersonRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  name: String!
  personnelClasses: [PersonnelClassRef]
  properties: [PersonPropertyRef]
  personnelActual: [PersonnelActualRef]
  stateModels: [StateModelDefinitionRef]
  signaturesMade: [SignatureRef]
  comments: [CommentRef]
}

type AddPersonVersionPayload
  @join__type(graph: BASS)
{
  personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
  numUids: Int
}

input AddPhysicalAssetActualInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  physicalLocation: OperationalLocationRef
  physicalAssetUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [PhysicalAssetActualRef]
  parent: PhysicalAssetActualRef
  properties: [PhysicalAssetActualPropertyRef]
  testResults: [TestResultRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  physicalAssetVersion: PhysicalAssetVersionRef
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddPhysicalAssetActualPayload
  @join__type(graph: BASS)
{
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
  numUids: Int
}

input AddPhysicalAssetActualPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  physicalAssetActual: PhysicalAssetActualRef!
  children: [PhysicalAssetActualPropertyRef]
  parent: PhysicalAssetActualPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

type AddPhysicalAssetActualPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
  numUids: Int
}

input AddPhysicalAssetClassInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PhysicalAssetClassVersionRef]
  activeVersion: PhysicalAssetClassVersionRef
  nextVersion: String
  id: String!
  label: String!
  isIncludedIn: [PhysicalAssetClassVersionRef]
  isMadeUpOf: [PhysicalAssetClassRef]
  isPartOf: [PhysicalAssetClassRef]
  physicalAssetVersions: [PhysicalAssetVersionRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  uiSortIndex: Int
}

type AddPhysicalAssetClassPayload
  @join__type(graph: BASS)
{
  physicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
  numUids: Int
}

input AddPhysicalAssetClassPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  propertyType: Isa95PropertyType!
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef!
  children: [PhysicalAssetClassPropertyRef]
  parent: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

type AddPhysicalAssetClassPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
  numUids: Int
}

input AddPhysicalAssetClassVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  physicalAssetClass: PhysicalAssetClassRef!
  isActiveVersionOf: PhysicalAssetClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  manufacturer: String
  properties: [PhysicalAssetClassPropertyRef]
  includesPropertiesOf: [PhysicalAssetClassRef]
  stateModels: [StateModelDefinitionRef]
}

type AddPhysicalAssetClassVersionPayload
  @join__type(graph: BASS)
{
  physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
  numUids: Int
}

input AddPhysicalAssetDataSourceInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  physicalAssetVersion: PhysicalAssetVersionRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion: DataSourceVersionRef
}

type AddPhysicalAssetDataSourcePayload
  @join__type(graph: BASS)
{
  physicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
  numUids: Int
}

input AddPhysicalAssetInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PhysicalAssetVersionRef]
  activeVersion: PhysicalAssetVersionRef
  nextVersion: String
  id: String!
  label: String!
  isMadeUpOf: [PhysicalAssetRef]
  isPartOf: [PhysicalAssetRef]
  equipmentAssetMapping: [EquipmentAssetMappingRef]
  equipment: EquipmentRef
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
  uiSortIndex: Int
}

type AddPhysicalAssetPayload
  @join__type(graph: BASS)
{
  physicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
  numUids: Int
}

input AddPhysicalAssetPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  physicalAssetVersion: PhysicalAssetVersionRef!
  children: [PhysicalAssetPropertyRef]
  parent: PhysicalAssetPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

type AddPhysicalAssetPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
  numUids: Int
}

input AddPhysicalAssetRequirementInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  physicalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentLevel: EquipmentElementLevel
  segmentRequirement: SegmentRequirementRef
  children: [PhysicalAssetRequirementRef]
  parent: PhysicalAssetRequirementRef
  properties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddPhysicalAssetRequirementPayload
  @join__type(graph: BASS)
{
  physicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
  numUids: Int
}

input AddPhysicalAssetRequirementPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  physicalAssetRequirement: PhysicalAssetRequirementRef!
  children: [PhysicalAssetRequirementPropertyRef]
  parent: PhysicalAssetRequirementPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

type AddPhysicalAssetRequirementPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
  numUids: Int
}

input AddPhysicalAssetSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  physicalLocation: OperationalLocationRef
  physicalAssetUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [PhysicalAssetSpecificationRef]
  parent: PhysicalAssetSpecificationRef
  properties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type AddPhysicalAssetSpecificationPayload
  @join__type(graph: BASS)
{
  physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
  numUids: Int
}

input AddPhysicalAssetSpecificationPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [PhysicalAssetSpecificationPropertyRef]
  parent: PhysicalAssetSpecificationPropertyRef
  physicalAssetSpecification: PhysicalAssetSpecificationRef!
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

type AddPhysicalAssetSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
  numUids: Int
}

input AddPhysicalAssetVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  physicalAsset: PhysicalAssetRef!
  isActiveVersionOf: PhysicalAssetRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  fixedAssetID: String
  vendorID: String
  physicalLocation: OperationalLocationRef
  physicalLocationDescription: String
  physicalAssetClasses: [PhysicalAssetClassRef]
  properties: [PhysicalAssetPropertyRef]
  dataSources: [PhysicalAssetDataSourceRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  stateModels: [StateModelDefinitionRef]
}

type AddPhysicalAssetVersionPayload
  @join__type(graph: BASS)
{
  physicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
  numUids: Int
}

input AddProcessSegmentDependencyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  from: ProcessSegmentRef!
  to: ProcessSegmentRef!
  rules: [RuleRef]
}

type AddProcessSegmentDependencyPayload
  @join__type(graph: BASS)
{
  processSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
  numUids: Int
}

input AddProcessSegmentInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [ProcessSegmentVersionRef]
  activeVersion: ProcessSegmentVersionRef
  nextVersion: String
  id: String!
  label: String!
  isMadeUpOf: [ProcessSegmentRef]
  isPartOf: ProcessSegmentRef
  workMasters: [WorkMasterRef]
  inflows: [ProcessSegmentDependencyRef]
  outflows: [ProcessSegmentDependencyRef]
  operationsSegments: [OperationsSegmentRef]
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef]
}

input AddProcessSegmentParameterInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  processSegmentVersion: ProcessSegmentVersionRef!
  children: [ProcessSegmentParameterRef]
  parent: ProcessSegmentParameterRef
  segmentParameters: [SegmentParameterRef]
  jobOrderParameter: JobOrderParameterRef
}

type AddProcessSegmentParameterPayload
  @join__type(graph: BASS)
{
  processSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
  numUids: Int
}

type AddProcessSegmentPayload
  @join__type(graph: BASS)
{
  processSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
  numUids: Int
}

input AddProcessSegmentVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  processSegment: ProcessSegmentRef!
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String!
  versionStatus: VersionState!
  isActiveVersionOf: ProcessSegmentRef
  id: String!
  description: String
  operationsType: WorkType!
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  duration: Float
  durationUoM: UnitOfMeasureRef
  processSegmentParameters: [ProcessSegmentParameterRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
}

type AddProcessSegmentVersionPayload
  @join__type(graph: BASS)
{
  processSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
  numUids: Int
}

input AddPropertyMeasurementInput
  @join__type(graph: BASS)
{
  id: String!
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  measurementDate: DateTime
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  expiration: DateTime
  testResult: TestResultRef!
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

type AddPropertyMeasurementPayload
  @join__type(graph: BASS)
{
  propertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
  numUids: Int
}

input AddPropertyNameAliasInput
  @join__type(graph: BASS)
{
  propertyLabel: String!
  expression: String
  equipmentVersion: EquipmentVersionRef!
  dataSource: DataSourceRef
  dataSourceTopic: DataSourceTopicRef
  dataSourceTopicLabel: String
}

type AddPropertyNameAliasPayload
  @join__type(graph: BASS)
{
  propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
  numUids: Int
}

input AddPropertyValueAliasInput
  @join__type(graph: BASS)
{
  property: EquipmentClassPropertyRef!
  value: String!
  alias: String!
  system: String!
}

type AddPropertyValueAliasPayload
  @join__type(graph: BASS)
{
  propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
  numUids: Int
}

input AddRuleInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  processLocation: ProcessLocation
  triggerExpression: String!
  delayOption: Boolean
  delayTime: Int
  payloadFields: [PayloadFieldDefinitionRef]
  workflowSpecification: WorkflowSpecificationRef!
  triggerProperties: [EquipmentClassPropertyRef]
  operationsSegment: OperationsSegmentRef
  operationsSegmentDependency: OperationsSegmentDependencyRef
  processSegmentDependency: ProcessSegmentDependencyRef
  equipmentClassVersion: EquipmentClassVersionRef
}

type AddRulePayload
  @join__type(graph: BASS)
{
  rule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
  numUids: Int
}

input AddSecretInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versions: [SecretVersionRef]
  activeVersion: SecretVersionRef
  nextVersion: String
  id: String!
}

type AddSecretPayload
  @join__type(graph: BASS)
{
  secret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
  numUids: Int
}

input AddSecretVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String!
  versionStatus: VersionState!
  secret: SecretRef!
  isActiveVersionOf: SecretRef
  id: String!
  value: String!
}

type AddSecretVersionPayload
  @join__type(graph: BASS)
{
  secretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
  numUids: Int
}

input AddSegmentDataInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [SegmentDataRef]
  parent: SegmentDataRef
}

type AddSegmentDataPayload
  @join__type(graph: BASS)
{
  segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
  numUids: Int
}

input AddSegmentParameterInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  segmentRequirement: SegmentRequirementRef!
  children: [SegmentParameterRef]
  parent: SegmentParameterRef
  parameterSpecification: ParameterSpecificationRef
  processSegmentParameter: ProcessSegmentParameterRef
  comments: [CommentRef]
}

type AddSegmentParameterPayload
  @join__type(graph: BASS)
{
  segmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
  numUids: Int
}

input AddSegmentRequirementInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  operationsType: WorkType!
  earliestStartDate: DateTime
  latestEndDate: DateTime
  duration: Float
  durationUoM: UnitOfMeasureRef
  hierarchyScope: HierarchyScopeRef
  segmentState: ScheduleState!
  notes: String
  operationsRequest: OperationsRequestRef!
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  processSegment: ProcessSegmentRef
  children: [SegmentRequirementRef]
  parent: SegmentRequirementRef
  workRequests: [WorkRequestRef]
  jobOrders: [JobOrderRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
  parameters: [SegmentParameterRef]
  personnelRequirements: [PersonnelRequirementRef]
  equipmentRequirements: [EquipmentRequirementRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  materialRequirements: [MaterialRequirementRef]
}

type AddSegmentRequirementPayload
  @join__type(graph: BASS)
{
  segmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
  numUids: Int
}

input AddSegmentResponseInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  operationsType: WorkType!
  actualStartDateTime: DateTime
  actualEndDateTime: DateTime
  postingDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  segmentState: JobState
  operationsDefinitions: [OperationsDefinitionRef]
  operationsSegments: [OperationsSegmentRef]
  processSegment: ProcessSegmentRef
  operationsRequests: [OperationsRequestRef]
  segmentRequirements: [SegmentRequirementRef]
  workResponses: WorkResponseRef
  jobResponses: JobResponseRef
  children: [SegmentResponseRef]
  parent: SegmentResponseRef
  operationsResponse: OperationsResponseRef!
  segmentData: [SegmentDataRef]
  personnelActual: [PersonnelActualRef]
  equipmentActual: [EquipmentActualRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  materialActual: [MaterialActualRef]
}

type AddSegmentResponsePayload
  @join__type(graph: BASS)
{
  segmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
  numUids: Int
}

input AddSignatureInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  timestamp: DateTime
  changeIndication: String!
  signatureReason: SignatureReasonRef!
  personVersion: PersonVersionRef!
  comment: CommentRef
  signatureForAComment: CommentRef
  event: EventRef
  alarmEvent: AlarmEventRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  materialActual: MaterialActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  personnelActual: PersonnelActualRef
  workRequest: WorkRequestRef
  jobOrder: JobOrderRef
  materialRequirement: MaterialRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  personnelRequirement: PersonnelRequirementRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type AddSignaturePayload
  @join__type(graph: BASS)
{
  signature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  numUids: Int
}

input AddSignatureReasonInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  signatures: [SignatureRef]
}

type AddSignatureReasonPayload
  @join__type(graph: BASS)
{
  signatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
  numUids: Int
}

input AddSpatialDefinitionInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  pointValue: PointRef
  polygonValue: PolygonRef
  multiPolygonValue: MultiPolygonRef
  srid: String
  sridAuthority: String
}

type AddSpatialDefinitionPayload
  @join__type(graph: BASS)
{
  spatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
  numUids: Int
}

input AddStateModelActionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  actionType: StateModelActionType
  workflowSpecification: WorkflowSpecificationRef
  variables: String
  transition: StateModelTransitionRef
  isEntryActionForState: StateModelStateRef
  isExitActionForState: StateModelStateRef
}

type AddStateModelActionPayload
  @join__type(graph: BASS)
{
  stateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
  numUids: Int
}

input AddStateModelDefinitionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  states: [StateModelStateRef]
  transitions: [StateModelTransitionRef]
  events: [StateModelEventRef]
  bpmnXMLEncoded: String!
  equipmentClassVersion: EquipmentClassVersionRef
  equipmentVersion: EquipmentVersionRef
  materialClassVersion: MaterialClassVersionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  personnelClassVersion: PersonnelClassVersionRef
  personVersion: PersonVersionRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  physicalAssetVersion: PhysicalAssetVersionRef
  instances: [StateModelInstanceRef]
  properties: [StateModelPropertyRef]
}

type AddStateModelDefinitionPayload
  @join__type(graph: BASS)
{
  stateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition]
  numUids: Int
}

input AddStateModelEventInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  stateModelDefinition: StateModelDefinitionRef!
  transitions: [StateModelTransitionRef]
}

type AddStateModelEventPayload
  @join__type(graph: BASS)
{
  stateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
  numUids: Int
}

input AddStateModelInstanceInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  stateModelDefinition: StateModelDefinitionRef
  description: String
  hierarchyScope: HierarchyScopeRef
  state: String
  transitions: [StateTransitionInstanceRef]
  equipment: EquipmentRef
  materialDefinition: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  person: PersonRef
  physicalAsset: PhysicalAssetRef
}

type AddStateModelInstancePayload
  @join__type(graph: BASS)
{
  stateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
  numUids: Int
}

input AddStateModelPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  StateModel: StateModelDefinitionRef!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [StateModelPropertyRef]
  parent: StateModelPropertyRef
}

type AddStateModelPropertyPayload
  @join__type(graph: BASS)
{
  stateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
  numUids: Int
}

input AddStateModelStateInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  parent: StateModelStateRef
  children: [StateModelStateRef]
  id: String!
  label: String!
  isInitialState: Boolean
  isFinalState: Boolean
  stateModelDefinition: StateModelDefinitionRef
  inflows: [StateModelTransitionRef]
  outflows: [StateModelTransitionRef]
  onEntry: [StateModelActionRef]
  onExit: [StateModelActionRef]
}

type AddStateModelStatePayload
  @join__type(graph: BASS)
{
  stateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
  numUids: Int
}

input AddStateModelTransitionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  stateModelDefinition: StateModelDefinitionRef!
  stateModelEvents: [StateModelEventRef]
  from: StateModelStateRef!
  to: StateModelStateRef!
  condition: String
  stateModelActions: [StateModelActionRef]
}

type AddStateModelTransitionPayload
  @join__type(graph: BASS)
{
  stateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
  numUids: Int
}

input AddStateTransitionInstanceInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  stateModelInstance: StateModelInstanceRef!
  timestamp: DateTime
  fromState: String
  toState: String!
}

type AddStateTransitionInstancePayload
  @join__type(graph: BASS)
{
  stateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
  numUids: Int
}

input AddTestResultInput
  @join__type(graph: BASS)
{
  id: String!
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  hierarchyScope: HierarchyScopeRef
  evaluationDate: DateTime
  evaluationCriterionResult: String
  expiration: DateTime
  parent: TestResultRef
  children: [TestResultRef]
  propertyMeasurements: [PropertyMeasurementRef]
  personnelRequirement: PersonnelRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  materialRequirement: MaterialRequirementRef
  personnelSpecification: PersonnelSpecificationRef
  equipmentSpecification: EquipmentSpecificationRef
  materialSpecification: MaterialSpecificationRef
  personnelClass: PersonnelClassRef
  person: PersonRef
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  materialClass: MaterialClassRef
  materialDefinition: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  personnelActual: PersonnelActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  materialActual: MaterialActualRef
}

type AddTestResultPayload
  @join__type(graph: BASS)
{
  testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  numUids: Int
}

input AddTestSpecificationCriteriaInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  sequence: Int
  expression: String
  result: String
  testSpecification: TestSpecificationRef!
  evaluatedProperties: [EvaluatedPropertyRef]
}

type AddTestSpecificationCriteriaPayload
  @join__type(graph: BASS)
{
  testSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
  numUids: Int
}

input AddTestSpecificationInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  version: String!
  recordEntries: [InformationObjectRef]
  key: String!
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  testSampleSize: String
  physicalSample: Boolean
  recurrenceQuantity: String
  recurrenceTimeInterval: String
  parent: TestSpecificationRef
  children: [TestSpecificationRef]
  properties: [TestSpecificationPropertyRef]
  criteria: [TestSpecificationCriteriaRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  requiredByPersonnelRequirement: PersonnelRequirementRef
  requiredByEquipmentRequirement: EquipmentRequirementRef
  requiredByPhysicalAssetRequirement: PhysicalAssetRequirementRef
  requiredByMaterialRequirement: MaterialRequirementRef
  requiredByPersonnelSpecification: PersonnelSpecificationRef
  requiredByEquipmentSpecification: EquipmentSpecificationRef
  requiredByMaterialSpecification: MaterialSpecificationRef
  testsPersonnelRequirements: [PersonnelRequirementRef]
  testsEquipmentRequirements: [EquipmentRequirementRef]
  testsPhysicalAssetRequirements: [PhysicalAssetRequirementRef]
  testsMaterialRequirements: [MaterialRequirementRef]
  testsPersonnelSpecifications: [PersonnelSpecificationRef]
  testsEquipmentSpecifications: [EquipmentSpecificationRef]
  testsMaterialSpecifications: [MaterialSpecificationRef]
  requiredByPersonnelClass: PersonnelClassRef
  requiredByPerson: PersonRef
  requiredByEquipmentClass: EquipmentClassRef
  requiredByEquipment: EquipmentRef
  requiredByPhysicalAssetClass: PhysicalAssetClassRef
  requiredByPhysicalAsset: PhysicalAssetRef
  requiredByMaterialClass: MaterialClassRef
  requiredByMaterialDefinition: MaterialDefinitionRef
  requiredByMaterialLot: MaterialLotRef
  requiredByMaterialSubLot: MaterialSubLotRef
  testsPersonnelClass: [PersonnelClassRef]
  testsPerson: [PersonRef]
  testsEquipmentClass: [EquipmentClassRef]
  testsEquipment: [EquipmentRef]
  testsPhysicalAssetClass: [PhysicalAssetClassRef]
  testsPhysicalAsset: [PhysicalAssetRef]
  testsMaterialClass: [MaterialClassRef]
  testsMaterialDefinition: [MaterialDefinitionRef]
  testsMaterialLot: [MaterialLotRef]
  testsMaterialSubLot: [MaterialSubLotRef]
}

type AddTestSpecificationPayload
  @join__type(graph: BASS)
{
  testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  numUids: Int
}

input AddTestSpecificationPropertyInput
  @join__type(graph: BASS)
{
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  parent: TestSpecificationPropertyRef
  children: [TestSpecificationPropertyRef]
  testSpecification: TestSpecificationRef!
}

type AddTestSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  testSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
  numUids: Int
}

input AddUnitOfMeasureConversionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  fromUnitOfMeasure: UnitOfMeasureRef!
  toUnitOfMeasure: UnitOfMeasureRef!
  numerator: Float!
  denominator: Float!
  materialDefinitionVersion: MaterialDefinitionVersionRef!
}

type AddUnitOfMeasureConversionPayload
  @join__type(graph: BASS)
{
  unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
  numUids: Int
}

input AddUnitOfMeasureInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  dataType: DataType
}

type AddUnitOfMeasurePayload
  @join__type(graph: BASS)
{
  unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
  numUids: Int
}

input AddWorkCalendarDefinitionEntryInput
  @join__type(graph: BASS)
{
  isActive: Boolean
  description: String
  hierarchyScope: EquipmentRef
  freq: Frequency!
  startDateTime: DateTime!
  endDateTime: DateTime
  count: Int
  interval: Int
  wkst: Weekday
  byWeekDay: [Weekday]
  byMonth: [Int]
  bySetPos: [Int]
  byMonthDay: [Int]
  byYearDay: [Int]
  byWeekNo: [Int]
  byHour: [Int]
  byMinute: [Int]
  bySecond: [Int]
  duration: String
  entryType: WorkCalendarEntryType!
  properties: [WorkCalendarDefinitionEntryPropertyRef]
  calendarEntries: [WorkCalendarEntryRef]
  workCalendar: WorkCalendarRef
}

type AddWorkCalendarDefinitionEntryPayload
  @join__type(graph: BASS)
{
  workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
  numUids: Int
}

input AddWorkCalendarDefinitionEntryPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  workCalendarDefinitionEntry: WorkCalendarDefinitionEntryRef!
  children: [WorkCalendarDefinitionEntryPropertyRef]
  parent: WorkCalendarDefinitionEntryPropertyRef
}

type AddWorkCalendarDefinitionEntryPropertyPayload
  @join__type(graph: BASS)
{
  workCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
  numUids: Int
}

input AddWorkCalendarEntryInput
  @join__type(graph: BASS)
{
  isActive: Boolean
  description: String
  definition: WorkCalendarDefinitionEntryRef
  hierarchyScope: EquipmentRef
  startDateTime: DateTime!
  finishDateTime: DateTime!
  entryType: WorkCalendarEntryType!
  properties: [WorkCalendarEntryPropertyRef]
  workCalendar: WorkCalendarRef
}

type AddWorkCalendarEntryPayload
  @join__type(graph: BASS)
{
  workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  numUids: Int
}

input AddWorkCalendarEntryPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float!
  quantityUoM: UnitOfMeasureRef
  workCalendarEntry: WorkCalendarEntryRef!
  children: [WorkCalendarEntryPropertyRef]
  parent: WorkCalendarEntryPropertyRef
}

type AddWorkCalendarEntryPropertyPayload
  @join__type(graph: BASS)
{
  workCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
  numUids: Int
}

input AddWorkCalendarInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  name: String!
  description: String
  definition: [WorkCalendarDefinitionEntryRef]
  entries: [WorkCalendarEntryRef]
  equipmentVersions: [EquipmentVersionRef]
}

type AddWorkCalendarPayload
  @join__type(graph: BASS)
{
  workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
  numUids: Int
}

input AddWorkDirectiveInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  version: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  workType: WorkType
  duration: Float
  durationUnitOfMeasure: UnitOfMeasureRef
  publishedDate: DateTime
  state: WorkDirectiveState
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  propertyMeasurements: [PropertyMeasurementRef]
  workMaster: WorkMasterRef
  children: [WorkDirectiveRef]
  parent: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddWorkDirectivePayload
  @join__type(graph: BASS)
{
  workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  numUids: Int
}

input AddWorkflowErrorInput
  @join__type(graph: BASS)
{
  id: String!
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  code: String
}

type AddWorkflowErrorPayload
  @join__type(graph: BASS)
{
  workflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError]
  numUids: Int
}

input AddWorkflowMessageInput
  @join__type(graph: BASS)
{
  id: String!
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  enabled: Boolean!
}

type AddWorkflowMessagePayload
  @join__type(graph: BASS)
{
  workflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage]
  numUids: Int
}

input AddWorkflowShapeInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  node: WorkflowSpecificationNodeRef!
  x: String!
  y: String!
  width: String!
  height: String!
  icon: String
}

type AddWorkflowShapePayload
  @join__type(graph: BASS)
{
  workflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape]
  numUids: Int
}

input AddWorkflowSpecificationConnectionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  condition: String
  id: String!
  name: String
  waypoints: [WorkflowWaypointRef]
  description: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef!
  connectionType: WorkflowSpecificationConnectionTypeRef!
  properties: [WorkflowSpecificationConnectionPropertyRef]
  to: WorkflowSpecificationNodeRef!
  from: WorkflowSpecificationNodeRef!
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type AddWorkflowSpecificationConnectionPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
  numUids: Int
}

input AddWorkflowSpecificationConnectionPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  connection: WorkflowSpecificationConnectionRef!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationConnectionPropertyRef]
  parent: WorkflowSpecificationConnectionPropertyRef
}

type AddWorkflowSpecificationConnectionPropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
  numUids: Int
}

input AddWorkflowSpecificationConnectionTypeInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  connections: [WorkflowSpecificationConnectionRef]
  properties: [WorkflowSpecificationConnectionTypePropertyRef]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type AddWorkflowSpecificationConnectionTypePayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType]
  numUids: Int
}

input AddWorkflowSpecificationConnectionTypePropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  connectionType: WorkflowSpecificationConnectionTypeRef!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationConnectionTypePropertyRef]
  parent: WorkflowSpecificationConnectionTypePropertyRef
}

type AddWorkflowSpecificationConnectionTypePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
  numUids: Int
}

input AddWorkflowSpecificationInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  versions: [WorkflowSpecificationVersionRef]
  activeVersion: WorkflowSpecificationVersionRef
  nextVersion: String
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  id: String!
  includedIn: [WorkflowSpecificationVersionRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  workMasters: [WorkMasterRef]
  workDirectives: [WorkDirectiveRef]
  stateModelActions: [StateModelActionRef]
  rules: [RuleRef]
  calledByNodes: [WorkflowSpecificationNodeRef]
}

input AddWorkflowSpecificationNodeInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef!
  properties: [WorkflowSpecificationNodePropertyRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  outflows: [WorkflowSpecificationConnectionRef]
  inflows: [WorkflowSpecificationConnectionRef]
  containsWorkflowSpecification: WorkflowSpecificationRef
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  form: FormRef
  inputs: [WorkflowSpecificationNodeVariableRef]
  outputs: [WorkflowSpecificationNodeVariableRef]
  message: WorkflowMessageRef
  error: WorkflowErrorRef
  timer: WorkflowTimerRef
  nodeType: WorkflowSpecificationNodeTypeRef!
  role: String
  shape: WorkflowShapeRef
  uiComponent: String
  testCases: [WorkflowSpecificationNodeTestCaseRef]
  boundaryEvents: [WorkflowSpecificationNodeRef]
  attachedTo: WorkflowSpecificationNodeRef
}

type AddWorkflowSpecificationNodePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
  numUids: Int
}

input AddWorkflowSpecificationNodePropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  node: WorkflowSpecificationNodeRef!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationNodePropertyRef]
  parent: WorkflowSpecificationNodePropertyRef
}

type AddWorkflowSpecificationNodePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
  numUids: Int
}

input AddWorkflowSpecificationNodeTestCaseInput
  @join__type(graph: BASS)
{
  node: WorkflowSpecificationNodeRef!
  id: String!
  inputJson: String!
  expectedResult: String!
}

type AddWorkflowSpecificationNodeTestCasePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
  numUids: Int
}

input AddWorkflowSpecificationNodeTypeInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String!
  name: String
  description: String
  hierarchyScope: HierarchyScopeRef
  properties: [WorkflowSpecificationNodeTypePropertyRef]
  nodes: [WorkflowSpecificationNodeRef]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type AddWorkflowSpecificationNodeTypePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType]
  numUids: Int
}

input AddWorkflowSpecificationNodeTypePropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  nodeType: WorkflowSpecificationNodeTypeRef!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationNodeTypePropertyRef]
  parent: WorkflowSpecificationNodeTypePropertyRef
}

type AddWorkflowSpecificationNodeTypePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
  numUids: Int
}

input AddWorkflowSpecificationNodeVariableInput
  @join__type(graph: BASS)
{
  source: String!
  target: String!
}

type AddWorkflowSpecificationNodeVariablePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
  numUids: Int
}

type AddWorkflowSpecificationPayload
  @join__type(graph: BASS)
{
  workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
  numUids: Int
}

input AddWorkflowSpecificationPropertyInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  workflowSpecificationVersion: WorkflowSpecificationVersionRef!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationPropertyRef]
  parent: WorkflowSpecificationPropertyRef
}

type AddWorkflowSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
  numUids: Int
}

input AddWorkflowSpecificationVersionInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String!
  version: String!
  workflowSpecification: WorkflowSpecificationRef!
  isActiveVersionOf: WorkflowSpecificationRef
  versionStatus: VersionState!
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  bpmnXMLEncoded: String
  schemaDefinition: String
  isExecutable: Boolean
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  includePropertiesOf: [WorkflowSpecificationRef]
  messages: [WorkflowMessageRef]
  timers: [WorkflowTimerRef]
  errors: [WorkflowErrorRef]
  nodes: [WorkflowSpecificationNodeRef]
  connections: [WorkflowSpecificationConnectionRef]
  properties: [WorkflowSpecificationPropertyRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
}

type AddWorkflowSpecificationVersionPayload
  @join__type(graph: BASS)
{
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
  numUids: Int
}

input AddWorkflowTimerInput
  @join__type(graph: BASS)
{
  id: String!
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  enabled: Boolean
}

type AddWorkflowTimerPayload
  @join__type(graph: BASS)
{
  workflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer]
  numUids: Int
}

input AddWorkflowWaypointInput
  @join__type(graph: BASS)
{
  connection: WorkflowSpecificationConnectionRef!
  x: String!
  y: String!
}

type AddWorkflowWaypointPayload
  @join__type(graph: BASS)
{
  workflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
  numUids: Int
}

input AddWorkMasterInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  version: String!
  description: String
  hierarchyScope: HierarchyScopeRef
  workType: WorkType
  duration: Float
  durationUnitOfMeasure: UnitOfMeasureRef
  publishedDate: DateTime
  definitionType: DefinitionType!
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  propertyMeasurements: [PropertyMeasurementRef]
  parent: WorkMasterRef
  children: [WorkMasterRef]
  workDirectives: [WorkDirectiveRef]
  jobOrders: [JobOrderRef]
  defines: WorkMasterRef
  definedBy: [WorkMasterRef]
  processSegment: ProcessSegmentRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  workflowSpecification: WorkflowSpecificationRef
  jobResponses: [JobResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddWorkMasterPayload
  @join__type(graph: BASS)
{
  workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  numUids: Int
}

input AddWorkPerformanceInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  workState: JobState
  workResponses: [WorkResponseRef!]!
  children: [WorkPerformanceRef]
  parent: WorkPerformanceRef
  workSchedule: WorkScheduleRef
}

type AddWorkPerformancePayload
  @join__type(graph: BASS)
{
  workPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
  numUids: Int
}

input AddWorkRequestInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  workType: WorkType!
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  priority: String
  hierarchyScope: HierarchyScopeRef
  requestState: ScheduleState!
  children: [WorkRequestRef]
  parent: WorkRequestRef
  workSchedule: WorkScheduleRef!
  jobOrders: [JobOrderRef!]!
  operationsRequest: OperationsRequestRef
  segmentRequirement: SegmentRequirementRef
  workResponses: [WorkResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddWorkRequestPayload
  @join__type(graph: BASS)
{
  workRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
  numUids: Int
}

input AddWorkResponseInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  responseState: JobState
  workPerformance: WorkPerformanceRef!
  children: [WorkResponseRef]
  parent: WorkResponseRef
  workRequest: WorkRequestRef
  jobResponses: [JobResponseRef!]!
  segmentResponse: SegmentResponseRef
  events: [EventRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type AddWorkResponsePayload
  @join__type(graph: BASS)
{
  workResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
  numUids: Int
}

input AddWorkScheduleInput
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  workType: WorkType
  description: String
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  scheduleState: ScheduleState
  workRequests: [WorkRequestRef]
  children: [WorkScheduleRef]
  parent: WorkScheduleRef
  workPerformances: [WorkPerformanceRef]
}

type AddWorkSchedulePayload
  @join__type(graph: BASS)
{
  workSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
  numUids: Int
}

type AlarmEvent
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  alarmEvent: String!
  alarmLimit: String
  alarmType: String
  priority: String
  event(filter: EventFilter): Event
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type AlarmEventAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  alarmEventMin: String
  alarmEventMax: String
  alarmLimitMin: String
  alarmLimitMax: String
  alarmTypeMin: String
  alarmTypeMax: String
  priorityMin: String
  priorityMax: String
  effectiveDateTimeMin: DateTime
  effectiveDateTimeMax: DateTime
  recordedDateTimeMin: DateTime
  recordedDateTimeMax: DateTime
}

input AlarmEventFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  alarmEvent: StringHashFilter
  alarmLimit: StringHashFilter
  alarmType: StringHashFilter
  priority: StringHashFilter
  effectiveDateTime: DateTimeFilter
  recordedDateTime: DateTimeFilter
  has: [AlarmEventHasFilter]
  and: [AlarmEventFilter]
  or: [AlarmEventFilter]
  not: AlarmEventFilter
}

enum AlarmEventHasFilter
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  alarmEvent @join__enumValue(graph: BASS)
  alarmLimit @join__enumValue(graph: BASS)
  alarmType @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  event @join__enumValue(graph: BASS)
  effectiveDateTime @join__enumValue(graph: BASS)
  recordedDateTime @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input AlarmEventOrder
  @join__type(graph: BASS)
{
  asc: AlarmEventOrderable
  desc: AlarmEventOrderable
  then: AlarmEventOrder
}

enum AlarmEventOrderable
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  alarmEvent @join__enumValue(graph: BASS)
  alarmLimit @join__enumValue(graph: BASS)
  alarmType @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  effectiveDateTime @join__enumValue(graph: BASS)
  recordedDateTime @join__enumValue(graph: BASS)
}

input AlarmEventPatch
  @join__type(graph: BASS)
{
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  alarmEvent: String
  alarmLimit: String
  alarmType: String
  priority: String
  event: EventRef
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input AlarmEventRef
  @join__type(graph: BASS)
{
  iid: ID
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  alarmEvent: String
  alarmLimit: String
  alarmType: String
  priority: String
  event: EventRef
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  signatures: [SignatureRef]
  comments: [CommentRef]
}

enum AssemblyRelationship
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  """ An assembly that is not intended to be split during the production process. 
  """
  Permanent @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)

  """ A temporary assembly using during production, such as a pallet of different materials or a batch kit. 
  """
  Transient @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input AssemblyRelationship_exact
  @join__type(graph: BASS)
{
  eq: AssemblyRelationship
  in: [AssemblyRelationship]
  le: AssemblyRelationship
  lt: AssemblyRelationship
  ge: AssemblyRelationship
  gt: AssemblyRelationship
  between: AssemblyRelationship
}

enum AssemblyType
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  """ The components of the assembly are physically connected or in the same area. 
  """
  Physical @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)

  """ The components of the assembly are not necessarily physically connected or in the same area. 
  """
  Logical @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input AssemblyType_exact
  @join__type(graph: BASS)
{
  eq: AssemblyType
  in: [AssemblyType]
  le: AssemblyType
  lt: AssemblyType
  ge: AssemblyType
  gt: AssemblyType
  between: AssemblyType
}

input AuthRule
  @join__type(graph: BASS)
{
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

type Comment
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  text: String!
  timestamp: DateTime!
  personVersion(filter: PersonVersionFilter): PersonVersion!
  onSignature(filter: SignatureFilter): Signature
  signOff(filter: SignatureFilter): Signature
  event(filter: EventFilter): Event
  alarmEvent(filter: AlarmEventFilter): AlarmEvent
  workResponse(filter: WorkResponseFilter): WorkResponse
  jobResponse(filter: JobResponseFilter): JobResponse
  jobResponseData(filter: JobResponseDataFilter): JobResponseData
  materialActual(filter: MaterialActualFilter): MaterialActual
  equipmentActual(filter: EquipmentActualFilter): EquipmentActual
  physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual
  personnelActual(filter: PersonnelActualFilter): PersonnelActual
  segmentParameter(filter: SegmentParameterFilter): SegmentParameter
  workRequest(filter: WorkRequestFilter): WorkRequest
  jobOrder(filter: JobOrderFilter): JobOrder
  materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement
  equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement
  physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement
  personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  child(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  parent(filter: CommentFilter): Comment
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  childAggregate(filter: CommentFilter): CommentAggregateResult
}

type CommentAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  textMin: String
  textMax: String
  timestampMin: DateTime
  timestampMax: DateTime
}

input CommentFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  text: StringExactFilter_StringFullTextFilter
  has: [CommentHasFilter]
  and: [CommentFilter]
  or: [CommentFilter]
  not: CommentFilter
}

enum CommentHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  text @join__enumValue(graph: BASS)
  timestamp @join__enumValue(graph: BASS)
  personVersion @join__enumValue(graph: BASS)
  onSignature @join__enumValue(graph: BASS)
  signOff @join__enumValue(graph: BASS)
  event @join__enumValue(graph: BASS)
  alarmEvent @join__enumValue(graph: BASS)
  workResponse @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  jobResponseData @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  segmentParameter @join__enumValue(graph: BASS)
  workRequest @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  materialRequirement @join__enumValue(graph: BASS)
  equipmentRequirement @join__enumValue(graph: BASS)
  physicalAssetRequirement @join__enumValue(graph: BASS)
  personnelRequirement @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  child @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input CommentOrder
  @join__type(graph: BASS)
{
  asc: CommentOrderable
  desc: CommentOrderable
  then: CommentOrder
}

enum CommentOrderable
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  text @join__enumValue(graph: BASS)
  timestamp @join__enumValue(graph: BASS)
}

input CommentPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  text: String
  timestamp: DateTime
  personVersion: PersonVersionRef
  onSignature: SignatureRef
  signOff: SignatureRef
  event: EventRef
  alarmEvent: AlarmEventRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  materialActual: MaterialActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  personnelActual: PersonnelActualRef
  segmentParameter: SegmentParameterRef
  workRequest: WorkRequestRef
  jobOrder: JobOrderRef
  materialRequirement: MaterialRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  personnelRequirement: PersonnelRequirementRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  child: [CommentRef]
  parent: CommentRef
}

input CommentRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  text: String
  timestamp: DateTime
  personVersion: PersonVersionRef
  onSignature: SignatureRef
  signOff: SignatureRef
  event: EventRef
  alarmEvent: AlarmEventRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  materialActual: MaterialActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  personnelActual: PersonnelActualRef
  segmentParameter: SegmentParameterRef
  workRequest: WorkRequestRef
  jobOrder: JobOrderRef
  materialRequirement: MaterialRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  personnelRequirement: PersonnelRequirementRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  child: [CommentRef]
  parent: CommentRef
}

input ContainsFilter
  @join__type(graph: BASS)
{
  point: PointRef
  polygon: PolygonRef
}

""" The input for creating a DataSourceVersion, it is a subset of AddDataSourceVersionInput 
"""
input CreateDataSourceVersionInput
  @join__type(graph: CORE)
{
  certificate: String
  connectionString: String
  description: String
  id: String!
  password: String
  protocol: DataSourceProtocol!
  username: String
  version: String
  versionStatus: VersionState!
}

""" The input for creating a EnvironmentalVariableVersion, it is a subset of AddEnvironmentalVariableVersionInput 
"""
input CreateEnvironmentalVariableVersionInput
  @join__type(graph: CORE)
{
  id: String!
  value: String!
  version: String
  versionStatus: VersionState!
}

""" The input for creating a EquipmentClassVersion, it is a subset of AddEquipmentClassVersionInput 
"""
input CreateEquipmentClassVersionInput
  @join__type(graph: CORE)
{
  description: String
  displayName: String
  equipmentLevel: EquipmentElementLevel
  id: String!
  image: String
  uiMonochromeIcon: String
  uiMonochromeIconColour: String
  version: String
  versionStatus: VersionState!
}

""" The input for creating a EquipmentVersion, it is a subset of AddEquipmentVersionInput 
"""
input CreateEquipmentVersionInput
  @join__type(graph: CORE)
{
  description: String
  displayName: String
  equipmentLevel: EquipmentElementLevel
  id: String!
  timeZoneName: String
  version: String
  versionStatus: VersionState!
}

""" The input for creating a MaterialClassVersion, it is a subset of AddMaterialClassVersionInput 
"""
input CreateMaterialClassVersionInput
  @join__type(graph: CORE)
{
  assemblyRelationship: AssemblyRelationship
  assemblyType: AssemblyType
  description: String
  id: String!
  version: String
  versionStatus: VersionState!
}

""" The input for creating a MaterialDefinitionVersion, it is a subset of AddMaterialDefinitionVersionInput 
"""
input CreateMaterialDefinitionVersionInput
  @join__type(graph: CORE)
{
  assemblyRelationship: AssemblyRelationship
  assemblyType: AssemblyType
  description: String
  id: String!
  version: String
  versionStatus: VersionState!
}

""" The input for creating a OperationalLocationClassVersion, it is a subset of AddOperationalLocationClassVersionInput 
"""
input CreateOperationalLocationClassVersionInput
  @join__type(graph: CORE)
{
  description: String
  id: String!
  label: String!
  name: String
  version: String
  versionStatus: VersionState!
}

""" The input for creating a OperationalLocationVersion, it is a subset of AddOperationalLocationVersionInput 
"""
input CreateOperationalLocationVersionInput
  @join__type(graph: CORE)
{
  description: String
  id: String!
  name: String
  version: String
  versionStatus: VersionState!
}

""" The input for creating a OperationsDefinitionVersion, it is a subset of AddOperationsDefinitionVersionInput 
"""
input CreateOperationsDefinitionVersionInput
  @join__type(graph: CORE)
{
  billOfMaterial: String
  billOfResources: String
  definitionType: DefinitionType
  description: String
  id: String!
  operationsType: WorkType!
  version: String
  versionStatus: VersionState!
}

""" The input for creating a PersonnelClassVersion, it is a subset of AddPersonnelClassVersionInput 
"""
input CreatePersonnelClassVersionInput
  @join__type(graph: CORE)
{
  description: String
  id: String!
  version: String
  versionStatus: VersionState!
}

""" The input for creating a PersonVersion, it is a subset of AddPersonVersionInput 
"""
input CreatePersonVersionInput
  @join__type(graph: CORE)
{
  description: String
  id: String!
  name: String!
  version: String
  versionStatus: VersionState!
}

""" The input for creating a PhysicalAssetClassVersion, it is a subset of AddPhysicalAssetClassVersionInput 
"""
input CreatePhysicalAssetClassVersionInput
  @join__type(graph: CORE)
{
  description: String
  id: String!
  manufacturer: String
  version: String
  versionStatus: VersionState!
}

""" The input for creating a PhysicalAssetVersion, it is a subset of AddPhysicalAssetVersionInput 
"""
input CreatePhysicalAssetVersionInput
  @join__type(graph: CORE)
{
  description: String
  fixedAssetID: String
  id: String!
  physicalLocationDescription: String
  vendorID: String
  version: String
  versionStatus: VersionState!
}

""" The input for creating a ProcessSegmentVersion, it is a subset of AddProcessSegmentVersionInput 
"""
input CreateProcessSegmentVersionInput
  @join__type(graph: CORE)
{
  definitionType: DefinitionType
  description: String
  duration: Float
  id: String!
  operationsType: WorkType!
  version: String
  versionStatus: VersionState!
}

input CreateWorkflowSpecificationErrorInput
  @join__type(graph: CORE)
{
  id: String
  iid: ID
  node: OnlyRef
  reference: String
  code: String
}

input CreateWorkflowSpecificationMessageInput
  @join__type(graph: CORE)
{
  enabled: Boolean
  id: String
  iid: ID
  node: OnlyRef
  reference: String
}

""" The input for creating a WorkflowSpecificationVersion, it is a subset of AddWorkflowSpecificationVersionInput 
"""
input CreateWorkflowSpecificationVersionInput
  @join__type(graph: CORE)
{
  definitionType: DefinitionType
  description: String
  id: String!
  version: String
  versionStatus: VersionState!
  isExecutable: Boolean
  messages: [CreateWorkflowSpecificationMessageInput]
  errors: [CreateWorkflowSpecificationErrorInput]
  properties: [CreateWorkflowSpecificationVersionPropertyInput]
  bpmnXMLEncoded: String
  schemaDefinition: String
}

input CreateWorkflowSpecificationVersionPropertyInput
  @join__type(graph: CORE)
{
  children: [CreateWorkflowSpecificationVersionPropertyInput]
  dataType: DataType
  definitionType: DefinitionType
  description: String
  id: String
  iid: ID
  name: String
  parent: CreateWorkflowSpecificationVersionPropertyInput
  value: String
  valueUnitOfMeasure: OnlyRef
}

input CustomHTTP
  @join__type(graph: BASS)
{
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  introspectionHeaders: [String!]
  skipIntrospection: Boolean
}

type DataSource
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion] @join__field(graph: BASS)
  activeVersion(filter: DataSourceVersionFilter): DataSourceVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  uiSortIndex: Int @join__field(graph: BASS)
  equipmentDataSources(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @join__field(graph: BASS)
  propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: DataSourceVersionFilter): DataSourceVersionAggregateResult @join__field(graph: BASS)
  equipmentDataSourcesAggregate(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult @join__field(graph: BASS)
  propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: BASS)
}

type DataSourceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  uiSortIndexMin: Int
  uiSortIndexMax: Int
  uiSortIndexSum: Int
  uiSortIndexAvg: Float
}

input DataSourceFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [DataSourceHasFilter]
  and: [DataSourceFilter]
  or: [DataSourceFilter]
  not: DataSourceFilter
}

enum DataSourceHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
  equipmentDataSources @join__enumValue(graph: BASS)
  propertyNameAliases @join__enumValue(graph: BASS)
}

type DataSourceMethod
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  method: String!
  object: String
  error: String
  statusCode: Int
  dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion!
  arguments(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  argumentsAggregate(filter: DataSourceMethodArgumentFilter): DataSourceMethodArgumentAggregateResult
}

type DataSourceMethodAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  methodMin: String
  methodMax: String
  objectMin: String
  objectMax: String
  errorMin: String
  errorMax: String
  statusCodeMin: Int
  statusCodeMax: Int
  statusCodeSum: Int
  statusCodeAvg: Float
}

type DataSourceMethodArgument
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  position: Int!
  dataType: DataType
  direction: MethodArgumentDirection!
  value: String
  dataSourceMethod(filter: DataSourceMethodFilter): DataSourceMethod!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type DataSourceMethodArgumentAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  positionMin: Int
  positionMax: Int
  positionSum: Int
  positionAvg: Float
  valueMin: String
  valueMax: String
}

input DataSourceMethodArgumentFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  dataType: DataType_hash
  has: [DataSourceMethodArgumentHasFilter]
  and: [DataSourceMethodArgumentFilter]
  or: [DataSourceMethodArgumentFilter]
  not: DataSourceMethodArgumentFilter
}

enum DataSourceMethodArgumentHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  position @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  direction @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  dataSourceMethod @join__enumValue(graph: BASS)
}

input DataSourceMethodArgumentOrder
  @join__type(graph: BASS)
{
  asc: DataSourceMethodArgumentOrderable
  desc: DataSourceMethodArgumentOrderable
  then: DataSourceMethodArgumentOrder
}

enum DataSourceMethodArgumentOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  position @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input DataSourceMethodArgumentPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  position: Int
  dataType: DataType
  direction: MethodArgumentDirection
  value: String
  dataSourceMethod: DataSourceMethodRef
}

input DataSourceMethodArgumentRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  position: Int
  dataType: DataType
  direction: MethodArgumentDirection
  value: String
  dataSourceMethod: DataSourceMethodRef
}

input DataSourceMethodFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  method: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [DataSourceMethodHasFilter]
  and: [DataSourceMethodFilter]
  or: [DataSourceMethodFilter]
  not: DataSourceMethodFilter
}

enum DataSourceMethodHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  method @join__enumValue(graph: BASS)
  object @join__enumValue(graph: BASS)
  error @join__enumValue(graph: BASS)
  statusCode @join__enumValue(graph: BASS)
  dataSourceVersion @join__enumValue(graph: BASS)
  arguments @join__enumValue(graph: BASS)
}

input DataSourceMethodOrder
  @join__type(graph: BASS)
{
  asc: DataSourceMethodOrderable
  desc: DataSourceMethodOrderable
  then: DataSourceMethodOrder
}

enum DataSourceMethodOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  method @join__enumValue(graph: BASS)
  object @join__enumValue(graph: BASS)
  error @join__enumValue(graph: BASS)
  statusCode @join__enumValue(graph: BASS)
}

input DataSourceMethodPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  method: String
  object: String
  error: String
  statusCode: Int
  dataSourceVersion: DataSourceVersionRef
  arguments: [DataSourceMethodArgumentRef]
}

input DataSourceMethodRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  method: String
  object: String
  error: String
  statusCode: Int
  dataSourceVersion: DataSourceVersionRef
  arguments: [DataSourceMethodArgumentRef]
}

input DataSourceOrder
  @join__type(graph: BASS)
{
  asc: DataSourceOrderable
  desc: DataSourceOrderable
  then: DataSourceOrder
}

enum DataSourceOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

input DataSourcePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [DataSourceVersionRef]
  activeVersion: DataSourceVersionRef
  nextVersion: String
  id: String
  label: String
  uiSortIndex: Int
  equipmentDataSources: [EquipmentDataSourceRef]
  propertyNameAliases: [PropertyNameAliasRef]
}

enum DataSourceProtocol
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  MQTT @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  OPCUA @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input DataSourceProtocol_exact
  @join__type(graph: BASS)
{
  eq: DataSourceProtocol
  in: [DataSourceProtocol]
  le: DataSourceProtocol
  lt: DataSourceProtocol
  ge: DataSourceProtocol
  gt: DataSourceProtocol
  between: DataSourceProtocol
}

input DataSourceRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [DataSourceVersionRef]
  activeVersion: DataSourceVersionRef
  nextVersion: String
  id: String
  label: String
  uiSortIndex: Int
  equipmentDataSources: [EquipmentDataSourceRef]
  propertyNameAliases: [PropertyNameAliasRef]
}

type DataSourceTopic
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  dataType: DataType @join__field(graph: BASS)
  messageKeyDeterminedBy: MessageKey! @join__field(graph: BASS)
  dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion! @join__field(graph: BASS)
  propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: BASS) @deprecated(reason: "the dataSourceTopic Label is now maintained on the propertyNameAlias as a string rather than as a relationship")
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: BASS)
}

type DataSourceTopicAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  labelMin: String
  labelMax: String
}

input DataSourceTopicFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  dataType: DataType_hash
  messageKeyDeterminedBy: MessageKey_hash
  has: [DataSourceTopicHasFilter]
  and: [DataSourceTopicFilter]
  or: [DataSourceTopicFilter]
  not: DataSourceTopicFilter
}

enum DataSourceTopicHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  messageKeyDeterminedBy @join__enumValue(graph: BASS)
  dataSourceVersion @join__enumValue(graph: BASS)
  propertyNameAliases @join__enumValue(graph: BASS)
}

input DataSourceTopicOrder
  @join__type(graph: BASS)
{
  asc: DataSourceTopicOrderable
  desc: DataSourceTopicOrderable
  then: DataSourceTopicOrder
}

enum DataSourceTopicOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input DataSourceTopicPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  label: String
  dataType: DataType
  messageKeyDeterminedBy: MessageKey
  dataSourceVersion: DataSourceVersionRef
  propertyNameAliases: [PropertyNameAliasRef]
}

input DataSourceTopicRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  label: String
  dataType: DataType
  messageKeyDeterminedBy: MessageKey
  dataSourceVersion: DataSourceVersionRef
  propertyNameAliases: [PropertyNameAliasRef]
}

type DataSourceVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  dataSource(filter: DataSourceFilter): DataSource! @join__field(graph: BASS)
  isActiveVersionOf(filter: DataSourceFilter): DataSource @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  protocol: DataSourceProtocol! @join__field(graph: BASS)
  connectionString: String @join__field(graph: BASS)
  username: String @join__field(graph: BASS)
  password: String @join__field(graph: BASS)
  certificate: String @join__field(graph: BASS)
  topics(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic] @join__field(graph: BASS)
  equipmentDataSources(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @join__field(graph: BASS)
  physicalAssetDataSources(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource] @join__field(graph: BASS)
  methods(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  topicsAggregate(filter: DataSourceTopicFilter): DataSourceTopicAggregateResult @join__field(graph: BASS)
  equipmentDataSourcesAggregate(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult @join__field(graph: BASS)
  physicalAssetDataSourcesAggregate(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult @join__field(graph: BASS)
  methodsAggregate(filter: DataSourceMethodFilter): DataSourceMethodAggregateResult @join__field(graph: BASS)
}

type DataSourceVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  connectionStringMin: String
  connectionStringMax: String
  usernameMin: String
  usernameMax: String
  passwordMin: String
  passwordMax: String
  certificateMin: String
  certificateMax: String
}

input DataSourceVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  protocol: DataSourceProtocol_exact
  connectionString: StringExactFilter_StringFullTextFilter
  has: [DataSourceVersionHasFilter]
  and: [DataSourceVersionFilter]
  or: [DataSourceVersionFilter]
  not: DataSourceVersionFilter
}

enum DataSourceVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  dataSource @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  protocol @join__enumValue(graph: BASS)
  connectionString @join__enumValue(graph: BASS)
  username @join__enumValue(graph: BASS)
  password @join__enumValue(graph: BASS)
  certificate @join__enumValue(graph: BASS)
  topics @join__enumValue(graph: BASS)
  equipmentDataSources @join__enumValue(graph: BASS)
  physicalAssetDataSources @join__enumValue(graph: BASS)
  methods @join__enumValue(graph: BASS)
}

input DataSourceVersionOrder
  @join__type(graph: BASS)
{
  asc: DataSourceVersionOrderable
  desc: DataSourceVersionOrderable
  then: DataSourceVersionOrder
}

enum DataSourceVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  connectionString @join__enumValue(graph: BASS)
  username @join__enumValue(graph: BASS)
  password @join__enumValue(graph: BASS)
  certificate @join__enumValue(graph: BASS)
}

input DataSourceVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  dataSource: DataSourceRef
  isActiveVersionOf: DataSourceRef
  id: String
  description: String
  protocol: DataSourceProtocol
  connectionString: String
  username: String
  password: String
  certificate: String
  topics: [DataSourceTopicRef]
  equipmentDataSources: [EquipmentDataSourceRef]
  physicalAssetDataSources: [PhysicalAssetDataSourceRef]
  methods: [DataSourceMethodRef]
}

input DataSourceVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  dataSource: DataSourceRef
  isActiveVersionOf: DataSourceRef
  id: String
  description: String
  protocol: DataSourceProtocol
  connectionString: String
  username: String
  password: String
  certificate: String
  topics: [DataSourceTopicRef]
  equipmentDataSources: [EquipmentDataSourceRef]
  physicalAssetDataSources: [PhysicalAssetDataSourceRef]
  methods: [DataSourceMethodRef]
}

type DataSubscription
  @join__type(graph: BASS, key: "id")
{
  id: ID!
  name: String!
  topic: String!
  query: String!
  split: Boolean!
}

type DataSubscriptionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  nameMin: String
  nameMax: String
  topicMin: String
  topicMax: String
  queryMin: String
  queryMax: String
}

input DataSubscriptionFilter
  @join__type(graph: BASS)
{
  id: [ID!]
  name: StringHashFilter
  has: [DataSubscriptionHasFilter]
  and: [DataSubscriptionFilter]
  or: [DataSubscriptionFilter]
  not: DataSubscriptionFilter
}

enum DataSubscriptionHasFilter
  @join__type(graph: BASS)
{
  name @join__enumValue(graph: BASS)
  topic @join__enumValue(graph: BASS)
  query @join__enumValue(graph: BASS)
  split @join__enumValue(graph: BASS)
}

input DataSubscriptionOrder
  @join__type(graph: BASS)
{
  asc: DataSubscriptionOrderable
  desc: DataSubscriptionOrderable
  then: DataSubscriptionOrder
}

enum DataSubscriptionOrderable
  @join__type(graph: BASS)
{
  name @join__enumValue(graph: BASS)
  topic @join__enumValue(graph: BASS)
  query @join__enumValue(graph: BASS)
}

input DataSubscriptionPatch
  @join__type(graph: BASS)
{
  name: String
  topic: String
  query: String
  split: Boolean
}

input DataSubscriptionRef
  @join__type(graph: BASS)
{
  id: ID
  name: String
  topic: String
  query: String
  split: Boolean
}

enum DataType
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  BOOL @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  BYTE @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  BYTE_STRING @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  DATA_VALUE @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  DATE_TIME @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  FLOAT64 @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  EXPANDED_NODE_ID @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  STRUCTURE @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  FLOAT @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  GUID @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INT16 @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INT32 @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INT64 @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INT @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  LOCALIZED_TEXT @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  NODE_ID @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  QUALIFIED_NAME @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  S_BYTE @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  STATUS_CODE @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  STRING @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  UINT16 @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  UINT32 @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  UInt64 @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  UINT @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  XML_ELEMENT @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  BOOL_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  BYTE_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  BYTE_STRING_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  DATA_VALUE_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  DATE_TIME_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  FLOAT64_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  EXPANDED_NODE_ID_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  STRUCTURE_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  FLOAT_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  GUID_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INT16_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INT32_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INT64_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  LOCALIZED_TEXT_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  NODE_ID_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  QUALIFIED_NAME_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  S_BYTE_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  STATUS_CODE_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  STRING_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  UINT16_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  UINT32_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  UInt64_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  XML_ELEMENT_ARRAY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input DataType_hash
  @join__type(graph: BASS)
{
  eq: DataType
  in: [DataType]
}

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime
  @join__type(graph: BASS)
  @join__type(graph: BPMN_ENGINE)
  @join__type(graph: CORE)

input DateTimeFilter
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  eq: DateTime
  in: [DateTime]
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  between: DateTimeRange
}

input DateTimeRange
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  min: DateTime!
  max: DateTime!
}

enum DefinitionType
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  PATTERN @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INSTANCE @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input DefinitionType_hash
  @join__type(graph: BASS)
{
  eq: DefinitionType
  in: [DefinitionType]
}

type DeleteAccessPermissionPayload
  @join__type(graph: BASS)
{
  accessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  msg: String
  numUids: Int
}

type DeleteAlarmEventPayload
  @join__type(graph: BASS)
{
  alarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
  msg: String
  numUids: Int
}

type DeleteCommentPayload
  @join__type(graph: BASS)
{
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  msg: String
  numUids: Int
}

type DeleteDataSourceMethodArgumentPayload
  @join__type(graph: BASS)
{
  dataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
  msg: String
  numUids: Int
}

type DeleteDataSourceMethodPayload
  @join__type(graph: BASS)
{
  dataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
  msg: String
  numUids: Int
}

type DeleteDataSourcePayload
  @join__type(graph: BASS)
{
  dataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
  msg: String
  numUids: Int
}

type DeleteDataSourceTopicPayload
  @join__type(graph: BASS)
{
  dataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
  msg: String
  numUids: Int
}

type DeleteDataSourceVersionPayload
  @join__type(graph: BASS)
{
  dataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
  msg: String
  numUids: Int
}

type DeleteDataSubscriptionPayload
  @join__type(graph: BASS)
{
  dataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
  msg: String
  numUids: Int
}

type DeleteEnvironmentalVariablePayload
  @join__type(graph: BASS)
{
  environmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
  msg: String
  numUids: Int
}

type DeleteEnvironmentalVariableVersionPayload
  @join__type(graph: BASS)
{
  environmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
  msg: String
  numUids: Int
}

type DeleteEquipmentActualPayload
  @join__type(graph: BASS)
{
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
  msg: String
  numUids: Int
}

type DeleteEquipmentActualPropertyPayload
  @join__type(graph: BASS)
{
  equipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
  msg: String
  numUids: Int
}

type DeleteEquipmentAssetMappingPayload
  @join__type(graph: BASS)
{
  equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
  msg: String
  numUids: Int
}

type DeleteEquipmentClassPayload
  @join__type(graph: BASS)
{
  equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
  msg: String
  numUids: Int
}

type DeleteEquipmentClassPropertyPayload
  @join__type(graph: BASS)
{
  equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
  msg: String
  numUids: Int
}

type DeleteEquipmentClassVersionPayload
  @join__type(graph: BASS)
{
  equipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
  msg: String
  numUids: Int
}

type DeleteEquipmentDataSourcePayload
  @join__type(graph: BASS)
{
  equipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
  msg: String
  numUids: Int
}

type DeleteEquipmentNameAliasPayload
  @join__type(graph: BASS)
{
  equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
  msg: String
  numUids: Int
}

type DeleteEquipmentPayload
  @join__type(graph: BASS)
{
  equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
  msg: String
  numUids: Int
}

type DeleteEquipmentPropertyOverridePayload
  @join__type(graph: BASS)
{
  equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
  msg: String
  numUids: Int
}

type DeleteEquipmentPropertyPayload
  @join__type(graph: BASS)
{
  equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
  msg: String
  numUids: Int
}

type DeleteEquipmentRequirementPayload
  @join__type(graph: BASS)
{
  equipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
  msg: String
  numUids: Int
}

type DeleteEquipmentRequirementPropertyPayload
  @join__type(graph: BASS)
{
  equipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
  msg: String
  numUids: Int
}

type DeleteEquipmentSpecificationPayload
  @join__type(graph: BASS)
{
  equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  msg: String
  numUids: Int
}

type DeleteEquipmentSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  equipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
  msg: String
  numUids: Int
}

type DeleteEquipmentVersionPayload
  @join__type(graph: BASS)
{
  equipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
  msg: String
  numUids: Int
}

type DeleteEvaluatedPropertyPayload
  @join__type(graph: BASS)
{
  evaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
  msg: String
  numUids: Int
}

type DeleteEventAssociationPayload
  @join__type(graph: BASS)
{
  eventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
  msg: String
  numUids: Int
}

type DeleteEventPayload
  @join__type(graph: BASS)
{
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  msg: String
  numUids: Int
}

type DeleteEventPropertyPayload
  @join__type(graph: BASS)
{
  eventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
  msg: String
  numUids: Int
}

type DeleteEventSubtypePayload
  @join__type(graph: BASS)
{
  eventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
  msg: String
  numUids: Int
}

type DeleteEventTypePayload
  @join__type(graph: BASS)
{
  eventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
  msg: String
  numUids: Int
}

type DeleteFormPayload
  @join__type(graph: BASS)
{
  form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
  msg: String
  numUids: Int
}

type DeleteHierarchyScopePayload
  @join__type(graph: BASS)
{
  hierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
  msg: String
  numUids: Int
}

type DeleteInformationObjectPayload
  @join__type(graph: BASS)
{
  informationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  msg: String
  numUids: Int
}

type DeleteJobListPayload
  @join__type(graph: BASS)
{
  jobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
  msg: String
  numUids: Int
}

type DeleteJobOrderParameterPayload
  @join__type(graph: BASS)
{
  jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
  msg: String
  numUids: Int
}

type DeleteJobOrderPayload
  @join__type(graph: BASS)
{
  jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  msg: String
  numUids: Int
}

type DeleteJobResponseDataPayload
  @join__type(graph: BASS)
{
  jobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
  msg: String
  numUids: Int
}

type DeleteJobResponseListPayload
  @join__type(graph: BASS)
{
  jobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
  msg: String
  numUids: Int
}

type DeleteJobResponsePayload
  @join__type(graph: BASS)
{
  jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  msg: String
  numUids: Int
}

type DeleteLibreServicePayload
  @join__type(graph: BASS)
{
  libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
  msg: String
  numUids: Int
}

type DeleteMaterialActualPayload
  @join__type(graph: BASS)
{
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  msg: String
  numUids: Int
}

type DeleteMaterialActualPropertyPayload
  @join__type(graph: BASS)
{
  materialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
  msg: String
  numUids: Int
}

type DeleteMaterialAlternatePayload
  @join__type(graph: BASS)
{
  materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
  msg: String
  numUids: Int
}

type DeleteMaterialClassPayload
  @join__type(graph: BASS)
{
  materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
  msg: String
  numUids: Int
}

type DeleteMaterialClassPropertyPayload
  @join__type(graph: BASS)
{
  materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
  msg: String
  numUids: Int
}

type DeleteMaterialClassVersionPayload
  @join__type(graph: BASS)
{
  materialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
  msg: String
  numUids: Int
}

type DeleteMaterialDefinitionPayload
  @join__type(graph: BASS)
{
  materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
  msg: String
  numUids: Int
}

type DeleteMaterialDefinitionPropertyPayload
  @join__type(graph: BASS)
{
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
  msg: String
  numUids: Int
}

type DeleteMaterialDefinitionVersionPayload
  @join__type(graph: BASS)
{
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
  msg: String
  numUids: Int
}

type DeleteMaterialLotPayload
  @join__type(graph: BASS)
{
  materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  msg: String
  numUids: Int
}

type DeleteMaterialLotPropertyPayload
  @join__type(graph: BASS)
{
  materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
  msg: String
  numUids: Int
}

type DeleteMaterialRequirementPayload
  @join__type(graph: BASS)
{
  materialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  msg: String
  numUids: Int
}

type DeleteMaterialRequirementPropertyPayload
  @join__type(graph: BASS)
{
  materialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
  msg: String
  numUids: Int
}

type DeleteMaterialSpecificationPayload
  @join__type(graph: BASS)
{
  materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  msg: String
  numUids: Int
}

type DeleteMaterialSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  materialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
  msg: String
  numUids: Int
}

type DeleteMaterialSubLotPayload
  @join__type(graph: BASS)
{
  materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  msg: String
  numUids: Int
}

type DeleteMenuPayload
  @join__type(graph: BASS)
{
  menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
  msg: String
  numUids: Int
}

type DeleteMultiplicityPayload
  @join__type(graph: BASS)
{
  multiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity]
  msg: String
  numUids: Int
}

type DeleteOperationalLocationClassPayload
  @join__type(graph: BASS)
{
  operationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
  msg: String
  numUids: Int
}

type DeleteOperationalLocationClassPropertyPayload
  @join__type(graph: BASS)
{
  operationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
  msg: String
  numUids: Int
}

type DeleteOperationalLocationClassVersionPayload
  @join__type(graph: BASS)
{
  operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
  msg: String
  numUids: Int
}

type DeleteOperationalLocationPayload
  @join__type(graph: BASS)
{
  operationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
  msg: String
  numUids: Int
}

type DeleteOperationalLocationPropertyPayload
  @join__type(graph: BASS)
{
  operationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
  msg: String
  numUids: Int
}

type DeleteOperationalLocationVersionPayload
  @join__type(graph: BASS)
{
  operationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion]
  msg: String
  numUids: Int
}

type DeleteOperationsDefinitionPayload
  @join__type(graph: BASS)
{
  operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
  msg: String
  numUids: Int
}

type DeleteOperationsDefinitionVersionPayload
  @join__type(graph: BASS)
{
  operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
  msg: String
  numUids: Int
}

type DeleteOperationsEventClassPayload
  @join__type(graph: BASS)
{
  operationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
  msg: String
  numUids: Int
}

type DeleteOperationsEventClassPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
  msg: String
  numUids: Int
}

type DeleteOperationsEventClassRecordSpecificationPayload
  @join__type(graph: BASS)
{
  operationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
  msg: String
  numUids: Int
}

type DeleteOperationsEventClassVersionPayload
  @join__type(graph: BASS)
{
  operationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
  msg: String
  numUids: Int
}

type DeleteOperationsEventDefinitionPayload
  @join__type(graph: BASS)
{
  operationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
  msg: String
  numUids: Int
}

type DeleteOperationsEventDefinitionPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
  msg: String
  numUids: Int
}

type DeleteOperationsEventDefinitionRecordSpecificationPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
  msg: String
  numUids: Int
}

type DeleteOperationsEventDefinitionVersionPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
  msg: String
  numUids: Int
}

type DeleteOperationsEventPayload
  @join__type(graph: BASS)
{
  operationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
  msg: String
  numUids: Int
}

type DeleteOperationsEventPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
  msg: String
  numUids: Int
}

type DeleteOperationsEventRecordEntryPayload
  @join__type(graph: BASS)
{
  operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
  msg: String
  numUids: Int
}

type DeleteOperationsEventRecordPayload
  @join__type(graph: BASS)
{
  operationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
  msg: String
  numUids: Int
}

type DeleteOperationsMaterialBillPayload
  @join__type(graph: BASS)
{
  operationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
  msg: String
  numUids: Int
}

type DeleteOperationsPerformancePayload
  @join__type(graph: BASS)
{
  operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
  msg: String
  numUids: Int
}

type DeleteOperationsRequestPayload
  @join__type(graph: BASS)
{
  operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  msg: String
  numUids: Int
}

type DeleteOperationsResponsePayload
  @join__type(graph: BASS)
{
  operationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
  msg: String
  numUids: Int
}

type DeleteOperationsResponsePropertyPayload
  @join__type(graph: BASS)
{
  operationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
  msg: String
  numUids: Int
}

type DeleteOperationsSchedulePayload
  @join__type(graph: BASS)
{
  operationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
  msg: String
  numUids: Int
}

type DeleteOperationsSegmentDependencyPayload
  @join__type(graph: BASS)
{
  operationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
  msg: String
  numUids: Int
}

type DeleteOperationsSegmentPayload
  @join__type(graph: BASS)
{
  operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  msg: String
  numUids: Int
}

type DeleteParameterSpecificationPayload
  @join__type(graph: BASS)
{
  parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
  msg: String
  numUids: Int
}

type DeletePayloadFieldDefinitionPayload
  @join__type(graph: BASS)
{
  payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
  msg: String
  numUids: Int
}

type DeletePersonnelActualPayload
  @join__type(graph: BASS)
{
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
  msg: String
  numUids: Int
}

type DeletePersonnelActualPropertyPayload
  @join__type(graph: BASS)
{
  personnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
  msg: String
  numUids: Int
}

type DeletePersonnelClassPayload
  @join__type(graph: BASS)
{
  personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  msg: String
  numUids: Int
}

type DeletePersonnelClassPropertyPayload
  @join__type(graph: BASS)
{
  personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
  msg: String
  numUids: Int
}

type DeletePersonnelClassVersionPayload
  @join__type(graph: BASS)
{
  personnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
  msg: String
  numUids: Int
}

type DeletePersonnelRequirementPayload
  @join__type(graph: BASS)
{
  personnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
  msg: String
  numUids: Int
}

type DeletePersonnelRequirementPropertyPayload
  @join__type(graph: BASS)
{
  personnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
  msg: String
  numUids: Int
}

type DeletePersonnelSpecificationPayload
  @join__type(graph: BASS)
{
  personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  msg: String
  numUids: Int
}

type DeletePersonnelSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  personnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
  msg: String
  numUids: Int
}

type DeletePersonPayload
  @join__type(graph: BASS)
{
  person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  msg: String
  numUids: Int
}

type DeletePersonPropertyPayload
  @join__type(graph: BASS)
{
  personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
  msg: String
  numUids: Int
}

type DeletePersonVersionPayload
  @join__type(graph: BASS)
{
  personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetActualPayload
  @join__type(graph: BASS)
{
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetActualPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetClassPayload
  @join__type(graph: BASS)
{
  physicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetClassPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetClassVersionPayload
  @join__type(graph: BASS)
{
  physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetDataSourcePayload
  @join__type(graph: BASS)
{
  physicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetPayload
  @join__type(graph: BASS)
{
  physicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetRequirementPayload
  @join__type(graph: BASS)
{
  physicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetRequirementPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetSpecificationPayload
  @join__type(graph: BASS)
{
  physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
  msg: String
  numUids: Int
}

type DeletePhysicalAssetVersionPayload
  @join__type(graph: BASS)
{
  physicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
  msg: String
  numUids: Int
}

type DeleteProcessSegmentDependencyPayload
  @join__type(graph: BASS)
{
  processSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
  msg: String
  numUids: Int
}

type DeleteProcessSegmentParameterPayload
  @join__type(graph: BASS)
{
  processSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
  msg: String
  numUids: Int
}

type DeleteProcessSegmentPayload
  @join__type(graph: BASS)
{
  processSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
  msg: String
  numUids: Int
}

type DeleteProcessSegmentVersionPayload
  @join__type(graph: BASS)
{
  processSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
  msg: String
  numUids: Int
}

type DeletePropertyMeasurementPayload
  @join__type(graph: BASS)
{
  propertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
  msg: String
  numUids: Int
}

type DeletePropertyNameAliasPayload
  @join__type(graph: BASS)
{
  propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
  msg: String
  numUids: Int
}

type DeletePropertyValueAliasPayload
  @join__type(graph: BASS)
{
  propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
  msg: String
  numUids: Int
}

type DeleteRulePayload
  @join__type(graph: BASS)
{
  rule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
  msg: String
  numUids: Int
}

type DeleteSecretPayload
  @join__type(graph: BASS)
{
  secret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
  msg: String
  numUids: Int
}

type DeleteSecretVersionPayload
  @join__type(graph: BASS)
{
  secretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
  msg: String
  numUids: Int
}

type DeleteSegmentDataPayload
  @join__type(graph: BASS)
{
  segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
  msg: String
  numUids: Int
}

type DeleteSegmentParameterPayload
  @join__type(graph: BASS)
{
  segmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
  msg: String
  numUids: Int
}

type DeleteSegmentRequirementPayload
  @join__type(graph: BASS)
{
  segmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
  msg: String
  numUids: Int
}

type DeleteSegmentResponsePayload
  @join__type(graph: BASS)
{
  segmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
  msg: String
  numUids: Int
}

type DeleteSignaturePayload
  @join__type(graph: BASS)
{
  signature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  msg: String
  numUids: Int
}

type DeleteSignatureReasonPayload
  @join__type(graph: BASS)
{
  signatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
  msg: String
  numUids: Int
}

type DeleteSpatialDefinitionPayload
  @join__type(graph: BASS)
{
  spatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
  msg: String
  numUids: Int
}

type DeleteStateModelActionPayload
  @join__type(graph: BASS)
{
  stateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
  msg: String
  numUids: Int
}

type DeleteStateModelDefinitionPayload
  @join__type(graph: BASS)
{
  stateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition]
  msg: String
  numUids: Int
}

type DeleteStateModelEventPayload
  @join__type(graph: BASS)
{
  stateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
  msg: String
  numUids: Int
}

type DeleteStateModelInstancePayload
  @join__type(graph: BASS)
{
  stateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
  msg: String
  numUids: Int
}

type DeleteStateModelPropertyPayload
  @join__type(graph: BASS)
{
  stateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
  msg: String
  numUids: Int
}

type DeleteStateModelStatePayload
  @join__type(graph: BASS)
{
  stateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
  msg: String
  numUids: Int
}

type DeleteStateModelTransitionPayload
  @join__type(graph: BASS)
{
  stateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
  msg: String
  numUids: Int
}

type DeleteStateTransitionInstancePayload
  @join__type(graph: BASS)
{
  stateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
  msg: String
  numUids: Int
}

type DeleteTestResultPayload
  @join__type(graph: BASS)
{
  testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  msg: String
  numUids: Int
}

type DeleteTestSpecificationCriteriaPayload
  @join__type(graph: BASS)
{
  testSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
  msg: String
  numUids: Int
}

type DeleteTestSpecificationPayload
  @join__type(graph: BASS)
{
  testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  msg: String
  numUids: Int
}

type DeleteTestSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  testSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
  msg: String
  numUids: Int
}

type DeleteUnitOfMeasureConversionPayload
  @join__type(graph: BASS)
{
  unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
  msg: String
  numUids: Int
}

type DeleteUnitOfMeasurePayload
  @join__type(graph: BASS)
{
  unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarDefinitionEntryPayload
  @join__type(graph: BASS)
{
  workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarDefinitionEntryPropertyPayload
  @join__type(graph: BASS)
{
  workCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarEntryPayload
  @join__type(graph: BASS)
{
  workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarEntryPropertyPayload
  @join__type(graph: BASS)
{
  workCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarPayload
  @join__type(graph: BASS)
{
  workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
  msg: String
  numUids: Int
}

type DeleteWorkDirectivePayload
  @join__type(graph: BASS)
{
  workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  msg: String
  numUids: Int
}

type DeleteWorkflowErrorPayload
  @join__type(graph: BASS)
{
  workflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError]
  msg: String
  numUids: Int
}

type DeleteWorkflowMessagePayload
  @join__type(graph: BASS)
{
  workflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage]
  msg: String
  numUids: Int
}

type DeleteWorkflowShapePayload
  @join__type(graph: BASS)
{
  workflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationConnectionPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationConnectionPropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationConnectionTypePayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationConnectionTypePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationNodePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationNodePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationNodeTestCasePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationNodeTypePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationNodeTypePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationNodeVariablePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationPayload
  @join__type(graph: BASS)
{
  workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationVersionPayload
  @join__type(graph: BASS)
{
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
  msg: String
  numUids: Int
}

type DeleteWorkflowTimerPayload
  @join__type(graph: BASS)
{
  workflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer]
  msg: String
  numUids: Int
}

type DeleteWorkflowWaypointPayload
  @join__type(graph: BASS)
{
  workflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
  msg: String
  numUids: Int
}

type DeleteWorkMasterPayload
  @join__type(graph: BASS)
{
  workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  msg: String
  numUids: Int
}

type DeleteWorkPerformancePayload
  @join__type(graph: BASS)
{
  workPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
  msg: String
  numUids: Int
}

type DeleteWorkRequestPayload
  @join__type(graph: BASS)
{
  workRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
  msg: String
  numUids: Int
}

type DeleteWorkResponsePayload
  @join__type(graph: BASS)
{
  workResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
  msg: String
  numUids: Int
}

type DeleteWorkSchedulePayload
  @join__type(graph: BASS)
{
  workSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
  msg: String
  numUids: Int
}

enum DependencyType
  @join__type(graph: BASS)
{
  """ Start B at A start. """
  AT_START @join__enumValue(graph: BASS)

  """ Start B after A start. """
  AFTER_START @join__enumValue(graph: BASS)

  """ Start B after A end. """
  AFTER_END @join__enumValue(graph: BASS)

  """ B cannot follow A. """
  NOT_FOLLOW @join__enumValue(graph: BASS)

  """ B may run in parallel to A. """
  POSSIBLE_PARALLEL @join__enumValue(graph: BASS)

  """ B may not run in parallel to A. """
  NOT_IN_PARALLEL @join__enumValue(graph: BASS)

  """ Start B no later than dependency factor after A start. """
  NO_LATER_AFTER_START @join__enumValue(graph: BASS)

  """ Start B no earlier than dependency factor after A start. """
  NO_EARLIER_AFTER_START @join__enumValue(graph: BASS)

  """ Start B no later than dependency factor after A end. """
  NO_LATER_AFTER_END @join__enumValue(graph: BASS)

  """ B no earlier than dependency factor after A end. """
  NO_EARLIER_AFTER_END @join__enumValue(graph: BASS)
}

input DgraphDefault
  @join__type(graph: BASS)
{
  value: String
}

enum DgraphIndex
  @join__type(graph: BASS)
{
  int @join__enumValue(graph: BASS)
  int64 @join__enumValue(graph: BASS)
  float @join__enumValue(graph: BASS)
  bool @join__enumValue(graph: BASS)
  hash @join__enumValue(graph: BASS)
  exact @join__enumValue(graph: BASS)
  term @join__enumValue(graph: BASS)
  fulltext @join__enumValue(graph: BASS)
  trigram @join__enumValue(graph: BASS)
  regexp @join__enumValue(graph: BASS)
  year @join__enumValue(graph: BASS)
  month @join__enumValue(graph: BASS)
  day @join__enumValue(graph: BASS)
  hour @join__enumValue(graph: BASS)
  geo @join__enumValue(graph: BASS)
}

enum DispatchStatus
  @join__type(graph: BASS)
{
  CREATED @join__enumValue(graph: BASS)
  RELEASED @join__enumValue(graph: BASS)
  PENDING @join__enumValue(graph: BASS)
  ACTIVE @join__enumValue(graph: BASS)
  PARKED @join__enumValue(graph: BASS)
  COMPLETE @join__enumValue(graph: BASS)
  CLOSED @join__enumValue(graph: BASS)
  CANCELED @join__enumValue(graph: BASS)
}

input DispatchStatus_hash
  @join__type(graph: BASS)
{
  eq: DispatchStatus
  in: [DispatchStatus]
}

enum Disposition
  @join__type(graph: BASS)
{
  """
   A material lot or sublot that does not yet physically exist, is assigned to an operations request 
  (segment requirement) or work request (Part 4 object) or job order (Part 4 object). 
  """
  Planned @join__enumValue(graph: BASS)

  """ The material lot or sublot is in the process of being worked on. """
  InProcess @join__enumValue(graph: BASS)

  """ A material lot or sublot is not permitted for normal use due to a restriction condition. 
  """
  Restricted @join__enumValue(graph: BASS)

  """ Material lot or sublot is permitted for normal use without restriction. 
  """
  Unrestricted @join__enumValue(graph: BASS)

  """ Material lot or sublot has been reconciled as completely consumed, sold or disposed of. 
  """
  Closed @join__enumValue(graph: BASS)
}

input Disposition_exact
  @join__type(graph: BASS)
{
  eq: Disposition
  in: [Disposition]
  le: Disposition
  lt: Disposition
  ge: Disposition
  gt: Disposition
  between: Disposition
}

enum EnterpriseFunctionEnum
  @join__type(graph: BASS)
{
  Order_Processing @join__enumValue(graph: BASS)
  Operations_Scheduling @join__enumValue(graph: BASS)
  Production_Control @join__enumValue(graph: BASS)
  Material_And_Energy_Control @join__enumValue(graph: BASS)
  Product_Cost_Accounting @join__enumValue(graph: BASS)
  Product_Shipping_Administration @join__enumValue(graph: BASS)
  Maintenance_Management @join__enumValue(graph: BASS)
  Marketing_And_Sales @join__enumValue(graph: BASS)
  Research_And_Development @join__enumValue(graph: BASS)
  Engineering @join__enumValue(graph: BASS)
}

type EnvironmentalVariable
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  versions(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion] @join__field(graph: BASS)
  activeVersion(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersionAggregateResult @join__field(graph: BASS)
}

type EnvironmentalVariableAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
}

input EnvironmentalVariableFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [EnvironmentalVariableHasFilter]
  and: [EnvironmentalVariableFilter]
  or: [EnvironmentalVariableFilter]
  not: EnvironmentalVariableFilter
}

enum EnvironmentalVariableHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
}

input EnvironmentalVariableOrder
  @join__type(graph: BASS)
{
  asc: EnvironmentalVariableOrderable
  desc: EnvironmentalVariableOrderable
  then: EnvironmentalVariableOrder
}

enum EnvironmentalVariableOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
}

input EnvironmentalVariablePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versions: [EnvironmentalVariableVersionRef]
  activeVersion: EnvironmentalVariableVersionRef
  nextVersion: String
  id: String
}

input EnvironmentalVariableRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versions: [EnvironmentalVariableVersionRef]
  activeVersion: EnvironmentalVariableVersionRef
  nextVersion: String
  id: String
}

type EnvironmentalVariableVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  environmentalVariable(filter: EnvironmentalVariableFilter): EnvironmentalVariable! @join__field(graph: BASS)
  isActiveVersionOf(filter: EnvironmentalVariableFilter): EnvironmentalVariable @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  value: String! @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
}

type EnvironmentalVariableVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  idMin: String
  idMax: String
  valueMin: String
  valueMax: String
}

input EnvironmentalVariableVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [EnvironmentalVariableVersionHasFilter]
  and: [EnvironmentalVariableVersionFilter]
  or: [EnvironmentalVariableVersionFilter]
  not: EnvironmentalVariableVersionFilter
}

enum EnvironmentalVariableVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  environmentalVariable @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input EnvironmentalVariableVersionOrder
  @join__type(graph: BASS)
{
  asc: EnvironmentalVariableVersionOrderable
  desc: EnvironmentalVariableVersionOrderable
  then: EnvironmentalVariableVersionOrder
}

enum EnvironmentalVariableVersionOrderable
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input EnvironmentalVariableVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  environmentalVariable: EnvironmentalVariableRef
  isActiveVersionOf: EnvironmentalVariableRef
  id: String
  value: String
}

input EnvironmentalVariableVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  environmentalVariable: EnvironmentalVariableRef
  isActiveVersionOf: EnvironmentalVariableRef
  id: String
  value: String
}

type Equipment
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @join__field(graph: BASS)
  activeVersion(filter: EquipmentVersionFilter): EquipmentVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  isMadeUpOf(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @join__field(graph: BASS)
  isPartOf(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @join__field(graph: BASS)
  equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping] @join__field(graph: BASS)
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @join__field(graph: BASS)
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: BASS)
  equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @join__field(graph: BASS)
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @join__field(graph: BASS)
  materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: BASS)
  materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @join__field(graph: BASS)
  uiSortIndex: Int @join__field(graph: BASS)
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult @join__field(graph: BASS)
  isMadeUpOfAggregate(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: BASS)
  equipmentAssetMappingAggregate(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult @join__field(graph: BASS)
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: BASS)
  equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult @join__field(graph: BASS)
  equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
  stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult @join__field(graph: BASS)
  materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: BASS)
  materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult @join__field(graph: BASS)
  eventsAggregate(filter: EventFilter): EventAggregateResult @join__field(graph: BASS)
}

type EquipmentActual
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  equipmentUse: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  segmentResponse(filter: SegmentResponseFilter): SegmentResponse
  children(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
  parent(filter: EquipmentActualFilter): EquipmentActual
  properties(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass
  equipment(filter: EquipmentFilter): Equipment
  equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion
  jobResponse(filter: JobResponseFilter): JobResponse
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
  propertiesAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type EquipmentActualAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  equipmentUseMin: String
  equipmentUseMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input EquipmentActualFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  equipmentUse: StringExactFilter_StringFullTextFilter
  has: [EquipmentActualHasFilter]
  and: [EquipmentActualFilter]
  or: [EquipmentActualFilter]
  not: EquipmentActualFilter
}

enum EquipmentActualHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  equipmentUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  segmentResponse @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  equipmentClass @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  equipmentVersion @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input EquipmentActualOrder
  @join__type(graph: BASS)
{
  asc: EquipmentActualOrderable
  desc: EquipmentActualOrderable
  then: EquipmentActualOrder
}

enum EquipmentActualOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  equipmentUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input EquipmentActualPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [EquipmentActualRef]
  parent: EquipmentActualRef
  properties: [EquipmentActualPropertyRef]
  testResults: [TestResultRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  equipmentVersion: EquipmentVersionRef
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type EquipmentActualProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  equipmentActual(filter: EquipmentActualFilter): EquipmentActual!
  children(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
  parent(filter: EquipmentActualPropertyFilter): EquipmentActualProperty
  equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty
  equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
}

type EquipmentActualPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
  useMin: String
  useMax: String
}

input EquipmentActualPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [EquipmentActualPropertyHasFilter]
  and: [EquipmentActualPropertyFilter]
  or: [EquipmentActualPropertyFilter]
  not: EquipmentActualPropertyFilter
}

enum EquipmentActualPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  equipmentClassProperty @join__enumValue(graph: BASS)
  equipmentProperty @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
}

input EquipmentActualPropertyOrder
  @join__type(graph: BASS)
{
  asc: EquipmentActualPropertyOrderable
  desc: EquipmentActualPropertyOrderable
  then: EquipmentActualPropertyOrder
}

enum EquipmentActualPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
}

input EquipmentActualPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentActual: EquipmentActualRef
  children: [EquipmentActualPropertyRef]
  parent: EquipmentActualPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

input EquipmentActualPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentActual: EquipmentActualRef
  children: [EquipmentActualPropertyRef]
  parent: EquipmentActualPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

input EquipmentActualRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [EquipmentActualRef]
  parent: EquipmentActualRef
  properties: [EquipmentActualPropertyRef]
  testResults: [TestResultRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  equipmentVersion: EquipmentVersionRef
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type EquipmentAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  uiSortIndexMin: Int
  uiSortIndexMax: Int
  uiSortIndexSum: Int
  uiSortIndexAvg: Float
}

type EquipmentAssetMapping
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  startTime: DateTime
  endTime: DateTime
  equipment(filter: EquipmentFilter): Equipment!
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type EquipmentAssetMappingAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  startTimeMin: DateTime
  startTimeMax: DateTime
  endTimeMin: DateTime
  endTimeMax: DateTime
}

input EquipmentAssetMappingFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [EquipmentAssetMappingHasFilter]
  and: [EquipmentAssetMappingFilter]
  or: [EquipmentAssetMappingFilter]
  not: EquipmentAssetMappingFilter
}

enum EquipmentAssetMappingHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  startTime @join__enumValue(graph: BASS)
  endTime @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
}

input EquipmentAssetMappingOrder
  @join__type(graph: BASS)
{
  asc: EquipmentAssetMappingOrderable
  desc: EquipmentAssetMappingOrderable
  then: EquipmentAssetMappingOrder
}

enum EquipmentAssetMappingOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  startTime @join__enumValue(graph: BASS)
  endTime @join__enumValue(graph: BASS)
}

input EquipmentAssetMappingPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  startTime: DateTime
  endTime: DateTime
  equipment: EquipmentRef
  physicalAsset: PhysicalAssetRef
}

input EquipmentAssetMappingRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  startTime: DateTime
  endTime: DateTime
  equipment: EquipmentRef
  physicalAsset: PhysicalAssetRef
}

type EquipmentClass
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @join__field(graph: BASS)
  activeVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  isIncludedIn(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @join__field(graph: BASS)
  isMadeUpOf(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: BASS)
  isPartOf(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: BASS)
  equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @join__field(graph: BASS)
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: BASS)
  equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @join__field(graph: BASS)
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  uiSortIndex: Int @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult @join__field(graph: BASS)
  isIncludedInAggregate(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult @join__field(graph: BASS)
  isMadeUpOfAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: BASS)
  equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult @join__field(graph: BASS)
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: BASS)
  equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult @join__field(graph: BASS)
  equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
}

type EquipmentClassAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  uiSortIndexMin: Int
  uiSortIndexMax: Int
  uiSortIndexSum: Int
  uiSortIndexAvg: Float
}

input EquipmentClassFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [EquipmentClassHasFilter]
  and: [EquipmentClassFilter]
  or: [EquipmentClassFilter]
  not: EquipmentClassFilter
}

enum EquipmentClassHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isIncludedIn @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  equipmentVersions @join__enumValue(graph: BASS)
  equipmentSpecifications @join__enumValue(graph: BASS)
  equipmentRequirements @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

input EquipmentClassOrder
  @join__type(graph: BASS)
{
  asc: EquipmentClassOrderable
  desc: EquipmentClassOrderable
  then: EquipmentClassOrder
}

enum EquipmentClassOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

input EquipmentClassPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [EquipmentClassVersionRef]
  activeVersion: EquipmentClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [EquipmentClassVersionRef]
  isMadeUpOf: [EquipmentClassRef]
  isPartOf: [EquipmentClassRef]
  equipmentVersions: [EquipmentVersionRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  equipmentRequirements: [EquipmentRequirementRef]
  equipmentActual: [EquipmentActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  uiSortIndex: Int
}

type EquipmentClassProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  propertyType: Isa95PropertyType! @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  bindingType: PropertyBindingType @join__field(graph: BASS)
  equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion! @join__field(graph: BASS)
  children(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @join__field(graph: BASS)
  parent(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @join__field(graph: BASS)
  equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  equipmentRequirementProperties(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @join__field(graph: BASS)
  equipmentSpecificationProperties(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @join__field(graph: BASS)
  equipmentActualProperties(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @join__field(graph: BASS)
  triggersRules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  equipmentRequirementPropertiesAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult @join__field(graph: BASS)
  equipmentSpecificationPropertiesAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult @join__field(graph: BASS)
  equipmentActualPropertiesAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult @join__field(graph: BASS)
  triggersRulesAggregate(filter: RuleFilter): RuleAggregateResult @join__field(graph: BASS)
}

type EquipmentClassPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input EquipmentClassPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  bindingType: PropertyBindingType_hash
  has: [EquipmentClassPropertyHasFilter]
  and: [EquipmentClassPropertyFilter]
  or: [EquipmentClassPropertyFilter]
  not: EquipmentClassPropertyFilter
}

enum EquipmentClassPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  propertyType @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  bindingType @join__enumValue(graph: BASS)
  equipmentClassVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  equipmentProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  equipmentRequirementProperties @join__enumValue(graph: BASS)
  equipmentSpecificationProperties @join__enumValue(graph: BASS)
  equipmentActualProperties @join__enumValue(graph: BASS)
  triggersRules @join__enumValue(graph: BASS)
}

input EquipmentClassPropertyOrder
  @join__type(graph: BASS)
{
  asc: EquipmentClassPropertyOrderable
  desc: EquipmentClassPropertyOrderable
  then: EquipmentClassPropertyOrder
}

enum EquipmentClassPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input EquipmentClassPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  bindingType: PropertyBindingType
  equipmentClassVersion: EquipmentClassVersionRef
  children: [EquipmentClassPropertyRef]
  parent: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
  equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
  equipmentActualProperties: [EquipmentActualPropertyRef]
  triggersRules: [RuleRef]
}

input EquipmentClassPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  bindingType: PropertyBindingType
  equipmentClassVersion: EquipmentClassVersionRef
  children: [EquipmentClassPropertyRef]
  parent: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
  equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
  equipmentActualProperties: [EquipmentActualPropertyRef]
  triggersRules: [RuleRef]
}

input EquipmentClassRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [EquipmentClassVersionRef]
  activeVersion: EquipmentClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [EquipmentClassVersionRef]
  isMadeUpOf: [EquipmentClassRef]
  isPartOf: [EquipmentClassRef]
  equipmentVersions: [EquipmentVersionRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  equipmentRequirements: [EquipmentRequirementRef]
  equipmentActual: [EquipmentActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  uiSortIndex: Int
}

type EquipmentClassVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass! @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  isActiveVersionOf(filter: EquipmentClassFilter): EquipmentClass @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  equipmentLevel: EquipmentElementLevel @join__field(graph: BASS)
  properties(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @join__field(graph: BASS)
  rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @join__field(graph: BASS)
  includesPropertiesOf(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: BASS)
  equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  image: String @join__field(graph: BASS)
  displayName: String @join__field(graph: BASS)
  uiMonochromeIcon: String @join__field(graph: BASS)
  uiMonochromeIconColour: String @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult @join__field(graph: BASS)
  rulesAggregate(filter: RuleFilter): RuleAggregateResult @join__field(graph: BASS)
  includesPropertiesOfAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: BASS)
  equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
}

type EquipmentClassVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  imageMin: String
  imageMax: String
  displayNameMin: String
  displayNameMax: String
  uiMonochromeIconMin: String
  uiMonochromeIconMax: String
  uiMonochromeIconColourMin: String
  uiMonochromeIconColourMax: String
}

input EquipmentClassVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  displayName: StringHashFilter
  has: [EquipmentClassVersionHasFilter]
  and: [EquipmentClassVersionFilter]
  or: [EquipmentClassVersionFilter]
  not: EquipmentClassVersionFilter
}

enum EquipmentClassVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  equipmentClass @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  equipmentLevel @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  rules @join__enumValue(graph: BASS)
  includesPropertiesOf @join__enumValue(graph: BASS)
  equipmentVersions @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
  image @join__enumValue(graph: BASS)
  displayName @join__enumValue(graph: BASS)
  uiMonochromeIcon @join__enumValue(graph: BASS)
  uiMonochromeIconColour @join__enumValue(graph: BASS)
}

input EquipmentClassVersionOrder
  @join__type(graph: BASS)
{
  asc: EquipmentClassVersionOrderable
  desc: EquipmentClassVersionOrderable
  then: EquipmentClassVersionOrder
}

enum EquipmentClassVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  image @join__enumValue(graph: BASS)
  displayName @join__enumValue(graph: BASS)
  uiMonochromeIcon @join__enumValue(graph: BASS)
  uiMonochromeIconColour @join__enumValue(graph: BASS)
}

input EquipmentClassVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  equipmentClass: EquipmentClassRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: EquipmentClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  equipmentLevel: EquipmentElementLevel
  properties: [EquipmentClassPropertyRef]
  rules: [RuleRef]
  includesPropertiesOf: [EquipmentClassRef]
  equipmentVersions: [EquipmentVersionRef]
  stateModels: [StateModelDefinitionRef]
  image: String
  displayName: String
  uiMonochromeIcon: String
  uiMonochromeIconColour: String
}

input EquipmentClassVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  equipmentClass: EquipmentClassRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: EquipmentClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  equipmentLevel: EquipmentElementLevel
  properties: [EquipmentClassPropertyRef]
  rules: [RuleRef]
  includesPropertiesOf: [EquipmentClassRef]
  equipmentVersions: [EquipmentVersionRef]
  stateModels: [StateModelDefinitionRef]
  image: String
  displayName: String
  uiMonochromeIcon: String
  uiMonochromeIconColour: String
}

type EquipmentDataSource
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion @deprecated(reason: "EquipmentDataSource should link to a DataSource rather tha")
  dataSource(filter: DataSourceFilter): DataSource
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type EquipmentDataSourceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  topicTemplateMin: String
  topicTemplateMax: String
}

input EquipmentDataSourceFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  has: [EquipmentDataSourceHasFilter]
  and: [EquipmentDataSourceFilter]
  or: [EquipmentDataSourceFilter]
  not: EquipmentDataSourceFilter
}

enum EquipmentDataSourceHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  equipmentVersion @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  topicTemplate @join__enumValue(graph: BASS)
  dataSourceVersion @join__enumValue(graph: BASS)
  dataSource @join__enumValue(graph: BASS)
}

input EquipmentDataSourceOrder
  @join__type(graph: BASS)
{
  asc: EquipmentDataSourceOrderable
  desc: EquipmentDataSourceOrderable
  then: EquipmentDataSourceOrder
}

enum EquipmentDataSourceOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  topicTemplate @join__enumValue(graph: BASS)
}

input EquipmentDataSourcePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  equipmentVersion: EquipmentVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion: DataSourceVersionRef
  dataSource: DataSourceRef
}

input EquipmentDataSourceRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  equipmentVersion: EquipmentVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion: DataSourceVersionRef
  dataSource: DataSourceRef
}

enum EquipmentElementLevel
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  Enterprise @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  Site @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  Area @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  ProcessCell @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  Unit @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  ProductionLine @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  WorkCell @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  ProductionUnit @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  Warehouse @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  StorageZone @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  StorageUnit @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  WorkCenter @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  WorkUnit @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  EquipmentModule @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  ControlModule @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  Other @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input EquipmentFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [EquipmentHasFilter]
  and: [EquipmentFilter]
  or: [EquipmentFilter]
  not: EquipmentFilter
}

enum EquipmentHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  equipmentAssetMapping @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  equipmentSpecifications @join__enumValue(graph: BASS)
  equipmentRequirements @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  stateModelInstances @join__enumValue(graph: BASS)
  materialSubLots @join__enumValue(graph: BASS)
  materialLots @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
}

type EquipmentInheritedProperty
  @join__type(graph: CORE)
{
  id: String!
  label: String!
  description: String
  bindingType: PropertyBindingType
  valueUnitOfMeasure: UnitOfMeasure

  """
  If it is overridden, value comes from propertyOverride, otherwise it comes from equipmentClassProperty.
  """
  value: String

  """ Whether this property is overridden. """
  overridden: Boolean

  """ From propertyOverride, if it is overridden. """
  ignore: Boolean

  """ From propertyOverride, if it is overridden. """
  address: String

  """ From propertyOverride, if it is overridden. """
  expression: String

  """ From propertyOverride, if it is overridden. """
  storeHistory: Boolean

  """ From PropertyNameAlias. """
  propertyNameAliasExpression: String

  """ From PropertyNameAlias. """
  propertyNameAliasDataSource: DataSource

  """ From PropertyNameAlias. """
  propertyNameAliasDataSourceTopicLabel: String

  """
  This field is populated from propertyNameAliasDataSource.activeVersion.topics which label match with
  propertyNameAliasDataSourceTopicLabel
  """
  propertyNameAliasDataSourceTopic: DataSourceTopic

  """
  The associated EquipmentClassProperty that this inherited property comes from.
  If includeInstanceProperties is true, then this inherited property may actually be an equipment's property, in this
  case the equipmentClassProperty would be empty and the equipmentProperty would not be empty.
  """
  equipmentClassProperty: EquipmentClassProperty

  """
  The associated EquipmentProperty that this inherited property comes from.
  If includeInstanceProperties is false or if this inherited property is actually an equipment class' property, then
  the equipmentProperty would be empty.
  """
  equipmentProperty: EquipmentProperty

  """ The associated EquipmentPropertyOverride if this property is overridden 
  """
  propertyOverride: EquipmentPropertyOverride

  """ Inverse relation """
  equipmentVersion: EquipmentVersion!
}

input EquipmentInheritedPropertyFilter
  @join__type(graph: CORE)
{
  and: [EquipmentInheritedPropertyFilter]
  bindingType: Input_PropertyBindingType_hash
  description: Input_StringExactFilter_StringFullTextFilter
  effectiveEnd: DateTimeFilter
  effectiveStart: DateTimeFilter
  has: [EquipmentInheritedPropertyHasFilter]
  id: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  iid: [ID!]
  label: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  not: EquipmentInheritedPropertyFilter
  or: [EquipmentInheritedPropertyFilter]
  value: Input_StringExactFilter_StringFullTextFilter
}

enum EquipmentInheritedPropertyHasFilter
  @join__type(graph: CORE)
{
  bindingType @join__enumValue(graph: CORE)
  children @join__enumValue(graph: CORE)
  correspondsTo @join__enumValue(graph: CORE)
  description @join__enumValue(graph: CORE)
  effectiveEnd @join__enumValue(graph: CORE)
  effectiveStart @join__enumValue(graph: CORE)
  equipmentActualProperties @join__enumValue(graph: CORE)
  equipmentRequirementProperties @join__enumValue(graph: CORE)
  equipmentSpecificationProperties @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  label @join__enumValue(graph: CORE)
  parent @join__enumValue(graph: CORE)
  recordsMeasurementOf @join__enumValue(graph: CORE)
  value @join__enumValue(graph: CORE)
  valueUnitOfMeasure @join__enumValue(graph: CORE)
}

input EquipmentInheritedPropertyOptions
  @join__type(graph: CORE)
{
  withOverrides: Boolean
  includeInstanceProperties: Boolean
  inheritedPropertyFilter: EquipmentInheritedPropertyFilter
}

type EquipmentNameAlias
  @join__type(graph: BASS)
{
  iid: ID!
  equipment(filter: EquipmentFilter): Equipment!
  alias: String!
  system: String!
}

type EquipmentNameAliasAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  aliasMin: String
  aliasMax: String
  systemMin: String
  systemMax: String
}

input EquipmentNameAliasFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  alias: StringFullTextFilter
  system: StringFullTextFilter
  has: [EquipmentNameAliasHasFilter]
  and: [EquipmentNameAliasFilter]
  or: [EquipmentNameAliasFilter]
  not: EquipmentNameAliasFilter
}

enum EquipmentNameAliasHasFilter
  @join__type(graph: BASS)
{
  equipment @join__enumValue(graph: BASS)
  alias @join__enumValue(graph: BASS)
  system @join__enumValue(graph: BASS)
}

input EquipmentNameAliasOrder
  @join__type(graph: BASS)
{
  asc: EquipmentNameAliasOrderable
  desc: EquipmentNameAliasOrderable
  then: EquipmentNameAliasOrder
}

enum EquipmentNameAliasOrderable
  @join__type(graph: BASS)
{
  alias @join__enumValue(graph: BASS)
  system @join__enumValue(graph: BASS)
}

input EquipmentNameAliasPatch
  @join__type(graph: BASS)
{
  equipment: EquipmentRef
  alias: String
  system: String
}

input EquipmentNameAliasRef
  @join__type(graph: BASS)
{
  iid: ID
  equipment: EquipmentRef
  alias: String
  system: String
}

input EquipmentOrder
  @join__type(graph: BASS)
{
  asc: EquipmentOrderable
  desc: EquipmentOrderable
  then: EquipmentOrder
}

enum EquipmentOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

input EquipmentPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [EquipmentVersionRef]
  activeVersion: EquipmentVersionRef
  nextVersion: String
  id: String
  label: String
  isMadeUpOf: [EquipmentRef]
  isPartOf: [EquipmentRef]
  equipmentAssetMapping: [EquipmentAssetMappingRef]
  physicalAsset: PhysicalAssetRef
  equipmentSpecifications: [EquipmentSpecificationRef]
  equipmentRequirements: [EquipmentRequirementRef]
  equipmentActual: [EquipmentActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
  materialSubLots: [MaterialSubLotRef]
  materialLots: [MaterialLotRef]
  uiSortIndex: Int
  events: [EventRef]
}

type EquipmentProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  bindingType: PropertyBindingType @join__field(graph: BASS)
  valueSetPoint: String @join__field(graph: BASS)
  valueUpperSpecLimit: Float @join__field(graph: BASS)
  valueLowerSpecLimit: Float @join__field(graph: BASS)
  valueUpperControlLimit: Float @join__field(graph: BASS)
  valueLowerControlLimit: Float @join__field(graph: BASS)
  equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion! @join__field(graph: BASS)
  children(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty] @join__field(graph: BASS)
  parent(filter: EquipmentPropertyFilter): EquipmentProperty @join__field(graph: BASS)
  equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  equipmentSpecificationProperties(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @join__field(graph: BASS)
  equipmentRequirementProperties(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @join__field(graph: BASS)
  equipmentActualProperties(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  equipmentSpecificationPropertiesAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult @join__field(graph: BASS)
  equipmentRequirementPropertiesAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult @join__field(graph: BASS)
  equipmentActualPropertiesAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult @join__field(graph: BASS)
}

type EquipmentPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  valueSetPointMin: String
  valueSetPointMax: String
  valueUpperSpecLimitMin: Float
  valueUpperSpecLimitMax: Float
  valueUpperSpecLimitSum: Float
  valueUpperSpecLimitAvg: Float
  valueLowerSpecLimitMin: Float
  valueLowerSpecLimitMax: Float
  valueLowerSpecLimitSum: Float
  valueLowerSpecLimitAvg: Float
  valueUpperControlLimitMin: Float
  valueUpperControlLimitMax: Float
  valueUpperControlLimitSum: Float
  valueUpperControlLimitAvg: Float
  valueLowerControlLimitMin: Float
  valueLowerControlLimitMax: Float
  valueLowerControlLimitSum: Float
  valueLowerControlLimitAvg: Float
}

input EquipmentPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  bindingType: PropertyBindingType_hash
  has: [EquipmentPropertyHasFilter]
  and: [EquipmentPropertyFilter]
  or: [EquipmentPropertyFilter]
  not: EquipmentPropertyFilter
}

enum EquipmentPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  bindingType @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
  equipmentVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  equipmentClassProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  equipmentSpecificationProperties @join__enumValue(graph: BASS)
  equipmentRequirementProperties @join__enumValue(graph: BASS)
  equipmentActualProperties @join__enumValue(graph: BASS)
}

input EquipmentPropertyOrder
  @join__type(graph: BASS)
{
  asc: EquipmentPropertyOrderable
  desc: EquipmentPropertyOrderable
  then: EquipmentPropertyOrder
}

enum EquipmentPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
}

type EquipmentPropertyOverride
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  equipmentVersions(filter: EquipmentVersionFilter): EquipmentVersion! @join__field(graph: BASS)
  propertyLabel: String! @join__field(graph: BASS)
  address: String @join__field(graph: BASS)
  expression: String @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  storeHistory: Boolean @join__field(graph: BASS)
  ignore: Boolean @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
}

type EquipmentPropertyOverrideAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  propertyLabelMin: String
  propertyLabelMax: String
  addressMin: String
  addressMax: String
  expressionMin: String
  expressionMax: String
  valueMin: String
  valueMax: String
}

input EquipmentPropertyOverrideFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  propertyLabel: StringExactFilter_StringFullTextFilter
  ignore: Boolean
  has: [EquipmentPropertyOverrideHasFilter]
  and: [EquipmentPropertyOverrideFilter]
  or: [EquipmentPropertyOverrideFilter]
  not: EquipmentPropertyOverrideFilter
}

enum EquipmentPropertyOverrideHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  equipmentVersions @join__enumValue(graph: BASS)
  propertyLabel @join__enumValue(graph: BASS)
  address @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  storeHistory @join__enumValue(graph: BASS)
  ignore @join__enumValue(graph: BASS)
}

input EquipmentPropertyOverrideOrder
  @join__type(graph: BASS)
{
  asc: EquipmentPropertyOverrideOrderable
  desc: EquipmentPropertyOverrideOrderable
  then: EquipmentPropertyOverrideOrder
}

enum EquipmentPropertyOverrideOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  propertyLabel @join__enumValue(graph: BASS)
  address @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input EquipmentPropertyOverridePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  equipmentVersions: EquipmentVersionRef
  propertyLabel: String
  address: String
  expression: String
  value: String
  storeHistory: Boolean
  ignore: Boolean
}

input EquipmentPropertyOverrideRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  equipmentVersions: EquipmentVersionRef
  propertyLabel: String
  address: String
  expression: String
  value: String
  storeHistory: Boolean
  ignore: Boolean
}

input EquipmentPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  bindingType: PropertyBindingType
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  equipmentVersion: EquipmentVersionRef
  children: [EquipmentPropertyRef]
  parent: EquipmentPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
  equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
  equipmentActualProperties: [EquipmentActualPropertyRef]
}

input EquipmentPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  bindingType: PropertyBindingType
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  equipmentVersion: EquipmentVersionRef
  children: [EquipmentPropertyRef]
  parent: EquipmentPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
  equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
  equipmentActualProperties: [EquipmentActualPropertyRef]
}

input EquipmentRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [EquipmentVersionRef]
  activeVersion: EquipmentVersionRef
  nextVersion: String
  id: String
  label: String
  isMadeUpOf: [EquipmentRef]
  isPartOf: [EquipmentRef]
  equipmentAssetMapping: [EquipmentAssetMappingRef]
  physicalAsset: PhysicalAssetRef
  equipmentSpecifications: [EquipmentSpecificationRef]
  equipmentRequirements: [EquipmentRequirementRef]
  equipmentActual: [EquipmentActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
  materialSubLots: [MaterialSubLotRef]
  materialLots: [MaterialLotRef]
  uiSortIndex: Int
  events: [EventRef]
}

type EquipmentRequirement
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  equipmentLevel: EquipmentElementLevel
  segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement
  children(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
  parent(filter: EquipmentRequirementFilter): EquipmentRequirement
  properties(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass
  equipment(filter: EquipmentFilter): Equipment
  jobOrder(filter: JobOrderFilter): JobOrder
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
  propertiesAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type EquipmentRequirementAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  useMin: String
  useMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input EquipmentRequirementFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [EquipmentRequirementHasFilter]
  and: [EquipmentRequirementFilter]
  or: [EquipmentRequirementFilter]
  not: EquipmentRequirementFilter
}

enum EquipmentRequirementHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  equipmentLevel @join__enumValue(graph: BASS)
  segmentRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  equipmentClass @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input EquipmentRequirementOrder
  @join__type(graph: BASS)
{
  asc: EquipmentRequirementOrderable
  desc: EquipmentRequirementOrderable
  then: EquipmentRequirementOrder
}

enum EquipmentRequirementOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input EquipmentRequirementPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentLevel: EquipmentElementLevel
  segmentRequirement: SegmentRequirementRef
  children: [EquipmentRequirementRef]
  parent: EquipmentRequirementRef
  properties: [EquipmentRequirementPropertyRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type EquipmentRequirementProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement!
  children(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
  parent(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementProperty
  equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty
  equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
}

type EquipmentRequirementPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input EquipmentRequirementPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [EquipmentRequirementPropertyHasFilter]
  and: [EquipmentRequirementPropertyFilter]
  or: [EquipmentRequirementPropertyFilter]
  not: EquipmentRequirementPropertyFilter
}

enum EquipmentRequirementPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  equipmentRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  equipmentClassProperty @join__enumValue(graph: BASS)
  equipmentProperty @join__enumValue(graph: BASS)
}

input EquipmentRequirementPropertyOrder
  @join__type(graph: BASS)
{
  asc: EquipmentRequirementPropertyOrderable
  desc: EquipmentRequirementPropertyOrderable
  then: EquipmentRequirementPropertyOrder
}

enum EquipmentRequirementPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input EquipmentRequirementPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentRequirement: EquipmentRequirementRef
  children: [EquipmentRequirementPropertyRef]
  parent: EquipmentRequirementPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
}

input EquipmentRequirementPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentRequirement: EquipmentRequirementRef
  children: [EquipmentRequirementPropertyRef]
  parent: EquipmentRequirementPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
}

input EquipmentRequirementRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentLevel: EquipmentElementLevel
  segmentRequirement: SegmentRequirementRef
  children: [EquipmentRequirementRef]
  parent: EquipmentRequirementRef
  properties: [EquipmentRequirementPropertyRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type EquipmentSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  equipmentUse: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion
  children(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  parent(filter: EquipmentSpecificationFilter): EquipmentSpecification
  properties(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass
  equipment(filter: EquipmentFilter): Equipment
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
  propertiesAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type EquipmentSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  equipmentUseMin: String
  equipmentUseMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input EquipmentSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [EquipmentSpecificationHasFilter]
  and: [EquipmentSpecificationFilter]
  or: [EquipmentSpecificationFilter]
  not: EquipmentSpecificationFilter
}

enum EquipmentSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  equipmentUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  processSegmentVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  equipmentClass @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
}

input EquipmentSpecificationOrder
  @join__type(graph: BASS)
{
  asc: EquipmentSpecificationOrderable
  desc: EquipmentSpecificationOrderable
  then: EquipmentSpecificationOrder
}

enum EquipmentSpecificationOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  equipmentUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input EquipmentSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [EquipmentSpecificationRef]
  parent: EquipmentSpecificationRef
  properties: [EquipmentSpecificationPropertyRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type EquipmentSpecificationProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  children(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
  parent(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationProperty
  equipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecification!
  equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty
  equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
}

type EquipmentSpecificationPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input EquipmentSpecificationPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [EquipmentSpecificationPropertyHasFilter]
  and: [EquipmentSpecificationPropertyFilter]
  or: [EquipmentSpecificationPropertyFilter]
  not: EquipmentSpecificationPropertyFilter
}

enum EquipmentSpecificationPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  equipmentSpecification @join__enumValue(graph: BASS)
  equipmentClassProperty @join__enumValue(graph: BASS)
  equipmentProperty @join__enumValue(graph: BASS)
}

input EquipmentSpecificationPropertyOrder
  @join__type(graph: BASS)
{
  asc: EquipmentSpecificationPropertyOrderable
  desc: EquipmentSpecificationPropertyOrderable
  then: EquipmentSpecificationPropertyOrder
}

enum EquipmentSpecificationPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input EquipmentSpecificationPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [EquipmentSpecificationPropertyRef]
  parent: EquipmentSpecificationPropertyRef
  equipmentSpecification: EquipmentSpecificationRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
}

input EquipmentSpecificationPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [EquipmentSpecificationPropertyRef]
  parent: EquipmentSpecificationPropertyRef
  equipmentSpecification: EquipmentSpecificationRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
}

input EquipmentSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [EquipmentSpecificationRef]
  parent: EquipmentSpecificationRef
  properties: [EquipmentSpecificationPropertyRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type EquipmentVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  equipment(filter: EquipmentFilter): Equipment! @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  isActiveVersionOf(filter: EquipmentFilter): Equipment @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition @join__field(graph: BASS)
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation @join__field(graph: BASS)
  equipmentLevel: EquipmentElementLevel @join__field(graph: BASS)
  displayName: String @join__field(graph: BASS)
  timeZoneName: String @join__field(graph: BASS)
  equipmentClasses(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: BASS)
  equipmentClassVersions(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @join__field(graph: BASS)
  properties(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty] @join__field(graph: BASS)
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @join__field(graph: BASS)
  propertyOverrides(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @join__field(graph: BASS)
  propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: BASS)
  workCalendar(filter: WorkCalendarFilter): WorkCalendar @join__field(graph: BASS)
  dataSources(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  equipmentClassesAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: BASS)
  equipmentClassVersionsAggregate(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult @join__field(graph: BASS)
  equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult @join__field(graph: BASS)
  propertyOverridesAggregate(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult @join__field(graph: BASS)
  propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: BASS)
  dataSourcesAggregate(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
  inheritedProperties(options: EquipmentInheritedPropertyOptions): [EquipmentInheritedProperty] @join__field(graph: CORE)
  inheritedRules: [Rule] @join__field(graph: CORE)
}

type EquipmentVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  displayNameMin: String
  displayNameMax: String
  timeZoneNameMin: String
  timeZoneNameMax: String
}

input EquipmentVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  displayName: StringHashFilter
  has: [EquipmentVersionHasFilter]
  and: [EquipmentVersionFilter]
  or: [EquipmentVersionFilter]
  not: EquipmentVersionFilter
}

enum EquipmentVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  equipmentLevel @join__enumValue(graph: BASS)
  displayName @join__enumValue(graph: BASS)
  timeZoneName @join__enumValue(graph: BASS)
  equipmentClasses @join__enumValue(graph: BASS)
  equipmentClassVersions @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  propertyOverrides @join__enumValue(graph: BASS)
  propertyNameAliases @join__enumValue(graph: BASS)
  workCalendar @join__enumValue(graph: BASS)
  dataSources @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
}

input EquipmentVersionOrder
  @join__type(graph: BASS)
{
  asc: EquipmentVersionOrderable
  desc: EquipmentVersionOrderable
  then: EquipmentVersionOrder
}

enum EquipmentVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  displayName @join__enumValue(graph: BASS)
  timeZoneName @join__enumValue(graph: BASS)
}

input EquipmentVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  equipment: EquipmentRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: EquipmentRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentLevel: EquipmentElementLevel
  displayName: String
  timeZoneName: String
  equipmentClasses: [EquipmentClassRef]
  equipmentClassVersions: [EquipmentClassVersionRef]
  properties: [EquipmentPropertyRef]
  equipmentActual: [EquipmentActualRef]
  propertyOverrides: [EquipmentPropertyOverrideRef]
  propertyNameAliases: [PropertyNameAliasRef]
  workCalendar: WorkCalendarRef
  dataSources: [EquipmentDataSourceRef]
  stateModels: [StateModelDefinitionRef]
}

input EquipmentVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  equipment: EquipmentRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: EquipmentRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  equipmentLevel: EquipmentElementLevel
  displayName: String
  timeZoneName: String
  equipmentClasses: [EquipmentClassRef]
  equipmentClassVersions: [EquipmentClassVersionRef]
  properties: [EquipmentPropertyRef]
  equipmentActual: [EquipmentActualRef]
  propertyOverrides: [EquipmentPropertyOverrideRef]
  propertyNameAliases: [PropertyNameAliasRef]
  workCalendar: WorkCalendarRef
  dataSources: [EquipmentDataSourceRef]
  stateModels: [StateModelDefinitionRef]
}

type EvaluatedProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  testSpecification(filter: TestSpecificationFilter): TestSpecification!
  criteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
  personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
  personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
  equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
  equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
  materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
  materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
  criteriaAggregate(filter: TestSpecificationCriteriaFilter): TestSpecificationCriteriaAggregateResult
  personnelClassPropertyAggregate(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult
  personPropertyAggregate(filter: PersonPropertyFilter): PersonPropertyAggregateResult
  equipmentClassPropertyAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult
  equipmentPropertyAggregate(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult
  physicalAssetClassPropertyAggregate(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult
  physicalAssetPropertyAggregate(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult
  materialClassPropertyAggregate(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult
  materialDefinitionPropertyAggregate(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult
  materialLotPropertyAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
}

type EvaluatedPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
}

input EvaluatedPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  has: [EvaluatedPropertyHasFilter]
  and: [EvaluatedPropertyFilter]
  or: [EvaluatedPropertyFilter]
  not: EvaluatedPropertyFilter
}

enum EvaluatedPropertyHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  testSpecification @join__enumValue(graph: BASS)
  criteria @join__enumValue(graph: BASS)
  personnelClassProperty @join__enumValue(graph: BASS)
  personProperty @join__enumValue(graph: BASS)
  equipmentClassProperty @join__enumValue(graph: BASS)
  equipmentProperty @join__enumValue(graph: BASS)
  physicalAssetClassProperty @join__enumValue(graph: BASS)
  physicalAssetProperty @join__enumValue(graph: BASS)
  materialClassProperty @join__enumValue(graph: BASS)
  materialDefinitionProperty @join__enumValue(graph: BASS)
  materialLotProperty @join__enumValue(graph: BASS)
}

input EvaluatedPropertyOrder
  @join__type(graph: BASS)
{
  asc: EvaluatedPropertyOrderable
  desc: EvaluatedPropertyOrderable
  then: EvaluatedPropertyOrder
}

enum EvaluatedPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input EvaluatedPropertyPatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testSpecification: TestSpecificationRef
  criteria: [TestSpecificationCriteriaRef]
  personnelClassProperty: [PersonnelClassPropertyRef]
  personProperty: [PersonPropertyRef]
  equipmentClassProperty: [EquipmentClassPropertyRef]
  equipmentProperty: [EquipmentPropertyRef]
  physicalAssetClassProperty: [PhysicalAssetClassPropertyRef]
  physicalAssetProperty: [PhysicalAssetPropertyRef]
  materialClassProperty: [MaterialClassPropertyRef]
  materialDefinitionProperty: [MaterialDefinitionPropertyRef]
  materialLotProperty: [MaterialLotPropertyRef]
}

input EvaluatedPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testSpecification: TestSpecificationRef
  criteria: [TestSpecificationCriteriaRef]
  personnelClassProperty: [PersonnelClassPropertyRef]
  personProperty: [PersonPropertyRef]
  equipmentClassProperty: [EquipmentClassPropertyRef]
  equipmentProperty: [EquipmentPropertyRef]
  physicalAssetClassProperty: [PhysicalAssetClassPropertyRef]
  physicalAssetProperty: [PhysicalAssetPropertyRef]
  materialClassProperty: [MaterialClassPropertyRef]
  materialDefinitionProperty: [MaterialDefinitionPropertyRef]
  materialLotProperty: [MaterialLotPropertyRef]
}

type Event
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  value: String
  previousValue: String
  messageText: String
  personID: String
  computerID: String
  proceduralElementReference: String
  category: String
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  attribute: String
  eventProperties(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
  eventType(filter: EventTypeFilter): EventType
  equipment(filter: EquipmentFilter): Equipment
  person(filter: PersonFilter): Person
  materialLot(filter: MaterialLotFilter): MaterialLot
  materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  workResponse(filter: WorkResponseFilter): WorkResponse
  jobResponse(filter: JobResponseFilter): JobResponse
  jobResponseData(filter: JobResponseDataFilter): JobResponseData
  alarmEvents(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
  eventAssociationsFrom(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
  eventAssociationsTo(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  eventPropertiesAggregate(filter: EventPropertyFilter): EventPropertyAggregateResult
  alarmEventsAggregate(filter: AlarmEventFilter): AlarmEventAggregateResult
  eventAssociationsFromAggregate(filter: EventAssociationFilter): EventAssociationAggregateResult
  eventAssociationsToAggregate(filter: EventAssociationFilter): EventAssociationAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type EventAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  valueMin: String
  valueMax: String
  previousValueMin: String
  previousValueMax: String
  messageTextMin: String
  messageTextMax: String
  personIDMin: String
  personIDMax: String
  computerIDMin: String
  computerIDMax: String
  proceduralElementReferenceMin: String
  proceduralElementReferenceMax: String
  categoryMin: String
  categoryMax: String
  effectiveDateTimeMin: DateTime
  effectiveDateTimeMax: DateTime
  recordedDateTimeMin: DateTime
  recordedDateTimeMax: DateTime
  attributeMin: String
  attributeMax: String
}

type EventAssociation
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  version: String
  description: String
  from(filter: EventFilter): Event!
  to(filter: EventFilter): Event!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type EventAssociationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
}

input EventAssociationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [EventAssociationHasFilter]
  and: [EventAssociationFilter]
  or: [EventAssociationFilter]
  not: EventAssociationFilter
}

enum EventAssociationHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  from @join__enumValue(graph: BASS)
  to @join__enumValue(graph: BASS)
}

input EventAssociationOrder
  @join__type(graph: BASS)
{
  asc: EventAssociationOrderable
  desc: EventAssociationOrderable
  then: EventAssociationOrder
}

enum EventAssociationOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input EventAssociationPatch
  @join__type(graph: BASS)
{
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  description: String
  from: EventRef
  to: EventRef
}

input EventAssociationRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  description: String
  from: EventRef
  to: EventRef
}

input EventFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  messageText: StringHashFilter
  personID: StringHashFilter
  computerID: StringHashFilter
  proceduralElementReference: StringHashFilter
  category: StringHashFilter
  effectiveDateTime: DateTimeFilter
  recordedDateTime: DateTimeFilter
  attribute: StringHashFilter
  has: [EventHasFilter]
  and: [EventFilter]
  or: [EventFilter]
  not: EventFilter
}

enum EventHasFilter
  @join__type(graph: BASS)
{
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  previousValue @join__enumValue(graph: BASS)
  messageText @join__enumValue(graph: BASS)
  personID @join__enumValue(graph: BASS)
  computerID @join__enumValue(graph: BASS)
  proceduralElementReference @join__enumValue(graph: BASS)
  category @join__enumValue(graph: BASS)
  effectiveDateTime @join__enumValue(graph: BASS)
  recordedDateTime @join__enumValue(graph: BASS)
  attribute @join__enumValue(graph: BASS)
  eventProperties @join__enumValue(graph: BASS)
  eventType @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  materialLot @join__enumValue(graph: BASS)
  materialSubLot @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  workResponse @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  jobResponseData @join__enumValue(graph: BASS)
  alarmEvents @join__enumValue(graph: BASS)
  eventAssociationsFrom @join__enumValue(graph: BASS)
  eventAssociationsTo @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input EventOrder
  @join__type(graph: BASS)
{
  asc: EventOrderable
  desc: EventOrderable
  then: EventOrder
}

enum EventOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  previousValue @join__enumValue(graph: BASS)
  messageText @join__enumValue(graph: BASS)
  personID @join__enumValue(graph: BASS)
  computerID @join__enumValue(graph: BASS)
  proceduralElementReference @join__enumValue(graph: BASS)
  category @join__enumValue(graph: BASS)
  effectiveDateTime @join__enumValue(graph: BASS)
  recordedDateTime @join__enumValue(graph: BASS)
  attribute @join__enumValue(graph: BASS)
}

input EventPatch
  @join__type(graph: BASS)
{
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  value: String
  previousValue: String
  messageText: String
  personID: String
  computerID: String
  proceduralElementReference: String
  category: String
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  attribute: String
  eventProperties: [EventPropertyRef]
  eventType: EventTypeRef
  equipment: EquipmentRef
  person: PersonRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  physicalAsset: PhysicalAssetRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  alarmEvents: [AlarmEventRef]
  eventAssociationsFrom: [EventAssociationRef]
  eventAssociationsTo: [EventAssociationRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type EventProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  version: String
  description: String
  label: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  parent(filter: EventPropertyFilter): EventProperty
  children(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
  event(filter: EventFilter): Event
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: EventPropertyFilter): EventPropertyAggregateResult
}

type EventPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  labelMin: String
  labelMax: String
  valueMin: String
  valueMax: String
}

input EventPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  value: StringExactFilter_StringFullTextFilter
  has: [EventPropertyHasFilter]
  and: [EventPropertyFilter]
  or: [EventPropertyFilter]
  not: EventPropertyFilter
}

enum EventPropertyHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  event @join__enumValue(graph: BASS)
}

input EventPropertyOrder
  @join__type(graph: BASS)
{
  asc: EventPropertyOrderable
  desc: EventPropertyOrderable
  then: EventPropertyOrder
}

enum EventPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input EventPropertyPatch
  @join__type(graph: BASS)
{
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  description: String
  label: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  parent: EventPropertyRef
  children: [EventPropertyRef]
  event: EventRef
}

input EventPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  description: String
  label: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  parent: EventPropertyRef
  children: [EventPropertyRef]
  event: EventRef
}

input EventRef
  @join__type(graph: BASS)
{
  iid: ID
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  value: String
  previousValue: String
  messageText: String
  personID: String
  computerID: String
  proceduralElementReference: String
  category: String
  effectiveDateTime: DateTime
  recordedDateTime: DateTime
  attribute: String
  eventProperties: [EventPropertyRef]
  eventType: EventTypeRef
  equipment: EquipmentRef
  person: PersonRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  physicalAsset: PhysicalAssetRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  alarmEvents: [AlarmEventRef]
  eventAssociationsFrom: [EventAssociationRef]
  eventAssociationsTo: [EventAssociationRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type EventSubtype
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  version: String
  label: String!
  eventTypes(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType!]
  parent(filter: EventSubtypeFilter): EventSubtype
  children(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  eventTypesAggregate(filter: EventTypeFilter): EventTypeAggregateResult
  childrenAggregate(filter: EventSubtypeFilter): EventSubtypeAggregateResult
}

type EventSubtypeAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  labelMin: String
  labelMax: String
}

input EventSubtypeFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [EventSubtypeHasFilter]
  and: [EventSubtypeFilter]
  or: [EventSubtypeFilter]
  not: EventSubtypeFilter
}

enum EventSubtypeHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  eventTypes @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
}

input EventSubtypeOrder
  @join__type(graph: BASS)
{
  asc: EventSubtypeOrderable
  desc: EventSubtypeOrderable
  then: EventSubtypeOrder
}

enum EventSubtypeOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input EventSubtypePatch
  @join__type(graph: BASS)
{
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  label: String
  eventTypes: [EventTypeRef!]
  parent: EventSubtypeRef
  children: [EventSubtypeRef]
}

input EventSubtypeRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  label: String
  eventTypes: [EventTypeRef!]
  parent: EventSubtypeRef
  children: [EventSubtypeRef]
}

type EventType
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  version: String
  label: String!
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  parent(filter: EventTypeFilter): EventType
  children(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
  eventSubtypes(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  eventsAggregate(filter: EventFilter): EventAggregateResult
  childrenAggregate(filter: EventTypeFilter): EventTypeAggregateResult
  eventSubtypesAggregate(filter: EventSubtypeFilter): EventSubtypeAggregateResult
}

type EventTypeAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  labelMin: String
  labelMax: String
}

input EventTypeFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [EventTypeHasFilter]
  and: [EventTypeFilter]
  or: [EventTypeFilter]
  not: EventTypeFilter
}

enum EventTypeHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  eventSubtypes @join__enumValue(graph: BASS)
}

input EventTypeOrder
  @join__type(graph: BASS)
{
  asc: EventTypeOrderable
  desc: EventTypeOrderable
  then: EventTypeOrder
}

enum EventTypeOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input EventTypePatch
  @join__type(graph: BASS)
{
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  label: String
  events: [EventRef]
  parent: EventTypeRef
  children: [EventTypeRef]
  eventSubtypes: [EventSubtypeRef]
}

input EventTypeRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  label: String
  events: [EventRef]
  parent: EventTypeRef
  children: [EventTypeRef]
  eventSubtypes: [EventSubtypeRef]
}

input FloatFilter
  @join__type(graph: BASS)
{
  eq: Float
  in: [Float]
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: FloatRange
}

input FloatRange
  @join__type(graph: BASS)
{
  min: Float!
  max: Float!
}

type Form
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  name: String
  workflowSpecificationNodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
  jsonSchema: String
  uiSchema: String
  workflowSpecificationNodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
}

type FormAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  jsonSchemaMin: String
  jsonSchemaMax: String
  uiSchemaMin: String
  uiSchemaMax: String
}

input FormFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  has: [FormHasFilter]
  and: [FormFilter]
  or: [FormFilter]
  not: FormFilter
}

enum FormHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  workflowSpecificationNodes @join__enumValue(graph: BASS)
  jsonSchema @join__enumValue(graph: BASS)
  uiSchema @join__enumValue(graph: BASS)
}

input FormOrder
  @join__type(graph: BASS)
{
  asc: FormOrderable
  desc: FormOrderable
  then: FormOrder
}

enum FormOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  jsonSchema @join__enumValue(graph: BASS)
  uiSchema @join__enumValue(graph: BASS)
}

input FormPatch
  @join__type(graph: BASS)
{
  id: String
  name: String
  workflowSpecificationNodes: [WorkflowSpecificationNodeRef]
  jsonSchema: String
  uiSchema: String
}

input FormRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  name: String
  workflowSpecificationNodes: [WorkflowSpecificationNodeRef]
  jsonSchema: String
  uiSchema: String
}

enum Frequency
  @join__type(graph: BASS)
{
  YEARLY @join__enumValue(graph: BASS)
  MONTHLY @join__enumValue(graph: BASS)
  WEEKLY @join__enumValue(graph: BASS)
  DAILY @join__enumValue(graph: BASS)
  HOURLY @join__enumValue(graph: BASS)
  MINUTELY @join__enumValue(graph: BASS)
  SECONDLY @join__enumValue(graph: BASS)
}

input GenerateMutationParams
  @join__type(graph: BASS)
{
  add: Boolean
  update: Boolean
  delete: Boolean
}

input GenerateQueryParams
  @join__type(graph: BASS)
{
  get: Boolean
  query: Boolean
  password: Boolean
  aggregate: Boolean
}

type HierarchyScope
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  equipmentLevel: EquipmentElementLevel
  children(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
  parent(filter: HierarchyScopeFilter): HierarchyScope
  equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
  materialClassVersions(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
  materialDefinitionVersions(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
  materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  childrenAggregate(filter: HierarchyScopeFilter): HierarchyScopeAggregateResult
  equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
  materialClassVersionsAggregate(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult
  materialDefinitionVersionsAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult
  materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
  materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
}

type HierarchyScopeAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
}

input HierarchyScopeFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [HierarchyScopeHasFilter]
  and: [HierarchyScopeFilter]
  or: [HierarchyScopeFilter]
  not: HierarchyScopeFilter
}

enum HierarchyScopeHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  equipmentLevel @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  equipmentVersions @join__enumValue(graph: BASS)
  materialClassVersions @join__enumValue(graph: BASS)
  materialDefinitionVersions @join__enumValue(graph: BASS)
  materialLots @join__enumValue(graph: BASS)
  materialSubLots @join__enumValue(graph: BASS)
}

input HierarchyScopeOrder
  @join__type(graph: BASS)
{
  asc: HierarchyScopeOrderable
  desc: HierarchyScopeOrderable
  then: HierarchyScopeOrder
}

enum HierarchyScopeOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
}

input HierarchyScopePatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  equipmentLevel: EquipmentElementLevel
  children: [HierarchyScopeRef]
  parent: HierarchyScopeRef
  equipmentVersions: [EquipmentVersionRef]
  materialClassVersions: [MaterialClassVersionRef]
  materialDefinitionVersions: [MaterialDefinitionVersionRef]
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
}

input HierarchyScopeRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  equipmentLevel: EquipmentElementLevel
  children: [HierarchyScopeRef]
  parent: HierarchyScopeRef
  equipmentVersions: [EquipmentVersionRef]
  materialClassVersions: [MaterialClassVersionRef]
  materialDefinitionVersions: [MaterialDefinitionVersionRef]
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
}

enum HTTPMethod
  @join__type(graph: BASS)
{
  GET @join__enumValue(graph: BASS)
  POST @join__enumValue(graph: BASS)
  PUT @join__enumValue(graph: BASS)
  PATCH @join__enumValue(graph: BASS)
  DELETE @join__enumValue(graph: BASS)
}

type InformationObject
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntry
  comment(filter: CommentFilter): Comment
  event(filter: EventFilter): Event
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  operationalLocationVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersion
  operationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClass
  operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion
  personnelClass(filter: PersonnelClassFilter): PersonnelClass
  personnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion
  person(filter: PersonFilter): Person
  personVersion(filter: PersonVersionFilter): PersonVersion
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass
  equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion
  equipment(filter: EquipmentFilter): Equipment
  equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion
  physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass
  physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion
  materialClass(filter: MaterialClassFilter): MaterialClass
  materialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersion
  materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion
  materialLot(filter: MaterialLotFilter): MaterialLot
  materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  processSegment(filter: ProcessSegmentFilter): ProcessSegment
  processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion
  testSpecification(filter: TestSpecificationFilter): TestSpecification
  testResult(filter: TestResultFilter): TestResult
  propertyMeasurement(filter: PropertyMeasurementFilter): PropertyMeasurement
  operationsEventClass(filter: OperationsEventClassFilter): OperationsEventClass
  operationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion
  operationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinition
  operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion
  operationsEvent(filter: OperationsEventFilter): OperationsEvent
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition
  operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  operationsSchedule(filter: OperationsScheduleFilter): OperationsSchedule
  operationsRequest(filter: OperationsRequestFilter): OperationsRequest
  operationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformance
  operationsResponse(filter: OperationsResponseFilter): OperationsResponse
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion
  workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeType
  workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionType
  workSchedule(filter: WorkScheduleFilter): WorkSchedule
  workRequest(filter: WorkRequestFilter): WorkRequest
  jobList(filter: JobListFilter): JobList
  jobOrder(filter: JobOrderFilter): JobOrder
  workPerformance(filter: WorkPerformanceFilter): WorkPerformance
  workResponse(filter: WorkResponseFilter): WorkResponse
  jobResponse(filter: JobResponseFilter): JobResponse
  jobResponseList(filter: JobResponseListFilter): JobResponseList
  workCalendar(filter: WorkCalendarFilter): WorkCalendar
  Other: String
}

type InformationObjectAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  OtherMin: String
  OtherMax: String
}

input InformationObjectFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  has: [InformationObjectHasFilter]
  and: [InformationObjectFilter]
  or: [InformationObjectFilter]
  not: InformationObjectFilter
}

enum InformationObjectHasFilter
  @join__type(graph: BASS)
{
  operationsEventRecordEntry @join__enumValue(graph: BASS)
  comment @join__enumValue(graph: BASS)
  event @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  operationalLocationVersion @join__enumValue(graph: BASS)
  operationalLocationClass @join__enumValue(graph: BASS)
  operationalLocationClassVersion @join__enumValue(graph: BASS)
  personnelClass @join__enumValue(graph: BASS)
  personnelClassVersion @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  personVersion @join__enumValue(graph: BASS)
  equipmentClass @join__enumValue(graph: BASS)
  equipmentClassVersion @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  equipmentVersion @join__enumValue(graph: BASS)
  physicalAssetClass @join__enumValue(graph: BASS)
  physicalAssetClassVersion @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  physicalAssetVersion @join__enumValue(graph: BASS)
  materialClass @join__enumValue(graph: BASS)
  materialClassVersion @join__enumValue(graph: BASS)
  materialDefinition @join__enumValue(graph: BASS)
  materialDefinitionVersion @join__enumValue(graph: BASS)
  materialLot @join__enumValue(graph: BASS)
  materialSubLot @join__enumValue(graph: BASS)
  processSegment @join__enumValue(graph: BASS)
  processSegmentVersion @join__enumValue(graph: BASS)
  testSpecification @join__enumValue(graph: BASS)
  testResult @join__enumValue(graph: BASS)
  propertyMeasurement @join__enumValue(graph: BASS)
  operationsEventClass @join__enumValue(graph: BASS)
  operationsEventClassVersion @join__enumValue(graph: BASS)
  operationsEventDefinition @join__enumValue(graph: BASS)
  operationsEventDefinitionVersion @join__enumValue(graph: BASS)
  operationsEvent @join__enumValue(graph: BASS)
  operationsDefinition @join__enumValue(graph: BASS)
  operationsDefinitionVersion @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  operationsSchedule @join__enumValue(graph: BASS)
  operationsRequest @join__enumValue(graph: BASS)
  operationsPerformance @join__enumValue(graph: BASS)
  operationsResponse @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  workflowSpecificationNodeType @join__enumValue(graph: BASS)
  workflowSpecificationConnectionType @join__enumValue(graph: BASS)
  workSchedule @join__enumValue(graph: BASS)
  workRequest @join__enumValue(graph: BASS)
  jobList @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  workPerformance @join__enumValue(graph: BASS)
  workResponse @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  jobResponseList @join__enumValue(graph: BASS)
  workCalendar @join__enumValue(graph: BASS)
  Other @join__enumValue(graph: BASS)
}

input InformationObjectOrder
  @join__type(graph: BASS)
{
  asc: InformationObjectOrderable
  desc: InformationObjectOrderable
  then: InformationObjectOrder
}

enum InformationObjectOrderable
  @join__type(graph: BASS)
{
  Other @join__enumValue(graph: BASS)
}

input InformationObjectPatch
  @join__type(graph: BASS)
{
  operationsEventRecordEntry: OperationsEventRecordEntryRef
  comment: CommentRef
  event: EventRef
  operationalLocation: OperationalLocationRef
  operationalLocationVersion: OperationalLocationVersionRef
  operationalLocationClass: OperationalLocationClassRef
  operationalLocationClassVersion: OperationalLocationClassVersionRef
  personnelClass: PersonnelClassRef
  personnelClassVersion: PersonnelClassVersionRef
  person: PersonRef
  personVersion: PersonVersionRef
  equipmentClass: EquipmentClassRef
  equipmentClassVersion: EquipmentClassVersionRef
  equipment: EquipmentRef
  equipmentVersion: EquipmentVersionRef
  physicalAssetClass: PhysicalAssetClassRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  physicalAsset: PhysicalAssetRef
  physicalAssetVersion: PhysicalAssetVersionRef
  materialClass: MaterialClassRef
  materialClassVersion: MaterialClassVersionRef
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  processSegment: ProcessSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  testSpecification: TestSpecificationRef
  testResult: TestResultRef
  propertyMeasurement: PropertyMeasurementRef
  operationsEventClass: OperationsEventClassRef
  operationsEventClassVersion: OperationsEventClassVersionRef
  operationsEventDefinition: OperationsEventDefinitionRef
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
  operationsEvent: OperationsEventRef
  operationsDefinition: OperationsDefinitionRef
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  operationsSegment: OperationsSegmentRef
  operationsSchedule: OperationsScheduleRef
  operationsRequest: OperationsRequestRef
  operationsPerformance: OperationsPerformanceRef
  operationsResponse: OperationsResponseRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNodeType: WorkflowSpecificationNodeTypeRef
  workflowSpecificationConnectionType: WorkflowSpecificationConnectionTypeRef
  workSchedule: WorkScheduleRef
  workRequest: WorkRequestRef
  jobList: JobListRef
  jobOrder: JobOrderRef
  workPerformance: WorkPerformanceRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseList: JobResponseListRef
  workCalendar: WorkCalendarRef
  Other: String
}

input InformationObjectRef
  @join__type(graph: BASS)
{
  iid: ID
  operationsEventRecordEntry: OperationsEventRecordEntryRef
  comment: CommentRef
  event: EventRef
  operationalLocation: OperationalLocationRef
  operationalLocationVersion: OperationalLocationVersionRef
  operationalLocationClass: OperationalLocationClassRef
  operationalLocationClassVersion: OperationalLocationClassVersionRef
  personnelClass: PersonnelClassRef
  personnelClassVersion: PersonnelClassVersionRef
  person: PersonRef
  personVersion: PersonVersionRef
  equipmentClass: EquipmentClassRef
  equipmentClassVersion: EquipmentClassVersionRef
  equipment: EquipmentRef
  equipmentVersion: EquipmentVersionRef
  physicalAssetClass: PhysicalAssetClassRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  physicalAsset: PhysicalAssetRef
  physicalAssetVersion: PhysicalAssetVersionRef
  materialClass: MaterialClassRef
  materialClassVersion: MaterialClassVersionRef
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  processSegment: ProcessSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  testSpecification: TestSpecificationRef
  testResult: TestResultRef
  propertyMeasurement: PropertyMeasurementRef
  operationsEventClass: OperationsEventClassRef
  operationsEventClassVersion: OperationsEventClassVersionRef
  operationsEventDefinition: OperationsEventDefinitionRef
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
  operationsEvent: OperationsEventRef
  operationsDefinition: OperationsDefinitionRef
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  operationsSegment: OperationsSegmentRef
  operationsSchedule: OperationsScheduleRef
  operationsRequest: OperationsRequestRef
  operationsPerformance: OperationsPerformanceRef
  operationsResponse: OperationsResponseRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNodeType: WorkflowSpecificationNodeTypeRef
  workflowSpecificationConnectionType: WorkflowSpecificationConnectionTypeRef
  workSchedule: WorkScheduleRef
  workRequest: WorkRequestRef
  jobList: JobListRef
  jobOrder: JobOrderRef
  workPerformance: WorkPerformanceRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseList: JobResponseListRef
  workCalendar: WorkCalendarRef
  Other: String
}

enum InformationObjectTypeEnum
  @join__type(graph: BASS)
{
  Change @join__enumValue(graph: BASS)
  Comment @join__enumValue(graph: BASS)
  DataSet @join__enumValue(graph: BASS)
  Event @join__enumValue(graph: BASS)
  OperationalLocation @join__enumValue(graph: BASS)
  OperationalLocationVersion @join__enumValue(graph: BASS)
  OperationalLocationClass @join__enumValue(graph: BASS)
  OperationalLocationClassVersion @join__enumValue(graph: BASS)
  PersonnelClass @join__enumValue(graph: BASS)
  PersonnelClassVersion @join__enumValue(graph: BASS)
  Person @join__enumValue(graph: BASS)
  PersonVersion @join__enumValue(graph: BASS)
  EquipmentClass @join__enumValue(graph: BASS)
  EquipmentClassVersion @join__enumValue(graph: BASS)
  Equipment @join__enumValue(graph: BASS)
  EquipmentVersion @join__enumValue(graph: BASS)
  PhysicalAssetClass @join__enumValue(graph: BASS)
  PhysicalAssetClassVersion @join__enumValue(graph: BASS)
  PhysicalAsset @join__enumValue(graph: BASS)
  PhysicalAssetVersion @join__enumValue(graph: BASS)
  MaterialClass @join__enumValue(graph: BASS)
  MaterialClassVersion @join__enumValue(graph: BASS)
  MaterialDefinition @join__enumValue(graph: BASS)
  MaterialDefinitionVersion @join__enumValue(graph: BASS)
  MaterialLot @join__enumValue(graph: BASS)
  MaterialSubLot @join__enumValue(graph: BASS)
  ProcessSegment @join__enumValue(graph: BASS)
  ProcessSegmentVersion @join__enumValue(graph: BASS)
  TestSpecification @join__enumValue(graph: BASS)
  TestSpecificationVersion @join__enumValue(graph: BASS)
  TestResult @join__enumValue(graph: BASS)
  Sample @join__enumValue(graph: BASS)
  PropertyMeasurement @join__enumValue(graph: BASS)
  OperationsEventClass @join__enumValue(graph: BASS)
  OperationsEventClassVersion @join__enumValue(graph: BASS)
  OperationsEventDefinition @join__enumValue(graph: BASS)
  OperationsEventDefinitionVersion @join__enumValue(graph: BASS)
  OperationsEvent @join__enumValue(graph: BASS)
  OperationsDefinition @join__enumValue(graph: BASS)
  OperationsDefinitionVersion @join__enumValue(graph: BASS)
  OperationsSegment @join__enumValue(graph: BASS)
  OperationsSchedule @join__enumValue(graph: BASS)
  OperationsRequest @join__enumValue(graph: BASS)
  OperationsPerformance @join__enumValue(graph: BASS)
  OperationsResponse @join__enumValue(graph: BASS)
  OperationsCapability @join__enumValue(graph: BASS)
  ResourceRelationshipNetwork @join__enumValue(graph: BASS)
  ResourceNetworkConnectionType @join__enumValue(graph: BASS)
  WorkMaster @join__enumValue(graph: BASS)
  WorkMasterVersion @join__enumValue(graph: BASS)
  WorkDirective @join__enumValue(graph: BASS)
  WorkflowSpecification @join__enumValue(graph: BASS)
  WorkflowSpecificationVersion @join__enumValue(graph: BASS)
  WorkflowSpecificationNodeType @join__enumValue(graph: BASS)
  WorkflowSpecificationConnectionType @join__enumValue(graph: BASS)
  WorkSchedule @join__enumValue(graph: BASS)
  WorkRequest @join__enumValue(graph: BASS)
  JobList @join__enumValue(graph: BASS)
  JobOrder @join__enumValue(graph: BASS)
  WorkPerformance @join__enumValue(graph: BASS)
  WorkResponse @join__enumValue(graph: BASS)
  JobResponse @join__enumValue(graph: BASS)
  JobResponseList @join__enumValue(graph: BASS)
  WorkCapability @join__enumValue(graph: BASS)
  WorkMasterCapability @join__enumValue(graph: BASS)
  WorkAlertDefinition @join__enumValue(graph: BASS)
  WorkAlert @join__enumValue(graph: BASS)
  WorkCalendar @join__enumValue(graph: BASS)
  WorkCalendarDefinition @join__enumValue(graph: BASS)
  WorkRecord @join__enumValue(graph: BASS)
  WorkRecordSpecification @join__enumValue(graph: BASS)
  Other @join__enumValue(graph: BASS)
}

input Input_PropertyBindingType_hash
  @join__type(graph: CORE)
{
  eq: PropertyBindingType
  in: [PropertyBindingType]
}

input Input_StringExactFilter_StringFullTextFilter
  @join__type(graph: CORE)
{
  alloftext: String
  anyoftext: String
  between: StringRange
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
}

input Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  @join__type(graph: CORE)
{
  alloftext: String
  anyoftext: String
  between: StringRange
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  regexp: String
}

type Instance
  @join__type(graph: BPMN_ENGINE)
{
  """ The Workflow Specification ID related to a instance """
  workflowSpecificationId: String

  """ The Workflow Specification Version related to a instance """
  version: String

  """ The Workflow Specification status related to a instance """
  versionStatus: String

  """ The trace (instance) ID for a instance """
  traceId: String!

  """ The DateTime this instance started """
  startTime: DateTime

  """ The DateTime this instance finished """
  endTime: DateTime

  """ Url with a link to view full instance in grafana (url encoded string) 
  """
  grafanaUrl: String!

  """ Array of nodes and their values"""
  nodes: [InstanceNode]

  """ Array of flows passed through in an instance """
  flows: [InstanceFlow]

  """ Array of system logs for this instance """
  logs: [InstanceLog]
}

type InstanceFlow
  @join__type(graph: BPMN_ENGINE)
{
  """ The flow Id of a flow that has been passed through in an instance """
  flowId: String
}

type InstanceLog
  @join__type(graph: BPMN_ENGINE)
{
  """ The DateTime of a log message """
  time: DateTime

  """ The log level of a message """
  level: String

  """ The system log message (JSON Escaped string) """
  message: String
}

type InstanceNode
  @join__type(graph: BPMN_ENGINE)
{
  """ A node Id that has executed in the instance """
  nodeId: String

  """ Array of values for a node """
  values: [InstanceNodeValues]
}

type InstanceNodeValues
  @join__type(graph: BPMN_ENGINE)
{
  """ The job id attached to a node execution """
  jobId: String

  """ The start DateTime of a job """
  startTime: DateTime

  """ The end DateTime of a job """
  endTime: DateTime

  """ The duration of a job  """
  duration: String

  """ The error state of a job """
  error: Boolean

  """ The node input for a job (JSON escaped string) """
  inputVar: String

  """ The node output for a job (JSON escaped string) """
  outputVar: String

  """ The events for a job  """
  events: [NodeEvent]
}

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64
  @join__type(graph: BASS)

input Int64Filter
  @join__type(graph: BASS)
{
  eq: Int64
  in: [Int64]
  le: Int64
  lt: Int64
  ge: Int64
  gt: Int64
  between: Int64Range
}

input Int64Range
  @join__type(graph: BASS)
{
  min: Int64!
  max: Int64!
}

input IntersectsFilter
  @join__type(graph: BASS)
{
  polygon: PolygonRef
  multiPolygon: MultiPolygonRef
}

input IntFilter
  @join__type(graph: BASS)
{
  eq: Int
  in: [Int]
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: IntRange
}

input IntRange
  @join__type(graph: BASS)
{
  min: Int!
  max: Int!
}

enum Isa95PropertyType
  @join__type(graph: BASS)
{
  """
  The property value is defined for the class as the default instance value, but individual instances of the class may redefine specific values.
  """
  DefaultType @join__enumValue(graph: BASS)

  """
  The property value is defined for the class and there is no value associated with an instance.
  """
  ClassType @join__enumValue(graph: BASS)

  """The property value of the class is undefined."""
  InstanceType @join__enumValue(graph: BASS)
}

type JobList
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  workType: WorkType!
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder!]!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
}

type JobListAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  plannedStartDateTimeMin: DateTime
  plannedStartDateTimeMax: DateTime
  plannedEndDateTimeMin: DateTime
  plannedEndDateTimeMax: DateTime
  publishedDateMin: DateTime
  publishedDateMax: DateTime
}

input JobListFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  workType: WorkType_hash
  description: StringExactFilter_StringFullTextFilter
  plannedStartDateTime: DateTimeFilter
  plannedEndDateTime: DateTimeFilter
  publishedDate: DateTimeFilter
  has: [JobListHasFilter]
  and: [JobListFilter]
  or: [JobListFilter]
  not: JobListFilter
}

enum JobListHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  plannedStartDateTime @join__enumValue(graph: BASS)
  plannedEndDateTime @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
}

input JobListOrder
  @join__type(graph: BASS)
{
  asc: JobListOrderable
  desc: JobListOrderable
  then: JobListOrder
}

enum JobListOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  plannedStartDateTime @join__enumValue(graph: BASS)
  plannedEndDateTime @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
}

input JobListPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  workType: WorkType
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  jobOrders: [JobOrderRef!]
}

input JobListRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  workType: WorkType
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  jobOrders: [JobOrderRef!]
}

type JobOrder
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  publishedDate: DateTime
  workType: WorkType
  scheduledStartDateTime: DateTime
  scheduledEndDateTime: DateTime
  priority: Int
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  command: String
  dispatchStatus: DispatchStatus
  commandRule: String
  label: String
  workRequest(filter: WorkRequestFilter): WorkRequest
  jobList(filter: JobListFilter): JobList
  workMaster(filter: WorkMasterFilter): WorkMaster
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement
  parameters(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
  personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
  equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
  physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
  materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion
  workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  previous(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  next(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
  parametersAggregate(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
  personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
  equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
  physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
  materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
  previousAggregate(filter: JobOrderFilter): JobOrderAggregateResult
  nextAggregate(filter: JobOrderFilter): JobOrderAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type JobOrderAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  publishedDateMin: DateTime
  publishedDateMax: DateTime
  scheduledStartDateTimeMin: DateTime
  scheduledStartDateTimeMax: DateTime
  scheduledEndDateTimeMin: DateTime
  scheduledEndDateTimeMax: DateTime
  priorityMin: Int
  priorityMax: Int
  prioritySum: Int
  priorityAvg: Float
  commandMin: String
  commandMax: String
  commandRuleMin: String
  commandRuleMax: String
  labelMin: String
  labelMax: String
}

input JobOrderFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  publishedDate: DateTimeFilter
  workType: WorkType_hash
  scheduledStartDateTime: DateTimeFilter
  scheduledEndDateTime: DateTimeFilter
  command: StringExactFilter_StringFullTextFilter
  dispatchStatus: DispatchStatus_hash
  commandRule: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [JobOrderHasFilter]
  and: [JobOrderFilter]
  or: [JobOrderFilter]
  not: JobOrderFilter
}

enum JobOrderHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  scheduledStartDateTime @join__enumValue(graph: BASS)
  scheduledEndDateTime @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  command @join__enumValue(graph: BASS)
  dispatchStatus @join__enumValue(graph: BASS)
  commandRule @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  workRequest @join__enumValue(graph: BASS)
  jobList @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
  segmentRequirement @join__enumValue(graph: BASS)
  parameters @join__enumValue(graph: BASS)
  personnelRequirements @join__enumValue(graph: BASS)
  equipmentRequirements @join__enumValue(graph: BASS)
  physicalAssetRequirements @join__enumValue(graph: BASS)
  materialRequirements @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  workflowSpecificationNode @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  previous @join__enumValue(graph: BASS)
  next @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input JobOrderOrder
  @join__type(graph: BASS)
{
  asc: JobOrderOrderable
  desc: JobOrderOrderable
  then: JobOrderOrder
}

enum JobOrderOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  scheduledStartDateTime @join__enumValue(graph: BASS)
  scheduledEndDateTime @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  command @join__enumValue(graph: BASS)
  commandRule @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

type JobOrderParameter
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  label: String
  jobOrder(filter: JobOrderFilter): JobOrder!
  children(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
  parent(filter: JobOrderParameterFilter): JobOrderParameter
  parameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecification
  processSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameter
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
}

type JobOrderParameterAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  labelMin: String
  labelMax: String
}

input JobOrderParameterFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter
  has: [JobOrderParameterHasFilter]
  and: [JobOrderParameterFilter]
  or: [JobOrderParameterFilter]
  not: JobOrderParameterFilter
}

enum JobOrderParameterHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  parameterSpecification @join__enumValue(graph: BASS)
  processSegmentParameter @join__enumValue(graph: BASS)
}

input JobOrderParameterOrder
  @join__type(graph: BASS)
{
  asc: JobOrderParameterOrderable
  desc: JobOrderParameterOrderable
  then: JobOrderParameterOrder
}

enum JobOrderParameterOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input JobOrderParameterPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  label: String
  jobOrder: JobOrderRef
  children: [JobOrderParameterRef]
  parent: JobOrderParameterRef
  parameterSpecification: ParameterSpecificationRef
  processSegmentParameter: ProcessSegmentParameterRef
}

input JobOrderParameterRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  label: String
  jobOrder: JobOrderRef
  children: [JobOrderParameterRef]
  parent: JobOrderParameterRef
  parameterSpecification: ParameterSpecificationRef
  processSegmentParameter: ProcessSegmentParameterRef
}

input JobOrderPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  publishedDate: DateTime
  workType: WorkType
  scheduledStartDateTime: DateTime
  scheduledEndDateTime: DateTime
  priority: Int
  hierarchyScope: HierarchyScopeRef
  command: String
  dispatchStatus: DispatchStatus
  commandRule: String
  label: String
  workRequest: WorkRequestRef
  jobList: JobListRef
  workMaster: WorkMasterRef
  jobResponses: [JobResponseRef]
  segmentRequirement: SegmentRequirementRef
  parameters: [JobOrderParameterRef]
  personnelRequirements: [PersonnelRequirementRef]
  equipmentRequirements: [EquipmentRequirementRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  materialRequirements: [MaterialRequirementRef]
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNode: WorkflowSpecificationNodeRef
  workDirective: WorkDirectiveRef
  previous: [JobOrderRef]
  next: [JobOrderRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input JobOrderRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  publishedDate: DateTime
  workType: WorkType
  scheduledStartDateTime: DateTime
  scheduledEndDateTime: DateTime
  priority: Int
  hierarchyScope: HierarchyScopeRef
  command: String
  dispatchStatus: DispatchStatus
  commandRule: String
  label: String
  workRequest: WorkRequestRef
  jobList: JobListRef
  workMaster: WorkMasterRef
  jobResponses: [JobResponseRef]
  segmentRequirement: SegmentRequirementRef
  parameters: [JobOrderParameterRef]
  personnelRequirements: [PersonnelRequirementRef]
  equipmentRequirements: [EquipmentRequirementRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  materialRequirements: [MaterialRequirementRef]
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNode: WorkflowSpecificationNodeRef
  workDirective: WorkDirectiveRef
  previous: [JobOrderRef]
  next: [JobOrderRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type JobResponse
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  publishedDate: DateTime
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  jobState: JobState
  dataJSON: String
  productionDate: String
  workResponse(filter: WorkResponseFilter): WorkResponse!
  segmentResponse(filter: SegmentResponseFilter): SegmentResponse
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion
  workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode
  jobOrder(filter: JobOrderFilter): JobOrder
  jobResponseList(filter: JobResponseListFilter): JobResponseList
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  data(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
  children(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  parent(filter: JobResponseFilter): JobResponse
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
  equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
  physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
  materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
  dataAggregate(filter: JobResponseDataFilter): JobResponseDataAggregateResult
  childrenAggregate(filter: JobResponseFilter): JobResponseAggregateResult
  eventsAggregate(filter: EventFilter): EventAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type JobResponseAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  publishedDateMin: DateTime
  publishedDateMax: DateTime
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
  dataJSONMin: String
  dataJSONMax: String
  productionDateMin: String
  productionDateMax: String
}

type JobResponseData
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  label: String
  jobResponse(filter: JobResponseFilter): JobResponse!
  children(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
  parent(filter: JobResponseDataFilter): JobResponseData
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: JobResponseDataFilter): JobResponseDataAggregateResult
  eventsAggregate(filter: EventFilter): EventAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
}

type JobResponseDataAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  labelMin: String
  labelMax: String
}

input JobResponseDataFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [JobResponseDataHasFilter]
  and: [JobResponseDataFilter]
  or: [JobResponseDataFilter]
  not: JobResponseDataFilter
}

enum JobResponseDataHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
}

input JobResponseDataOrder
  @join__type(graph: BASS)
{
  asc: JobResponseDataOrderable
  desc: JobResponseDataOrderable
  then: JobResponseDataOrder
}

enum JobResponseDataOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input JobResponseDataPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  label: String
  jobResponse: JobResponseRef
  children: [JobResponseDataRef]
  parent: JobResponseDataRef
  events: [EventRef]
  comments: [CommentRef]
  signatures: [SignatureRef]
}

input JobResponseDataRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  label: String
  jobResponse: JobResponseRef
  children: [JobResponseDataRef]
  parent: JobResponseDataRef
  events: [EventRef]
  comments: [CommentRef]
  signatures: [SignatureRef]
}

input JobResponseFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  publishedDate: DateTimeFilter
  workType: WorkType_hash
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  dataJSON: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  productionDate: StringExactFilter_StringFullTextFilter
  has: [JobResponseHasFilter]
  and: [JobResponseFilter]
  or: [JobResponseFilter]
  not: JobResponseFilter
}

enum JobResponseHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  jobState @join__enumValue(graph: BASS)
  dataJSON @join__enumValue(graph: BASS)
  productionDate @join__enumValue(graph: BASS)
  workResponse @join__enumValue(graph: BASS)
  segmentResponse @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  workflowSpecificationNode @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  jobResponseList @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  data @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

type JobResponseList
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  version: String!
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse!]!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
}

type JobResponseListAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
}

input JobResponseListFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  version: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  workType: WorkType_hash
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  has: [JobResponseListHasFilter]
  and: [JobResponseListFilter]
  or: [JobResponseListFilter]
  not: JobResponseListFilter
}

enum JobResponseListHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
}

input JobResponseListOrder
  @join__type(graph: BASS)
{
  asc: JobResponseListOrderable
  desc: JobResponseListOrderable
  then: JobResponseListOrder
}

enum JobResponseListOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
}

input JobResponseListPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  version: String
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  jobResponses: [JobResponseRef!]
}

input JobResponseListRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  version: String
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  jobResponses: [JobResponseRef!]
}

input JobResponseOrder
  @join__type(graph: BASS)
{
  asc: JobResponseOrderable
  desc: JobResponseOrderable
  then: JobResponseOrder
}

enum JobResponseOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  dataJSON @join__enumValue(graph: BASS)
  productionDate @join__enumValue(graph: BASS)
}

input JobResponsePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  publishedDate: DateTime
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  jobState: JobState
  dataJSON: String
  productionDate: String
  workResponse: WorkResponseRef
  segmentResponse: SegmentResponseRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNode: WorkflowSpecificationNodeRef
  jobOrder: JobOrderRef
  jobResponseList: JobResponseListRef
  personnelActual: [PersonnelActualRef]
  equipmentActual: [EquipmentActualRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  materialActual: [MaterialActualRef]
  data: [JobResponseDataRef]
  children: [JobResponseRef]
  parent: JobResponseRef
  events: [EventRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input JobResponseRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  publishedDate: DateTime
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  jobState: JobState
  dataJSON: String
  productionDate: String
  workResponse: WorkResponseRef
  segmentResponse: SegmentResponseRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  workflowSpecificationNode: WorkflowSpecificationNodeRef
  jobOrder: JobOrderRef
  jobResponseList: JobResponseListRef
  personnelActual: [PersonnelActualRef]
  equipmentActual: [EquipmentActualRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  materialActual: [MaterialActualRef]
  data: [JobResponseDataRef]
  children: [JobResponseRef]
  parent: JobResponseRef
  events: [EventRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

enum JobState
  @join__type(graph: BASS)
{
  """ Necessary preconditions have not been met and the job orders or activities are not ready to run. 
  """
  WAITING @join__enumValue(graph: BASS)

  """ Necessary preconditions have been met and the job order or activities are ready to run. 
  """
  READY @join__enumValue(graph: BASS)

  """ Job order or activities are in execution. """
  RUNNING @join__enumValue(graph: BASS)

  """ Job order or activities have been completed and are no longer in execution. 
  """
  COMPLETED @join__enumValue(graph: BASS)

  """
   An execution decision has been taken to terminate the job order or activities that may, or may not, 
  have been previously commenced. 
  """
  ABORTED @join__enumValue(graph: BASS)

  """ Job order or activities have been temporarily stopped due to a constraint of some form. 
  """
  HELD @join__enumValue(graph: BASS)

  """ Job order or activities have been temporarily stopped due to a deliberate decision within execution. 
  """
  SUSPENDED @join__enumValue(graph: BASS)

  """
   Job order or activities have been completed and fully reconciled. No further changes, or restatement 
  of actuals is expected. 
  """
  CLOSED @join__enumValue(graph: BASS)
}

input JobState_hash
  @join__type(graph: BASS)
{
  eq: JobState
  in: [JobState]
}

scalar join__FieldSet

enum join__Graph {
  BASS @join__graph(name: "bass", url: "http://alpha:8080/graphql")
  BPMN_ENGINE @join__graph(name: "bpmn-engine", url: "http://bpmn-engine:8081/query")
  CORE @join__graph(name: "core", url: "http://libre-core:4002/query")
}

type LibreService
  @join__type(graph: BASS, key: "id")
{
  id: ID!
  name: String!
  heartbeat: DateTime
}

type LibreServiceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  nameMin: String
  nameMax: String
  heartbeatMin: DateTime
  heartbeatMax: DateTime
}

input LibreServiceFilter
  @join__type(graph: BASS)
{
  id: [ID!]
  name: StringHashFilter
  has: [LibreServiceHasFilter]
  and: [LibreServiceFilter]
  or: [LibreServiceFilter]
  not: LibreServiceFilter
}

enum LibreServiceHasFilter
  @join__type(graph: BASS)
{
  name @join__enumValue(graph: BASS)
  heartbeat @join__enumValue(graph: BASS)
}

input LibreServiceOrder
  @join__type(graph: BASS)
{
  asc: LibreServiceOrderable
  desc: LibreServiceOrderable
  then: LibreServiceOrder
}

enum LibreServiceOrderable
  @join__type(graph: BASS)
{
  name @join__enumValue(graph: BASS)
  heartbeat @join__enumValue(graph: BASS)
}

input LibreServicePatch
  @join__type(graph: BASS)
{
  name: String
  heartbeat: DateTime
}

input LibreServiceRef
  @join__type(graph: BASS)
{
  id: ID
  name: String
  heartbeat: DateTime
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar Map
  @join__type(graph: BPMN_ENGINE)

type MaterialActual
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  storageLocation(filter: OperationalLocationFilter): OperationalLocation
  materialUse: MaterialUse
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentResponse(filter: SegmentResponseFilter): SegmentResponse
  children(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  parent(filter: MaterialActualFilter): MaterialActual
  properties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  materialClass(filter: MaterialClassFilter): MaterialClass
  materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion
  materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  jobResponse(filter: JobResponseFilter): JobResponse
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
  propertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  materialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
  materialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type MaterialActualAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialActualFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  assemblyType: AssemblyType_exact
  assemblyRelationship: AssemblyRelationship_exact
  has: [MaterialActualHasFilter]
  and: [MaterialActualFilter]
  or: [MaterialActualFilter]
  not: MaterialActualFilter
}

enum MaterialActualHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  storageLocation @join__enumValue(graph: BASS)
  materialUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  assemblyType @join__enumValue(graph: BASS)
  assemblyRelationship @join__enumValue(graph: BASS)
  segmentResponse @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  materialClass @join__enumValue(graph: BASS)
  materialDefinition @join__enumValue(graph: BASS)
  materialDefinitionVersion @join__enumValue(graph: BASS)
  materialLot @join__enumValue(graph: BASS)
  materialSubLot @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input MaterialActualOrder
  @join__type(graph: BASS)
{
  asc: MaterialActualOrderable
  desc: MaterialActualOrderable
  then: MaterialActualOrder
}

enum MaterialActualOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input MaterialActualPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentResponse: SegmentResponseRef
  children: [MaterialActualRef]
  parent: MaterialActualRef
  properties: [MaterialActualPropertyRef]
  testResults: [TestResultRef]
  materialClass: MaterialClassRef
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  materialLot: [MaterialLotRef]
  materialSubLot: [MaterialSubLotRef]
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type MaterialActualProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  materialActual(filter: MaterialActualFilter): MaterialActual!
  children(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
  parent(filter: MaterialActualPropertyFilter): MaterialActualProperty
  materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty
  materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
}

type MaterialActualPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
  useMin: String
  useMax: String
}

input MaterialActualPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [MaterialActualPropertyHasFilter]
  and: [MaterialActualPropertyFilter]
  or: [MaterialActualPropertyFilter]
  not: MaterialActualPropertyFilter
}

enum MaterialActualPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  materialClassProperty @join__enumValue(graph: BASS)
  materialDefinitionProperty @join__enumValue(graph: BASS)
  materialLotProperty @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
}

input MaterialActualPropertyOrder
  @join__type(graph: BASS)
{
  asc: MaterialActualPropertyOrderable
  desc: MaterialActualPropertyOrderable
  then: MaterialActualPropertyOrder
}

enum MaterialActualPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
}

input MaterialActualPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  materialActual: MaterialActualRef
  children: [MaterialActualPropertyRef]
  parent: MaterialActualPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

input MaterialActualPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  materialActual: MaterialActualRef
  children: [MaterialActualPropertyRef]
  parent: MaterialActualPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

input MaterialActualRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentResponse: SegmentResponseRef
  children: [MaterialActualRef]
  parent: MaterialActualRef
  properties: [MaterialActualPropertyRef]
  testResults: [TestResultRef]
  materialClass: MaterialClassRef
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  materialLot: [MaterialLotRef]
  materialSubLot: [MaterialSubLotRef]
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type MaterialAlternate
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  effectiveDateTime: DateTime!
  priorityOrder: Int!
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion!
  alternateMaterial(filter: MaterialDefinitionFilter): MaterialDefinition!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type MaterialAlternateAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  effectiveDateTimeMin: DateTime
  effectiveDateTimeMax: DateTime
  priorityOrderMin: Int
  priorityOrderMax: Int
  priorityOrderSum: Int
  priorityOrderAvg: Float
}

input MaterialAlternateFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  has: [MaterialAlternateHasFilter]
  and: [MaterialAlternateFilter]
  or: [MaterialAlternateFilter]
  not: MaterialAlternateFilter
}

enum MaterialAlternateHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  effectiveDateTime @join__enumValue(graph: BASS)
  priorityOrder @join__enumValue(graph: BASS)
  materialDefinitionVersion @join__enumValue(graph: BASS)
  alternateMaterial @join__enumValue(graph: BASS)
}

input MaterialAlternateOrder
  @join__type(graph: BASS)
{
  asc: MaterialAlternateOrderable
  desc: MaterialAlternateOrderable
  then: MaterialAlternateOrder
}

enum MaterialAlternateOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  effectiveDateTime @join__enumValue(graph: BASS)
  priorityOrder @join__enumValue(graph: BASS)
}

input MaterialAlternatePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  effectiveDateTime: DateTime
  priorityOrder: Int
  materialDefinitionVersion: MaterialDefinitionVersionRef
  alternateMaterial: MaterialDefinitionRef
}

input MaterialAlternateRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  effectiveDateTime: DateTime
  priorityOrder: Int
  materialDefinitionVersion: MaterialDefinitionVersionRef
  alternateMaterial: MaterialDefinitionRef
}

type MaterialClass
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion] @join__field(graph: BASS)
  activeVersion(filter: MaterialClassVersionFilter): MaterialClassVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  isIncludedIn(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion] @join__field(graph: BASS)
  isAssembledFrom(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: BASS)
  isComponentOf(filter: MaterialClassFilter): MaterialClass @join__field(graph: BASS)
  materialDefinitionVersions(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @join__field(graph: BASS)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: BASS)
  materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @join__field(graph: BASS)
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult @join__field(graph: BASS)
  isIncludedInAggregate(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult @join__field(graph: BASS)
  isAssembledFromAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: BASS)
  materialDefinitionVersionsAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult @join__field(graph: BASS)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: BASS)
  materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult @join__field(graph: BASS)
  materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
}

type MaterialClassAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input MaterialClassFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [MaterialClassHasFilter]
  and: [MaterialClassFilter]
  or: [MaterialClassFilter]
  not: MaterialClassFilter
}

enum MaterialClassHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isIncludedIn @join__enumValue(graph: BASS)
  isAssembledFrom @join__enumValue(graph: BASS)
  isComponentOf @join__enumValue(graph: BASS)
  materialDefinitionVersions @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
  materialRequirements @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
}

input MaterialClassOrder
  @join__type(graph: BASS)
{
  asc: MaterialClassOrderable
  desc: MaterialClassOrderable
  then: MaterialClassOrder
}

enum MaterialClassOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input MaterialClassPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [MaterialClassVersionRef]
  activeVersion: MaterialClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [MaterialClassVersionRef]
  isAssembledFrom: [MaterialClassRef]
  isComponentOf: MaterialClassRef
  materialDefinitionVersions: [MaterialDefinitionVersionRef]
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type MaterialClassProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  propertyType: Isa95PropertyType! @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  materialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersion! @join__field(graph: BASS)
  children(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty] @join__field(graph: BASS)
  parent(filter: MaterialClassPropertyFilter): MaterialClassProperty @join__field(graph: BASS)
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  materialSpecificationProperties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @join__field(graph: BASS)
  materialRequirementProperties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @join__field(graph: BASS)
  materialActualProperties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  materialSpecificationPropertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult @join__field(graph: BASS)
  materialRequirementPropertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult @join__field(graph: BASS)
  materialActualPropertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult @join__field(graph: BASS)
}

type MaterialClassPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input MaterialClassPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [MaterialClassPropertyHasFilter]
  and: [MaterialClassPropertyFilter]
  or: [MaterialClassPropertyFilter]
  not: MaterialClassPropertyFilter
}

enum MaterialClassPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  propertyType @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  materialClassVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  materialDefinitionProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  materialSpecificationProperties @join__enumValue(graph: BASS)
  materialRequirementProperties @join__enumValue(graph: BASS)
  materialActualProperties @join__enumValue(graph: BASS)
}

input MaterialClassPropertyOrder
  @join__type(graph: BASS)
{
  asc: MaterialClassPropertyOrderable
  desc: MaterialClassPropertyOrderable
  then: MaterialClassPropertyOrder
}

enum MaterialClassPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input MaterialClassPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  materialClassVersion: MaterialClassVersionRef
  children: [MaterialClassPropertyRef]
  parent: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialClassPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  materialClassVersion: MaterialClassVersionRef
  children: [MaterialClassPropertyRef]
  parent: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialClassRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [MaterialClassVersionRef]
  activeVersion: MaterialClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [MaterialClassVersionRef]
  isAssembledFrom: [MaterialClassRef]
  isComponentOf: MaterialClassRef
  materialDefinitionVersions: [MaterialDefinitionVersionRef]
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type MaterialClassVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  materialClass(filter: MaterialClassFilter): MaterialClass! @join__field(graph: BASS)
  isActiveVersionOf(filter: MaterialClassFilter): MaterialClass @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  assemblyType: AssemblyType @join__field(graph: BASS)
  assemblyRelationship: AssemblyRelationship @join__field(graph: BASS)
  properties(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty] @join__field(graph: BASS)
  includesPropertiesOf(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult @join__field(graph: BASS)
  includesPropertiesOfAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
  inheritedProperties(filter: MaterialInheritedPropertyFilter): [MaterialClassProperty] @join__field(graph: CORE)
}

type MaterialClassVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
}

input MaterialClassVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  assemblyType: AssemblyType_exact
  assemblyRelationship: AssemblyRelationship_exact
  has: [MaterialClassVersionHasFilter]
  and: [MaterialClassVersionFilter]
  or: [MaterialClassVersionFilter]
  not: MaterialClassVersionFilter
}

enum MaterialClassVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  materialClass @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  assemblyType @join__enumValue(graph: BASS)
  assemblyRelationship @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  includesPropertiesOf @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
}

input MaterialClassVersionOrder
  @join__type(graph: BASS)
{
  asc: MaterialClassVersionOrderable
  desc: MaterialClassVersionOrderable
  then: MaterialClassVersionOrder
}

enum MaterialClassVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input MaterialClassVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  materialClass: MaterialClassRef
  isActiveVersionOf: MaterialClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  properties: [MaterialClassPropertyRef]
  includesPropertiesOf: [MaterialClassRef]
  stateModels: [StateModelDefinitionRef]
}

input MaterialClassVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  materialClass: MaterialClassRef
  isActiveVersionOf: MaterialClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  properties: [MaterialClassPropertyRef]
  includesPropertiesOf: [MaterialClassRef]
  stateModels: [StateModelDefinitionRef]
}

type MaterialDefinition
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @join__field(graph: BASS)
  activeVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: BASS)
  materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @join__field(graph: BASS)
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @join__field(graph: BASS)
  isAlternateFor(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @join__field(graph: BASS)
  materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult @join__field(graph: BASS)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: BASS)
  materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult @join__field(graph: BASS)
  materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
  stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult @join__field(graph: BASS)
  isAlternateForAggregate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult @join__field(graph: BASS)
  materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult @join__field(graph: BASS)
}

type MaterialDefinitionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input MaterialDefinitionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [MaterialDefinitionHasFilter]
  and: [MaterialDefinitionFilter]
  or: [MaterialDefinitionFilter]
  not: MaterialDefinitionFilter
}

enum MaterialDefinitionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
  materialRequirements @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  stateModelInstances @join__enumValue(graph: BASS)
  isAlternateFor @join__enumValue(graph: BASS)
  materialLots @join__enumValue(graph: BASS)
}

input MaterialDefinitionOrder
  @join__type(graph: BASS)
{
  asc: MaterialDefinitionOrderable
  desc: MaterialDefinitionOrderable
  then: MaterialDefinitionOrder
}

enum MaterialDefinitionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input MaterialDefinitionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [MaterialDefinitionVersionRef]
  activeVersion: MaterialDefinitionVersionRef
  nextVersion: String
  id: String
  label: String
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
  isAlternateFor: [MaterialAlternateRef]
  materialLots: [MaterialLotRef]
}

type MaterialDefinitionProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  valueSetPoint: String @join__field(graph: BASS)
  valueUpperSpecLimit: Float @join__field(graph: BASS)
  valueLowerSpecLimit: Float @join__field(graph: BASS)
  valueUpperControlLimit: Float @join__field(graph: BASS)
  valueLowerControlLimit: Float @join__field(graph: BASS)
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion! @join__field(graph: BASS)
  children(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty] @join__field(graph: BASS)
  parent(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @join__field(graph: BASS)
  materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty @join__field(graph: BASS)
  materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  materialSpecificationProperties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @join__field(graph: BASS)
  materialRequirementProperties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @join__field(graph: BASS)
  materialActualProperties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  materialSpecificationPropertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult @join__field(graph: BASS)
  materialRequirementPropertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult @join__field(graph: BASS)
  materialActualPropertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult @join__field(graph: BASS)
}

type MaterialDefinitionPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  valueSetPointMin: String
  valueSetPointMax: String
  valueUpperSpecLimitMin: Float
  valueUpperSpecLimitMax: Float
  valueUpperSpecLimitSum: Float
  valueUpperSpecLimitAvg: Float
  valueLowerSpecLimitMin: Float
  valueLowerSpecLimitMax: Float
  valueLowerSpecLimitSum: Float
  valueLowerSpecLimitAvg: Float
  valueUpperControlLimitMin: Float
  valueUpperControlLimitMax: Float
  valueUpperControlLimitSum: Float
  valueUpperControlLimitAvg: Float
  valueLowerControlLimitMin: Float
  valueLowerControlLimitMax: Float
  valueLowerControlLimitSum: Float
  valueLowerControlLimitAvg: Float
}

input MaterialDefinitionPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [MaterialDefinitionPropertyHasFilter]
  and: [MaterialDefinitionPropertyFilter]
  or: [MaterialDefinitionPropertyFilter]
  not: MaterialDefinitionPropertyFilter
}

enum MaterialDefinitionPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
  materialDefinitionVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  materialClassProperty @join__enumValue(graph: BASS)
  materialLotProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  materialSpecificationProperties @join__enumValue(graph: BASS)
  materialRequirementProperties @join__enumValue(graph: BASS)
  materialActualProperties @join__enumValue(graph: BASS)
}

input MaterialDefinitionPropertyOrder
  @join__type(graph: BASS)
{
  asc: MaterialDefinitionPropertyOrderable
  desc: MaterialDefinitionPropertyOrderable
  then: MaterialDefinitionPropertyOrder
}

enum MaterialDefinitionPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
}

input MaterialDefinitionPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  materialDefinitionVersion: MaterialDefinitionVersionRef
  children: [MaterialDefinitionPropertyRef]
  parent: MaterialDefinitionPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialLotProperty: MaterialLotPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialDefinitionPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  materialDefinitionVersion: MaterialDefinitionVersionRef
  children: [MaterialDefinitionPropertyRef]
  parent: MaterialDefinitionPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialLotProperty: MaterialLotPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialDefinitionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [MaterialDefinitionVersionRef]
  activeVersion: MaterialDefinitionVersionRef
  nextVersion: String
  id: String
  label: String
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
  isAlternateFor: [MaterialAlternateRef]
  materialLots: [MaterialLotRef]
}

type MaterialDefinitionVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: BASS)
  isActiveVersionOf(filter: MaterialDefinitionFilter): MaterialDefinition @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition @join__field(graph: BASS)
  assemblyType: AssemblyType @join__field(graph: BASS)
  assemblyRelationship: AssemblyRelationship @join__field(graph: BASS)
  baseUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  materialClasses(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: BASS)
  properties(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty] @join__field(graph: BASS)
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @join__field(graph: BASS)
  alternates(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @join__field(graph: BASS)
  isAssembledFrom(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @join__field(graph: BASS)
  isComponentOf(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion @join__field(graph: BASS)
  uomConversions(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion] @join__field(graph: BASS)
  materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  materialClassesAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult @join__field(graph: BASS)
  materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult @join__field(graph: BASS)
  alternatesAggregate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult @join__field(graph: BASS)
  isAssembledFromAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult @join__field(graph: BASS)
  uomConversionsAggregate(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult @join__field(graph: BASS)
  materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
  inheritedProperties(options: MaterialInheritedPropertyOptions): [MaterialInheritedProperty] @join__field(graph: CORE)
}

type MaterialDefinitionVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
}

input MaterialDefinitionVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  assemblyType: AssemblyType_exact
  assemblyRelationship: AssemblyRelationship_exact
  has: [MaterialDefinitionVersionHasFilter]
  and: [MaterialDefinitionVersionFilter]
  or: [MaterialDefinitionVersionFilter]
  not: MaterialDefinitionVersionFilter
}

enum MaterialDefinitionVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  materialDefinition @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  assemblyType @join__enumValue(graph: BASS)
  assemblyRelationship @join__enumValue(graph: BASS)
  baseUnitOfMeasure @join__enumValue(graph: BASS)
  materialClasses @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  alternates @join__enumValue(graph: BASS)
  isAssembledFrom @join__enumValue(graph: BASS)
  isComponentOf @join__enumValue(graph: BASS)
  uomConversions @join__enumValue(graph: BASS)
  materialLots @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
}

input MaterialDefinitionVersionOrder
  @join__type(graph: BASS)
{
  asc: MaterialDefinitionVersionOrderable
  desc: MaterialDefinitionVersionOrderable
  then: MaterialDefinitionVersionOrder
}

enum MaterialDefinitionVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input MaterialDefinitionVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  materialDefinition: MaterialDefinitionRef
  isActiveVersionOf: MaterialDefinitionRef
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  baseUnitOfMeasure: UnitOfMeasureRef
  materialClasses: [MaterialClassRef]
  properties: [MaterialDefinitionPropertyRef]
  materialActual: [MaterialActualRef]
  alternates: [MaterialAlternateRef]
  isAssembledFrom: [MaterialDefinitionVersionRef]
  isComponentOf: MaterialDefinitionVersionRef
  uomConversions: [UnitOfMeasureConversionRef]
  materialLots: [MaterialLotRef]
  stateModels: [StateModelDefinitionRef]
}

input MaterialDefinitionVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  materialDefinition: MaterialDefinitionRef
  isActiveVersionOf: MaterialDefinitionRef
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  baseUnitOfMeasure: UnitOfMeasureRef
  materialClasses: [MaterialClassRef]
  properties: [MaterialDefinitionPropertyRef]
  materialActual: [MaterialActualRef]
  alternates: [MaterialAlternateRef]
  isAssembledFrom: [MaterialDefinitionVersionRef]
  isComponentOf: MaterialDefinitionVersionRef
  uomConversions: [UnitOfMeasureConversionRef]
  materialLots: [MaterialLotRef]
  stateModels: [StateModelDefinitionRef]
}

type MaterialInheritedProperty
  @join__type(graph: CORE)
{
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasure
  materialDefinitionProperty: MaterialDefinitionProperty
  materialClassProperty: MaterialClassProperty

  """ Inverse relation """
  materialDefinitionVersion: MaterialDefinitionVersion!
}

input MaterialInheritedPropertyFilter
  @join__type(graph: CORE)
{
  and: [MaterialInheritedPropertyFilter]
  description: Input_StringExactFilter_StringFullTextFilter
  effectiveEnd: DateTimeFilter
  effectiveStart: DateTimeFilter
  has: [MaterialInheritedPropertyHasFilter]
  id: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  iid: [ID!]
  label: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  not: MaterialInheritedPropertyFilter
  or: [MaterialInheritedPropertyFilter]
  value: Input_StringExactFilter_StringFullTextFilter
}

enum MaterialInheritedPropertyHasFilter
  @join__type(graph: CORE)
{
  acl @join__enumValue(graph: CORE)
  children @join__enumValue(graph: CORE)
  correspondsTo @join__enumValue(graph: CORE)
  description @join__enumValue(graph: CORE)
  effectiveEnd @join__enumValue(graph: CORE)
  effectiveStart @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  label @join__enumValue(graph: CORE)
  materialActualProperties @join__enumValue(graph: CORE)
  materialRequirementProperties @join__enumValue(graph: CORE)
  materialSpecificationProperties @join__enumValue(graph: CORE)
  parent @join__enumValue(graph: CORE)
  recordsMeasurementOf @join__enumValue(graph: CORE)
  value @join__enumValue(graph: CORE)
  valueUnitOfMeasure @join__enumValue(graph: CORE)
}

input MaterialInheritedPropertyOptions
  @join__type(graph: CORE)
{
  includeInstanceProperties: Boolean
  inheritedPropertyFilter: MaterialInheritedPropertyFilter
}

type MaterialLot
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  storageLocationOperationalLocation(filter: OperationalLocationFilter): OperationalLocation
  storageLocationEquipment(filter: EquipmentFilter): Equipment
  storageLocationPhysicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  isAssembledFromMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  isComponentOfMaterialLot(filter: MaterialLotFilter): MaterialLot
  properties(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
  materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition!
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion!
  childSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  isAssembledFromMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  isComponentOfMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  isAssembledFromMaterialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
  propertiesAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
  childSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
  isAssembledFromMaterialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
  materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
  materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
  eventsAggregate(filter: EventFilter): EventAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
}

type MaterialLotAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  storageLocationDescriptionMin: String
  storageLocationDescriptionMax: String
  statusMin: String
  statusMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialLotFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  storageLocationDescription: StringExactFilter_StringFullTextFilter
  assemblyType: AssemblyType_exact
  assemblyRelationship: AssemblyRelationship_exact
  status: StringExactFilter_StringFullTextFilter
  disposition: Disposition_exact
  has: [MaterialLotHasFilter]
  and: [MaterialLotFilter]
  or: [MaterialLotFilter]
  not: MaterialLotFilter
}

enum MaterialLotHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  storageLocationOperationalLocation @join__enumValue(graph: BASS)
  storageLocationEquipment @join__enumValue(graph: BASS)
  storageLocationPhysicalAsset @join__enumValue(graph: BASS)
  storageLocationDescription @join__enumValue(graph: BASS)
  assemblyType @join__enumValue(graph: BASS)
  assemblyRelationship @join__enumValue(graph: BASS)
  status @join__enumValue(graph: BASS)
  disposition @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUnitOfMeasure @join__enumValue(graph: BASS)
  isAssembledFromMaterialLot @join__enumValue(graph: BASS)
  isComponentOfMaterialLot @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  materialDefinition @join__enumValue(graph: BASS)
  materialDefinitionVersion @join__enumValue(graph: BASS)
  childSubLot @join__enumValue(graph: BASS)
  isAssembledFromMaterialSubLot @join__enumValue(graph: BASS)
  isComponentOfMaterialSubLot @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
  materialRequirements @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  stateModelInstances @join__enumValue(graph: BASS)
}

input MaterialLotOrder
  @join__type(graph: BASS)
{
  asc: MaterialLotOrderable
  desc: MaterialLotOrderable
  then: MaterialLotOrder
}

enum MaterialLotOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  storageLocationDescription @join__enumValue(graph: BASS)
  status @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input MaterialLotPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocationOperationalLocation: OperationalLocationRef
  storageLocationEquipment: EquipmentRef
  storageLocationPhysicalAsset: PhysicalAssetRef
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure: UnitOfMeasureRef
  isAssembledFromMaterialLot: [MaterialLotRef]
  isComponentOfMaterialLot: MaterialLotRef
  properties: [MaterialLotPropertyRef]
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  childSubLot: [MaterialSubLotRef]
  isAssembledFromMaterialSubLot: [MaterialSubLotRef]
  isComponentOfMaterialSubLot: MaterialSubLotRef
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  events: [EventRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
}

type MaterialLotProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  materialLot(filter: MaterialLotFilter): MaterialLot
  materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  children(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
  parent(filter: MaterialLotPropertyFilter): MaterialLotProperty
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
  materialSpecificationProperties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
  materialRequirementProperties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
  materialActualProperties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
  materialSpecificationPropertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
  materialRequirementPropertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
  materialActualPropertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
}

type MaterialLotPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input MaterialLotPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [MaterialLotPropertyHasFilter]
  and: [MaterialLotPropertyFilter]
  or: [MaterialLotPropertyFilter]
  not: MaterialLotPropertyFilter
}

enum MaterialLotPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  materialLot @join__enumValue(graph: BASS)
  materialSubLot @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  materialDefinitionProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  materialSpecificationProperties @join__enumValue(graph: BASS)
  materialRequirementProperties @join__enumValue(graph: BASS)
  materialActualProperties @join__enumValue(graph: BASS)
}

input MaterialLotPropertyOrder
  @join__type(graph: BASS)
{
  asc: MaterialLotPropertyOrderable
  desc: MaterialLotPropertyOrderable
  then: MaterialLotPropertyOrder
}

enum MaterialLotPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input MaterialLotPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  children: [MaterialLotPropertyRef]
  parent: MaterialLotPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialLotPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  children: [MaterialLotPropertyRef]
  parent: MaterialLotPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  materialSpecificationProperties: [MaterialSpecificationPropertyRef]
  materialRequirementProperties: [MaterialRequirementPropertyRef]
  materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialLotRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocationOperationalLocation: OperationalLocationRef
  storageLocationEquipment: EquipmentRef
  storageLocationPhysicalAsset: PhysicalAssetRef
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure: UnitOfMeasureRef
  isAssembledFromMaterialLot: [MaterialLotRef]
  isComponentOfMaterialLot: MaterialLotRef
  properties: [MaterialLotPropertyRef]
  materialDefinition: MaterialDefinitionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  childSubLot: [MaterialSubLotRef]
  isAssembledFromMaterialSubLot: [MaterialSubLotRef]
  isComponentOfMaterialSubLot: MaterialSubLotRef
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  events: [EventRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  stateModelInstances: [StateModelInstanceRef]
}

type MaterialRequirement
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  storageLocation(filter: OperationalLocationFilter): OperationalLocation
  materialUse: MaterialUse!
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement
  children(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  parent(filter: MaterialRequirementFilter): MaterialRequirement
  properties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
  materialClass(filter: MaterialClassFilter): MaterialClass
  material(filter: MaterialDefinitionFilter): MaterialDefinition
  materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  jobOrder(filter: JobOrderFilter): JobOrder
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
  propertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
  materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
  materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type MaterialRequirementAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialRequirementFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  assemblyType: AssemblyType_exact
  assemblyRelationship: AssemblyRelationship_exact
  has: [MaterialRequirementHasFilter]
  and: [MaterialRequirementFilter]
  or: [MaterialRequirementFilter]
  not: MaterialRequirementFilter
}

enum MaterialRequirementHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  storageLocation @join__enumValue(graph: BASS)
  materialUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  assemblyType @join__enumValue(graph: BASS)
  assemblyRelationship @join__enumValue(graph: BASS)
  segmentRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  materialClass @join__enumValue(graph: BASS)
  material @join__enumValue(graph: BASS)
  materialLots @join__enumValue(graph: BASS)
  materialSubLots @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input MaterialRequirementOrder
  @join__type(graph: BASS)
{
  asc: MaterialRequirementOrderable
  desc: MaterialRequirementOrderable
  then: MaterialRequirementOrder
}

enum MaterialRequirementOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input MaterialRequirementPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentRequirement: SegmentRequirementRef
  children: [MaterialRequirementRef]
  parent: MaterialRequirementRef
  properties: [MaterialRequirementPropertyRef]
  materialClass: MaterialClassRef
  material: MaterialDefinitionRef
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type MaterialRequirementProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement!
  children(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
  parent(filter: MaterialRequirementPropertyFilter): MaterialRequirementProperty
  materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty
  materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
}

type MaterialRequirementPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialRequirementPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [MaterialRequirementPropertyHasFilter]
  and: [MaterialRequirementPropertyFilter]
  or: [MaterialRequirementPropertyFilter]
  not: MaterialRequirementPropertyFilter
}

enum MaterialRequirementPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  materialRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  materialClassProperty @join__enumValue(graph: BASS)
  materialDefinitionProperty @join__enumValue(graph: BASS)
  materialLotProperty @join__enumValue(graph: BASS)
}

input MaterialRequirementPropertyOrder
  @join__type(graph: BASS)
{
  asc: MaterialRequirementPropertyOrderable
  desc: MaterialRequirementPropertyOrderable
  then: MaterialRequirementPropertyOrder
}

enum MaterialRequirementPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input MaterialRequirementPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  materialRequirement: MaterialRequirementRef
  children: [MaterialRequirementPropertyRef]
  parent: MaterialRequirementPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

input MaterialRequirementPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  materialRequirement: MaterialRequirementRef
  children: [MaterialRequirementPropertyRef]
  parent: MaterialRequirementPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

input MaterialRequirementRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  segmentRequirement: SegmentRequirementRef
  children: [MaterialRequirementRef]
  parent: MaterialRequirementRef
  properties: [MaterialRequirementPropertyRef]
  materialClass: MaterialClassRef
  material: MaterialDefinitionRef
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type MaterialSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  storageLocation(filter: OperationalLocationFilter): OperationalLocation
  materialUse: MaterialUse!
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion
  children(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  parent(filter: MaterialSpecificationFilter): MaterialSpecification
  properties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
  materialsBill(filter: OperationsMaterialBillFilter): OperationsMaterialBill
  materialClass(filter: MaterialClassFilter): MaterialClass
  material(filter: MaterialDefinitionFilter): MaterialDefinition
  materialLot(filter: MaterialLotFilter): MaterialLot
  materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
  propertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type MaterialSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  materialUse: MaterialUse_hash
  has: [MaterialSpecificationHasFilter]
  and: [MaterialSpecificationFilter]
  or: [MaterialSpecificationFilter]
  not: MaterialSpecificationFilter
}

enum MaterialSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  storageLocation @join__enumValue(graph: BASS)
  materialUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  assemblyType @join__enumValue(graph: BASS)
  assemblyRelationship @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  processSegmentVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  materialsBill @join__enumValue(graph: BASS)
  materialClass @join__enumValue(graph: BASS)
  material @join__enumValue(graph: BASS)
  materialLot @join__enumValue(graph: BASS)
  materialSubLot @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
}

input MaterialSpecificationOrder
  @join__type(graph: BASS)
{
  asc: MaterialSpecificationOrderable
  desc: MaterialSpecificationOrderable
  then: MaterialSpecificationOrder
}

enum MaterialSpecificationOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input MaterialSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [MaterialSpecificationRef]
  parent: MaterialSpecificationRef
  properties: [MaterialSpecificationPropertyRef]
  materialsBill: OperationsMaterialBillRef
  materialClass: MaterialClassRef
  material: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type MaterialSpecificationProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  children(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
  parent(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationProperty
  materialSpecification(filter: MaterialSpecificationFilter): MaterialSpecification!
  materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty
  materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
}

type MaterialSpecificationPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialSpecificationPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [MaterialSpecificationPropertyHasFilter]
  and: [MaterialSpecificationPropertyFilter]
  or: [MaterialSpecificationPropertyFilter]
  not: MaterialSpecificationPropertyFilter
}

enum MaterialSpecificationPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  materialSpecification @join__enumValue(graph: BASS)
  materialClassProperty @join__enumValue(graph: BASS)
  materialDefinitionProperty @join__enumValue(graph: BASS)
  materialLotProperty @join__enumValue(graph: BASS)
}

input MaterialSpecificationPropertyOrder
  @join__type(graph: BASS)
{
  asc: MaterialSpecificationPropertyOrderable
  desc: MaterialSpecificationPropertyOrderable
  then: MaterialSpecificationPropertyOrder
}

enum MaterialSpecificationPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input MaterialSpecificationPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [MaterialSpecificationPropertyRef]
  parent: MaterialSpecificationPropertyRef
  materialSpecification: MaterialSpecificationRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

input MaterialSpecificationPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [MaterialSpecificationPropertyRef]
  parent: MaterialSpecificationPropertyRef
  materialSpecification: MaterialSpecificationRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

input MaterialSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocation: OperationalLocationRef
  materialUse: MaterialUse
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [MaterialSpecificationRef]
  parent: MaterialSpecificationRef
  properties: [MaterialSpecificationPropertyRef]
  materialsBill: OperationsMaterialBillRef
  materialClass: MaterialClassRef
  material: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type MaterialSubLot
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  storageLocationOperationalLocation(filter: OperationalLocationFilter): OperationalLocation
  storageLocationEquipment(filter: EquipmentFilter): Equipment
  storageLocationPhysicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  children(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  parent(filter: MaterialSubLotFilter): MaterialSubLot
  properties(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
  isAssembledFromMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  isComponentOfMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  isComponentOfMaterialLot(filter: MaterialLotFilter): MaterialLot
  isAssembledFromMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  parentMaterialLot(filter: MaterialLotFilter): MaterialLot
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  childrenAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
  propertiesAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
  isAssembledFromMaterialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
  isAssembledFromMaterialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
  materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
  materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
  eventsAggregate(filter: EventFilter): EventAggregateResult
  stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type MaterialSubLotAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  storageLocationDescriptionMin: String
  storageLocationDescriptionMax: String
  statusMin: String
  statusMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialSubLotFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  storageLocationDescription: StringExactFilter_StringFullTextFilter
  assemblyType: AssemblyType_exact
  assemblyRelationship: AssemblyRelationship_exact
  status: StringExactFilter_StringFullTextFilter
  disposition: Disposition_exact
  has: [MaterialSubLotHasFilter]
  and: [MaterialSubLotFilter]
  or: [MaterialSubLotFilter]
  not: MaterialSubLotFilter
}

enum MaterialSubLotHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  storageLocationOperationalLocation @join__enumValue(graph: BASS)
  storageLocationEquipment @join__enumValue(graph: BASS)
  storageLocationPhysicalAsset @join__enumValue(graph: BASS)
  storageLocationDescription @join__enumValue(graph: BASS)
  assemblyType @join__enumValue(graph: BASS)
  assemblyRelationship @join__enumValue(graph: BASS)
  status @join__enumValue(graph: BASS)
  disposition @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUnitOfMeasure @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  isAssembledFromMaterialSubLot @join__enumValue(graph: BASS)
  isComponentOfMaterialSubLot @join__enumValue(graph: BASS)
  isComponentOfMaterialLot @join__enumValue(graph: BASS)
  isAssembledFromMaterialLot @join__enumValue(graph: BASS)
  parentMaterialLot @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
  materialRequirements @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  stateModelInstances @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
}

input MaterialSubLotOrder
  @join__type(graph: BASS)
{
  asc: MaterialSubLotOrderable
  desc: MaterialSubLotOrderable
  then: MaterialSubLotOrder
}

enum MaterialSubLotOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  storageLocationDescription @join__enumValue(graph: BASS)
  status @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input MaterialSubLotPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocationOperationalLocation: OperationalLocationRef
  storageLocationEquipment: EquipmentRef
  storageLocationPhysicalAsset: PhysicalAssetRef
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure: UnitOfMeasureRef
  children: [MaterialSubLotRef]
  parent: MaterialSubLotRef
  properties: [MaterialLotPropertyRef]
  isAssembledFromMaterialSubLot: [MaterialSubLotRef]
  isComponentOfMaterialSubLot: MaterialSubLotRef
  isComponentOfMaterialLot: MaterialLotRef
  isAssembledFromMaterialLot: [MaterialLotRef]
  parentMaterialLot: MaterialLotRef
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

input MaterialSubLotRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  storageLocationOperationalLocation: OperationalLocationRef
  storageLocationEquipment: EquipmentRef
  storageLocationPhysicalAsset: PhysicalAssetRef
  storageLocationDescription: String
  assemblyType: AssemblyType
  assemblyRelationship: AssemblyRelationship
  status: String
  disposition: Disposition
  quantity: Float
  quantityUnitOfMeasure: UnitOfMeasureRef
  children: [MaterialSubLotRef]
  parent: MaterialSubLotRef
  properties: [MaterialLotPropertyRef]
  isAssembledFromMaterialSubLot: [MaterialSubLotRef]
  isComponentOfMaterialSubLot: MaterialSubLotRef
  isComponentOfMaterialLot: MaterialLotRef
  isAssembledFromMaterialLot: [MaterialLotRef]
  parentMaterialLot: MaterialLotRef
  materialSpecifications: [MaterialSpecificationRef]
  materialRequirements: [MaterialRequirementRef]
  materialActual: [MaterialActualRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

enum MaterialUse
  @join__type(graph: BASS)
{
  Initial @join__enumValue(graph: BASS)
  Produced @join__enumValue(graph: BASS)
  ByProduct @join__enumValue(graph: BASS)
  CoProduct @join__enumValue(graph: BASS)
  Consumable @join__enumValue(graph: BASS)
  Consumed @join__enumValue(graph: BASS)
  Transferred @join__enumValue(graph: BASS)
  Scrap @join__enumValue(graph: BASS)
  Rework @join__enumValue(graph: BASS)
  Received @join__enumValue(graph: BASS)
  Packed @join__enumValue(graph: BASS)
  Shipped @join__enumValue(graph: BASS)
  Adjustment @join__enumValue(graph: BASS)
}

input MaterialUse_hash
  @join__type(graph: BASS)
{
  eq: MaterialUse
  in: [MaterialUse]
}

type Menu
  @join__type(graph: BASS)
{
  iid: ID!
  label: String!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  parent(filter: MenuFilter): Menu
  children(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu!]
  menuPage: String
  icon: String
  isSection: Boolean!
  isPage: Boolean!
  orderNumber: Int
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: MenuFilter): MenuAggregateResult
}

type MenuAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  labelMin: String
  labelMax: String
  menuPageMin: String
  menuPageMax: String
  iconMin: String
  iconMax: String
  orderNumberMin: Int
  orderNumberMax: Int
  orderNumberSum: Int
  orderNumberAvg: Float
}

input MenuFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  label: StringHashFilter
  has: [MenuHasFilter]
  and: [MenuFilter]
  or: [MenuFilter]
  not: MenuFilter
}

enum MenuHasFilter
  @join__type(graph: BASS)
{
  label @join__enumValue(graph: BASS)
  acl @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  menuPage @join__enumValue(graph: BASS)
  icon @join__enumValue(graph: BASS)
  isSection @join__enumValue(graph: BASS)
  isPage @join__enumValue(graph: BASS)
  orderNumber @join__enumValue(graph: BASS)
}

input MenuOrder
  @join__type(graph: BASS)
{
  asc: MenuOrderable
  desc: MenuOrderable
  then: MenuOrder
}

enum MenuOrderable
  @join__type(graph: BASS)
{
  label @join__enumValue(graph: BASS)
  menuPage @join__enumValue(graph: BASS)
  icon @join__enumValue(graph: BASS)
  orderNumber @join__enumValue(graph: BASS)
}

input MenuPatch
  @join__type(graph: BASS)
{
  label: String
  acl: [AccessPermissionRef]
  parent: MenuRef
  children: [MenuRef!]
  menuPage: String
  icon: String
  isSection: Boolean
  isPage: Boolean
  orderNumber: Int
}

input MenuRef
  @join__type(graph: BASS)
{
  iid: ID
  label: String
  acl: [AccessPermissionRef]
  parent: MenuRef
  children: [MenuRef!]
  menuPage: String
  icon: String
  isSection: Boolean
  isPage: Boolean
  orderNumber: Int
}

enum MessageKey
  @join__type(graph: BASS)
{
  MessageValue @join__enumValue(graph: BASS)
  SourceTimestamp @join__enumValue(graph: BASS)
  ServerTimestamp @join__enumValue(graph: BASS)
}

input MessageKey_hash
  @join__type(graph: BASS)
{
  eq: MessageKey
  in: [MessageKey]
}

enum MethodArgumentDirection
  @join__type(graph: BASS)
{
  DirectionIn @join__enumValue(graph: BASS)
  DirectionOut @join__enumValue(graph: BASS)
}

enum Mode
  @join__type(graph: BASS)
{
  BATCH @join__enumValue(graph: BASS)
  SINGLE @join__enumValue(graph: BASS)
}

enum MOMFunctionEnum
  @join__type(graph: BASS)
{
  Resource_Management @join__enumValue(graph: BASS)
  Definition_Management @join__enumValue(graph: BASS)
  Detailed_Scheduling @join__enumValue(graph: BASS)
  Dispatching @join__enumValue(graph: BASS)
  Execution_Management @join__enumValue(graph: BASS)
  Data_Collection @join__enumValue(graph: BASS)
  Performance_Analysis @join__enumValue(graph: BASS)
  Tracking @join__enumValue(graph: BASS)
}

type Multiplicity
  @join__type(graph: BASS)
{
  Min: Int
  Max: Int
}

type MultiplicityAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  MinMin: Int
  MinMax: Int
  MinSum: Int
  MinAvg: Float
  MaxMin: Int
  MaxMax: Int
  MaxSum: Int
  MaxAvg: Float
}

input MultiplicityFilter
  @join__type(graph: BASS)
{
  has: [MultiplicityHasFilter]
  and: [MultiplicityFilter]
  or: [MultiplicityFilter]
  not: MultiplicityFilter
}

enum MultiplicityHasFilter
  @join__type(graph: BASS)
{
  Min @join__enumValue(graph: BASS)
  Max @join__enumValue(graph: BASS)
}

input MultiplicityOrder
  @join__type(graph: BASS)
{
  asc: MultiplicityOrderable
  desc: MultiplicityOrderable
  then: MultiplicityOrder
}

enum MultiplicityOrderable
  @join__type(graph: BASS)
{
  Min @join__enumValue(graph: BASS)
  Max @join__enumValue(graph: BASS)
}

input MultiplicityPatch
  @join__type(graph: BASS)
{
  Min: Int
  Max: Int
}

input MultiplicityRef
  @join__type(graph: BASS)
{
  Min: Int
  Max: Int
}

type MultiPolygon
  @join__type(graph: BASS)
{
  polygons: [Polygon!]!
}

input MultiPolygonRef
  @join__type(graph: BASS)
{
  polygons: [PolygonRef!]!
}

type Mutation
  @join__type(graph: BASS)
  @join__type(graph: BPMN_ENGINE)
  @join__type(graph: CORE)
{
  addEvent(input: [AddEventInput!]!): AddEventPayload @join__field(graph: BASS)
  updateEvent(input: UpdateEventInput!): UpdateEventPayload @join__field(graph: BASS)
  deleteEvent(filter: EventFilter!): DeleteEventPayload @join__field(graph: BASS)
  addAlarmEvent(input: [AddAlarmEventInput!]!): AddAlarmEventPayload @join__field(graph: BASS)
  updateAlarmEvent(input: UpdateAlarmEventInput!): UpdateAlarmEventPayload @join__field(graph: BASS)
  deleteAlarmEvent(filter: AlarmEventFilter!): DeleteAlarmEventPayload @join__field(graph: BASS)
  addEventType(input: [AddEventTypeInput!]!): AddEventTypePayload @join__field(graph: BASS)
  updateEventType(input: UpdateEventTypeInput!): UpdateEventTypePayload @join__field(graph: BASS)
  deleteEventType(filter: EventTypeFilter!): DeleteEventTypePayload @join__field(graph: BASS)
  addEventSubtype(input: [AddEventSubtypeInput!]!): AddEventSubtypePayload @join__field(graph: BASS)
  updateEventSubtype(input: UpdateEventSubtypeInput!): UpdateEventSubtypePayload @join__field(graph: BASS)
  deleteEventSubtype(filter: EventSubtypeFilter!): DeleteEventSubtypePayload @join__field(graph: BASS)
  addEventProperty(input: [AddEventPropertyInput!]!): AddEventPropertyPayload @join__field(graph: BASS)
  updateEventProperty(input: UpdateEventPropertyInput!): UpdateEventPropertyPayload @join__field(graph: BASS)
  deleteEventProperty(filter: EventPropertyFilter!): DeleteEventPropertyPayload @join__field(graph: BASS)
  addEventAssociation(input: [AddEventAssociationInput!]!): AddEventAssociationPayload @join__field(graph: BASS)
  updateEventAssociation(input: UpdateEventAssociationInput!): UpdateEventAssociationPayload @join__field(graph: BASS)
  deleteEventAssociation(filter: EventAssociationFilter!): DeleteEventAssociationPayload @join__field(graph: BASS)
  addHierarchyScope(input: [AddHierarchyScopeInput!]!, upsert: Boolean): AddHierarchyScopePayload @join__field(graph: BASS)
  updateHierarchyScope(input: UpdateHierarchyScopeInput!): UpdateHierarchyScopePayload @join__field(graph: BASS)
  deleteHierarchyScope(filter: HierarchyScopeFilter!): DeleteHierarchyScopePayload @join__field(graph: BASS)
  addSpatialDefinition(input: [AddSpatialDefinitionInput!]!, upsert: Boolean): AddSpatialDefinitionPayload @join__field(graph: BASS)
  updateSpatialDefinition(input: UpdateSpatialDefinitionInput!): UpdateSpatialDefinitionPayload @join__field(graph: BASS)
  deleteSpatialDefinition(filter: SpatialDefinitionFilter!): DeleteSpatialDefinitionPayload @join__field(graph: BASS)
  addOperationalLocationClass(input: [AddOperationalLocationClassInput!]!, upsert: Boolean): AddOperationalLocationClassPayload @join__field(graph: BASS)
  updateOperationalLocationClass(input: UpdateOperationalLocationClassInput!): UpdateOperationalLocationClassPayload @join__field(graph: BASS)
  deleteOperationalLocationClass(filter: OperationalLocationClassFilter!): DeleteOperationalLocationClassPayload @join__field(graph: BASS)
  addOperationalLocationClassVersion(input: [AddOperationalLocationClassVersionInput!]!): AddOperationalLocationClassVersionPayload @join__field(graph: BASS)
  updateOperationalLocationClassVersion(input: UpdateOperationalLocationClassVersionInput!): UpdateOperationalLocationClassVersionPayload @join__field(graph: BASS)
  deleteOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter!): DeleteOperationalLocationClassVersionPayload @join__field(graph: BASS)
  addOperationalLocationClassProperty(input: [AddOperationalLocationClassPropertyInput!]!, upsert: Boolean): AddOperationalLocationClassPropertyPayload @join__field(graph: BASS)
  updateOperationalLocationClassProperty(input: UpdateOperationalLocationClassPropertyInput!): UpdateOperationalLocationClassPropertyPayload @join__field(graph: BASS)
  deleteOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter!): DeleteOperationalLocationClassPropertyPayload @join__field(graph: BASS)
  addOperationalLocation(input: [AddOperationalLocationInput!]!, upsert: Boolean): AddOperationalLocationPayload @join__field(graph: BASS)
  updateOperationalLocation(input: UpdateOperationalLocationInput!): UpdateOperationalLocationPayload @join__field(graph: BASS)
  deleteOperationalLocation(filter: OperationalLocationFilter!): DeleteOperationalLocationPayload @join__field(graph: BASS)
  addOperationalLocationVersion(input: [AddOperationalLocationVersionInput!]!): AddOperationalLocationVersionPayload @join__field(graph: BASS)
  updateOperationalLocationVersion(input: UpdateOperationalLocationVersionInput!): UpdateOperationalLocationVersionPayload @join__field(graph: BASS)
  deleteOperationalLocationVersion(filter: OperationalLocationVersionFilter!): DeleteOperationalLocationVersionPayload @join__field(graph: BASS)
  addOperationalLocationProperty(input: [AddOperationalLocationPropertyInput!]!, upsert: Boolean): AddOperationalLocationPropertyPayload @join__field(graph: BASS)
  updateOperationalLocationProperty(input: UpdateOperationalLocationPropertyInput!): UpdateOperationalLocationPropertyPayload @join__field(graph: BASS)
  deleteOperationalLocationProperty(filter: OperationalLocationPropertyFilter!): DeleteOperationalLocationPropertyPayload @join__field(graph: BASS)
  addPersonnelClass(input: [AddPersonnelClassInput!]!, upsert: Boolean): AddPersonnelClassPayload @join__field(graph: BASS)
  updatePersonnelClass(input: UpdatePersonnelClassInput!): UpdatePersonnelClassPayload @join__field(graph: BASS)
  deletePersonnelClass(filter: PersonnelClassFilter!): DeletePersonnelClassPayload @join__field(graph: BASS)
  addPersonnelClassVersion(input: [AddPersonnelClassVersionInput!]!): AddPersonnelClassVersionPayload @join__field(graph: BASS)
  updatePersonnelClassVersion(input: UpdatePersonnelClassVersionInput!): UpdatePersonnelClassVersionPayload @join__field(graph: BASS)
  deletePersonnelClassVersion(filter: PersonnelClassVersionFilter!): DeletePersonnelClassVersionPayload @join__field(graph: BASS)
  addPersonnelClassProperty(input: [AddPersonnelClassPropertyInput!]!, upsert: Boolean): AddPersonnelClassPropertyPayload @join__field(graph: BASS)
  updatePersonnelClassProperty(input: UpdatePersonnelClassPropertyInput!): UpdatePersonnelClassPropertyPayload @join__field(graph: BASS)
  deletePersonnelClassProperty(filter: PersonnelClassPropertyFilter!): DeletePersonnelClassPropertyPayload @join__field(graph: BASS)
  addPerson(input: [AddPersonInput!]!, upsert: Boolean): AddPersonPayload @join__field(graph: BASS)
  updatePerson(input: UpdatePersonInput!): UpdatePersonPayload @join__field(graph: BASS)
  deletePerson(filter: PersonFilter!): DeletePersonPayload @join__field(graph: BASS)
  addPersonVersion(input: [AddPersonVersionInput!]!): AddPersonVersionPayload @join__field(graph: BASS)
  updatePersonVersion(input: UpdatePersonVersionInput!): UpdatePersonVersionPayload @join__field(graph: BASS)
  deletePersonVersion(filter: PersonVersionFilter!): DeletePersonVersionPayload @join__field(graph: BASS)
  addPersonProperty(input: [AddPersonPropertyInput!]!, upsert: Boolean): AddPersonPropertyPayload @join__field(graph: BASS)
  updatePersonProperty(input: UpdatePersonPropertyInput!): UpdatePersonPropertyPayload @join__field(graph: BASS)
  deletePersonProperty(filter: PersonPropertyFilter!): DeletePersonPropertyPayload @join__field(graph: BASS)
  addEquipmentClass(input: [AddEquipmentClassInput!]!, upsert: Boolean): AddEquipmentClassPayload @join__field(graph: BASS)
  updateEquipmentClass(input: UpdateEquipmentClassInput!): UpdateEquipmentClassPayload @join__field(graph: BASS)
  deleteEquipmentClass(filter: EquipmentClassFilter!): DeleteEquipmentClassPayload @join__field(graph: BASS)
  addEquipmentClassVersion(input: [AddEquipmentClassVersionInput!]!): AddEquipmentClassVersionPayload @join__field(graph: BASS)
  updateEquipmentClassVersion(input: UpdateEquipmentClassVersionInput!): UpdateEquipmentClassVersionPayload @join__field(graph: BASS)
  deleteEquipmentClassVersion(filter: EquipmentClassVersionFilter!): DeleteEquipmentClassVersionPayload @join__field(graph: BASS)
  addEquipmentClassProperty(input: [AddEquipmentClassPropertyInput!]!, upsert: Boolean): AddEquipmentClassPropertyPayload @join__field(graph: BASS)
  updateEquipmentClassProperty(input: UpdateEquipmentClassPropertyInput!): UpdateEquipmentClassPropertyPayload @join__field(graph: BASS)
  deleteEquipmentClassProperty(filter: EquipmentClassPropertyFilter!): DeleteEquipmentClassPropertyPayload @join__field(graph: BASS)
  addEquipment(input: [AddEquipmentInput!]!, upsert: Boolean): AddEquipmentPayload @join__field(graph: BASS)
  updateEquipment(input: UpdateEquipmentInput!): UpdateEquipmentPayload @join__field(graph: BASS)
  deleteEquipment(filter: EquipmentFilter!): DeleteEquipmentPayload @join__field(graph: BASS)
  addEquipmentVersion(input: [AddEquipmentVersionInput!]!): AddEquipmentVersionPayload @join__field(graph: BASS)
  updateEquipmentVersion(input: UpdateEquipmentVersionInput!): UpdateEquipmentVersionPayload @join__field(graph: BASS)
  deleteEquipmentVersion(filter: EquipmentVersionFilter!): DeleteEquipmentVersionPayload @join__field(graph: BASS)
  addEquipmentDataSource(input: [AddEquipmentDataSourceInput!]!): AddEquipmentDataSourcePayload @join__field(graph: BASS)
  updateEquipmentDataSource(input: UpdateEquipmentDataSourceInput!): UpdateEquipmentDataSourcePayload @join__field(graph: BASS)
  deleteEquipmentDataSource(filter: EquipmentDataSourceFilter!): DeleteEquipmentDataSourcePayload @join__field(graph: BASS)
  addEquipmentProperty(input: [AddEquipmentPropertyInput!]!, upsert: Boolean): AddEquipmentPropertyPayload @join__field(graph: BASS)
  updateEquipmentProperty(input: UpdateEquipmentPropertyInput!): UpdateEquipmentPropertyPayload @join__field(graph: BASS)
  deleteEquipmentProperty(filter: EquipmentPropertyFilter!): DeleteEquipmentPropertyPayload @join__field(graph: BASS)
  addPhysicalAssetClass(input: [AddPhysicalAssetClassInput!]!, upsert: Boolean): AddPhysicalAssetClassPayload @join__field(graph: BASS)
  updatePhysicalAssetClass(input: UpdatePhysicalAssetClassInput!): UpdatePhysicalAssetClassPayload @join__field(graph: BASS)
  deletePhysicalAssetClass(filter: PhysicalAssetClassFilter!): DeletePhysicalAssetClassPayload @join__field(graph: BASS)
  addPhysicalAssetClassVersion(input: [AddPhysicalAssetClassVersionInput!]!): AddPhysicalAssetClassVersionPayload @join__field(graph: BASS)
  updatePhysicalAssetClassVersion(input: UpdatePhysicalAssetClassVersionInput!): UpdatePhysicalAssetClassVersionPayload @join__field(graph: BASS)
  deletePhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter!): DeletePhysicalAssetClassVersionPayload @join__field(graph: BASS)
  addPhysicalAssetClassProperty(input: [AddPhysicalAssetClassPropertyInput!]!, upsert: Boolean): AddPhysicalAssetClassPropertyPayload @join__field(graph: BASS)
  updatePhysicalAssetClassProperty(input: UpdatePhysicalAssetClassPropertyInput!): UpdatePhysicalAssetClassPropertyPayload @join__field(graph: BASS)
  deletePhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter!): DeletePhysicalAssetClassPropertyPayload @join__field(graph: BASS)
  addPhysicalAsset(input: [AddPhysicalAssetInput!]!, upsert: Boolean): AddPhysicalAssetPayload @join__field(graph: BASS)
  updatePhysicalAsset(input: UpdatePhysicalAssetInput!): UpdatePhysicalAssetPayload @join__field(graph: BASS)
  deletePhysicalAsset(filter: PhysicalAssetFilter!): DeletePhysicalAssetPayload @join__field(graph: BASS)
  addPhysicalAssetVersion(input: [AddPhysicalAssetVersionInput!]!): AddPhysicalAssetVersionPayload @join__field(graph: BASS)
  updatePhysicalAssetVersion(input: UpdatePhysicalAssetVersionInput!): UpdatePhysicalAssetVersionPayload @join__field(graph: BASS)
  deletePhysicalAssetVersion(filter: PhysicalAssetVersionFilter!): DeletePhysicalAssetVersionPayload @join__field(graph: BASS)
  addPhysicalAssetProperty(input: [AddPhysicalAssetPropertyInput!]!, upsert: Boolean): AddPhysicalAssetPropertyPayload @join__field(graph: BASS)
  updatePhysicalAssetProperty(input: UpdatePhysicalAssetPropertyInput!): UpdatePhysicalAssetPropertyPayload @join__field(graph: BASS)
  deletePhysicalAssetProperty(filter: PhysicalAssetPropertyFilter!): DeletePhysicalAssetPropertyPayload @join__field(graph: BASS)
  addEquipmentAssetMapping(input: [AddEquipmentAssetMappingInput!]!, upsert: Boolean): AddEquipmentAssetMappingPayload @join__field(graph: BASS)
  updateEquipmentAssetMapping(input: UpdateEquipmentAssetMappingInput!): UpdateEquipmentAssetMappingPayload @join__field(graph: BASS)
  deleteEquipmentAssetMapping(filter: EquipmentAssetMappingFilter!): DeleteEquipmentAssetMappingPayload @join__field(graph: BASS)
  addPhysicalAssetDataSource(input: [AddPhysicalAssetDataSourceInput!]!): AddPhysicalAssetDataSourcePayload @join__field(graph: BASS)
  updatePhysicalAssetDataSource(input: UpdatePhysicalAssetDataSourceInput!): UpdatePhysicalAssetDataSourcePayload @join__field(graph: BASS)
  deletePhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter!): DeletePhysicalAssetDataSourcePayload @join__field(graph: BASS)
  addMaterialClass(input: [AddMaterialClassInput!]!, upsert: Boolean): AddMaterialClassPayload @join__field(graph: BASS)
  updateMaterialClass(input: UpdateMaterialClassInput!): UpdateMaterialClassPayload @join__field(graph: BASS)
  deleteMaterialClass(filter: MaterialClassFilter!): DeleteMaterialClassPayload @join__field(graph: BASS)
  addMaterialClassVersion(input: [AddMaterialClassVersionInput!]!): AddMaterialClassVersionPayload @join__field(graph: BASS)
  updateMaterialClassVersion(input: UpdateMaterialClassVersionInput!): UpdateMaterialClassVersionPayload @join__field(graph: BASS)
  deleteMaterialClassVersion(filter: MaterialClassVersionFilter!): DeleteMaterialClassVersionPayload @join__field(graph: BASS)
  addMaterialClassProperty(input: [AddMaterialClassPropertyInput!]!, upsert: Boolean): AddMaterialClassPropertyPayload @join__field(graph: BASS)
  updateMaterialClassProperty(input: UpdateMaterialClassPropertyInput!): UpdateMaterialClassPropertyPayload @join__field(graph: BASS)
  deleteMaterialClassProperty(filter: MaterialClassPropertyFilter!): DeleteMaterialClassPropertyPayload @join__field(graph: BASS)
  addMaterialDefinition(input: [AddMaterialDefinitionInput!]!, upsert: Boolean): AddMaterialDefinitionPayload @join__field(graph: BASS)
  updateMaterialDefinition(input: UpdateMaterialDefinitionInput!): UpdateMaterialDefinitionPayload @join__field(graph: BASS)
  deleteMaterialDefinition(filter: MaterialDefinitionFilter!): DeleteMaterialDefinitionPayload @join__field(graph: BASS)
  addMaterialDefinitionVersion(input: [AddMaterialDefinitionVersionInput!]!): AddMaterialDefinitionVersionPayload @join__field(graph: BASS)
  updateMaterialDefinitionVersion(input: UpdateMaterialDefinitionVersionInput!): UpdateMaterialDefinitionVersionPayload @join__field(graph: BASS)
  deleteMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter!): DeleteMaterialDefinitionVersionPayload @join__field(graph: BASS)
  addMaterialDefinitionProperty(input: [AddMaterialDefinitionPropertyInput!]!, upsert: Boolean): AddMaterialDefinitionPropertyPayload @join__field(graph: BASS)
  updateMaterialDefinitionProperty(input: UpdateMaterialDefinitionPropertyInput!): UpdateMaterialDefinitionPropertyPayload @join__field(graph: BASS)
  deleteMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter!): DeleteMaterialDefinitionPropertyPayload @join__field(graph: BASS)
  addMaterialLot(input: [AddMaterialLotInput!]!, upsert: Boolean): AddMaterialLotPayload @join__field(graph: BASS)
  updateMaterialLot(input: UpdateMaterialLotInput!): UpdateMaterialLotPayload @join__field(graph: BASS)
  deleteMaterialLot(filter: MaterialLotFilter!): DeleteMaterialLotPayload @join__field(graph: BASS)
  addMaterialLotProperty(input: [AddMaterialLotPropertyInput!]!, upsert: Boolean): AddMaterialLotPropertyPayload @join__field(graph: BASS)
  updateMaterialLotProperty(input: UpdateMaterialLotPropertyInput!): UpdateMaterialLotPropertyPayload @join__field(graph: BASS)
  deleteMaterialLotProperty(filter: MaterialLotPropertyFilter!): DeleteMaterialLotPropertyPayload @join__field(graph: BASS)
  addMaterialSubLot(input: [AddMaterialSubLotInput!]!): AddMaterialSubLotPayload @join__field(graph: BASS)
  updateMaterialSubLot(input: UpdateMaterialSubLotInput!): UpdateMaterialSubLotPayload @join__field(graph: BASS)
  deleteMaterialSubLot(filter: MaterialSubLotFilter!): DeleteMaterialSubLotPayload @join__field(graph: BASS)
  addMaterialAlternate(input: [AddMaterialAlternateInput!]!): AddMaterialAlternatePayload @join__field(graph: BASS)
  updateMaterialAlternate(input: UpdateMaterialAlternateInput!): UpdateMaterialAlternatePayload @join__field(graph: BASS)
  deleteMaterialAlternate(filter: MaterialAlternateFilter!): DeleteMaterialAlternatePayload @join__field(graph: BASS)
  addUnitOfMeasure(input: [AddUnitOfMeasureInput!]!, upsert: Boolean): AddUnitOfMeasurePayload @join__field(graph: BASS)
  updateUnitOfMeasure(input: UpdateUnitOfMeasureInput!): UpdateUnitOfMeasurePayload @join__field(graph: BASS)
  deleteUnitOfMeasure(filter: UnitOfMeasureFilter!): DeleteUnitOfMeasurePayload @join__field(graph: BASS)
  addUnitOfMeasureConversion(input: [AddUnitOfMeasureConversionInput!]!): AddUnitOfMeasureConversionPayload @join__field(graph: BASS)
  updateUnitOfMeasureConversion(input: UpdateUnitOfMeasureConversionInput!): UpdateUnitOfMeasureConversionPayload @join__field(graph: BASS)
  deleteUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter!): DeleteUnitOfMeasureConversionPayload @join__field(graph: BASS)
  addProcessSegment(input: [AddProcessSegmentInput!]!, upsert: Boolean): AddProcessSegmentPayload @join__field(graph: BASS)
  updateProcessSegment(input: UpdateProcessSegmentInput!): UpdateProcessSegmentPayload @join__field(graph: BASS)
  deleteProcessSegment(filter: ProcessSegmentFilter!): DeleteProcessSegmentPayload @join__field(graph: BASS)
  addProcessSegmentVersion(input: [AddProcessSegmentVersionInput!]!): AddProcessSegmentVersionPayload @join__field(graph: BASS)
  updateProcessSegmentVersion(input: UpdateProcessSegmentVersionInput!): UpdateProcessSegmentVersionPayload @join__field(graph: BASS)
  deleteProcessSegmentVersion(filter: ProcessSegmentVersionFilter!): DeleteProcessSegmentVersionPayload @join__field(graph: BASS)
  addProcessSegmentDependency(input: [AddProcessSegmentDependencyInput!]!, upsert: Boolean): AddProcessSegmentDependencyPayload @join__field(graph: BASS)
  updateProcessSegmentDependency(input: UpdateProcessSegmentDependencyInput!): UpdateProcessSegmentDependencyPayload @join__field(graph: BASS)
  deleteProcessSegmentDependency(filter: ProcessSegmentDependencyFilter!): DeleteProcessSegmentDependencyPayload @join__field(graph: BASS)
  addProcessSegmentParameter(input: [AddProcessSegmentParameterInput!]!, upsert: Boolean): AddProcessSegmentParameterPayload @join__field(graph: BASS)
  updateProcessSegmentParameter(input: UpdateProcessSegmentParameterInput!): UpdateProcessSegmentParameterPayload @join__field(graph: BASS)
  deleteProcessSegmentParameter(filter: ProcessSegmentParameterFilter!): DeleteProcessSegmentParameterPayload @join__field(graph: BASS)
  addTestSpecification(input: [AddTestSpecificationInput!]!, upsert: Boolean): AddTestSpecificationPayload @join__field(graph: BASS)
  updateTestSpecification(input: UpdateTestSpecificationInput!): UpdateTestSpecificationPayload @join__field(graph: BASS)
  deleteTestSpecification(filter: TestSpecificationFilter!): DeleteTestSpecificationPayload @join__field(graph: BASS)
  addTestSpecificationProperty(input: [AddTestSpecificationPropertyInput!]!, upsert: Boolean): AddTestSpecificationPropertyPayload @join__field(graph: BASS)
  updateTestSpecificationProperty(input: UpdateTestSpecificationPropertyInput!): UpdateTestSpecificationPropertyPayload @join__field(graph: BASS)
  deleteTestSpecificationProperty(filter: TestSpecificationPropertyFilter!): DeleteTestSpecificationPropertyPayload @join__field(graph: BASS)
  addTestSpecificationCriteria(input: [AddTestSpecificationCriteriaInput!]!, upsert: Boolean): AddTestSpecificationCriteriaPayload @join__field(graph: BASS)
  updateTestSpecificationCriteria(input: UpdateTestSpecificationCriteriaInput!): UpdateTestSpecificationCriteriaPayload @join__field(graph: BASS)
  deleteTestSpecificationCriteria(filter: TestSpecificationCriteriaFilter!): DeleteTestSpecificationCriteriaPayload @join__field(graph: BASS)
  addEvaluatedProperty(input: [AddEvaluatedPropertyInput!]!, upsert: Boolean): AddEvaluatedPropertyPayload @join__field(graph: BASS)
  updateEvaluatedProperty(input: UpdateEvaluatedPropertyInput!): UpdateEvaluatedPropertyPayload @join__field(graph: BASS)
  deleteEvaluatedProperty(filter: EvaluatedPropertyFilter!): DeleteEvaluatedPropertyPayload @join__field(graph: BASS)
  addTestResult(input: [AddTestResultInput!]!, upsert: Boolean): AddTestResultPayload @join__field(graph: BASS)
  updateTestResult(input: UpdateTestResultInput!): UpdateTestResultPayload @join__field(graph: BASS)
  deleteTestResult(filter: TestResultFilter!): DeleteTestResultPayload @join__field(graph: BASS)
  addPropertyMeasurement(input: [AddPropertyMeasurementInput!]!, upsert: Boolean): AddPropertyMeasurementPayload @join__field(graph: BASS)
  updatePropertyMeasurement(input: UpdatePropertyMeasurementInput!): UpdatePropertyMeasurementPayload @join__field(graph: BASS)
  deletePropertyMeasurement(filter: PropertyMeasurementFilter!): DeletePropertyMeasurementPayload @join__field(graph: BASS)
  addOperationsEventClass(input: [AddOperationsEventClassInput!]!, upsert: Boolean): AddOperationsEventClassPayload @join__field(graph: BASS)
  updateOperationsEventClass(input: UpdateOperationsEventClassInput!): UpdateOperationsEventClassPayload @join__field(graph: BASS)
  deleteOperationsEventClass(filter: OperationsEventClassFilter!): DeleteOperationsEventClassPayload @join__field(graph: BASS)
  addOperationsEventClassVersion(input: [AddOperationsEventClassVersionInput!]!): AddOperationsEventClassVersionPayload @join__field(graph: BASS)
  updateOperationsEventClassVersion(input: UpdateOperationsEventClassVersionInput!): UpdateOperationsEventClassVersionPayload @join__field(graph: BASS)
  deleteOperationsEventClassVersion(filter: OperationsEventClassVersionFilter!): DeleteOperationsEventClassVersionPayload @join__field(graph: BASS)
  addOperationsEventClassRecordSpecification(input: [AddOperationsEventClassRecordSpecificationInput!]!): AddOperationsEventClassRecordSpecificationPayload @join__field(graph: BASS)
  updateOperationsEventClassRecordSpecification(input: UpdateOperationsEventClassRecordSpecificationInput!): UpdateOperationsEventClassRecordSpecificationPayload @join__field(graph: BASS)
  deleteOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter!): DeleteOperationsEventClassRecordSpecificationPayload @join__field(graph: BASS)
  addMultiplicity(input: [AddMultiplicityInput!]!): AddMultiplicityPayload @join__field(graph: BASS)
  updateMultiplicity(input: UpdateMultiplicityInput!): UpdateMultiplicityPayload @join__field(graph: BASS)
  deleteMultiplicity(filter: MultiplicityFilter!): DeleteMultiplicityPayload @join__field(graph: BASS)
  addOperationsEventClassProperty(input: [AddOperationsEventClassPropertyInput!]!, upsert: Boolean): AddOperationsEventClassPropertyPayload @join__field(graph: BASS)
  updateOperationsEventClassProperty(input: UpdateOperationsEventClassPropertyInput!): UpdateOperationsEventClassPropertyPayload @join__field(graph: BASS)
  deleteOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter!): DeleteOperationsEventClassPropertyPayload @join__field(graph: BASS)
  addOperationsEventDefinition(input: [AddOperationsEventDefinitionInput!]!, upsert: Boolean): AddOperationsEventDefinitionPayload @join__field(graph: BASS)
  updateOperationsEventDefinition(input: UpdateOperationsEventDefinitionInput!): UpdateOperationsEventDefinitionPayload @join__field(graph: BASS)
  deleteOperationsEventDefinition(filter: OperationsEventDefinitionFilter!): DeleteOperationsEventDefinitionPayload @join__field(graph: BASS)
  addOperationsEventDefinitionVersion(input: [AddOperationsEventDefinitionVersionInput!]!): AddOperationsEventDefinitionVersionPayload @join__field(graph: BASS)
  updateOperationsEventDefinitionVersion(input: UpdateOperationsEventDefinitionVersionInput!): UpdateOperationsEventDefinitionVersionPayload @join__field(graph: BASS)
  deleteOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter!): DeleteOperationsEventDefinitionVersionPayload @join__field(graph: BASS)
  addOperationsEventDefinitionRecordSpecification(input: [AddOperationsEventDefinitionRecordSpecificationInput!]!): AddOperationsEventDefinitionRecordSpecificationPayload @join__field(graph: BASS)
  updateOperationsEventDefinitionRecordSpecification(input: UpdateOperationsEventDefinitionRecordSpecificationInput!): UpdateOperationsEventDefinitionRecordSpecificationPayload @join__field(graph: BASS)
  deleteOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter!): DeleteOperationsEventDefinitionRecordSpecificationPayload @join__field(graph: BASS)
  addOperationsEventDefinitionProperty(input: [AddOperationsEventDefinitionPropertyInput!]!): AddOperationsEventDefinitionPropertyPayload @join__field(graph: BASS)
  updateOperationsEventDefinitionProperty(input: UpdateOperationsEventDefinitionPropertyInput!): UpdateOperationsEventDefinitionPropertyPayload @join__field(graph: BASS)
  deleteOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter!): DeleteOperationsEventDefinitionPropertyPayload @join__field(graph: BASS)
  addOperationsEvent(input: [AddOperationsEventInput!]!, upsert: Boolean): AddOperationsEventPayload @join__field(graph: BASS)
  updateOperationsEvent(input: UpdateOperationsEventInput!): UpdateOperationsEventPayload @join__field(graph: BASS)
  deleteOperationsEvent(filter: OperationsEventFilter!): DeleteOperationsEventPayload @join__field(graph: BASS)
  addOperationsEventProperty(input: [AddOperationsEventPropertyInput!]!, upsert: Boolean): AddOperationsEventPropertyPayload @join__field(graph: BASS)
  updateOperationsEventProperty(input: UpdateOperationsEventPropertyInput!): UpdateOperationsEventPropertyPayload @join__field(graph: BASS)
  deleteOperationsEventProperty(filter: OperationsEventPropertyFilter!): DeleteOperationsEventPropertyPayload @join__field(graph: BASS)
  addOperationsEventRecord(input: [AddOperationsEventRecordInput!]!, upsert: Boolean): AddOperationsEventRecordPayload @join__field(graph: BASS)
  updateOperationsEventRecord(input: UpdateOperationsEventRecordInput!): UpdateOperationsEventRecordPayload @join__field(graph: BASS)
  deleteOperationsEventRecord(filter: OperationsEventRecordFilter!): DeleteOperationsEventRecordPayload @join__field(graph: BASS)
  addOperationsEventRecordEntry(input: [AddOperationsEventRecordEntryInput!]!): AddOperationsEventRecordEntryPayload @join__field(graph: BASS)
  updateOperationsEventRecordEntry(input: UpdateOperationsEventRecordEntryInput!): UpdateOperationsEventRecordEntryPayload @join__field(graph: BASS)
  deleteOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter!): DeleteOperationsEventRecordEntryPayload @join__field(graph: BASS)
  addOperationsDefinition(input: [AddOperationsDefinitionInput!]!, upsert: Boolean): AddOperationsDefinitionPayload @join__field(graph: BASS)
  updateOperationsDefinition(input: UpdateOperationsDefinitionInput!): UpdateOperationsDefinitionPayload @join__field(graph: BASS)
  deleteOperationsDefinition(filter: OperationsDefinitionFilter!): DeleteOperationsDefinitionPayload @join__field(graph: BASS)
  addOperationsDefinitionVersion(input: [AddOperationsDefinitionVersionInput!]!): AddOperationsDefinitionVersionPayload @join__field(graph: BASS)
  updateOperationsDefinitionVersion(input: UpdateOperationsDefinitionVersionInput!): UpdateOperationsDefinitionVersionPayload @join__field(graph: BASS)
  deleteOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter!): DeleteOperationsDefinitionVersionPayload @join__field(graph: BASS)
  addOperationsMaterialBill(input: [AddOperationsMaterialBillInput!]!, upsert: Boolean): AddOperationsMaterialBillPayload @join__field(graph: BASS)
  updateOperationsMaterialBill(input: UpdateOperationsMaterialBillInput!): UpdateOperationsMaterialBillPayload @join__field(graph: BASS)
  deleteOperationsMaterialBill(filter: OperationsMaterialBillFilter!): DeleteOperationsMaterialBillPayload @join__field(graph: BASS)
  addOperationsSegment(input: [AddOperationsSegmentInput!]!, upsert: Boolean): AddOperationsSegmentPayload @join__field(graph: BASS)
  updateOperationsSegment(input: UpdateOperationsSegmentInput!): UpdateOperationsSegmentPayload @join__field(graph: BASS)
  deleteOperationsSegment(filter: OperationsSegmentFilter!): DeleteOperationsSegmentPayload @join__field(graph: BASS)
  addOperationsSegmentDependency(input: [AddOperationsSegmentDependencyInput!]!, upsert: Boolean): AddOperationsSegmentDependencyPayload @join__field(graph: BASS)
  updateOperationsSegmentDependency(input: UpdateOperationsSegmentDependencyInput!): UpdateOperationsSegmentDependencyPayload @join__field(graph: BASS)
  deleteOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter!): DeleteOperationsSegmentDependencyPayload @join__field(graph: BASS)
  addParameterSpecification(input: [AddParameterSpecificationInput!]!, upsert: Boolean): AddParameterSpecificationPayload @join__field(graph: BASS)
  updateParameterSpecification(input: UpdateParameterSpecificationInput!): UpdateParameterSpecificationPayload @join__field(graph: BASS)
  deleteParameterSpecification(filter: ParameterSpecificationFilter!): DeleteParameterSpecificationPayload @join__field(graph: BASS)
  addPersonnelSpecification(input: [AddPersonnelSpecificationInput!]!, upsert: Boolean): AddPersonnelSpecificationPayload @join__field(graph: BASS)
  updatePersonnelSpecification(input: UpdatePersonnelSpecificationInput!): UpdatePersonnelSpecificationPayload @join__field(graph: BASS)
  deletePersonnelSpecification(filter: PersonnelSpecificationFilter!): DeletePersonnelSpecificationPayload @join__field(graph: BASS)
  addPersonnelSpecificationProperty(input: [AddPersonnelSpecificationPropertyInput!]!, upsert: Boolean): AddPersonnelSpecificationPropertyPayload @join__field(graph: BASS)
  updatePersonnelSpecificationProperty(input: UpdatePersonnelSpecificationPropertyInput!): UpdatePersonnelSpecificationPropertyPayload @join__field(graph: BASS)
  deletePersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter!): DeletePersonnelSpecificationPropertyPayload @join__field(graph: BASS)
  addEquipmentSpecification(input: [AddEquipmentSpecificationInput!]!, upsert: Boolean): AddEquipmentSpecificationPayload @join__field(graph: BASS)
  updateEquipmentSpecification(input: UpdateEquipmentSpecificationInput!): UpdateEquipmentSpecificationPayload @join__field(graph: BASS)
  deleteEquipmentSpecification(filter: EquipmentSpecificationFilter!): DeleteEquipmentSpecificationPayload @join__field(graph: BASS)
  addEquipmentSpecificationProperty(input: [AddEquipmentSpecificationPropertyInput!]!, upsert: Boolean): AddEquipmentSpecificationPropertyPayload @join__field(graph: BASS)
  updateEquipmentSpecificationProperty(input: UpdateEquipmentSpecificationPropertyInput!): UpdateEquipmentSpecificationPropertyPayload @join__field(graph: BASS)
  deleteEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter!): DeleteEquipmentSpecificationPropertyPayload @join__field(graph: BASS)
  addPhysicalAssetSpecification(input: [AddPhysicalAssetSpecificationInput!]!, upsert: Boolean): AddPhysicalAssetSpecificationPayload @join__field(graph: BASS)
  updatePhysicalAssetSpecification(input: UpdatePhysicalAssetSpecificationInput!): UpdatePhysicalAssetSpecificationPayload @join__field(graph: BASS)
  deletePhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter!): DeletePhysicalAssetSpecificationPayload @join__field(graph: BASS)
  addPhysicalAssetSpecificationProperty(input: [AddPhysicalAssetSpecificationPropertyInput!]!, upsert: Boolean): AddPhysicalAssetSpecificationPropertyPayload @join__field(graph: BASS)
  updatePhysicalAssetSpecificationProperty(input: UpdatePhysicalAssetSpecificationPropertyInput!): UpdatePhysicalAssetSpecificationPropertyPayload @join__field(graph: BASS)
  deletePhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter!): DeletePhysicalAssetSpecificationPropertyPayload @join__field(graph: BASS)
  addMaterialSpecification(input: [AddMaterialSpecificationInput!]!, upsert: Boolean): AddMaterialSpecificationPayload @join__field(graph: BASS)
  updateMaterialSpecification(input: UpdateMaterialSpecificationInput!): UpdateMaterialSpecificationPayload @join__field(graph: BASS)
  deleteMaterialSpecification(filter: MaterialSpecificationFilter!): DeleteMaterialSpecificationPayload @join__field(graph: BASS)
  addMaterialSpecificationProperty(input: [AddMaterialSpecificationPropertyInput!]!, upsert: Boolean): AddMaterialSpecificationPropertyPayload @join__field(graph: BASS)
  updateMaterialSpecificationProperty(input: UpdateMaterialSpecificationPropertyInput!): UpdateMaterialSpecificationPropertyPayload @join__field(graph: BASS)
  deleteMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter!): DeleteMaterialSpecificationPropertyPayload @join__field(graph: BASS)
  addOperationsSchedule(input: [AddOperationsScheduleInput!]!): AddOperationsSchedulePayload @join__field(graph: BASS)
  updateOperationsSchedule(input: UpdateOperationsScheduleInput!): UpdateOperationsSchedulePayload @join__field(graph: BASS)
  deleteOperationsSchedule(filter: OperationsScheduleFilter!): DeleteOperationsSchedulePayload @join__field(graph: BASS)
  addOperationsRequest(input: [AddOperationsRequestInput!]!): AddOperationsRequestPayload @join__field(graph: BASS)
  updateOperationsRequest(input: UpdateOperationsRequestInput!): UpdateOperationsRequestPayload @join__field(graph: BASS)
  deleteOperationsRequest(filter: OperationsRequestFilter!): DeleteOperationsRequestPayload @join__field(graph: BASS)
  addSegmentRequirement(input: [AddSegmentRequirementInput!]!): AddSegmentRequirementPayload @join__field(graph: BASS)
  updateSegmentRequirement(input: UpdateSegmentRequirementInput!): UpdateSegmentRequirementPayload @join__field(graph: BASS)
  deleteSegmentRequirement(filter: SegmentRequirementFilter!): DeleteSegmentRequirementPayload @join__field(graph: BASS)
  addSegmentParameter(input: [AddSegmentParameterInput!]!, upsert: Boolean): AddSegmentParameterPayload @join__field(graph: BASS)
  updateSegmentParameter(input: UpdateSegmentParameterInput!): UpdateSegmentParameterPayload @join__field(graph: BASS)
  deleteSegmentParameter(filter: SegmentParameterFilter!): DeleteSegmentParameterPayload @join__field(graph: BASS)
  addPersonnelRequirement(input: [AddPersonnelRequirementInput!]!, upsert: Boolean): AddPersonnelRequirementPayload @join__field(graph: BASS)
  updatePersonnelRequirement(input: UpdatePersonnelRequirementInput!): UpdatePersonnelRequirementPayload @join__field(graph: BASS)
  deletePersonnelRequirement(filter: PersonnelRequirementFilter!): DeletePersonnelRequirementPayload @join__field(graph: BASS)
  addPersonnelRequirementProperty(input: [AddPersonnelRequirementPropertyInput!]!, upsert: Boolean): AddPersonnelRequirementPropertyPayload @join__field(graph: BASS)
  updatePersonnelRequirementProperty(input: UpdatePersonnelRequirementPropertyInput!): UpdatePersonnelRequirementPropertyPayload @join__field(graph: BASS)
  deletePersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter!): DeletePersonnelRequirementPropertyPayload @join__field(graph: BASS)
  addEquipmentRequirement(input: [AddEquipmentRequirementInput!]!, upsert: Boolean): AddEquipmentRequirementPayload @join__field(graph: BASS)
  updateEquipmentRequirement(input: UpdateEquipmentRequirementInput!): UpdateEquipmentRequirementPayload @join__field(graph: BASS)
  deleteEquipmentRequirement(filter: EquipmentRequirementFilter!): DeleteEquipmentRequirementPayload @join__field(graph: BASS)
  addEquipmentRequirementProperty(input: [AddEquipmentRequirementPropertyInput!]!, upsert: Boolean): AddEquipmentRequirementPropertyPayload @join__field(graph: BASS)
  updateEquipmentRequirementProperty(input: UpdateEquipmentRequirementPropertyInput!): UpdateEquipmentRequirementPropertyPayload @join__field(graph: BASS)
  deleteEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter!): DeleteEquipmentRequirementPropertyPayload @join__field(graph: BASS)
  addPhysicalAssetRequirement(input: [AddPhysicalAssetRequirementInput!]!, upsert: Boolean): AddPhysicalAssetRequirementPayload @join__field(graph: BASS)
  updatePhysicalAssetRequirement(input: UpdatePhysicalAssetRequirementInput!): UpdatePhysicalAssetRequirementPayload @join__field(graph: BASS)
  deletePhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter!): DeletePhysicalAssetRequirementPayload @join__field(graph: BASS)
  addPhysicalAssetRequirementProperty(input: [AddPhysicalAssetRequirementPropertyInput!]!, upsert: Boolean): AddPhysicalAssetRequirementPropertyPayload @join__field(graph: BASS)
  updatePhysicalAssetRequirementProperty(input: UpdatePhysicalAssetRequirementPropertyInput!): UpdatePhysicalAssetRequirementPropertyPayload @join__field(graph: BASS)
  deletePhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter!): DeletePhysicalAssetRequirementPropertyPayload @join__field(graph: BASS)
  addMaterialRequirement(input: [AddMaterialRequirementInput!]!, upsert: Boolean): AddMaterialRequirementPayload @join__field(graph: BASS)
  updateMaterialRequirement(input: UpdateMaterialRequirementInput!): UpdateMaterialRequirementPayload @join__field(graph: BASS)
  deleteMaterialRequirement(filter: MaterialRequirementFilter!): DeleteMaterialRequirementPayload @join__field(graph: BASS)
  addMaterialRequirementProperty(input: [AddMaterialRequirementPropertyInput!]!, upsert: Boolean): AddMaterialRequirementPropertyPayload @join__field(graph: BASS)
  updateMaterialRequirementProperty(input: UpdateMaterialRequirementPropertyInput!): UpdateMaterialRequirementPropertyPayload @join__field(graph: BASS)
  deleteMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter!): DeleteMaterialRequirementPropertyPayload @join__field(graph: BASS)
  addOperationsPerformance(input: [AddOperationsPerformanceInput!]!, upsert: Boolean): AddOperationsPerformancePayload @join__field(graph: BASS)
  updateOperationsPerformance(input: UpdateOperationsPerformanceInput!): UpdateOperationsPerformancePayload @join__field(graph: BASS)
  deleteOperationsPerformance(filter: OperationsPerformanceFilter!): DeleteOperationsPerformancePayload @join__field(graph: BASS)
  addOperationsResponse(input: [AddOperationsResponseInput!]!, upsert: Boolean): AddOperationsResponsePayload @join__field(graph: BASS)
  updateOperationsResponse(input: UpdateOperationsResponseInput!): UpdateOperationsResponsePayload @join__field(graph: BASS)
  deleteOperationsResponse(filter: OperationsResponseFilter!): DeleteOperationsResponsePayload @join__field(graph: BASS)
  addSegmentResponse(input: [AddSegmentResponseInput!]!, upsert: Boolean): AddSegmentResponsePayload @join__field(graph: BASS)
  updateSegmentResponse(input: UpdateSegmentResponseInput!): UpdateSegmentResponsePayload @join__field(graph: BASS)
  deleteSegmentResponse(filter: SegmentResponseFilter!): DeleteSegmentResponsePayload @join__field(graph: BASS)
  addSegmentData(input: [AddSegmentDataInput!]!): AddSegmentDataPayload @join__field(graph: BASS)
  updateSegmentData(input: UpdateSegmentDataInput!): UpdateSegmentDataPayload @join__field(graph: BASS)
  deleteSegmentData(filter: SegmentDataFilter!): DeleteSegmentDataPayload @join__field(graph: BASS)
  addPersonnelActual(input: [AddPersonnelActualInput!]!): AddPersonnelActualPayload @join__field(graph: BASS)
  updatePersonnelActual(input: UpdatePersonnelActualInput!): UpdatePersonnelActualPayload @join__field(graph: BASS)
  deletePersonnelActual(filter: PersonnelActualFilter!): DeletePersonnelActualPayload @join__field(graph: BASS)
  addPersonnelActualProperty(input: [AddPersonnelActualPropertyInput!]!): AddPersonnelActualPropertyPayload @join__field(graph: BASS)
  updatePersonnelActualProperty(input: UpdatePersonnelActualPropertyInput!): UpdatePersonnelActualPropertyPayload @join__field(graph: BASS)
  deletePersonnelActualProperty(filter: PersonnelActualPropertyFilter!): DeletePersonnelActualPropertyPayload @join__field(graph: BASS)
  addEquipmentActual(input: [AddEquipmentActualInput!]!): AddEquipmentActualPayload @join__field(graph: BASS)
  updateEquipmentActual(input: UpdateEquipmentActualInput!): UpdateEquipmentActualPayload @join__field(graph: BASS)
  deleteEquipmentActual(filter: EquipmentActualFilter!): DeleteEquipmentActualPayload @join__field(graph: BASS)
  addEquipmentActualProperty(input: [AddEquipmentActualPropertyInput!]!): AddEquipmentActualPropertyPayload @join__field(graph: BASS)
  updateEquipmentActualProperty(input: UpdateEquipmentActualPropertyInput!): UpdateEquipmentActualPropertyPayload @join__field(graph: BASS)
  deleteEquipmentActualProperty(filter: EquipmentActualPropertyFilter!): DeleteEquipmentActualPropertyPayload @join__field(graph: BASS)
  addPhysicalAssetActual(input: [AddPhysicalAssetActualInput!]!): AddPhysicalAssetActualPayload @join__field(graph: BASS)
  updatePhysicalAssetActual(input: UpdatePhysicalAssetActualInput!): UpdatePhysicalAssetActualPayload @join__field(graph: BASS)
  deletePhysicalAssetActual(filter: PhysicalAssetActualFilter!): DeletePhysicalAssetActualPayload @join__field(graph: BASS)
  addPhysicalAssetActualProperty(input: [AddPhysicalAssetActualPropertyInput!]!): AddPhysicalAssetActualPropertyPayload @join__field(graph: BASS)
  updatePhysicalAssetActualProperty(input: UpdatePhysicalAssetActualPropertyInput!): UpdatePhysicalAssetActualPropertyPayload @join__field(graph: BASS)
  deletePhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter!): DeletePhysicalAssetActualPropertyPayload @join__field(graph: BASS)
  addMaterialActual(input: [AddMaterialActualInput!]!, upsert: Boolean): AddMaterialActualPayload @join__field(graph: BASS)
  updateMaterialActual(input: UpdateMaterialActualInput!): UpdateMaterialActualPayload @join__field(graph: BASS)
  deleteMaterialActual(filter: MaterialActualFilter!): DeleteMaterialActualPayload @join__field(graph: BASS)
  addMaterialActualProperty(input: [AddMaterialActualPropertyInput!]!): AddMaterialActualPropertyPayload @join__field(graph: BASS)
  updateMaterialActualProperty(input: UpdateMaterialActualPropertyInput!): UpdateMaterialActualPropertyPayload @join__field(graph: BASS)
  deleteMaterialActualProperty(filter: MaterialActualPropertyFilter!): DeleteMaterialActualPropertyPayload @join__field(graph: BASS)
  addOperationsResponseProperty(input: [AddOperationsResponsePropertyInput!]!): AddOperationsResponsePropertyPayload @join__field(graph: BASS)
  updateOperationsResponseProperty(input: UpdateOperationsResponsePropertyInput!): UpdateOperationsResponsePropertyPayload @join__field(graph: BASS)
  deleteOperationsResponseProperty(filter: OperationsResponsePropertyFilter!): DeleteOperationsResponsePropertyPayload @join__field(graph: BASS)
  addWorkMaster(input: [AddWorkMasterInput!]!): AddWorkMasterPayload @join__field(graph: BASS)
  updateWorkMaster(input: UpdateWorkMasterInput!): UpdateWorkMasterPayload @join__field(graph: BASS)
  deleteWorkMaster(filter: WorkMasterFilter!): DeleteWorkMasterPayload @join__field(graph: BASS)
  addWorkDirective(input: [AddWorkDirectiveInput!]!): AddWorkDirectivePayload @join__field(graph: BASS)
  updateWorkDirective(input: UpdateWorkDirectiveInput!): UpdateWorkDirectivePayload @join__field(graph: BASS)
  deleteWorkDirective(filter: WorkDirectiveFilter!): DeleteWorkDirectivePayload @join__field(graph: BASS)
  addWorkflowSpecification(input: [AddWorkflowSpecificationInput!]!, upsert: Boolean): AddWorkflowSpecificationPayload @join__field(graph: BASS)
  updateWorkflowSpecification(input: UpdateWorkflowSpecificationInput!): UpdateWorkflowSpecificationPayload @join__field(graph: BASS)
  deleteWorkflowSpecification(filter: WorkflowSpecificationFilter!): DeleteWorkflowSpecificationPayload @join__field(graph: BASS)
  addWorkflowSpecificationVersion(input: [AddWorkflowSpecificationVersionInput!]!): AddWorkflowSpecificationVersionPayload @join__field(graph: BASS)
  updateWorkflowSpecificationVersion(input: UpdateWorkflowSpecificationVersionInput!): UpdateWorkflowSpecificationVersionPayload @join__field(graph: BASS)
  deleteWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter!): DeleteWorkflowSpecificationVersionPayload @join__field(graph: BASS)
  addWorkflowSpecificationProperty(input: [AddWorkflowSpecificationPropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationPropertyPayload @join__field(graph: BASS)
  updateWorkflowSpecificationProperty(input: UpdateWorkflowSpecificationPropertyInput!): UpdateWorkflowSpecificationPropertyPayload @join__field(graph: BASS)
  deleteWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter!): DeleteWorkflowSpecificationPropertyPayload @join__field(graph: BASS)
  addWorkflowTimer(input: [AddWorkflowTimerInput!]!, upsert: Boolean): AddWorkflowTimerPayload @join__field(graph: BASS)
  updateWorkflowTimer(input: UpdateWorkflowTimerInput!): UpdateWorkflowTimerPayload @join__field(graph: BASS)
  deleteWorkflowTimer(filter: WorkflowTimerFilter!): DeleteWorkflowTimerPayload @join__field(graph: BASS)
  addWorkflowMessage(input: [AddWorkflowMessageInput!]!, upsert: Boolean): AddWorkflowMessagePayload @join__field(graph: BASS)
  updateWorkflowMessage(input: UpdateWorkflowMessageInput!): UpdateWorkflowMessagePayload @join__field(graph: BASS)
  deleteWorkflowMessage(filter: WorkflowMessageFilter!): DeleteWorkflowMessagePayload @join__field(graph: BASS)
  addWorkflowError(input: [AddWorkflowErrorInput!]!, upsert: Boolean): AddWorkflowErrorPayload @join__field(graph: BASS)
  updateWorkflowError(input: UpdateWorkflowErrorInput!): UpdateWorkflowErrorPayload @join__field(graph: BASS)
  deleteWorkflowError(filter: WorkflowErrorFilter!): DeleteWorkflowErrorPayload @join__field(graph: BASS)
  addWorkflowSpecificationNode(input: [AddWorkflowSpecificationNodeInput!]!, upsert: Boolean): AddWorkflowSpecificationNodePayload @join__field(graph: BASS)
  updateWorkflowSpecificationNode(input: UpdateWorkflowSpecificationNodeInput!): UpdateWorkflowSpecificationNodePayload @join__field(graph: BASS)
  deleteWorkflowSpecificationNode(filter: WorkflowSpecificationNodeFilter!): DeleteWorkflowSpecificationNodePayload @join__field(graph: BASS)
  addWorkflowSpecificationNodeTestCase(input: [AddWorkflowSpecificationNodeTestCaseInput!]!, upsert: Boolean): AddWorkflowSpecificationNodeTestCasePayload @join__field(graph: BASS)
  updateWorkflowSpecificationNodeTestCase(input: UpdateWorkflowSpecificationNodeTestCaseInput!): UpdateWorkflowSpecificationNodeTestCasePayload @join__field(graph: BASS)
  deleteWorkflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter!): DeleteWorkflowSpecificationNodeTestCasePayload @join__field(graph: BASS)
  addWorkflowShape(input: [AddWorkflowShapeInput!]!, upsert: Boolean): AddWorkflowShapePayload @join__field(graph: BASS)
  updateWorkflowShape(input: UpdateWorkflowShapeInput!): UpdateWorkflowShapePayload @join__field(graph: BASS)
  deleteWorkflowShape(filter: WorkflowShapeFilter!): DeleteWorkflowShapePayload @join__field(graph: BASS)
  addWorkflowSpecificationNodeVariable(input: [AddWorkflowSpecificationNodeVariableInput!]!): AddWorkflowSpecificationNodeVariablePayload @join__field(graph: BASS)
  updateWorkflowSpecificationNodeVariable(input: UpdateWorkflowSpecificationNodeVariableInput!): UpdateWorkflowSpecificationNodeVariablePayload @join__field(graph: BASS)
  deleteWorkflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter!): DeleteWorkflowSpecificationNodeVariablePayload @join__field(graph: BASS)
  addWorkflowSpecificationNodeProperty(input: [AddWorkflowSpecificationNodePropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationNodePropertyPayload @join__field(graph: BASS)
  updateWorkflowSpecificationNodeProperty(input: UpdateWorkflowSpecificationNodePropertyInput!): UpdateWorkflowSpecificationNodePropertyPayload @join__field(graph: BASS)
  deleteWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter!): DeleteWorkflowSpecificationNodePropertyPayload @join__field(graph: BASS)
  addWorkflowSpecificationNodeType(input: [AddWorkflowSpecificationNodeTypeInput!]!, upsert: Boolean): AddWorkflowSpecificationNodeTypePayload @join__field(graph: BASS)
  updateWorkflowSpecificationNodeType(input: UpdateWorkflowSpecificationNodeTypeInput!): UpdateWorkflowSpecificationNodeTypePayload @join__field(graph: BASS)
  deleteWorkflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter!): DeleteWorkflowSpecificationNodeTypePayload @join__field(graph: BASS)
  addWorkflowSpecificationNodeTypeProperty(input: [AddWorkflowSpecificationNodeTypePropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationNodeTypePropertyPayload @join__field(graph: BASS)
  updateWorkflowSpecificationNodeTypeProperty(input: UpdateWorkflowSpecificationNodeTypePropertyInput!): UpdateWorkflowSpecificationNodeTypePropertyPayload @join__field(graph: BASS)
  deleteWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter!): DeleteWorkflowSpecificationNodeTypePropertyPayload @join__field(graph: BASS)
  addWorkflowSpecificationConnection(input: [AddWorkflowSpecificationConnectionInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionPayload @join__field(graph: BASS)
  updateWorkflowSpecificationConnection(input: UpdateWorkflowSpecificationConnectionInput!): UpdateWorkflowSpecificationConnectionPayload @join__field(graph: BASS)
  deleteWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter!): DeleteWorkflowSpecificationConnectionPayload @join__field(graph: BASS)
  addWorkflowWaypoint(input: [AddWorkflowWaypointInput!]!): AddWorkflowWaypointPayload @join__field(graph: BASS)
  updateWorkflowWaypoint(input: UpdateWorkflowWaypointInput!): UpdateWorkflowWaypointPayload @join__field(graph: BASS)
  deleteWorkflowWaypoint(filter: WorkflowWaypointFilter!): DeleteWorkflowWaypointPayload @join__field(graph: BASS)
  addWorkflowSpecificationConnectionProperty(input: [AddWorkflowSpecificationConnectionPropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionPropertyPayload @join__field(graph: BASS)
  updateWorkflowSpecificationConnectionProperty(input: UpdateWorkflowSpecificationConnectionPropertyInput!): UpdateWorkflowSpecificationConnectionPropertyPayload @join__field(graph: BASS)
  deleteWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter!): DeleteWorkflowSpecificationConnectionPropertyPayload @join__field(graph: BASS)
  addWorkflowSpecificationConnectionType(input: [AddWorkflowSpecificationConnectionTypeInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionTypePayload @join__field(graph: BASS)
  updateWorkflowSpecificationConnectionType(input: UpdateWorkflowSpecificationConnectionTypeInput!): UpdateWorkflowSpecificationConnectionTypePayload @join__field(graph: BASS)
  deleteWorkflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter!): DeleteWorkflowSpecificationConnectionTypePayload @join__field(graph: BASS)
  addWorkflowSpecificationConnectionTypeProperty(input: [AddWorkflowSpecificationConnectionTypePropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionTypePropertyPayload @join__field(graph: BASS)
  updateWorkflowSpecificationConnectionTypeProperty(input: UpdateWorkflowSpecificationConnectionTypePropertyInput!): UpdateWorkflowSpecificationConnectionTypePropertyPayload @join__field(graph: BASS)
  deleteWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter!): DeleteWorkflowSpecificationConnectionTypePropertyPayload @join__field(graph: BASS)
  addForm(input: [AddFormInput!]!, upsert: Boolean): AddFormPayload @join__field(graph: BASS)
  updateForm(input: UpdateFormInput!): UpdateFormPayload @join__field(graph: BASS)
  deleteForm(filter: FormFilter!): DeleteFormPayload @join__field(graph: BASS)
  addWorkSchedule(input: [AddWorkScheduleInput!]!, upsert: Boolean): AddWorkSchedulePayload @join__field(graph: BASS)
  updateWorkSchedule(input: UpdateWorkScheduleInput!): UpdateWorkSchedulePayload @join__field(graph: BASS)
  deleteWorkSchedule(filter: WorkScheduleFilter!): DeleteWorkSchedulePayload @join__field(graph: BASS)
  addWorkRequest(input: [AddWorkRequestInput!]!, upsert: Boolean): AddWorkRequestPayload @join__field(graph: BASS)
  updateWorkRequest(input: UpdateWorkRequestInput!): UpdateWorkRequestPayload @join__field(graph: BASS)
  deleteWorkRequest(filter: WorkRequestFilter!): DeleteWorkRequestPayload @join__field(graph: BASS)
  addJobList(input: [AddJobListInput!]!, upsert: Boolean): AddJobListPayload @join__field(graph: BASS)
  updateJobList(input: UpdateJobListInput!): UpdateJobListPayload @join__field(graph: BASS)
  deleteJobList(filter: JobListFilter!): DeleteJobListPayload @join__field(graph: BASS)
  addJobOrder(input: [AddJobOrderInput!]!, upsert: Boolean): AddJobOrderPayload @join__field(graph: BASS)
  updateJobOrder(input: UpdateJobOrderInput!): UpdateJobOrderPayload @join__field(graph: BASS)
  deleteJobOrder(filter: JobOrderFilter!): DeleteJobOrderPayload @join__field(graph: BASS)
  addJobOrderParameter(input: [AddJobOrderParameterInput!]!, upsert: Boolean): AddJobOrderParameterPayload @join__field(graph: BASS)
  updateJobOrderParameter(input: UpdateJobOrderParameterInput!): UpdateJobOrderParameterPayload @join__field(graph: BASS)
  deleteJobOrderParameter(filter: JobOrderParameterFilter!): DeleteJobOrderParameterPayload @join__field(graph: BASS)
  addWorkPerformance(input: [AddWorkPerformanceInput!]!, upsert: Boolean): AddWorkPerformancePayload @join__field(graph: BASS)
  updateWorkPerformance(input: UpdateWorkPerformanceInput!): UpdateWorkPerformancePayload @join__field(graph: BASS)
  deleteWorkPerformance(filter: WorkPerformanceFilter!): DeleteWorkPerformancePayload @join__field(graph: BASS)
  addWorkResponse(input: [AddWorkResponseInput!]!, upsert: Boolean): AddWorkResponsePayload @join__field(graph: BASS)
  updateWorkResponse(input: UpdateWorkResponseInput!): UpdateWorkResponsePayload @join__field(graph: BASS)
  deleteWorkResponse(filter: WorkResponseFilter!): DeleteWorkResponsePayload @join__field(graph: BASS)
  addJobResponseList(input: [AddJobResponseListInput!]!, upsert: Boolean): AddJobResponseListPayload @join__field(graph: BASS)
  updateJobResponseList(input: UpdateJobResponseListInput!): UpdateJobResponseListPayload @join__field(graph: BASS)
  deleteJobResponseList(filter: JobResponseListFilter!): DeleteJobResponseListPayload @join__field(graph: BASS)
  addJobResponse(input: [AddJobResponseInput!]!, upsert: Boolean): AddJobResponsePayload @join__field(graph: BASS)
  updateJobResponse(input: UpdateJobResponseInput!): UpdateJobResponsePayload @join__field(graph: BASS)
  deleteJobResponse(filter: JobResponseFilter!): DeleteJobResponsePayload @join__field(graph: BASS)
  addJobResponseData(input: [AddJobResponseDataInput!]!, upsert: Boolean): AddJobResponseDataPayload @join__field(graph: BASS)
  updateJobResponseData(input: UpdateJobResponseDataInput!): UpdateJobResponseDataPayload @join__field(graph: BASS)
  deleteJobResponseData(filter: JobResponseDataFilter!): DeleteJobResponseDataPayload @join__field(graph: BASS)
  addWorkCalendarDefinitionEntry(input: [AddWorkCalendarDefinitionEntryInput!]!): AddWorkCalendarDefinitionEntryPayload @join__field(graph: BASS)
  updateWorkCalendarDefinitionEntry(input: UpdateWorkCalendarDefinitionEntryInput!): UpdateWorkCalendarDefinitionEntryPayload @join__field(graph: BASS)
  deleteWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter!): DeleteWorkCalendarDefinitionEntryPayload @join__field(graph: BASS)
  addWorkCalendarDefinitionEntryProperty(input: [AddWorkCalendarDefinitionEntryPropertyInput!]!, upsert: Boolean): AddWorkCalendarDefinitionEntryPropertyPayload @join__field(graph: BASS)
  updateWorkCalendarDefinitionEntryProperty(input: UpdateWorkCalendarDefinitionEntryPropertyInput!): UpdateWorkCalendarDefinitionEntryPropertyPayload @join__field(graph: BASS)
  deleteWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter!): DeleteWorkCalendarDefinitionEntryPropertyPayload @join__field(graph: BASS)
  addWorkCalendarEntry(input: [AddWorkCalendarEntryInput!]!): AddWorkCalendarEntryPayload @join__field(graph: BASS)
  updateWorkCalendarEntry(input: UpdateWorkCalendarEntryInput!): UpdateWorkCalendarEntryPayload @join__field(graph: BASS)
  deleteWorkCalendarEntry(filter: WorkCalendarEntryFilter!): DeleteWorkCalendarEntryPayload @join__field(graph: BASS)
  addWorkCalendarEntryProperty(input: [AddWorkCalendarEntryPropertyInput!]!, upsert: Boolean): AddWorkCalendarEntryPropertyPayload @join__field(graph: BASS)
  updateWorkCalendarEntryProperty(input: UpdateWorkCalendarEntryPropertyInput!): UpdateWorkCalendarEntryPropertyPayload @join__field(graph: BASS)
  deleteWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter!): DeleteWorkCalendarEntryPropertyPayload @join__field(graph: BASS)
  addWorkCalendar(input: [AddWorkCalendarInput!]!, upsert: Boolean): AddWorkCalendarPayload @join__field(graph: BASS)
  updateWorkCalendar(input: UpdateWorkCalendarInput!): UpdateWorkCalendarPayload @join__field(graph: BASS)
  deleteWorkCalendar(filter: WorkCalendarFilter!): DeleteWorkCalendarPayload @join__field(graph: BASS)
  addInformationObject(input: [AddInformationObjectInput!]!): AddInformationObjectPayload @join__field(graph: BASS)
  updateInformationObject(input: UpdateInformationObjectInput!): UpdateInformationObjectPayload @join__field(graph: BASS)
  deleteInformationObject(filter: InformationObjectFilter!): DeleteInformationObjectPayload @join__field(graph: BASS)
  addStateModelDefinition(input: [AddStateModelDefinitionInput!]!, upsert: Boolean): AddStateModelDefinitionPayload @join__field(graph: BASS)
  updateStateModelDefinition(input: UpdateStateModelDefinitionInput!): UpdateStateModelDefinitionPayload @join__field(graph: BASS)
  deleteStateModelDefinition(filter: StateModelDefinitionFilter!): DeleteStateModelDefinitionPayload @join__field(graph: BASS)
  addStateModelState(input: [AddStateModelStateInput!]!, upsert: Boolean): AddStateModelStatePayload @join__field(graph: BASS)
  updateStateModelState(input: UpdateStateModelStateInput!): UpdateStateModelStatePayload @join__field(graph: BASS)
  deleteStateModelState(filter: StateModelStateFilter!): DeleteStateModelStatePayload @join__field(graph: BASS)
  addStateModelTransition(input: [AddStateModelTransitionInput!]!, upsert: Boolean): AddStateModelTransitionPayload @join__field(graph: BASS)
  updateStateModelTransition(input: UpdateStateModelTransitionInput!): UpdateStateModelTransitionPayload @join__field(graph: BASS)
  deleteStateModelTransition(filter: StateModelTransitionFilter!): DeleteStateModelTransitionPayload @join__field(graph: BASS)
  addStateModelEvent(input: [AddStateModelEventInput!]!, upsert: Boolean): AddStateModelEventPayload @join__field(graph: BASS)
  updateStateModelEvent(input: UpdateStateModelEventInput!): UpdateStateModelEventPayload @join__field(graph: BASS)
  deleteStateModelEvent(filter: StateModelEventFilter!): DeleteStateModelEventPayload @join__field(graph: BASS)
  addStateModelAction(input: [AddStateModelActionInput!]!, upsert: Boolean): AddStateModelActionPayload @join__field(graph: BASS)
  updateStateModelAction(input: UpdateStateModelActionInput!): UpdateStateModelActionPayload @join__field(graph: BASS)
  deleteStateModelAction(filter: StateModelActionFilter!): DeleteStateModelActionPayload @join__field(graph: BASS)
  addStateModelInstance(input: [AddStateModelInstanceInput!]!, upsert: Boolean): AddStateModelInstancePayload @join__field(graph: BASS)
  updateStateModelInstance(input: UpdateStateModelInstanceInput!): UpdateStateModelInstancePayload @join__field(graph: BASS)
  deleteStateModelInstance(filter: StateModelInstanceFilter!): DeleteStateModelInstancePayload @join__field(graph: BASS)
  addStateTransitionInstance(input: [AddStateTransitionInstanceInput!]!): AddStateTransitionInstancePayload @join__field(graph: BASS)
  updateStateTransitionInstance(input: UpdateStateTransitionInstanceInput!): UpdateStateTransitionInstancePayload @join__field(graph: BASS)
  deleteStateTransitionInstance(filter: StateTransitionInstanceFilter!): DeleteStateTransitionInstancePayload @join__field(graph: BASS)
  addStateModelProperty(input: [AddStateModelPropertyInput!]!, upsert: Boolean): AddStateModelPropertyPayload @join__field(graph: BASS)
  updateStateModelProperty(input: UpdateStateModelPropertyInput!): UpdateStateModelPropertyPayload @join__field(graph: BASS)
  deleteStateModelProperty(filter: StateModelPropertyFilter!): DeleteStateModelPropertyPayload @join__field(graph: BASS)
  addAccessPermission(input: [AddAccessPermissionInput!]!): AddAccessPermissionPayload @join__field(graph: BASS)
  updateAccessPermission(input: UpdateAccessPermissionInput!): UpdateAccessPermissionPayload @join__field(graph: BASS)
  deleteAccessPermission(filter: AccessPermissionFilter!): DeleteAccessPermissionPayload @join__field(graph: BASS)
  addLibreService(input: [AddLibreServiceInput!]!, upsert: Boolean): AddLibreServicePayload @join__field(graph: BASS)
  updateLibreService(input: UpdateLibreServiceInput!): UpdateLibreServicePayload @join__field(graph: BASS)
  deleteLibreService(filter: LibreServiceFilter!): DeleteLibreServicePayload @join__field(graph: BASS)
  addDataSubscription(input: [AddDataSubscriptionInput!]!, upsert: Boolean): AddDataSubscriptionPayload @join__field(graph: BASS)
  updateDataSubscription(input: UpdateDataSubscriptionInput!): UpdateDataSubscriptionPayload @join__field(graph: BASS)
  deleteDataSubscription(filter: DataSubscriptionFilter!): DeleteDataSubscriptionPayload @join__field(graph: BASS)
  addMenu(input: [AddMenuInput!]!): AddMenuPayload @join__field(graph: BASS)
  updateMenu(input: UpdateMenuInput!): UpdateMenuPayload @join__field(graph: BASS)
  deleteMenu(filter: MenuFilter!): DeleteMenuPayload @join__field(graph: BASS)
  addEquipmentPropertyOverride(input: [AddEquipmentPropertyOverrideInput!]!, upsert: Boolean): AddEquipmentPropertyOverridePayload @join__field(graph: BASS)
  updateEquipmentPropertyOverride(input: UpdateEquipmentPropertyOverrideInput!): UpdateEquipmentPropertyOverridePayload @join__field(graph: BASS)
  deleteEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter!): DeleteEquipmentPropertyOverridePayload @join__field(graph: BASS)
  addEquipmentNameAlias(input: [AddEquipmentNameAliasInput!]!): AddEquipmentNameAliasPayload @join__field(graph: BASS)
  updateEquipmentNameAlias(input: UpdateEquipmentNameAliasInput!): UpdateEquipmentNameAliasPayload @join__field(graph: BASS)
  deleteEquipmentNameAlias(filter: EquipmentNameAliasFilter!): DeleteEquipmentNameAliasPayload @join__field(graph: BASS)
  addPropertyNameAlias(input: [AddPropertyNameAliasInput!]!): AddPropertyNameAliasPayload @join__field(graph: BASS)
  updatePropertyNameAlias(input: UpdatePropertyNameAliasInput!): UpdatePropertyNameAliasPayload @join__field(graph: BASS)
  deletePropertyNameAlias(filter: PropertyNameAliasFilter!): DeletePropertyNameAliasPayload @join__field(graph: BASS)
  addPropertyValueAlias(input: [AddPropertyValueAliasInput!]!): AddPropertyValueAliasPayload @join__field(graph: BASS)
  updatePropertyValueAlias(input: UpdatePropertyValueAliasInput!): UpdatePropertyValueAliasPayload @join__field(graph: BASS)
  deletePropertyValueAlias(filter: PropertyValueAliasFilter!): DeletePropertyValueAliasPayload @join__field(graph: BASS)
  addDataSource(input: [AddDataSourceInput!]!, upsert: Boolean): AddDataSourcePayload @join__field(graph: BASS)
  updateDataSource(input: UpdateDataSourceInput!): UpdateDataSourcePayload @join__field(graph: BASS)
  deleteDataSource(filter: DataSourceFilter!): DeleteDataSourcePayload @join__field(graph: BASS)
  addDataSourceVersion(input: [AddDataSourceVersionInput!]!): AddDataSourceVersionPayload @join__field(graph: BASS)
  updateDataSourceVersion(input: UpdateDataSourceVersionInput!): UpdateDataSourceVersionPayload @join__field(graph: BASS)
  deleteDataSourceVersion(filter: DataSourceVersionFilter!): DeleteDataSourceVersionPayload @join__field(graph: BASS)
  addDataSourceTopic(input: [AddDataSourceTopicInput!]!, upsert: Boolean): AddDataSourceTopicPayload @join__field(graph: BASS)
  updateDataSourceTopic(input: UpdateDataSourceTopicInput!): UpdateDataSourceTopicPayload @join__field(graph: BASS)
  deleteDataSourceTopic(filter: DataSourceTopicFilter!): DeleteDataSourceTopicPayload @join__field(graph: BASS)
  addDataSourceMethod(input: [AddDataSourceMethodInput!]!, upsert: Boolean): AddDataSourceMethodPayload @join__field(graph: BASS)
  updateDataSourceMethod(input: UpdateDataSourceMethodInput!): UpdateDataSourceMethodPayload @join__field(graph: BASS)
  deleteDataSourceMethod(filter: DataSourceMethodFilter!): DeleteDataSourceMethodPayload @join__field(graph: BASS)
  addDataSourceMethodArgument(input: [AddDataSourceMethodArgumentInput!]!, upsert: Boolean): AddDataSourceMethodArgumentPayload @join__field(graph: BASS)
  updateDataSourceMethodArgument(input: UpdateDataSourceMethodArgumentInput!): UpdateDataSourceMethodArgumentPayload @join__field(graph: BASS)
  deleteDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter!): DeleteDataSourceMethodArgumentPayload @join__field(graph: BASS)
  addRule(input: [AddRuleInput!]!, upsert: Boolean): AddRulePayload @join__field(graph: BASS)
  updateRule(input: UpdateRuleInput!): UpdateRulePayload @join__field(graph: BASS)
  deleteRule(filter: RuleFilter!): DeleteRulePayload @join__field(graph: BASS)
  addPayloadFieldDefinition(input: [AddPayloadFieldDefinitionInput!]!): AddPayloadFieldDefinitionPayload @join__field(graph: BASS)
  updatePayloadFieldDefinition(input: UpdatePayloadFieldDefinitionInput!): UpdatePayloadFieldDefinitionPayload @join__field(graph: BASS)
  deletePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter!): DeletePayloadFieldDefinitionPayload @join__field(graph: BASS)
  addEnvironmentalVariable(input: [AddEnvironmentalVariableInput!]!, upsert: Boolean): AddEnvironmentalVariablePayload @join__field(graph: BASS)
  updateEnvironmentalVariable(input: UpdateEnvironmentalVariableInput!): UpdateEnvironmentalVariablePayload @join__field(graph: BASS)
  deleteEnvironmentalVariable(filter: EnvironmentalVariableFilter!): DeleteEnvironmentalVariablePayload @join__field(graph: BASS)
  addEnvironmentalVariableVersion(input: [AddEnvironmentalVariableVersionInput!]!): AddEnvironmentalVariableVersionPayload @join__field(graph: BASS)
  updateEnvironmentalVariableVersion(input: UpdateEnvironmentalVariableVersionInput!): UpdateEnvironmentalVariableVersionPayload @join__field(graph: BASS)
  deleteEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter!): DeleteEnvironmentalVariableVersionPayload @join__field(graph: BASS)
  addSecret(input: [AddSecretInput!]!, upsert: Boolean): AddSecretPayload @join__field(graph: BASS)
  updateSecret(input: UpdateSecretInput!): UpdateSecretPayload @join__field(graph: BASS)
  deleteSecret(filter: SecretFilter!): DeleteSecretPayload @join__field(graph: BASS)
  addSecretVersion(input: [AddSecretVersionInput!]!): AddSecretVersionPayload @join__field(graph: BASS)
  updateSecretVersion(input: UpdateSecretVersionInput!): UpdateSecretVersionPayload @join__field(graph: BASS)
  deleteSecretVersion(filter: SecretVersionFilter!): DeleteSecretVersionPayload @join__field(graph: BASS)
  addSignature(input: [AddSignatureInput!]!): AddSignaturePayload @join__field(graph: BASS)
  updateSignature(input: UpdateSignatureInput!): UpdateSignaturePayload @join__field(graph: BASS)
  deleteSignature(filter: SignatureFilter!): DeleteSignaturePayload @join__field(graph: BASS)
  addSignatureReason(input: [AddSignatureReasonInput!]!): AddSignatureReasonPayload @join__field(graph: BASS)
  updateSignatureReason(input: UpdateSignatureReasonInput!): UpdateSignatureReasonPayload @join__field(graph: BASS)
  deleteSignatureReason(filter: SignatureReasonFilter!): DeleteSignatureReasonPayload @join__field(graph: BASS)
  addComment(input: [AddCommentInput!]!, upsert: Boolean): AddCommentPayload @join__field(graph: BASS)
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload @join__field(graph: BASS)
  deleteComment(filter: CommentFilter!): DeleteCommentPayload @join__field(graph: BASS)

  """ loadBpmn takes the base64 encoded xml for the Process definition, and loads it into the server. The file is checked against existing versions, and if different, it is saved as a new version of the Process 
  """
  loadBpmn(xml: String!): WorkflowSpecification! @join__field(graph: BPMN_ENGINE)
  updateBpmnState(id: String!, version: String!, state: VersionState!): [WorkflowSpecificationVersion] @join__field(graph: BPMN_ENGINE)
  createAndRunBpmnSync(id: String!, version: String, variables: String): WorkflowInstance @join__field(graph: BPMN_ENGINE)
  createAndRunBpmn(id: String!, version: String, variables: String): WorkflowInstance! @join__field(graph: BPMN_ENGINE)
  syncWorkflowSpecsFromDBtoNATS: [WorkflowSpecification] @join__field(graph: BPMN_ENGINE)

  """
  syncEquipmentsFromDBtoNATS queries all active equipment versions from DB and store them to NATS KV.
  It is done asynchronously.
  If it is called while a sync process already running it will not do anything, but it will just return the current
  count.
  """
  syncEquipmentsFromDBtoNATS: SyncEquipmentsFromDBtoNATSStatus! @join__field(graph: CORE)
  createSecret(id: String!, plaintextSecret: String!): [Secret] @join__field(graph: CORE)
  moveEquipment(id: String!, newID: String!): [Equipment] @join__field(graph: CORE)

  """
  updateEquipmentPropertyValue updates STATIC or BOUND equipment property value.
  It needs to use iid as identifier because property id is not unique.
  If it is BOUND, then it will synchronously write to the data source.
  """
  updateEquipmentPropertyValue(iid: ID!, value: String!): [EquipmentProperty] @join__field(graph: CORE)

  """
  updateEquipmentClassPropertyValue updates STATIC or BOUND equipment class property value.
  It needs to use iid as identifier because property id is not unique.
  If it is BOUND, then it will synchronously write to the data source.
  """
  updateEquipmentClassPropertyValue(iid: ID!, value: String!): [EquipmentClassProperty] @join__field(graph: CORE)
  createDataSourceVersion(input: CreateDataSourceVersionInput!): [DataSourceVersion] @join__field(graph: CORE)
  createEnvironmentalVariableVersion(input: CreateEnvironmentalVariableVersionInput!): [EnvironmentalVariableVersion] @join__field(graph: CORE)
  createEquipmentClassVersion(input: CreateEquipmentClassVersionInput!): [EquipmentClassVersion] @join__field(graph: CORE)
  createEquipmentVersion(input: CreateEquipmentVersionInput!): [EquipmentVersion] @join__field(graph: CORE)
  createMaterialClassVersion(input: CreateMaterialClassVersionInput!): [MaterialClassVersion] @join__field(graph: CORE)
  createMaterialDefinitionVersion(input: CreateMaterialDefinitionVersionInput!): [MaterialDefinitionVersion] @join__field(graph: CORE)
  createOperationalLocationClassVersion(input: CreateOperationalLocationClassVersionInput!): [OperationalLocationClassVersion] @join__field(graph: CORE)
  createOperationalLocationVersion(input: CreateOperationalLocationVersionInput!): [OperationalLocationVersion] @join__field(graph: CORE)
  createOperationsDefinitionVersion(input: CreateOperationsDefinitionVersionInput!): [OperationsDefinitionVersion] @join__field(graph: CORE)
  createPersonVersion(input: CreatePersonVersionInput!): [PersonVersion] @join__field(graph: CORE)
  createPersonnelClassVersion(input: CreatePersonnelClassVersionInput!): [PersonnelClassVersion] @join__field(graph: CORE)
  createPhysicalAssetClassVersion(input: CreatePhysicalAssetClassVersionInput!): [PhysicalAssetClassVersion] @join__field(graph: CORE)
  createPhysicalAssetVersion(input: CreatePhysicalAssetVersionInput!): [PhysicalAssetVersion] @join__field(graph: CORE)
  createProcessSegmentVersion(input: CreateProcessSegmentVersionInput!): [ProcessSegmentVersion] @join__field(graph: CORE)
  createWorkflowSpecificationVersion(input: CreateWorkflowSpecificationVersionInput!): [WorkflowSpecificationVersion] @join__field(graph: CORE)
  saveDataSourceVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [DataSourceVersion] @join__field(graph: CORE)
  saveEquipmentClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [EquipmentClassVersion] @join__field(graph: CORE)
  saveEquipmentVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [EquipmentVersion] @join__field(graph: CORE)
  saveMaterialClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [MaterialClassVersion] @join__field(graph: CORE)
  saveMaterialDefinitionVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [MaterialDefinitionVersion] @join__field(graph: CORE)
  saveOperationalLocationClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [OperationalLocationClassVersion] @join__field(graph: CORE)
  saveOperationalLocationVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [OperationalLocationVersion] @join__field(graph: CORE)
  saveOperationsDefinitionVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [OperationsDefinitionVersion] @join__field(graph: CORE)
  savePersonVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [PersonVersion] @join__field(graph: CORE)
  savePersonnelClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [PersonnelClassVersion] @join__field(graph: CORE)
  savePhysicalAssetClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [PhysicalAssetClassVersion] @join__field(graph: CORE)
  savePhysicalAssetVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [PhysicalAssetVersion] @join__field(graph: CORE)
  saveProcessSegmentVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): [ProcessSegmentVersion] @join__field(graph: CORE)

  """
  asyncSaveDataSourceVersionAs clones an existing DataSourceVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveDataSourceVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveEquipmentClassVersionAs clones an existing EquipmentClassVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveEquipmentClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveEquipmentVersionAs clones an existing EquipmentVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveEquipmentVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveMaterialClassVersionAs clones an existing MaterialClassVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveMaterialClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveMaterialDefinitionVersionAs clones an existing MaterialDefinitionVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveMaterialDefinitionVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveOperationalLocationClassVersionAs clones an existing OperationalLocationClassVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveOperationalLocationClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveOperationalLocationVersionAs clones an existing OperationalLocationVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveOperationalLocationVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveOperationsDefinitionVersionAs clones an existing OperationsDefinitionVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveOperationsDefinitionVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSavePersonVersionAs clones an existing SavePersonVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSavePersonVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSavePersonnelClassVersionAs clones an existing PersonnelClassVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSavePersonnelClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSavePhysicalAssetClassVersionAs clones an existing PhysicalAssetClassVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSavePhysicalAssetClassVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSavePhysicalAssetVersionAs clones an existing PhysicalAssetVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSavePhysicalAssetVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)

  """
  asyncSaveProcessSegmentVersionAs clones an existing ProcessSegmentVersion asynchronously. It returns a string which can be
  used to subscribe mutationStatus(id).
  """
  asyncSaveProcessSegmentVersionAs(fromID: String!, fromVersion: String!, toID: String, toVersion: String): String! @join__field(graph: CORE)
  updateDataSourceVersionState(id: String!, version: String!, state: VersionState!): [DataSourceVersion] @join__field(graph: CORE)
  updateEnvironmentalVariableVersionState(id: String!, version: String!, state: VersionState!): [EnvironmentalVariableVersion] @join__field(graph: CORE)
  updateEquipmentClassVersionState(id: String!, version: String!, state: VersionState!): [EquipmentClassVersion] @join__field(graph: CORE)
  updateEquipmentVersionState(id: String!, version: String!, state: VersionState!): [EquipmentVersion] @join__field(graph: CORE)
  updateMaterialClassVersionState(id: String!, version: String!, state: VersionState!): [MaterialClassVersion] @join__field(graph: CORE)
  updateMaterialDefinitionVersionState(id: String!, version: String!, state: VersionState!): [MaterialDefinitionVersion] @join__field(graph: CORE)
  updateOperationalLocationClassVersionState(id: String!, version: String!, state: VersionState!): [OperationalLocationClassVersion] @join__field(graph: CORE)
  updateOperationalLocationVersionState(id: String!, version: String!, state: VersionState!): [OperationalLocationVersion] @join__field(graph: CORE)
  updateOperationsDefinitionVersionState(id: String!, version: String!, state: VersionState!): [OperationsDefinitionVersion] @join__field(graph: CORE)
  updatePersonVersionState(id: String!, version: String!, state: VersionState!): [PersonVersion] @join__field(graph: CORE)
  updatePersonnelClassVersionState(id: String!, version: String!, state: VersionState!): [PersonnelClassVersion] @join__field(graph: CORE)
  updatePhysicalAssetClassVersionState(id: String!, version: String!, state: VersionState!): [PhysicalAssetClassVersion] @join__field(graph: CORE)
  updatePhysicalAssetVersionState(id: String!, version: String!, state: VersionState!): [PhysicalAssetVersion] @join__field(graph: CORE)
  updateProcessSegmentVersionState(id: String!, version: String!, state: VersionState!): [ProcessSegmentVersion] @join__field(graph: CORE)
  disableDataSource(iid: ID!): [DataSource] @join__field(graph: CORE)
  disableEnvironmentalVariable(iid: ID!): [EnvironmentalVariable] @join__field(graph: CORE)
  disableEquipment(iid: ID!): [Equipment] @join__field(graph: CORE)
  disableEquipmentClass(iid: ID!): [EquipmentClass] @join__field(graph: CORE)
  disableMaterialClass(iid: ID!): [MaterialClass] @join__field(graph: CORE)
  disableMaterialDefinition(iid: ID!): [MaterialDefinition] @join__field(graph: CORE)
  disableOperationalLocation(iid: ID!): [OperationalLocation] @join__field(graph: CORE)
  disableOperationalLocationClass(iid: ID!): [OperationalLocationClass] @join__field(graph: CORE)
  disableOperationsDefinition(iid: ID!): [OperationsDefinition] @join__field(graph: CORE)
  disablePerson(iid: ID!): [Person] @join__field(graph: CORE)
  disablePersonnelClass(iid: ID!): [PersonnelClass] @join__field(graph: CORE)
  disablePhysicalAsset(iid: ID!): [PhysicalAsset] @join__field(graph: CORE)
  disablePhysicalAssetClass(iid: ID!): [PhysicalAssetClass] @join__field(graph: CORE)
  disableProcessSegment(iid: ID!): [ProcessSegment] @join__field(graph: CORE)
  enableDataSource(iid: ID!): [DataSource] @join__field(graph: CORE)
  enableEnvironmentalVariable(iid: ID!): [EnvironmentalVariable] @join__field(graph: CORE)
  enableEquipment(iid: ID!): [Equipment] @join__field(graph: CORE)
  enableEquipmentClass(iid: ID!): [EquipmentClass] @join__field(graph: CORE)
  enableMaterialClass(iid: ID!): [MaterialClass] @join__field(graph: CORE)
  enableMaterialDefinition(iid: ID!): [MaterialDefinition] @join__field(graph: CORE)
  enableOperationalLocation(iid: ID!): [OperationalLocation] @join__field(graph: CORE)
  enableOperationalLocationClass(iid: ID!): [OperationalLocationClass] @join__field(graph: CORE)
  enableOperationsDefinition(iid: ID!): [OperationsDefinition] @join__field(graph: CORE)
  enablePerson(iid: ID!): [Person] @join__field(graph: CORE)
  enablePersonnelClass(iid: ID!): [PersonnelClass] @join__field(graph: CORE)
  enablePhysicalAsset(iid: ID!): [PhysicalAsset] @join__field(graph: CORE)
  enablePhysicalAssetClass(iid: ID!): [PhysicalAssetClass] @join__field(graph: CORE)
  enableProcessSegment(iid: ID!): [ProcessSegment] @join__field(graph: CORE)
}

type MutationStatus
  @join__type(graph: CORE)
{
  running: Boolean!
  error: String
}

input NearFilter
  @join__type(graph: BASS)
{
  distance: Float!
  coordinate: PointRef!
}

type NodeEvent
  @join__type(graph: BPMN_ENGINE)
{
  """ The DateTime for a event """
  time: DateTime

  """ The name/message of a event """
  name: String

  """ Array of attributes relating to a event """
  attributes: [NodeEventAttribute]
}

type NodeEventAttribute
  @join__type(graph: BPMN_ENGINE)
{
  """ The key of an event attribute """
  key: String

  """ The value of an event attribute """
  value: String
}

""" Input for adding a reference to an existing object by using id or iid 
"""
input OnlyRef
  @join__type(graph: CORE)
{
  iid: ID
  id: String
}

type OperationalLocation
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion] @join__field(graph: BASS)
  activeVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  isPartOf(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation] @join__field(graph: BASS)
  isMadeUpOf(filter: OperationalLocationFilter): OperationalLocation @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: OperationalLocationFilter): OperationalLocationAggregateResult @join__field(graph: BASS)
}

type OperationalLocationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
}

type OperationalLocationClass
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @join__field(graph: BASS)
  activeVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  includedIn(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @join__field(graph: BASS)
  isPartOf(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @join__field(graph: BASS)
  isMadeUpOf(filter: OperationalLocationClassFilter): OperationalLocationClass @join__field(graph: BASS)
  operationalLocationVersions(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult @join__field(graph: BASS)
  includedInAggregate(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult @join__field(graph: BASS)
  operationalLocationVersionsAggregate(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult @join__field(graph: BASS)
}

type OperationalLocationClassAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input OperationalLocationClassFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationalLocationClassHasFilter]
  and: [OperationalLocationClassFilter]
  or: [OperationalLocationClassFilter]
  not: OperationalLocationClassFilter
}

enum OperationalLocationClassHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  includedIn @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  operationalLocationVersions @join__enumValue(graph: BASS)
}

input OperationalLocationClassOrder
  @join__type(graph: BASS)
{
  asc: OperationalLocationClassOrderable
  desc: OperationalLocationClassOrderable
  then: OperationalLocationClassOrder
}

enum OperationalLocationClassOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input OperationalLocationClassPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationalLocationClassVersionRef]
  activeVersion: OperationalLocationClassVersionRef
  nextVersion: String
  id: String
  label: String
  includedIn: [OperationalLocationClassVersionRef]
  isPartOf: [OperationalLocationClassRef]
  isMadeUpOf: OperationalLocationClassRef
  operationalLocationVersions: [OperationalLocationVersionRef]
}

type OperationalLocationClassProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  propertyType: Isa95PropertyType! @join__field(graph: BASS)
  isPartOf(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty] @join__field(graph: BASS)
  isMadeUpOf(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassProperty @join__field(graph: BASS)
  operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion! @join__field(graph: BASS)
  mapsTo(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @join__field(graph: BASS)
  isPartOfAggregate(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult @join__field(graph: BASS)
  mapsToAggregate(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult @join__field(graph: BASS)
}

type OperationalLocationClassPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input OperationalLocationClassPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [OperationalLocationClassPropertyHasFilter]
  and: [OperationalLocationClassPropertyFilter]
  or: [OperationalLocationClassPropertyFilter]
  not: OperationalLocationClassPropertyFilter
}

enum OperationalLocationClassPropertyHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  propertyType @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  operationalLocationClassVersion @join__enumValue(graph: BASS)
  mapsTo @join__enumValue(graph: BASS)
}

input OperationalLocationClassPropertyOrder
  @join__type(graph: BASS)
{
  asc: OperationalLocationClassPropertyOrderable
  desc: OperationalLocationClassPropertyOrderable
  then: OperationalLocationClassPropertyOrder
}

enum OperationalLocationClassPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input OperationalLocationClassPropertyPatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  propertyType: Isa95PropertyType
  isPartOf: [OperationalLocationClassPropertyRef]
  isMadeUpOf: OperationalLocationClassPropertyRef
  operationalLocationClassVersion: OperationalLocationClassVersionRef
  mapsTo: [OperationalLocationPropertyRef]
}

input OperationalLocationClassPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  propertyType: Isa95PropertyType
  isPartOf: [OperationalLocationClassPropertyRef]
  isMadeUpOf: OperationalLocationClassPropertyRef
  operationalLocationClassVersion: OperationalLocationClassVersionRef
  mapsTo: [OperationalLocationPropertyRef]
}

input OperationalLocationClassRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationalLocationClassVersionRef]
  activeVersion: OperationalLocationClassVersionRef
  nextVersion: String
  id: String
  label: String
  includedIn: [OperationalLocationClassVersionRef]
  isPartOf: [OperationalLocationClassRef]
  isMadeUpOf: OperationalLocationClassRef
  operationalLocationVersions: [OperationalLocationVersionRef]
}

type OperationalLocationClassVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  isActiveVersionOf(filter: OperationalLocationClassFilter): OperationalLocationClass @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  name: String @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  operationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClass! @join__field(graph: BASS)
  includesPropertiesOf(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @join__field(graph: BASS)
  isPartOf(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @join__field(graph: BASS)
  isMadeUpOf(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion @join__field(graph: BASS)
  properties(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  includesPropertiesOfAggregate(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult @join__field(graph: BASS)
}

type OperationalLocationClassVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input OperationalLocationClassVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  has: [OperationalLocationClassVersionHasFilter]
  and: [OperationalLocationClassVersionFilter]
  or: [OperationalLocationClassVersionFilter]
  not: OperationalLocationClassVersionFilter
}

enum OperationalLocationClassVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  operationalLocationClass @join__enumValue(graph: BASS)
  includesPropertiesOf @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
}

input OperationalLocationClassVersionOrder
  @join__type(graph: BASS)
{
  asc: OperationalLocationClassVersionOrderable
  desc: OperationalLocationClassVersionOrderable
  then: OperationalLocationClassVersionOrder
}

enum OperationalLocationClassVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input OperationalLocationClassVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: OperationalLocationClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  name: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocationClass: OperationalLocationClassRef
  includesPropertiesOf: [OperationalLocationClassRef]
  isPartOf: [OperationalLocationClassVersionRef]
  isMadeUpOf: OperationalLocationClassVersionRef
  properties: [OperationalLocationClassPropertyRef]
}

input OperationalLocationClassVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: OperationalLocationClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  name: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocationClass: OperationalLocationClassRef
  includesPropertiesOf: [OperationalLocationClassRef]
  isPartOf: [OperationalLocationClassVersionRef]
  isMadeUpOf: OperationalLocationClassVersionRef
  properties: [OperationalLocationClassPropertyRef]
}

input OperationalLocationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  has: [OperationalLocationHasFilter]
  and: [OperationalLocationFilter]
  or: [OperationalLocationFilter]
  not: OperationalLocationFilter
}

enum OperationalLocationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
}

type OperationalLocationInheritedProperty
  @join__type(graph: CORE)
{
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasure

  """
  The associated OperationalLocationClassProperty that this inherited property comes from.
  If includeInstanceProperties is true, then this inherited property may actually be an operational location's property, in this
  case the operationalLocationClassProperty would be empty and the operationalLocationProperty would not be empty.
  """
  operationalLocationClassProperty: OperationalLocationClassProperty

  """
  The associated OperationalLocationProperty that this inherited property comes from.
  If includeInstanceProperties is false or if this inherited property is actually an operational location class' property, then
  the operationalLocationProperty would be empty.
  """
  operationalLocationProperty: OperationalLocationProperty

  """ Inverse relation """
  operationalLocationVersion: OperationalLocationVersion!
}

input OperationalLocationInheritedPropertyFilter
  @join__type(graph: CORE)
{
  and: [OperationalLocationInheritedPropertyFilter]
  description: Input_StringExactFilter_StringFullTextFilter
  effectiveEnd: DateTimeFilter
  effectiveStart: DateTimeFilter
  has: [OperationalLocationInheritedPropertyHasFilter]
  id: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  iid: [ID!]
  label: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  not: OperationalLocationInheritedPropertyFilter
  or: [OperationalLocationInheritedPropertyFilter]
  value: Input_StringExactFilter_StringFullTextFilter
}

enum OperationalLocationInheritedPropertyHasFilter
  @join__type(graph: CORE)
{
  description @join__enumValue(graph: CORE)
  effectiveEnd @join__enumValue(graph: CORE)
  effectiveStart @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  isMadeUpOf @join__enumValue(graph: CORE)
  isPartOf @join__enumValue(graph: CORE)
  label @join__enumValue(graph: CORE)
  mapsTo @join__enumValue(graph: CORE)
  value @join__enumValue(graph: CORE)
  valueUnitOfMeasure @join__enumValue(graph: CORE)
}

input OperationalLocationInheritedPropertyOptions
  @join__type(graph: CORE)
{
  includeInstanceProperties: Boolean
  inheritedPropertyFilter: OperationalLocationInheritedPropertyFilter
}

input OperationalLocationOrder
  @join__type(graph: BASS)
{
  asc: OperationalLocationOrderable
  desc: OperationalLocationOrderable
  then: OperationalLocationOrder
}

enum OperationalLocationOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
}

input OperationalLocationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  label: String
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationalLocationVersionRef]
  activeVersion: OperationalLocationVersionRef
  nextVersion: String
  isPartOf: [OperationalLocationRef]
  isMadeUpOf: OperationalLocationRef
}

type OperationalLocationProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  isPartOf(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @join__field(graph: BASS)
  isMadeUpOf(filter: OperationalLocationPropertyFilter): OperationalLocationProperty @join__field(graph: BASS)
  operationalLocationVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersion! @join__field(graph: BASS)
  mapsTo(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassProperty @join__field(graph: BASS)
  isPartOfAggregate(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult @join__field(graph: BASS)
}

type OperationalLocationPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input OperationalLocationPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [OperationalLocationPropertyHasFilter]
  and: [OperationalLocationPropertyFilter]
  or: [OperationalLocationPropertyFilter]
  not: OperationalLocationPropertyFilter
}

enum OperationalLocationPropertyHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  operationalLocationVersion @join__enumValue(graph: BASS)
  mapsTo @join__enumValue(graph: BASS)
}

input OperationalLocationPropertyOrder
  @join__type(graph: BASS)
{
  asc: OperationalLocationPropertyOrderable
  desc: OperationalLocationPropertyOrderable
  then: OperationalLocationPropertyOrder
}

enum OperationalLocationPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input OperationalLocationPropertyPatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  isPartOf: [OperationalLocationPropertyRef]
  isMadeUpOf: OperationalLocationPropertyRef
  operationalLocationVersion: OperationalLocationVersionRef
  mapsTo: OperationalLocationClassPropertyRef
}

input OperationalLocationPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  isPartOf: [OperationalLocationPropertyRef]
  isMadeUpOf: OperationalLocationPropertyRef
  operationalLocationVersion: OperationalLocationVersionRef
  mapsTo: OperationalLocationClassPropertyRef
}

input OperationalLocationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  label: String
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationalLocationVersionRef]
  activeVersion: OperationalLocationVersionRef
  nextVersion: String
  isPartOf: [OperationalLocationRef]
  isMadeUpOf: OperationalLocationRef
}

type OperationalLocationVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  isActiveVersionOf(filter: OperationalLocationFilter): OperationalLocation @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  name: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation! @join__field(graph: BASS)
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition @join__field(graph: BASS)
  operationalLocationClasses(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @join__field(graph: BASS)
  properties(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @join__field(graph: BASS)
  isPartOf(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion] @join__field(graph: BASS)
  isMadeUpOf(filter: OperationalLocationVersionFilter): OperationalLocationVersion @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  operationalLocationClassesAggregate(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult @join__field(graph: BASS)
  inheritedProperties(options: OperationalLocationInheritedPropertyOptions): [OperationalLocationInheritedProperty] @join__field(graph: CORE)
}

type OperationalLocationVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nameMin: String
  nameMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
}

input OperationalLocationVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  name: StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [OperationalLocationVersionHasFilter]
  and: [OperationalLocationVersionFilter]
  or: [OperationalLocationVersionFilter]
  not: OperationalLocationVersionFilter
}

enum OperationalLocationVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocationClasses @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
}

input OperationalLocationVersionOrder
  @join__type(graph: BASS)
{
  asc: OperationalLocationVersionOrderable
  desc: OperationalLocationVersionOrderable
  then: OperationalLocationVersionOrder
}

enum OperationalLocationVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input OperationalLocationVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: OperationalLocationRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  name: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocationClasses: [OperationalLocationClassRef]
  properties: [OperationalLocationPropertyRef]
  isPartOf: [OperationalLocationVersionRef]
  isMadeUpOf: OperationalLocationVersionRef
}

input OperationalLocationVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: OperationalLocationRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  name: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocationClasses: [OperationalLocationClassRef]
  properties: [OperationalLocationPropertyRef]
  isPartOf: [OperationalLocationVersionRef]
  isMadeUpOf: OperationalLocationVersionRef
}

type OperationsDefinition
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion] @join__field(graph: BASS)
  activeVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  parent(filter: OperationsDefinitionFilter): OperationsDefinition @join__field(graph: BASS)
  children(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @join__field(graph: BASS)
  workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @join__field(graph: BASS)
  operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @join__field(graph: BASS)
  operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse] @join__field(graph: BASS)
  segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @join__field(graph: BASS)
  segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult @join__field(graph: BASS)
  workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult @join__field(graph: BASS)
  operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult @join__field(graph: BASS)
  operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult @join__field(graph: BASS)
  segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult @join__field(graph: BASS)
  segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult @join__field(graph: BASS)
}

type OperationsDefinitionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input OperationsDefinitionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsDefinitionHasFilter]
  and: [OperationsDefinitionFilter]
  or: [OperationsDefinitionFilter]
  not: OperationsDefinitionFilter
}

enum OperationsDefinitionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  workMasters @join__enumValue(graph: BASS)
  operationsRequests @join__enumValue(graph: BASS)
  operationsResponses @join__enumValue(graph: BASS)
  segmentRequirements @join__enumValue(graph: BASS)
  segmentResponses @join__enumValue(graph: BASS)
}

input OperationsDefinitionOrder
  @join__type(graph: BASS)
{
  asc: OperationsDefinitionOrderable
  desc: OperationsDefinitionOrderable
  then: OperationsDefinitionOrder
}

enum OperationsDefinitionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input OperationsDefinitionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsDefinitionVersionRef]
  activeVersion: OperationsDefinitionVersionRef
  nextVersion: String
  id: String
  label: String
  parent: OperationsDefinitionRef
  children: [OperationsDefinitionRef]
  workMasters: [WorkMasterRef]
  operationsRequests: [OperationsRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef]
}

input OperationsDefinitionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsDefinitionVersionRef]
  activeVersion: OperationsDefinitionVersionRef
  nextVersion: String
  id: String
  label: String
  parent: OperationsDefinitionRef
  children: [OperationsDefinitionRef]
  workMasters: [WorkMasterRef]
  operationsRequests: [OperationsRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef]
}

type OperationsDefinitionVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition! @join__field(graph: BASS)
  isActiveVersionOf(filter: OperationsDefinitionFilter): OperationsDefinition @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  billOfMaterial: String @join__field(graph: BASS)
  billOfResources: String @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  operationsType: WorkType! @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  definitionType: DefinitionType @join__field(graph: BASS)
  segments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @join__field(graph: BASS)
  materialsBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  segmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult @join__field(graph: BASS)
  materialsBillAggregate(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult @join__field(graph: BASS)
}

type OperationsDefinitionVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  idMin: String
  idMax: String
  billOfMaterialMin: String
  billOfMaterialMax: String
  billOfResourcesMin: String
  billOfResourcesMax: String
  descriptionMin: String
  descriptionMax: String
}

input OperationsDefinitionVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  billOfMaterial: StringExactFilter_StringFullTextFilter
  billOfResources: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  has: [OperationsDefinitionVersionHasFilter]
  and: [OperationsDefinitionVersionFilter]
  or: [OperationsDefinitionVersionFilter]
  not: OperationsDefinitionVersionFilter
}

enum OperationsDefinitionVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  operationsDefinition @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  billOfMaterial @join__enumValue(graph: BASS)
  billOfResources @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  segments @join__enumValue(graph: BASS)
  materialsBill @join__enumValue(graph: BASS)
}

input OperationsDefinitionVersionOrder
  @join__type(graph: BASS)
{
  asc: OperationsDefinitionVersionOrderable
  desc: OperationsDefinitionVersionOrderable
  then: OperationsDefinitionVersionOrder
}

enum OperationsDefinitionVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  billOfMaterial @join__enumValue(graph: BASS)
  billOfResources @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input OperationsDefinitionVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  operationsDefinition: OperationsDefinitionRef
  isActiveVersionOf: OperationsDefinitionRef
  id: String
  billOfMaterial: String
  billOfResources: String
  description: String
  operationsType: WorkType
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  segments: [OperationsSegmentRef]
  materialsBill: [OperationsMaterialBillRef]
}

input OperationsDefinitionVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  operationsDefinition: OperationsDefinitionRef
  isActiveVersionOf: OperationsDefinitionRef
  id: String
  billOfMaterial: String
  billOfResources: String
  description: String
  operationsType: WorkType
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  segments: [OperationsSegmentRef]
  materialsBill: [OperationsMaterialBillRef]
}

type OperationsEvent
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  id: String!
  operationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinition!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime!
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  priority: String
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
  records(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
  parent(filter: OperationsEventFilter): OperationsEvent
  children(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  propertiesAggregate(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult
  recordsAggregate(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
  childrenAggregate(filter: OperationsEventFilter): OperationsEventAggregateResult
}

type OperationsEventAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
  recordTimestampMin: DateTime
  recordTimestampMax: DateTime
  priorityMin: String
  priorityMax: String
  categoryMin: String
  categoryMax: String
  sourceMin: String
  sourceMax: String
}

type OperationsEventClass
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  versions(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
  activeVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion
  nextVersion: String
  id: String!
  label: String!
  isAssembledFrom(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
  isComponentOf(filter: OperationsEventClassFilter): OperationsEventClass
  includesPropertiesOf(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
  isIncludedIn(filter: OperationsEventClassFilter): OperationsEventClass
  operationsEventDefinitionVersions(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  versionsAggregate(filter: OperationsEventClassVersionFilter): OperationsEventClassVersionAggregateResult
  isAssembledFromAggregate(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
  includesPropertiesOfAggregate(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
  operationsEventDefinitionVersionsAggregate(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult
}

type OperationsEventClassAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input OperationsEventClassFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventClassHasFilter]
  and: [OperationsEventClassFilter]
  or: [OperationsEventClassFilter]
  not: OperationsEventClassFilter
}

enum OperationsEventClassHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isAssembledFrom @join__enumValue(graph: BASS)
  isComponentOf @join__enumValue(graph: BASS)
  includesPropertiesOf @join__enumValue(graph: BASS)
  isIncludedIn @join__enumValue(graph: BASS)
  operationsEventDefinitionVersions @join__enumValue(graph: BASS)
}

input OperationsEventClassOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventClassOrderable
  desc: OperationsEventClassOrderable
  then: OperationsEventClassOrder
}

enum OperationsEventClassOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input OperationsEventClassPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsEventClassVersionRef]
  activeVersion: OperationsEventClassVersionRef
  nextVersion: String
  id: String
  label: String
  isAssembledFrom: [OperationsEventClassRef]
  isComponentOf: OperationsEventClassRef
  includesPropertiesOf: [OperationsEventClassRef]
  isIncludedIn: OperationsEventClassRef
  operationsEventDefinitionVersions: [OperationsEventDefinitionVersionRef]
}

type OperationsEventClassProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  operationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  parent(filter: OperationsEventClassPropertyFilter): OperationsEventClassProperty
  children(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult
}

type OperationsEventClassPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  valueMin: String
  valueMax: String
}

input OperationsEventClassPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  value: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventClassPropertyHasFilter]
  and: [OperationsEventClassPropertyFilter]
  or: [OperationsEventClassPropertyFilter]
  not: OperationsEventClassPropertyFilter
}

enum OperationsEventClassPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  operationsEventClassVersion @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  propertyType @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
}

input OperationsEventClassPropertyOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventClassPropertyOrderable
  desc: OperationsEventClassPropertyOrderable
  then: OperationsEventClassPropertyOrder
}

enum OperationsEventClassPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input OperationsEventClassPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  operationsEventClassVersion: OperationsEventClassVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  parent: OperationsEventClassPropertyRef
  children: [OperationsEventClassPropertyRef]
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
}

input OperationsEventClassPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  operationsEventClassVersion: OperationsEventClassVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  parent: OperationsEventClassPropertyRef
  children: [OperationsEventClassPropertyRef]
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
}

type OperationsEventClassRecordSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  operationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity(filter: MultiplicityFilter): Multiplicity
  action: [Action]
  actionMultiplicity(filter: MultiplicityFilter): Multiplicity
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type OperationsEventClassRecordSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
}

input OperationsEventClassRecordSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventClassRecordSpecificationHasFilter]
  and: [OperationsEventClassRecordSpecificationFilter]
  or: [OperationsEventClassRecordSpecificationFilter]
  not: OperationsEventClassRecordSpecificationFilter
}

enum OperationsEventClassRecordSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  operationsEventClassVersion @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  informationObjectType @join__enumValue(graph: BASS)
  multiplicity @join__enumValue(graph: BASS)
  action @join__enumValue(graph: BASS)
  actionMultiplicity @join__enumValue(graph: BASS)
}

input OperationsEventClassRecordSpecificationOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventClassRecordSpecificationOrderable
  desc: OperationsEventClassRecordSpecificationOrderable
  then: OperationsEventClassRecordSpecificationOrder
}

enum OperationsEventClassRecordSpecificationOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input OperationsEventClassRecordSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  operationsEventClassVersion: OperationsEventClassVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity: MultiplicityRef
  action: [Action]
  actionMultiplicity: MultiplicityRef
}

input OperationsEventClassRecordSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  operationsEventClassVersion: OperationsEventClassVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity: MultiplicityRef
  action: [Action]
  actionMultiplicity: MultiplicityRef
}

input OperationsEventClassRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsEventClassVersionRef]
  activeVersion: OperationsEventClassVersionRef
  nextVersion: String
  id: String
  label: String
  isAssembledFrom: [OperationsEventClassRef]
  isComponentOf: OperationsEventClassRef
  includesPropertiesOf: [OperationsEventClassRef]
  isIncludedIn: OperationsEventClassRef
  operationsEventDefinitionVersions: [OperationsEventDefinitionVersionRef]
}

type OperationsEventClassVersion
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  id: String!
  version: String!
  operationsEventClass(filter: OperationsEventClassFilter): OperationsEventClass!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState!
  isActiveVersionOf(filter: OperationsEventClassFilter): OperationsEventClass
  effectiveStart: DateTime
  effectiveEnd: DateTime
  properties(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
  recordSpecifications(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
  description: String
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  propertiesAggregate(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult
  recordSpecificationsAggregate(filter: OperationsEventClassRecordSpecificationFilter): OperationsEventClassRecordSpecificationAggregateResult
}

type OperationsEventClassVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  versionMin: String
  versionMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
}

input OperationsEventClassVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  version: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  has: [OperationsEventClassVersionHasFilter]
  and: [OperationsEventClassVersionFilter]
  or: [OperationsEventClassVersionFilter]
  not: OperationsEventClassVersionFilter
}

enum OperationsEventClassVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  operationsEventClass @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  recordSpecifications @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input OperationsEventClassVersionOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventClassVersionOrderable
  desc: OperationsEventClassVersionOrderable
  then: OperationsEventClassVersionOrder
}

enum OperationsEventClassVersionOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input OperationsEventClassVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  version: String
  operationsEventClass: OperationsEventClassRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState
  isActiveVersionOf: OperationsEventClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  properties: [OperationsEventClassPropertyRef]
  recordSpecifications: [OperationsEventClassRecordSpecificationRef]
  description: String
}

input OperationsEventClassVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  version: String
  operationsEventClass: OperationsEventClassRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState
  isActiveVersionOf: OperationsEventClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  properties: [OperationsEventClassPropertyRef]
  recordSpecifications: [OperationsEventClassRecordSpecificationRef]
  description: String
}

type OperationsEventDefinition
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  versions(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
  activeVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion
  nextVersion: String
  id: String!
  label: String!
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  isAssembledFrom(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
  isComponentOf(filter: OperationsEventDefinitionFilter): OperationsEventDefinition
  includesPropertiesOf(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
  isIncludedIn(filter: OperationsEventDefinitionFilter): OperationsEventDefinition
  operationsEvents(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  versionsAggregate(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult
  isAssembledFromAggregate(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult
  includesPropertiesOfAggregate(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult
  operationsEventsAggregate(filter: OperationsEventFilter): OperationsEventAggregateResult
}

type OperationsEventDefinitionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input OperationsEventDefinitionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventDefinitionHasFilter]
  and: [OperationsEventDefinitionFilter]
  or: [OperationsEventDefinitionFilter]
  not: OperationsEventDefinitionFilter
}

enum OperationsEventDefinitionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  isAssembledFrom @join__enumValue(graph: BASS)
  isComponentOf @join__enumValue(graph: BASS)
  includesPropertiesOf @join__enumValue(graph: BASS)
  isIncludedIn @join__enumValue(graph: BASS)
  operationsEvents @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventDefinitionOrderable
  desc: OperationsEventDefinitionOrderable
  then: OperationsEventDefinitionOrder
}

enum OperationsEventDefinitionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsEventDefinitionVersionRef]
  activeVersion: OperationsEventDefinitionVersionRef
  nextVersion: String
  id: String
  label: String
  hierarchyScope: HierarchyScopeRef
  isAssembledFrom: [OperationsEventDefinitionRef]
  isComponentOf: OperationsEventDefinitionRef
  includesPropertiesOf: [OperationsEventDefinitionRef]
  isIncludedIn: OperationsEventDefinitionRef
  operationsEvents: [OperationsEventRef]
}

type OperationsEventDefinitionProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  operationsEventClassProperty(filter: OperationsEventClassPropertyFilter): OperationsEventClassProperty
  parent(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionProperty
  children(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult
}

type OperationsEventDefinitionPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input OperationsEventDefinitionPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  value: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventDefinitionPropertyHasFilter]
  and: [OperationsEventDefinitionPropertyFilter]
  or: [OperationsEventDefinitionPropertyFilter]
  not: OperationsEventDefinitionPropertyFilter
}

enum OperationsEventDefinitionPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  operationsEventDefinitionVersion @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  operationsEventClassProperty @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionPropertyOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventDefinitionPropertyOrderable
  desc: OperationsEventDefinitionPropertyOrderable
  then: OperationsEventDefinitionPropertyOrder
}

enum OperationsEventDefinitionPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  operationsEventClassProperty: OperationsEventClassPropertyRef
  parent: OperationsEventDefinitionPropertyRef
  children: [OperationsEventDefinitionPropertyRef]
}

input OperationsEventDefinitionPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  operationsEventClassProperty: OperationsEventClassPropertyRef
  parent: OperationsEventDefinitionPropertyRef
  children: [OperationsEventDefinitionPropertyRef]
}

type OperationsEventDefinitionRecordSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity(filter: MultiplicityFilter): Multiplicity
  action: [Action]
  actionMultiplicity(filter: MultiplicityFilter): Multiplicity
  operationsEventRecords(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  operationsEventRecordsAggregate(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
}

type OperationsEventDefinitionRecordSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
}

input OperationsEventDefinitionRecordSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventDefinitionRecordSpecificationHasFilter]
  and: [OperationsEventDefinitionRecordSpecificationFilter]
  or: [OperationsEventDefinitionRecordSpecificationFilter]
  not: OperationsEventDefinitionRecordSpecificationFilter
}

enum OperationsEventDefinitionRecordSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  operationsEventDefinitionVersion @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  informationObjectType @join__enumValue(graph: BASS)
  multiplicity @join__enumValue(graph: BASS)
  action @join__enumValue(graph: BASS)
  actionMultiplicity @join__enumValue(graph: BASS)
  operationsEventRecords @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionRecordSpecificationOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventDefinitionRecordSpecificationOrderable
  desc: OperationsEventDefinitionRecordSpecificationOrderable
  then: OperationsEventDefinitionRecordSpecificationOrder
}

enum OperationsEventDefinitionRecordSpecificationOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionRecordSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity: MultiplicityRef
  action: [Action]
  actionMultiplicity: MultiplicityRef
  operationsEventRecords: [OperationsEventRecordRef]
}

input OperationsEventDefinitionRecordSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  informationObjectType: [InformationObjectTypeEnum]
  multiplicity: MultiplicityRef
  action: [Action]
  actionMultiplicity: MultiplicityRef
  operationsEventRecords: [OperationsEventRecordRef]
}

input OperationsEventDefinitionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [OperationsEventDefinitionVersionRef]
  activeVersion: OperationsEventDefinitionVersionRef
  nextVersion: String
  id: String
  label: String
  hierarchyScope: HierarchyScopeRef
  isAssembledFrom: [OperationsEventDefinitionRef]
  isComponentOf: OperationsEventDefinitionRef
  includesPropertiesOf: [OperationsEventDefinitionRef]
  isIncludedIn: OperationsEventDefinitionRef
  operationsEvents: [OperationsEventRef]
}

type OperationsEventDefinitionVersion
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  operationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinition!
  id: String!
  version: String!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState!
  isActiveVersionOf(filter: OperationsEventDefinitionFilter): OperationsEventDefinition
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  operationsEventClasses(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  priority: [String]
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
  recordSpecifications(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  operationsEventClassesAggregate(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
  propertiesAggregate(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult
  recordSpecificationsAggregate(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecificationAggregateResult
}

type OperationsEventDefinitionVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  versionMin: String
  versionMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
  categoryMin: String
  categoryMax: String
  sourceMin: String
  sourceMax: String
}

input OperationsEventDefinitionVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  version: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventDefinitionVersionHasFilter]
  and: [OperationsEventDefinitionVersionFilter]
  or: [OperationsEventDefinitionVersionFilter]
  not: OperationsEventDefinitionVersionFilter
}

enum OperationsEventDefinitionVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  operationsEventDefinition @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsEventClasses @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  operationsEventType @join__enumValue(graph: BASS)
  operationsEventLevel @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  momFunction @join__enumValue(graph: BASS)
  enterpriseFunction @join__enumValue(graph: BASS)
  category @join__enumValue(graph: BASS)
  source @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  recordSpecifications @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionVersionOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventDefinitionVersionOrderable
  desc: OperationsEventDefinitionVersionOrderable
  then: OperationsEventDefinitionVersionOrder
}

enum OperationsEventDefinitionVersionOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  category @join__enumValue(graph: BASS)
  source @join__enumValue(graph: BASS)
}

input OperationsEventDefinitionVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  operationsEventDefinition: OperationsEventDefinitionRef
  id: String
  version: String
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState
  isActiveVersionOf: OperationsEventDefinitionRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  operationsEventClasses: [OperationsEventClassRef]
  hierarchyScope: HierarchyScopeRef
  priority: [String]
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties: [OperationsEventDefinitionPropertyRef]
  recordSpecifications: [OperationsEventDefinitionRecordSpecificationRef]
}

input OperationsEventDefinitionVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  operationsEventDefinition: OperationsEventDefinitionRef
  id: String
  version: String
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versionStatus: VersionState
  isActiveVersionOf: OperationsEventDefinitionRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  operationsEventClasses: [OperationsEventClassRef]
  hierarchyScope: HierarchyScopeRef
  priority: [String]
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties: [OperationsEventDefinitionPropertyRef]
  recordSpecifications: [OperationsEventDefinitionRecordSpecificationRef]
}

input OperationsEventFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  recordTimestamp: DateTimeFilter
  has: [OperationsEventHasFilter]
  and: [OperationsEventFilter]
  or: [OperationsEventFilter]
  not: OperationsEventFilter
}

enum OperationsEventHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  operationsEventDefinition @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  recordTimestamp @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  operationsEventType @join__enumValue(graph: BASS)
  operationsEventLevel @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  momFunction @join__enumValue(graph: BASS)
  enterpriseFunction @join__enumValue(graph: BASS)
  category @join__enumValue(graph: BASS)
  source @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  records @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
}

enum OperationsEventLevelEnum
  @join__type(graph: BASS)
{
  Level_2 @join__enumValue(graph: BASS)
  Level_3 @join__enumValue(graph: BASS)
  Level_4 @join__enumValue(graph: BASS)
  Other @join__enumValue(graph: BASS)
}

input OperationsEventOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventOrderable
  desc: OperationsEventOrderable
  then: OperationsEventOrder
}

enum OperationsEventOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  recordTimestamp @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  category @join__enumValue(graph: BASS)
  source @join__enumValue(graph: BASS)
}

input OperationsEventPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  operationsEventDefinition: OperationsEventDefinitionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime
  hierarchyScope: HierarchyScopeRef
  priority: String
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties: [OperationsEventPropertyRef]
  records: [OperationsEventRecordRef]
  parent: OperationsEventRef
  children: [OperationsEventRef]
}

type OperationsEventProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  operationsEvent(filter: OperationsEventFilter): OperationsEvent!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionProperty
  parent(filter: OperationsEventPropertyFilter): OperationsEventProperty
  children(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult
}

type OperationsEventPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input OperationsEventPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  value: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [OperationsEventPropertyHasFilter]
  and: [OperationsEventPropertyFilter]
  or: [OperationsEventPropertyFilter]
  not: OperationsEventPropertyFilter
}

enum OperationsEventPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  operationsEvent @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  operationsEventDefinitionProperty @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
}

input OperationsEventPropertyOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventPropertyOrderable
  desc: OperationsEventPropertyOrderable
  then: OperationsEventPropertyOrder
}

enum OperationsEventPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input OperationsEventPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  operationsEvent: OperationsEventRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  operationsEventDefinitionProperty: OperationsEventDefinitionPropertyRef
  parent: OperationsEventPropertyRef
  children: [OperationsEventPropertyRef]
}

input OperationsEventPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  operationsEvent: OperationsEventRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  operationsEventDefinitionProperty: OperationsEventDefinitionPropertyRef
  parent: OperationsEventPropertyRef
  children: [OperationsEventPropertyRef]
}

type OperationsEventRecord
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  operationsEvent(filter: OperationsEventFilter): OperationsEvent!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  description: String
  action: Action
  recordTimestamp: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecification
  recordEntries(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
  parent(filter: OperationsEventRecordFilter): OperationsEventRecord
  children(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult
  childrenAggregate(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
}

type OperationsEventRecordAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
  recordTimestampMin: DateTime
  recordTimestampMax: DateTime
}

type OperationsEventRecordEntry
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  recordId: String!
  operationsEventRecord(filter: OperationsEventRecordFilter): OperationsEventRecord!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime!
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  data: String
  informationObject(filter: InformationObjectFilter): InformationObject
  parent(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntry
  children(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult
}

type OperationsEventRecordEntryAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  recordIdMin: String
  recordIdMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
  recordTimestampMin: DateTime
  recordTimestampMax: DateTime
  dataMin: String
  dataMax: String
}

input OperationsEventRecordEntryFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  recordId: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  recordTimestamp: DateTimeFilter
  has: [OperationsEventRecordEntryHasFilter]
  and: [OperationsEventRecordEntryFilter]
  or: [OperationsEventRecordEntryFilter]
  not: OperationsEventRecordEntryFilter
}

enum OperationsEventRecordEntryHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  recordId @join__enumValue(graph: BASS)
  operationsEventRecord @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  recordTimestamp @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  data @join__enumValue(graph: BASS)
  informationObject @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
}

input OperationsEventRecordEntryOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventRecordEntryOrderable
  desc: OperationsEventRecordEntryOrderable
  then: OperationsEventRecordEntryOrder
}

enum OperationsEventRecordEntryOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  recordId @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  recordTimestamp @join__enumValue(graph: BASS)
  data @join__enumValue(graph: BASS)
}

input OperationsEventRecordEntryPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  recordId: String
  operationsEventRecord: OperationsEventRecordRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime
  hierarchyScope: HierarchyScopeRef
  data: String
  informationObject: InformationObjectRef
  parent: OperationsEventRecordEntryRef
  children: [OperationsEventRecordEntryRef]
}

input OperationsEventRecordEntryRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  recordId: String
  operationsEventRecord: OperationsEventRecordRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime
  hierarchyScope: HierarchyScopeRef
  data: String
  informationObject: InformationObjectRef
  parent: OperationsEventRecordEntryRef
  children: [OperationsEventRecordEntryRef]
}

input OperationsEventRecordFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  recordTimestamp: DateTimeFilter
  has: [OperationsEventRecordHasFilter]
  and: [OperationsEventRecordFilter]
  or: [OperationsEventRecordFilter]
  not: OperationsEventRecordFilter
}

enum OperationsEventRecordHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  operationsEvent @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  action @join__enumValue(graph: BASS)
  recordTimestamp @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  operationsEventDefinitionRecordSpecification @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
}

input OperationsEventRecordOrder
  @join__type(graph: BASS)
{
  asc: OperationsEventRecordOrderable
  desc: OperationsEventRecordOrderable
  then: OperationsEventRecordOrder
}

enum OperationsEventRecordOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  recordTimestamp @join__enumValue(graph: BASS)
}

input OperationsEventRecordPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  operationsEvent: OperationsEventRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  action: Action
  recordTimestamp: DateTime
  hierarchyScope: HierarchyScopeRef
  operationsEventDefinitionRecordSpecification: OperationsEventDefinitionRecordSpecificationRef
  recordEntries: [OperationsEventRecordEntryRef]
  parent: OperationsEventRecordRef
  children: [OperationsEventRecordRef]
}

input OperationsEventRecordRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  operationsEvent: OperationsEventRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  action: Action
  recordTimestamp: DateTime
  hierarchyScope: HierarchyScopeRef
  operationsEventDefinitionRecordSpecification: OperationsEventDefinitionRecordSpecificationRef
  recordEntries: [OperationsEventRecordEntryRef]
  parent: OperationsEventRecordRef
  children: [OperationsEventRecordRef]
}

input OperationsEventRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  operationsEventDefinition: OperationsEventDefinitionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  recordTimestamp: DateTime
  hierarchyScope: HierarchyScopeRef
  priority: String
  operationsEventType: OperationsEventTypeEnum
  operationsEventLevel: OperationsEventLevelEnum
  operationsType: WorkType
  momFunction: MOMFunctionEnum
  enterpriseFunction: EnterpriseFunctionEnum
  category: String
  source: String
  properties: [OperationsEventPropertyRef]
  records: [OperationsEventRecordRef]
  parent: OperationsEventRef
  children: [OperationsEventRef]
}

enum OperationsEventTypeEnum
  @join__type(graph: BASS)
{
  Alarm @join__enumValue(graph: BASS)
  Alert @join__enumValue(graph: BASS)
  Event @join__enumValue(graph: BASS)
}

type OperationsMaterialBill
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  useType: MaterialUse
  billOfMaterial: String
  operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion
  operationsSegments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  materialBillItems(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  operationsSegmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
  materialBillItemsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
}

type OperationsMaterialBillAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  billOfMaterialMin: String
  billOfMaterialMax: String
}

input OperationsMaterialBillFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  useType: MaterialUse_hash
  billOfMaterial: StringExactFilter_StringFullTextFilter
  has: [OperationsMaterialBillHasFilter]
  and: [OperationsMaterialBillFilter]
  or: [OperationsMaterialBillFilter]
  not: OperationsMaterialBillFilter
}

enum OperationsMaterialBillHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  useType @join__enumValue(graph: BASS)
  billOfMaterial @join__enumValue(graph: BASS)
  operationsDefinitionVersion @join__enumValue(graph: BASS)
  operationsSegments @join__enumValue(graph: BASS)
  materialBillItems @join__enumValue(graph: BASS)
}

input OperationsMaterialBillOrder
  @join__type(graph: BASS)
{
  asc: OperationsMaterialBillOrderable
  desc: OperationsMaterialBillOrderable
  then: OperationsMaterialBillOrder
}

enum OperationsMaterialBillOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  billOfMaterial @join__enumValue(graph: BASS)
}

input OperationsMaterialBillPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  useType: MaterialUse
  billOfMaterial: String
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  operationsSegments: [OperationsSegmentRef]
  materialBillItems: [MaterialSpecificationRef]
}

input OperationsMaterialBillRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  useType: MaterialUse
  billOfMaterial: String
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  operationsSegments: [OperationsSegmentRef]
  materialBillItems: [MaterialSpecificationRef]
}

type OperationsPerformance
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  operationsType: WorkType!
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  performanceState: JobState
  publishedDate: DateTime
  operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse!]!
  operationsSchedule(filter: OperationsScheduleFilter): OperationsSchedule
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
}

type OperationsPerformanceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
  publishedDateMin: DateTime
  publishedDateMax: DateTime
}

input OperationsPerformanceFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  publishedDate: DateTimeFilter
  has: [OperationsPerformanceHasFilter]
  and: [OperationsPerformanceFilter]
  or: [OperationsPerformanceFilter]
  not: OperationsPerformanceFilter
}

enum OperationsPerformanceHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  performanceState @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  operationsResponses @join__enumValue(graph: BASS)
  operationsSchedule @join__enumValue(graph: BASS)
}

input OperationsPerformanceOrder
  @join__type(graph: BASS)
{
  asc: OperationsPerformanceOrderable
  desc: OperationsPerformanceOrderable
  then: OperationsPerformanceOrder
}

enum OperationsPerformanceOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
}

input OperationsPerformancePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  operationsType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  performanceState: JobState
  publishedDate: DateTime
  operationsResponses: [OperationsResponseRef!]
  operationsSchedule: OperationsScheduleRef
}

input OperationsPerformanceRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  operationsType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  performanceState: JobState
  publishedDate: DateTime
  operationsResponses: [OperationsResponseRef!]
  operationsSchedule: OperationsScheduleRef
}

type OperationsRequest
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  operationsType: WorkType!
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  priority: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  requestState: ScheduleState!
  notes: String
  operationsSchedule(filter: OperationsScheduleFilter): OperationsSchedule!
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement!]!
  workRequests(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
  operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
  segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
  workRequestsAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
  operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
  segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
}

type OperationsRequestAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  scheduledStartDateMin: DateTime
  scheduledStartDateMax: DateTime
  scheduledEndDateMin: DateTime
  scheduledEndDateMax: DateTime
  priorityMin: String
  priorityMax: String
  notesMin: String
  notesMax: String
}

input OperationsRequestFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  scheduledStartDate: DateTimeFilter
  scheduledEndDate: DateTimeFilter
  has: [OperationsRequestHasFilter]
  and: [OperationsRequestFilter]
  or: [OperationsRequestFilter]
  not: OperationsRequestFilter
}

enum OperationsRequestHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  scheduledStartDate @join__enumValue(graph: BASS)
  scheduledEndDate @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  requestState @join__enumValue(graph: BASS)
  notes @join__enumValue(graph: BASS)
  operationsSchedule @join__enumValue(graph: BASS)
  operationsDefinition @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  segmentRequirements @join__enumValue(graph: BASS)
  workRequests @join__enumValue(graph: BASS)
  operationsResponses @join__enumValue(graph: BASS)
  segmentResponses @join__enumValue(graph: BASS)
}

input OperationsRequestOrder
  @join__type(graph: BASS)
{
  asc: OperationsRequestOrderable
  desc: OperationsRequestOrderable
  then: OperationsRequestOrder
}

enum OperationsRequestOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  scheduledStartDate @join__enumValue(graph: BASS)
  scheduledEndDate @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  notes @join__enumValue(graph: BASS)
}

input OperationsRequestPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  operationsType: WorkType
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  priority: String
  hierarchyScope: HierarchyScopeRef
  requestState: ScheduleState
  notes: String
  operationsSchedule: OperationsScheduleRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  segmentRequirements: [SegmentRequirementRef!]
  workRequests: [WorkRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
}

input OperationsRequestRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  operationsType: WorkType
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  priority: String
  hierarchyScope: HierarchyScopeRef
  requestState: ScheduleState
  notes: String
  operationsSchedule: OperationsScheduleRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  segmentRequirements: [SegmentRequirementRef!]
  workRequests: [WorkRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
}

type OperationsResponse
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  operationsType: WorkType!
  startDateTime: DateTime!
  endDateTime: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  responseState: JobState
  operationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformance!
  operationsRequest(filter: OperationsRequestFilter): OperationsRequest
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
  segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse!]!
  isActive: Boolean
  properties(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
  segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
  propertiesAggregate(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult
}

type OperationsResponseAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
}

input OperationsResponseFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  responseState: JobState_hash
  isActive: Boolean
  has: [OperationsResponseHasFilter]
  and: [OperationsResponseFilter]
  or: [OperationsResponseFilter]
  not: OperationsResponseFilter
}

enum OperationsResponseHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  responseState @join__enumValue(graph: BASS)
  operationsPerformance @join__enumValue(graph: BASS)
  operationsRequest @join__enumValue(graph: BASS)
  operationsDefinition @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  segmentRequirements @join__enumValue(graph: BASS)
  segmentResponses @join__enumValue(graph: BASS)
  isActive @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
}

input OperationsResponseOrder
  @join__type(graph: BASS)
{
  asc: OperationsResponseOrderable
  desc: OperationsResponseOrderable
  then: OperationsResponseOrder
}

enum OperationsResponseOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
}

input OperationsResponsePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  operationsType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  responseState: JobState
  operationsPerformance: OperationsPerformanceRef
  operationsRequest: OperationsRequestRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef!]
  isActive: Boolean
  properties: [OperationsResponsePropertyRef]
}

type OperationsResponseProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  operationsResponse(filter: OperationsResponseFilter): OperationsResponse!
  children(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
  parent(filter: OperationsResponsePropertyFilter): OperationsResponseProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult
}

type OperationsResponsePropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  useMin: String
  useMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input OperationsResponsePropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [OperationsResponsePropertyHasFilter]
  and: [OperationsResponsePropertyFilter]
  or: [OperationsResponsePropertyFilter]
  not: OperationsResponsePropertyFilter
}

enum OperationsResponsePropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  operationsResponse @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input OperationsResponsePropertyOrder
  @join__type(graph: BASS)
{
  asc: OperationsResponsePropertyOrderable
  desc: OperationsResponsePropertyOrderable
  then: OperationsResponsePropertyOrder
}

enum OperationsResponsePropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input OperationsResponsePropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsResponse: OperationsResponseRef
  children: [OperationsResponsePropertyRef]
  parent: OperationsResponsePropertyRef
}

input OperationsResponsePropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsResponse: OperationsResponseRef
  children: [OperationsResponsePropertyRef]
  parent: OperationsResponsePropertyRef
}

input OperationsResponseRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  operationsType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  responseState: JobState
  operationsPerformance: OperationsPerformanceRef
  operationsRequest: OperationsRequestRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef!]
  isActive: Boolean
  properties: [OperationsResponsePropertyRef]
}

type OperationsSchedule
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  operationsType: WorkType!
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  scheduleState: ScheduleState
  operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest!]!
  operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
  operationsPerformanceAggregate(filter: OperationsPerformanceFilter): OperationsPerformanceAggregateResult
}

type OperationsScheduleAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  scheduledStartDateMin: DateTime
  scheduledStartDateMax: DateTime
  scheduledEndDateMin: DateTime
  scheduledEndDateMax: DateTime
  publishedDateMin: DateTime
  publishedDateMax: DateTime
}

input OperationsScheduleFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  scheduledStartDate: DateTimeFilter
  scheduledEndDate: DateTimeFilter
  publishedDate: DateTimeFilter
  scheduleState: ScheduleState_hash
  has: [OperationsScheduleHasFilter]
  and: [OperationsScheduleFilter]
  or: [OperationsScheduleFilter]
  not: OperationsScheduleFilter
}

enum OperationsScheduleHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  scheduledStartDate @join__enumValue(graph: BASS)
  scheduledEndDate @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  scheduleState @join__enumValue(graph: BASS)
  operationsRequests @join__enumValue(graph: BASS)
  operationsPerformance @join__enumValue(graph: BASS)
}

input OperationsScheduleOrder
  @join__type(graph: BASS)
{
  asc: OperationsScheduleOrderable
  desc: OperationsScheduleOrderable
  then: OperationsScheduleOrder
}

enum OperationsScheduleOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  scheduledStartDate @join__enumValue(graph: BASS)
  scheduledEndDate @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
}

input OperationsSchedulePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  operationsType: WorkType
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  scheduleState: ScheduleState
  operationsRequests: [OperationsRequestRef!]
  operationsPerformance: [OperationsPerformanceRef]
}

input OperationsScheduleRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  operationsType: WorkType
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  scheduleState: ScheduleState
  operationsRequests: [OperationsRequestRef!]
  operationsPerformance: [OperationsPerformanceRef]
}

type OperationsSegment
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  duration: Float
  durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  operationsType: WorkType
  definitionType: DefinitionType
  billOfMaterial: String
  billOfResources: String
  positionX: Int
  positionY: Int
  operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion!
  parent(filter: OperationsSegmentFilter): OperationsSegment
  children(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  processSegment(filter: ProcessSegmentFilter): ProcessSegment
  workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  makesUp(filter: OperationsSegmentFilter): OperationsSegment
  isMadeUpOf(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  inflows(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
  outflows(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
  materialsBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
  parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
  segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
  operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
  segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  childrenAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
  workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
  isMadeUpOfAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
  inflowsAggregate(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult
  outflowsAggregate(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult
  materialsBillAggregate(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult
  parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
  physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
  rulesAggregate(filter: RuleFilter): RuleAggregateResult
  segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
  operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
  operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
  segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
}

type OperationsSegmentAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
  billOfMaterialMin: String
  billOfMaterialMax: String
  billOfResourcesMin: String
  billOfResourcesMax: String
  positionXMin: Int
  positionXMax: Int
  positionXSum: Int
  positionXAvg: Float
  positionYMin: Int
  positionYMax: Int
  positionYSum: Int
  positionYAvg: Float
}

type OperationsSegmentDependency
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  condition: String
  from(filter: OperationsSegmentFilter): OperationsSegment!
  to(filter: OperationsSegmentFilter): OperationsSegment!
  rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  rulesAggregate(filter: RuleFilter): RuleAggregateResult
}

type OperationsSegmentDependencyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  dependencyFactorMin: Float
  dependencyFactorMax: Float
  dependencyFactorSum: Float
  dependencyFactorAvg: Float
  conditionMin: String
  conditionMax: String
}

input OperationsSegmentDependencyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [OperationsSegmentDependencyHasFilter]
  and: [OperationsSegmentDependencyFilter]
  or: [OperationsSegmentDependencyFilter]
  not: OperationsSegmentDependencyFilter
}

enum OperationsSegmentDependencyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  dependencyType @join__enumValue(graph: BASS)
  dependencyFactor @join__enumValue(graph: BASS)
  factorUoM @join__enumValue(graph: BASS)
  condition @join__enumValue(graph: BASS)
  from @join__enumValue(graph: BASS)
  to @join__enumValue(graph: BASS)
  rules @join__enumValue(graph: BASS)
}

input OperationsSegmentDependencyOrder
  @join__type(graph: BASS)
{
  asc: OperationsSegmentDependencyOrderable
  desc: OperationsSegmentDependencyOrderable
  then: OperationsSegmentDependencyOrder
}

enum OperationsSegmentDependencyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  dependencyFactor @join__enumValue(graph: BASS)
  condition @join__enumValue(graph: BASS)
}

input OperationsSegmentDependencyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  from: OperationsSegmentRef
  to: OperationsSegmentRef
  rules: [RuleRef]
}

input OperationsSegmentDependencyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  from: OperationsSegmentRef
  to: OperationsSegmentRef
  rules: [RuleRef]
}

input OperationsSegmentFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  definitionType: DefinitionType_hash
  billOfMaterial: StringExactFilter_StringFullTextFilter
  billOfResources: StringExactFilter_StringFullTextFilter
  has: [OperationsSegmentHasFilter]
  and: [OperationsSegmentFilter]
  or: [OperationsSegmentFilter]
  not: OperationsSegmentFilter
}

enum OperationsSegmentHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  durationUoM @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  billOfMaterial @join__enumValue(graph: BASS)
  billOfResources @join__enumValue(graph: BASS)
  positionX @join__enumValue(graph: BASS)
  positionY @join__enumValue(graph: BASS)
  operationsDefinitionVersion @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  processSegment @join__enumValue(graph: BASS)
  workMasters @join__enumValue(graph: BASS)
  makesUp @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  inflows @join__enumValue(graph: BASS)
  outflows @join__enumValue(graph: BASS)
  materialsBill @join__enumValue(graph: BASS)
  parameterSpecifications @join__enumValue(graph: BASS)
  personnelSpecifications @join__enumValue(graph: BASS)
  equipmentSpecifications @join__enumValue(graph: BASS)
  physicalAssetSpecifications @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
  rules @join__enumValue(graph: BASS)
  segmentRequirements @join__enumValue(graph: BASS)
  operationsRequests @join__enumValue(graph: BASS)
  operationsResponses @join__enumValue(graph: BASS)
  segmentResponses @join__enumValue(graph: BASS)
}

input OperationsSegmentOrder
  @join__type(graph: BASS)
{
  asc: OperationsSegmentOrderable
  desc: OperationsSegmentOrderable
  then: OperationsSegmentOrder
}

enum OperationsSegmentOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  billOfMaterial @join__enumValue(graph: BASS)
  billOfResources @join__enumValue(graph: BASS)
  positionX @join__enumValue(graph: BASS)
  positionY @join__enumValue(graph: BASS)
}

input OperationsSegmentPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  duration: Float
  durationUoM: UnitOfMeasureRef
  operationsType: WorkType
  definitionType: DefinitionType
  billOfMaterial: String
  billOfResources: String
  positionX: Int
  positionY: Int
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  parent: OperationsSegmentRef
  children: [OperationsSegmentRef]
  processSegment: ProcessSegmentRef
  workMasters: [WorkMasterRef]
  makesUp: OperationsSegmentRef
  isMadeUpOf: [OperationsSegmentRef]
  inflows: [OperationsSegmentDependencyRef]
  outflows: [OperationsSegmentDependencyRef]
  materialsBill: [OperationsMaterialBillRef]
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  rules: [RuleRef]
  segmentRequirements: [SegmentRequirementRef]
  operationsRequests: [OperationsRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
}

input OperationsSegmentRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  duration: Float
  durationUoM: UnitOfMeasureRef
  operationsType: WorkType
  definitionType: DefinitionType
  billOfMaterial: String
  billOfResources: String
  positionX: Int
  positionY: Int
  operationsDefinitionVersion: OperationsDefinitionVersionRef
  parent: OperationsSegmentRef
  children: [OperationsSegmentRef]
  processSegment: ProcessSegmentRef
  workMasters: [WorkMasterRef]
  makesUp: OperationsSegmentRef
  isMadeUpOf: [OperationsSegmentRef]
  inflows: [OperationsSegmentDependencyRef]
  outflows: [OperationsSegmentDependencyRef]
  materialsBill: [OperationsMaterialBillRef]
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  rules: [RuleRef]
  segmentRequirements: [SegmentRequirementRef]
  operationsRequests: [OperationsRequestRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
}

type ParameterSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  children(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
  parent(filter: ParameterSpecificationFilter): ParameterSpecification
  segmentParameters(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
  jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
  segmentParametersAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
  jobOrderParameterAggregate(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
}

type ParameterSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  valueSetPointMin: String
  valueSetPointMax: String
  valueUpperSpecLimitMin: Float
  valueUpperSpecLimitMax: Float
  valueUpperSpecLimitSum: Float
  valueUpperSpecLimitAvg: Float
  valueLowerSpecLimitMin: Float
  valueLowerSpecLimitMax: Float
  valueLowerSpecLimitSum: Float
  valueLowerSpecLimitAvg: Float
  valueUpperControlLimitMin: Float
  valueUpperControlLimitMax: Float
  valueUpperControlLimitSum: Float
  valueUpperControlLimitAvg: Float
  valueLowerControlLimitMin: Float
  valueLowerControlLimitMax: Float
  valueLowerControlLimitSum: Float
  valueLowerControlLimitAvg: Float
}

input ParameterSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [ParameterSpecificationHasFilter]
  and: [ParameterSpecificationFilter]
  or: [ParameterSpecificationFilter]
  not: ParameterSpecificationFilter
}

enum ParameterSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  segmentParameters @join__enumValue(graph: BASS)
  jobOrderParameter @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
}

input ParameterSpecificationOrder
  @join__type(graph: BASS)
{
  asc: ParameterSpecificationOrderable
  desc: ParameterSpecificationOrderable
  then: ParameterSpecificationOrder
}

enum ParameterSpecificationOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
}

input ParameterSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  operationsSegment: OperationsSegmentRef
  children: [ParameterSpecificationRef]
  parent: ParameterSpecificationRef
  segmentParameters: [SegmentParameterRef]
  jobOrderParameter: [JobOrderParameterRef]
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

input ParameterSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  operationsSegment: OperationsSegmentRef
  children: [ParameterSpecificationRef]
  parent: ParameterSpecificationRef
  segmentParameters: [SegmentParameterRef]
  jobOrderParameter: [JobOrderParameterRef]
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type PayloadFieldDefinition
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  name: String!
  expression: String!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type PayloadFieldDefinitionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  nameMin: String
  nameMax: String
  expressionMin: String
  expressionMax: String
}

input PayloadFieldDefinitionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [PayloadFieldDefinitionHasFilter]
  and: [PayloadFieldDefinitionFilter]
  or: [PayloadFieldDefinitionFilter]
  not: PayloadFieldDefinitionFilter
}

enum PayloadFieldDefinitionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
}

input PayloadFieldDefinitionOrder
  @join__type(graph: BASS)
{
  asc: PayloadFieldDefinitionOrderable
  desc: PayloadFieldDefinitionOrderable
  then: PayloadFieldDefinitionOrder
}

enum PayloadFieldDefinitionOrderable
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
}

input PayloadFieldDefinitionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  name: String
  expression: String
}

input PayloadFieldDefinitionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  name: String
  expression: String
}

type Person
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion] @join__field(graph: BASS)
  activeVersion(filter: PersonVersionFilter): PersonVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: BASS)
  personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @join__field(graph: BASS)
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @join__field(graph: BASS)
  stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: PersonVersionFilter): PersonVersionAggregateResult @join__field(graph: BASS)
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: BASS)
  personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult @join__field(graph: BASS)
  personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
  eventsAggregate(filter: EventFilter): EventAggregateResult @join__field(graph: BASS)
  stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult @join__field(graph: BASS)
}

type PersonAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input PersonFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [PersonHasFilter]
  and: [PersonFilter]
  or: [PersonFilter]
  not: PersonFilter
}

enum PersonHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  personnelSpecifications @join__enumValue(graph: BASS)
  personnelRequirements @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  stateModelInstances @join__enumValue(graph: BASS)
}

type PersonInheritedProperty
  @join__type(graph: CORE)
{
  id: String!
  label: String!
  description: String
  valueUnitOfMeasure: UnitOfMeasure
  value: String

  """
  The associated PersonnelClassProperty that this inherited property comes from.
  If includeInstanceProperties is true, then this inherited property may actually be a person's property, in this
  case the personnelClassProperty would be empty and the personProperty would not be empty.
  """
  personnelClassProperty: PersonnelClassProperty

  """
  The associated PersonProperty that this inherited property comes from.
  If includeInstanceProperties is false or if this inherited property is actually a personnel class' property, then
  the personProperty would be empty.
  """
  personProperty: PersonProperty

  """ Inverse relation """
  personVersion: PersonVersion!
}

input PersonInheritedPropertyFilter
  @join__type(graph: CORE)
{
  and: [PersonInheritedPropertyFilter]
  description: Input_StringExactFilter_StringFullTextFilter
  effectiveEnd: DateTimeFilter
  effectiveStart: DateTimeFilter
  has: [PersonInheritedPropertyHasFilter]
  id: Input_StringExactFilter_StringFullTextFilter
  iid: [ID!]
  label: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  not: PersonInheritedPropertyFilter
  or: [PersonInheritedPropertyFilter]
}

enum PersonInheritedPropertyHasFilter
  @join__type(graph: CORE)
{
  acl @join__enumValue(graph: CORE)
  children @join__enumValue(graph: CORE)
  correspondsTo @join__enumValue(graph: CORE)
  description @join__enumValue(graph: CORE)
  effectiveEnd @join__enumValue(graph: CORE)
  effectiveStart @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  label @join__enumValue(graph: CORE)
  parent @join__enumValue(graph: CORE)
  personnelActualProperties @join__enumValue(graph: CORE)
  personnelRequirementProperties @join__enumValue(graph: CORE)
  personnelSpecificationProperties @join__enumValue(graph: CORE)
  recordsMeasurementOf @join__enumValue(graph: CORE)
  value @join__enumValue(graph: CORE)
  valueUnitOfMeasure @join__enumValue(graph: CORE)
}

input PersonInheritedPropertyOptions
  @join__type(graph: CORE)
{
  includeInstanceProperties: Boolean
  inheritedPropertyFilter: PersonInheritedPropertyFilter
}

type PersonnelActual
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  personnelUse: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  segmentResponse(filter: SegmentResponseFilter): SegmentResponse
  children(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
  parent(filter: PersonnelActualFilter): PersonnelActual
  properties(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
  jobResponse(filter: JobResponseFilter): JobResponse
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
  propertiesAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  personnelClassAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult
  personAggregate(filter: PersonFilter): PersonAggregateResult
  personVersionAggregate(filter: PersonVersionFilter): PersonVersionAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PersonnelActualAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  personnelUseMin: String
  personnelUseMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PersonnelActualFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  personnelUse: StringExactFilter_StringFullTextFilter
  has: [PersonnelActualHasFilter]
  and: [PersonnelActualFilter]
  or: [PersonnelActualFilter]
  not: PersonnelActualFilter
}

enum PersonnelActualHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  personnelUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  segmentResponse @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  personnelClass @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  personVersion @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input PersonnelActualOrder
  @join__type(graph: BASS)
{
  asc: PersonnelActualOrderable
  desc: PersonnelActualOrderable
  then: PersonnelActualOrder
}

enum PersonnelActualOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  personnelUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PersonnelActualPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  personnelUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [PersonnelActualRef]
  parent: PersonnelActualRef
  properties: [PersonnelActualPropertyRef]
  testResults: [TestResultRef]
  personnelClass: [PersonnelClassRef]
  person: [PersonRef]
  personVersion: [PersonVersionRef]
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PersonnelActualProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  personnelActual(filter: PersonnelActualFilter): PersonnelActual!
  children(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
  parent(filter: PersonnelActualPropertyFilter): PersonnelActualProperty
  personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty
  personProperty(filter: PersonPropertyFilter): PersonProperty
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
}

type PersonnelActualPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
  useMin: String
  useMax: String
}

input PersonnelActualPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [PersonnelActualPropertyHasFilter]
  and: [PersonnelActualPropertyFilter]
  or: [PersonnelActualPropertyFilter]
  not: PersonnelActualPropertyFilter
}

enum PersonnelActualPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  personnelClassProperty @join__enumValue(graph: BASS)
  personProperty @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
}

input PersonnelActualPropertyOrder
  @join__type(graph: BASS)
{
  asc: PersonnelActualPropertyOrderable
  desc: PersonnelActualPropertyOrderable
  then: PersonnelActualPropertyOrder
}

enum PersonnelActualPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
}

input PersonnelActualPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  personnelActual: PersonnelActualRef
  children: [PersonnelActualPropertyRef]
  parent: PersonnelActualPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

input PersonnelActualPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  personnelActual: PersonnelActualRef
  children: [PersonnelActualPropertyRef]
  parent: PersonnelActualPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
}

input PersonnelActualRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  personnelUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [PersonnelActualRef]
  parent: PersonnelActualRef
  properties: [PersonnelActualPropertyRef]
  testResults: [TestResultRef]
  personnelClass: [PersonnelClassRef]
  person: [PersonRef]
  personVersion: [PersonVersionRef]
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PersonnelClass
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion] @join__field(graph: BASS)
  activeVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  isIncludedIn(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion] @join__field(graph: BASS)
  personVersions(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion] @join__field(graph: BASS)
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: BASS)
  personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @join__field(graph: BASS)
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult @join__field(graph: BASS)
  isIncludedInAggregate(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult @join__field(graph: BASS)
  personVersionsAggregate(filter: PersonVersionFilter): PersonVersionAggregateResult @join__field(graph: BASS)
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: BASS)
  personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult @join__field(graph: BASS)
  personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
}

type PersonnelClassAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input PersonnelClassFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [PersonnelClassHasFilter]
  and: [PersonnelClassFilter]
  or: [PersonnelClassFilter]
  not: PersonnelClassFilter
}

enum PersonnelClassHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isIncludedIn @join__enumValue(graph: BASS)
  personVersions @join__enumValue(graph: BASS)
  personnelSpecifications @join__enumValue(graph: BASS)
  personnelRequirements @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
}

input PersonnelClassOrder
  @join__type(graph: BASS)
{
  asc: PersonnelClassOrderable
  desc: PersonnelClassOrderable
  then: PersonnelClassOrder
}

enum PersonnelClassOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input PersonnelClassPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PersonnelClassVersionRef]
  activeVersion: PersonnelClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [PersonnelClassVersionRef]
  personVersions: [PersonVersionRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  personnelRequirements: [PersonnelRequirementRef]
  personnelActual: [PersonnelActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type PersonnelClassProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  propertyType: Isa95PropertyType! @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  personnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion! @join__field(graph: BASS)
  children(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty] @join__field(graph: BASS)
  parent(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @join__field(graph: BASS)
  personProperty(filter: PersonPropertyFilter): PersonProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  personnelRequirementProperties(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @join__field(graph: BASS)
  personnelSpecificationProperties(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @join__field(graph: BASS)
  personnelActualProperties(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  personnelRequirementPropertiesAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult @join__field(graph: BASS)
  personnelSpecificationPropertiesAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult @join__field(graph: BASS)
  personnelActualPropertiesAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult @join__field(graph: BASS)
}

type PersonnelClassPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input PersonnelClassPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PersonnelClassPropertyHasFilter]
  and: [PersonnelClassPropertyFilter]
  or: [PersonnelClassPropertyFilter]
  not: PersonnelClassPropertyFilter
}

enum PersonnelClassPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  propertyType @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  personnelClassVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  personProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  personnelRequirementProperties @join__enumValue(graph: BASS)
  personnelSpecificationProperties @join__enumValue(graph: BASS)
  personnelActualProperties @join__enumValue(graph: BASS)
}

input PersonnelClassPropertyOrder
  @join__type(graph: BASS)
{
  asc: PersonnelClassPropertyOrderable
  desc: PersonnelClassPropertyOrderable
  then: PersonnelClassPropertyOrder
}

enum PersonnelClassPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input PersonnelClassPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  personnelClassVersion: PersonnelClassVersionRef
  children: [PersonnelClassPropertyRef]
  parent: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  personnelRequirementProperties: [PersonnelRequirementPropertyRef]
  personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
  personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonnelClassPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  personnelClassVersion: PersonnelClassVersionRef
  children: [PersonnelClassPropertyRef]
  parent: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  personnelRequirementProperties: [PersonnelRequirementPropertyRef]
  personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
  personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonnelClassRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PersonnelClassVersionRef]
  activeVersion: PersonnelClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [PersonnelClassVersionRef]
  personVersions: [PersonVersionRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  personnelRequirements: [PersonnelRequirementRef]
  personnelActual: [PersonnelActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
}

type PersonnelClassVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  personnelClass(filter: PersonnelClassFilter): PersonnelClass! @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  isActiveVersionOf(filter: PersonnelClassFilter): PersonnelClass @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  properties(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty] @join__field(graph: BASS)
  includesPropertiesOf(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult @join__field(graph: BASS)
  includesPropertiesOfAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
}

type PersonnelClassVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
}

input PersonnelClassVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [PersonnelClassVersionHasFilter]
  and: [PersonnelClassVersionFilter]
  or: [PersonnelClassVersionFilter]
  not: PersonnelClassVersionFilter
}

enum PersonnelClassVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  personnelClass @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  includesPropertiesOf @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
}

input PersonnelClassVersionOrder
  @join__type(graph: BASS)
{
  asc: PersonnelClassVersionOrderable
  desc: PersonnelClassVersionOrderable
  then: PersonnelClassVersionOrder
}

enum PersonnelClassVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input PersonnelClassVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  personnelClass: PersonnelClassRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: PersonnelClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  properties: [PersonnelClassPropertyRef]
  includesPropertiesOf: [PersonnelClassRef]
  stateModels: [StateModelDefinitionRef]
}

input PersonnelClassVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  personnelClass: PersonnelClassRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: PersonnelClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  properties: [PersonnelClassPropertyRef]
  includesPropertiesOf: [PersonnelClassRef]
  stateModels: [StateModelDefinitionRef]
}

type PersonnelRequirement
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement
  children(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
  parent(filter: PersonnelRequirementFilter): PersonnelRequirement
  properties(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
  personnelClass(filter: PersonnelClassFilter): PersonnelClass
  person(filter: PersonFilter): Person
  jobOrder(filter: JobOrderFilter): JobOrder
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
  propertiesAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PersonnelRequirementAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  useMin: String
  useMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PersonnelRequirementFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [PersonnelRequirementHasFilter]
  and: [PersonnelRequirementFilter]
  or: [PersonnelRequirementFilter]
  not: PersonnelRequirementFilter
}

enum PersonnelRequirementHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  segmentRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  personnelClass @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input PersonnelRequirementOrder
  @join__type(graph: BASS)
{
  asc: PersonnelRequirementOrderable
  desc: PersonnelRequirementOrderable
  then: PersonnelRequirementOrder
}

enum PersonnelRequirementOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PersonnelRequirementPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentRequirement: SegmentRequirementRef
  children: [PersonnelRequirementRef]
  parent: PersonnelRequirementRef
  properties: [PersonnelRequirementPropertyRef]
  personnelClass: PersonnelClassRef
  person: PersonRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PersonnelRequirementProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement!
  children(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
  parent(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementProperty
  personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty
  personProperty(filter: PersonPropertyFilter): PersonProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
}

type PersonnelRequirementPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PersonnelRequirementPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PersonnelRequirementPropertyHasFilter]
  and: [PersonnelRequirementPropertyFilter]
  or: [PersonnelRequirementPropertyFilter]
  not: PersonnelRequirementPropertyFilter
}

enum PersonnelRequirementPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  personnelRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  personnelClassProperty @join__enumValue(graph: BASS)
  personProperty @join__enumValue(graph: BASS)
}

input PersonnelRequirementPropertyOrder
  @join__type(graph: BASS)
{
  asc: PersonnelRequirementPropertyOrderable
  desc: PersonnelRequirementPropertyOrderable
  then: PersonnelRequirementPropertyOrder
}

enum PersonnelRequirementPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PersonnelRequirementPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  personnelRequirement: PersonnelRequirementRef
  children: [PersonnelRequirementPropertyRef]
  parent: PersonnelRequirementPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
}

input PersonnelRequirementPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  personnelRequirement: PersonnelRequirementRef
  children: [PersonnelRequirementPropertyRef]
  parent: PersonnelRequirementPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
}

input PersonnelRequirementRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentRequirement: SegmentRequirementRef
  children: [PersonnelRequirementRef]
  parent: PersonnelRequirementRef
  properties: [PersonnelRequirementPropertyRef]
  personnelClass: PersonnelClassRef
  person: PersonRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PersonnelSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  personnelUse: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion
  children(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  parent(filter: PersonnelSpecificationFilter): PersonnelSpecification
  properties(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
  personnelClass(filter: PersonnelClassFilter): PersonnelClass
  person(filter: PersonFilter): Person
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter): TestResult
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
  propertiesAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
}

type PersonnelSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  personnelUseMin: String
  personnelUseMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PersonnelSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [PersonnelSpecificationHasFilter]
  and: [PersonnelSpecificationFilter]
  or: [PersonnelSpecificationFilter]
  not: PersonnelSpecificationFilter
}

enum PersonnelSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  personnelUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  processSegmentVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  personnelClass @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
}

input PersonnelSpecificationOrder
  @join__type(graph: BASS)
{
  asc: PersonnelSpecificationOrderable
  desc: PersonnelSpecificationOrderable
  then: PersonnelSpecificationOrder
}

enum PersonnelSpecificationOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  personnelUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PersonnelSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  personnelUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [PersonnelSpecificationRef]
  parent: PersonnelSpecificationRef
  properties: [PersonnelSpecificationPropertyRef]
  personnelClass: PersonnelClassRef
  person: PersonRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: TestResultRef
}

type PersonnelSpecificationProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  children(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
  parent(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationProperty
  personnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecification!
  personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty
  personProperty(filter: PersonPropertyFilter): PersonProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
}

type PersonnelSpecificationPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PersonnelSpecificationPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PersonnelSpecificationPropertyHasFilter]
  and: [PersonnelSpecificationPropertyFilter]
  or: [PersonnelSpecificationPropertyFilter]
  not: PersonnelSpecificationPropertyFilter
}

enum PersonnelSpecificationPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  personnelSpecification @join__enumValue(graph: BASS)
  personnelClassProperty @join__enumValue(graph: BASS)
  personProperty @join__enumValue(graph: BASS)
}

input PersonnelSpecificationPropertyOrder
  @join__type(graph: BASS)
{
  asc: PersonnelSpecificationPropertyOrderable
  desc: PersonnelSpecificationPropertyOrderable
  then: PersonnelSpecificationPropertyOrder
}

enum PersonnelSpecificationPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PersonnelSpecificationPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [PersonnelSpecificationPropertyRef]
  parent: PersonnelSpecificationPropertyRef
  personnelSpecification: PersonnelSpecificationRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
}

input PersonnelSpecificationPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [PersonnelSpecificationPropertyRef]
  parent: PersonnelSpecificationPropertyRef
  personnelSpecification: PersonnelSpecificationRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
}

input PersonnelSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  personnelUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [PersonnelSpecificationRef]
  parent: PersonnelSpecificationRef
  properties: [PersonnelSpecificationPropertyRef]
  personnelClass: PersonnelClassRef
  person: PersonRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: TestResultRef
}

input PersonOrder
  @join__type(graph: BASS)
{
  asc: PersonOrderable
  desc: PersonOrderable
  then: PersonOrder
}

enum PersonOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input PersonPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PersonVersionRef]
  activeVersion: PersonVersionRef
  nextVersion: String
  id: String
  label: String
  personnelSpecifications: [PersonnelSpecificationRef]
  personnelRequirements: [PersonnelRequirementRef]
  personnelActual: [PersonnelActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
}

type PersonProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  valueSetPoint: String @join__field(graph: BASS)
  valueUpperSpecLimit: Float @join__field(graph: BASS)
  valueLowerSpecLimit: Float @join__field(graph: BASS)
  valueUpperControlLimit: Float @join__field(graph: BASS)
  valueLowerControlLimit: Float @join__field(graph: BASS)
  personVersion(filter: PersonVersionFilter): PersonVersion! @join__field(graph: BASS)
  children(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty] @join__field(graph: BASS)
  parent(filter: PersonPropertyFilter): PersonProperty @join__field(graph: BASS)
  personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  personnelSpecificationProperties(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @join__field(graph: BASS)
  personnelRequirementProperties(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @join__field(graph: BASS)
  personnelActualProperties(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: PersonPropertyFilter): PersonPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  personnelSpecificationPropertiesAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult @join__field(graph: BASS)
  personnelRequirementPropertiesAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult @join__field(graph: BASS)
  personnelActualPropertiesAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult @join__field(graph: BASS)
}

type PersonPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  valueSetPointMin: String
  valueSetPointMax: String
  valueUpperSpecLimitMin: Float
  valueUpperSpecLimitMax: Float
  valueUpperSpecLimitSum: Float
  valueUpperSpecLimitAvg: Float
  valueLowerSpecLimitMin: Float
  valueLowerSpecLimitMax: Float
  valueLowerSpecLimitSum: Float
  valueLowerSpecLimitAvg: Float
  valueUpperControlLimitMin: Float
  valueUpperControlLimitMax: Float
  valueUpperControlLimitSum: Float
  valueUpperControlLimitAvg: Float
  valueLowerControlLimitMin: Float
  valueLowerControlLimitMax: Float
  valueLowerControlLimitSum: Float
  valueLowerControlLimitAvg: Float
}

input PersonPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [PersonPropertyHasFilter]
  and: [PersonPropertyFilter]
  or: [PersonPropertyFilter]
  not: PersonPropertyFilter
}

enum PersonPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
  personVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  personnelClassProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  personnelSpecificationProperties @join__enumValue(graph: BASS)
  personnelRequirementProperties @join__enumValue(graph: BASS)
  personnelActualProperties @join__enumValue(graph: BASS)
}

input PersonPropertyOrder
  @join__type(graph: BASS)
{
  asc: PersonPropertyOrderable
  desc: PersonPropertyOrderable
  then: PersonPropertyOrder
}

enum PersonPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
}

input PersonPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  personVersion: PersonVersionRef
  children: [PersonPropertyRef]
  parent: PersonPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
  personnelRequirementProperties: [PersonnelRequirementPropertyRef]
  personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  personVersion: PersonVersionRef
  children: [PersonPropertyRef]
  parent: PersonPropertyRef
  personnelClassProperty: PersonnelClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
  personnelRequirementProperties: [PersonnelRequirementPropertyRef]
  personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PersonVersionRef]
  activeVersion: PersonVersionRef
  nextVersion: String
  id: String
  label: String
  personnelSpecifications: [PersonnelSpecificationRef]
  personnelRequirements: [PersonnelRequirementRef]
  personnelActual: [PersonnelActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
}

type PersonVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  person(filter: PersonFilter): Person! @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  isActiveVersionOf(filter: PersonFilter): Person @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition @join__field(graph: BASS)
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation @join__field(graph: BASS)
  name: String! @join__field(graph: BASS)
  personnelClasses(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @join__field(graph: BASS)
  properties(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty] @join__field(graph: BASS)
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  signaturesMade(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @join__field(graph: BASS)
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  personnelClassesAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: PersonPropertyFilter): PersonPropertyAggregateResult @join__field(graph: BASS)
  personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
  signaturesMadeAggregate(filter: SignatureFilter): SignatureAggregateResult @join__field(graph: BASS)
  commentsAggregate(filter: CommentFilter): CommentAggregateResult @join__field(graph: BASS)
  inheritedProperties(options: PersonInheritedPropertyOptions): [PersonInheritedProperty] @join__field(graph: CORE)
}

type PersonVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  nameMin: String
  nameMax: String
}

input PersonVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  name: StringExactFilter_StringFullTextFilter
  has: [PersonVersionHasFilter]
  and: [PersonVersionFilter]
  or: [PersonVersionFilter]
  not: PersonVersionFilter
}

enum PersonVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  personnelClasses @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
  signaturesMade @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input PersonVersionOrder
  @join__type(graph: BASS)
{
  asc: PersonVersionOrderable
  desc: PersonVersionOrderable
  then: PersonVersionOrder
}

enum PersonVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
}

input PersonVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  person: PersonRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: PersonRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  name: String
  personnelClasses: [PersonnelClassRef]
  properties: [PersonPropertyRef]
  personnelActual: [PersonnelActualRef]
  stateModels: [StateModelDefinitionRef]
  signaturesMade: [SignatureRef]
  comments: [CommentRef]
}

input PersonVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  person: PersonRef
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  isActiveVersionOf: PersonRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  name: String
  personnelClasses: [PersonnelClassRef]
  properties: [PersonPropertyRef]
  personnelActual: [PersonnelActualRef]
  stateModels: [StateModelDefinitionRef]
  signaturesMade: [SignatureRef]
  comments: [CommentRef]
}

type PhysicalAsset
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion] @join__field(graph: BASS)
  activeVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  isMadeUpOf(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset] @join__field(graph: BASS)
  isPartOf(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset] @join__field(graph: BASS)
  equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping] @join__field(graph: BASS)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: BASS)
  physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @join__field(graph: BASS)
  physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @join__field(graph: BASS)
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @join__field(graph: BASS)
  materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: BASS)
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @join__field(graph: BASS)
  stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @join__field(graph: BASS)
  uiSortIndex: Int @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult @join__field(graph: BASS)
  isMadeUpOfAggregate(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult @join__field(graph: BASS)
  equipmentAssetMappingAggregate(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult @join__field(graph: BASS)
  physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult @join__field(graph: BASS)
  physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult @join__field(graph: BASS)
  physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
  materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult @join__field(graph: BASS)
  materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: BASS)
  eventsAggregate(filter: EventFilter): EventAggregateResult @join__field(graph: BASS)
  stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult @join__field(graph: BASS)
}

type PhysicalAssetActual
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  physicalLocation(filter: OperationalLocationFilter): OperationalLocation
  physicalAssetUse: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  segmentResponse(filter: SegmentResponseFilter): SegmentResponse
  children(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
  parent(filter: PhysicalAssetActualFilter): PhysicalAssetActual
  properties(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion
  jobResponse(filter: JobResponseFilter): JobResponse
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
  propertiesAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PhysicalAssetActualAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  physicalAssetUseMin: String
  physicalAssetUseMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PhysicalAssetActualFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  physicalAssetUse: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetActualHasFilter]
  and: [PhysicalAssetActualFilter]
  or: [PhysicalAssetActualFilter]
  not: PhysicalAssetActualFilter
}

enum PhysicalAssetActualHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  physicalLocation @join__enumValue(graph: BASS)
  physicalAssetUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  segmentResponse @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  physicalAssetClass @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  physicalAssetVersion @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input PhysicalAssetActualOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetActualOrderable
  desc: PhysicalAssetActualOrderable
  then: PhysicalAssetActualOrder
}

enum PhysicalAssetActualOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  physicalAssetUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PhysicalAssetActualPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  physicalLocation: OperationalLocationRef
  physicalAssetUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [PhysicalAssetActualRef]
  parent: PhysicalAssetActualRef
  properties: [PhysicalAssetActualPropertyRef]
  testResults: [TestResultRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  physicalAssetVersion: PhysicalAssetVersionRef
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PhysicalAssetActualProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual!
  children(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
  parent(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualProperty
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
}

type PhysicalAssetActualPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PhysicalAssetActualPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetActualPropertyHasFilter]
  and: [PhysicalAssetActualPropertyFilter]
  or: [PhysicalAssetActualPropertyFilter]
  not: PhysicalAssetActualPropertyFilter
}

enum PhysicalAssetActualPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  physicalAssetClassProperty @join__enumValue(graph: BASS)
  physicalAssetProperty @join__enumValue(graph: BASS)
}

input PhysicalAssetActualPropertyOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetActualPropertyOrderable
  desc: PhysicalAssetActualPropertyOrderable
  then: PhysicalAssetActualPropertyOrder
}

enum PhysicalAssetActualPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PhysicalAssetActualPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  physicalAssetActual: PhysicalAssetActualRef
  children: [PhysicalAssetActualPropertyRef]
  parent: PhysicalAssetActualPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetActualPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  physicalAssetActual: PhysicalAssetActualRef
  children: [PhysicalAssetActualPropertyRef]
  parent: PhysicalAssetActualPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetActualRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  physicalLocation: OperationalLocationRef
  physicalAssetUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [PhysicalAssetActualRef]
  parent: PhysicalAssetActualRef
  properties: [PhysicalAssetActualPropertyRef]
  testResults: [TestResultRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  physicalAssetVersion: PhysicalAssetVersionRef
  jobResponse: JobResponseRef
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PhysicalAssetAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  uiSortIndexMin: Int
  uiSortIndexMax: Int
  uiSortIndexSum: Int
  uiSortIndexAvg: Float
}

type PhysicalAssetClass
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion] @join__field(graph: BASS)
  activeVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  isIncludedIn(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion] @join__field(graph: BASS)
  isMadeUpOf(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @join__field(graph: BASS)
  isPartOf(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @join__field(graph: BASS)
  physicalAssetVersions(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion] @join__field(graph: BASS)
  physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @join__field(graph: BASS)
  physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @join__field(graph: BASS)
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @join__field(graph: BASS)
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  uiSortIndex: Int @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult @join__field(graph: BASS)
  isIncludedInAggregate(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult @join__field(graph: BASS)
  isMadeUpOfAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult @join__field(graph: BASS)
  isPartOfAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult @join__field(graph: BASS)
  physicalAssetVersionsAggregate(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult @join__field(graph: BASS)
  physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult @join__field(graph: BASS)
  physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult @join__field(graph: BASS)
  physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult @join__field(graph: BASS)
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
}

type PhysicalAssetClassAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  uiSortIndexMin: Int
  uiSortIndexMax: Int
  uiSortIndexSum: Int
  uiSortIndexAvg: Float
}

input PhysicalAssetClassFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [PhysicalAssetClassHasFilter]
  and: [PhysicalAssetClassFilter]
  or: [PhysicalAssetClassFilter]
  not: PhysicalAssetClassFilter
}

enum PhysicalAssetClassHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isIncludedIn @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  physicalAssetVersions @join__enumValue(graph: BASS)
  physicalAssetSpecifications @join__enumValue(graph: BASS)
  physicalAssetRequirements @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

input PhysicalAssetClassOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetClassOrderable
  desc: PhysicalAssetClassOrderable
  then: PhysicalAssetClassOrder
}

enum PhysicalAssetClassOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

input PhysicalAssetClassPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PhysicalAssetClassVersionRef]
  activeVersion: PhysicalAssetClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [PhysicalAssetClassVersionRef]
  isMadeUpOf: [PhysicalAssetClassRef]
  isPartOf: [PhysicalAssetClassRef]
  physicalAssetVersions: [PhysicalAssetVersionRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  uiSortIndex: Int
}

type PhysicalAssetClassProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  propertyType: Isa95PropertyType! @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion! @join__field(graph: BASS)
  children(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty] @join__field(graph: BASS)
  parent(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @join__field(graph: BASS)
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  physicalAssetRequirementProperties(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @join__field(graph: BASS)
  physicalAssetSpecificationProperties(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @join__field(graph: BASS)
  physicalAssetActualProperties(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  physicalAssetRequirementPropertiesAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult @join__field(graph: BASS)
  physicalAssetSpecificationPropertiesAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult @join__field(graph: BASS)
  physicalAssetActualPropertiesAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult @join__field(graph: BASS)
}

type PhysicalAssetClassPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input PhysicalAssetClassPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetClassPropertyHasFilter]
  and: [PhysicalAssetClassPropertyFilter]
  or: [PhysicalAssetClassPropertyFilter]
  not: PhysicalAssetClassPropertyFilter
}

enum PhysicalAssetClassPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  propertyType @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  physicalAssetClassVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  physicalAssetProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  physicalAssetRequirementProperties @join__enumValue(graph: BASS)
  physicalAssetSpecificationProperties @join__enumValue(graph: BASS)
  physicalAssetActualProperties @join__enumValue(graph: BASS)
}

input PhysicalAssetClassPropertyOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetClassPropertyOrderable
  desc: PhysicalAssetClassPropertyOrderable
  then: PhysicalAssetClassPropertyOrder
}

enum PhysicalAssetClassPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input PhysicalAssetClassPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  children: [PhysicalAssetClassPropertyRef]
  parent: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetClassPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  propertyType: Isa95PropertyType
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  children: [PhysicalAssetClassPropertyRef]
  parent: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetClassRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PhysicalAssetClassVersionRef]
  activeVersion: PhysicalAssetClassVersionRef
  nextVersion: String
  id: String
  label: String
  isIncludedIn: [PhysicalAssetClassVersionRef]
  isMadeUpOf: [PhysicalAssetClassRef]
  isPartOf: [PhysicalAssetClassRef]
  physicalAssetVersions: [PhysicalAssetVersionRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  uiSortIndex: Int
}

type PhysicalAssetClassVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass! @join__field(graph: BASS)
  isActiveVersionOf(filter: PhysicalAssetClassFilter): PhysicalAssetClass @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  manufacturer: String @join__field(graph: BASS)
  properties(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty] @join__field(graph: BASS)
  includesPropertiesOf(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult @join__field(graph: BASS)
  includesPropertiesOfAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
}

type PhysicalAssetClassVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  manufacturerMin: String
  manufacturerMax: String
}

input PhysicalAssetClassVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  manufacturer: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetClassVersionHasFilter]
  and: [PhysicalAssetClassVersionFilter]
  or: [PhysicalAssetClassVersionFilter]
  not: PhysicalAssetClassVersionFilter
}

enum PhysicalAssetClassVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  physicalAssetClass @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  manufacturer @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  includesPropertiesOf @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
}

input PhysicalAssetClassVersionOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetClassVersionOrderable
  desc: PhysicalAssetClassVersionOrderable
  then: PhysicalAssetClassVersionOrder
}

enum PhysicalAssetClassVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  manufacturer @join__enumValue(graph: BASS)
}

input PhysicalAssetClassVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  physicalAssetClass: PhysicalAssetClassRef
  isActiveVersionOf: PhysicalAssetClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  manufacturer: String
  properties: [PhysicalAssetClassPropertyRef]
  includesPropertiesOf: [PhysicalAssetClassRef]
  stateModels: [StateModelDefinitionRef]
}

input PhysicalAssetClassVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  physicalAssetClass: PhysicalAssetClassRef
  isActiveVersionOf: PhysicalAssetClassRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  manufacturer: String
  properties: [PhysicalAssetClassPropertyRef]
  includesPropertiesOf: [PhysicalAssetClassRef]
  stateModels: [StateModelDefinitionRef]
}

type PhysicalAssetDataSource
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion!
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type PhysicalAssetDataSourceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  topicTemplateMin: String
  topicTemplateMax: String
}

input PhysicalAssetDataSourceFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  has: [PhysicalAssetDataSourceHasFilter]
  and: [PhysicalAssetDataSourceFilter]
  or: [PhysicalAssetDataSourceFilter]
  not: PhysicalAssetDataSourceFilter
}

enum PhysicalAssetDataSourceHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  physicalAssetVersion @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  topicTemplate @join__enumValue(graph: BASS)
  dataSourceVersion @join__enumValue(graph: BASS)
}

input PhysicalAssetDataSourceOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetDataSourceOrderable
  desc: PhysicalAssetDataSourceOrderable
  then: PhysicalAssetDataSourceOrder
}

enum PhysicalAssetDataSourceOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  topicTemplate @join__enumValue(graph: BASS)
}

input PhysicalAssetDataSourcePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  physicalAssetVersion: PhysicalAssetVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion: DataSourceVersionRef
}

input PhysicalAssetDataSourceRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  physicalAssetVersion: PhysicalAssetVersionRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  topicTemplate: String
  dataSourceVersion: DataSourceVersionRef
}

input PhysicalAssetFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [PhysicalAssetHasFilter]
  and: [PhysicalAssetFilter]
  or: [PhysicalAssetFilter]
  not: PhysicalAssetFilter
}

enum PhysicalAssetHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  equipmentAssetMapping @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  physicalAssetSpecifications @join__enumValue(graph: BASS)
  physicalAssetRequirements @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  materialLots @join__enumValue(graph: BASS)
  materialSubLots @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  stateModelInstances @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

type PhysicalAssetInheritedProperty
  @join__type(graph: CORE)
{
  description: String
  id: String!
  iid: ID!
  label: String!
  value: String
  valueUnitOfMeasure: UnitOfMeasure

  """
  The associated PhysicalAssetClassProperty that this inherited property comes from.
  If includeInstanceProperties is true, then this inherited property may actually be a physical asset's property, in this
  case the PhysicalAssetClassProperty would be empty and the physicalAssetProperty would not be empty.
  """
  physicalAssetClassProperty: PhysicalAssetClassProperty

  """
  The associated PhysicalAssetProperty that this inherited property comes from.
  If includeInstanceProperties is false or if this inherited property is actually a physical asset class' property, then
  the physicalAssetProperty would be empty.
  """
  physicalAssetProperty: PhysicalAssetProperty

  """ Inverse relation """
  physicalAssetVersion: PhysicalAssetVersion!
}

input PhysicalAssetInheritedPropertyFilter
  @join__type(graph: CORE)
{
  and: [PhysicalAssetInheritedPropertyFilter]
  description: Input_StringExactFilter_StringFullTextFilter
  effectiveEnd: DateTimeFilter
  effectiveStart: DateTimeFilter
  has: [PhysicalAssetInheritedPropertyHasFilter]
  id: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  iid: [ID!]
  label: Input_StringExactFilter_StringFullTextFilter_StringRegExpFilter
  not: PhysicalAssetInheritedPropertyFilter
  or: [PhysicalAssetInheritedPropertyFilter]
  value: Input_StringExactFilter_StringFullTextFilter
}

enum PhysicalAssetInheritedPropertyHasFilter
  @join__type(graph: CORE)
{
  acl @join__enumValue(graph: CORE)
  children @join__enumValue(graph: CORE)
  correspondsTo @join__enumValue(graph: CORE)
  description @join__enumValue(graph: CORE)
  effectiveEnd @join__enumValue(graph: CORE)
  effectiveStart @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  label @join__enumValue(graph: CORE)
  parent @join__enumValue(graph: CORE)
  physicalAssetActualProperties @join__enumValue(graph: CORE)
  physicalAssetRequirementProperties @join__enumValue(graph: CORE)
  physicalAssetSpecificationProperties @join__enumValue(graph: CORE)
  recordsMeasurementOf @join__enumValue(graph: CORE)
  value @join__enumValue(graph: CORE)
  valueUnitOfMeasure @join__enumValue(graph: CORE)
}

input PhysicalAssetInheritedPropertyOptions
  @join__type(graph: CORE)
{
  includeInstanceProperties: Boolean
  inheritedPropertyFilter: PhysicalAssetInheritedPropertyFilter
}

input PhysicalAssetOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetOrderable
  desc: PhysicalAssetOrderable
  then: PhysicalAssetOrder
}

enum PhysicalAssetOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  uiSortIndex @join__enumValue(graph: BASS)
}

input PhysicalAssetPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PhysicalAssetVersionRef]
  activeVersion: PhysicalAssetVersionRef
  nextVersion: String
  id: String
  label: String
  isMadeUpOf: [PhysicalAssetRef]
  isPartOf: [PhysicalAssetRef]
  equipmentAssetMapping: [EquipmentAssetMappingRef]
  equipment: EquipmentRef
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
  uiSortIndex: Int
}

type PhysicalAssetProperty
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  value: String @join__field(graph: BASS)
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  valueSetPoint: String @join__field(graph: BASS)
  valueUpperSpecLimit: Float @join__field(graph: BASS)
  valueLowerSpecLimit: Float @join__field(graph: BASS)
  valueUpperControlLimit: Float @join__field(graph: BASS)
  valueLowerControlLimit: Float @join__field(graph: BASS)
  physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion! @join__field(graph: BASS)
  children(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty] @join__field(graph: BASS)
  parent(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @join__field(graph: BASS)
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @join__field(graph: BASS)
  correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @join__field(graph: BASS)
  recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  physicalAssetSpecificationProperties(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @join__field(graph: BASS)
  physicalAssetRequirementProperties(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @join__field(graph: BASS)
  physicalAssetActualProperties(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  childrenAggregate(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult @join__field(graph: BASS)
  recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  physicalAssetSpecificationPropertiesAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult @join__field(graph: BASS)
  physicalAssetRequirementPropertiesAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult @join__field(graph: BASS)
  physicalAssetActualPropertiesAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult @join__field(graph: BASS)
}

type PhysicalAssetPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  valueSetPointMin: String
  valueSetPointMax: String
  valueUpperSpecLimitMin: Float
  valueUpperSpecLimitMax: Float
  valueUpperSpecLimitSum: Float
  valueUpperSpecLimitAvg: Float
  valueLowerSpecLimitMin: Float
  valueLowerSpecLimitMax: Float
  valueLowerSpecLimitSum: Float
  valueLowerSpecLimitAvg: Float
  valueUpperControlLimitMin: Float
  valueUpperControlLimitMax: Float
  valueUpperControlLimitSum: Float
  valueUpperControlLimitAvg: Float
  valueLowerControlLimitMin: Float
  valueLowerControlLimitMax: Float
  valueLowerControlLimitSum: Float
  valueLowerControlLimitAvg: Float
}

input PhysicalAssetPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetPropertyHasFilter]
  and: [PhysicalAssetPropertyFilter]
  or: [PhysicalAssetPropertyFilter]
  not: PhysicalAssetPropertyFilter
}

enum PhysicalAssetPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
  physicalAssetVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  physicalAssetClassProperty @join__enumValue(graph: BASS)
  correspondsTo @join__enumValue(graph: BASS)
  recordsMeasurementOf @join__enumValue(graph: BASS)
  physicalAssetSpecificationProperties @join__enumValue(graph: BASS)
  physicalAssetRequirementProperties @join__enumValue(graph: BASS)
  physicalAssetActualProperties @join__enumValue(graph: BASS)
}

input PhysicalAssetPropertyOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetPropertyOrderable
  desc: PhysicalAssetPropertyOrderable
  then: PhysicalAssetPropertyOrder
}

enum PhysicalAssetPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueSetPoint @join__enumValue(graph: BASS)
  valueUpperSpecLimit @join__enumValue(graph: BASS)
  valueLowerSpecLimit @join__enumValue(graph: BASS)
  valueUpperControlLimit @join__enumValue(graph: BASS)
  valueLowerControlLimit @join__enumValue(graph: BASS)
}

input PhysicalAssetPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  physicalAssetVersion: PhysicalAssetVersionRef
  children: [PhysicalAssetPropertyRef]
  parent: PhysicalAssetPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  valueSetPoint: String
  valueUpperSpecLimit: Float
  valueLowerSpecLimit: Float
  valueUpperControlLimit: Float
  valueLowerControlLimit: Float
  physicalAssetVersion: PhysicalAssetVersionRef
  children: [PhysicalAssetPropertyRef]
  parent: PhysicalAssetPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  correspondsTo: EvaluatedPropertyRef
  recordsMeasurementOf: [PropertyMeasurementRef]
  physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [PhysicalAssetVersionRef]
  activeVersion: PhysicalAssetVersionRef
  nextVersion: String
  id: String
  label: String
  isMadeUpOf: [PhysicalAssetRef]
  isPartOf: [PhysicalAssetRef]
  equipmentAssetMapping: [EquipmentAssetMappingRef]
  equipment: EquipmentRef
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  materialLots: [MaterialLotRef]
  materialSubLots: [MaterialSubLotRef]
  events: [EventRef]
  stateModelInstances: [StateModelInstanceRef]
  uiSortIndex: Int
}

type PhysicalAssetRequirement
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  physicalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  equipmentLevel: EquipmentElementLevel
  segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement
  children(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
  parent(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement
  properties(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
  physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  jobOrder(filter: JobOrderFilter): JobOrder
  testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
  propertiesAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
  testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PhysicalAssetRequirementAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  useMin: String
  useMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PhysicalAssetRequirementFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetRequirementHasFilter]
  and: [PhysicalAssetRequirementFilter]
  or: [PhysicalAssetRequirementFilter]
  not: PhysicalAssetRequirementFilter
}

enum PhysicalAssetRequirementHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  physicalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  equipmentLevel @join__enumValue(graph: BASS)
  segmentRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  physicalAssetClass @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  testedBy @join__enumValue(graph: BASS)
  specifiesTests @join__enumValue(graph: BASS)
  testResults @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input PhysicalAssetRequirementOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetRequirementOrderable
  desc: PhysicalAssetRequirementOrderable
  then: PhysicalAssetRequirementOrder
}

enum PhysicalAssetRequirementOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PhysicalAssetRequirementPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  physicalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentLevel: EquipmentElementLevel
  segmentRequirement: SegmentRequirementRef
  children: [PhysicalAssetRequirementRef]
  parent: PhysicalAssetRequirementRef
  properties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PhysicalAssetRequirementProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement!
  children(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
  parent(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementProperty
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
}

type PhysicalAssetRequirementPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PhysicalAssetRequirementPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetRequirementPropertyHasFilter]
  and: [PhysicalAssetRequirementPropertyFilter]
  or: [PhysicalAssetRequirementPropertyFilter]
  not: PhysicalAssetRequirementPropertyFilter
}

enum PhysicalAssetRequirementPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  physicalAssetRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  physicalAssetClassProperty @join__enumValue(graph: BASS)
  physicalAssetProperty @join__enumValue(graph: BASS)
}

input PhysicalAssetRequirementPropertyOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetRequirementPropertyOrderable
  desc: PhysicalAssetRequirementPropertyOrderable
  then: PhysicalAssetRequirementPropertyOrder
}

enum PhysicalAssetRequirementPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PhysicalAssetRequirementPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  children: [PhysicalAssetRequirementPropertyRef]
  parent: PhysicalAssetRequirementPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetRequirementPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  children: [PhysicalAssetRequirementPropertyRef]
  parent: PhysicalAssetRequirementPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetRequirementRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  physicalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  equipmentLevel: EquipmentElementLevel
  segmentRequirement: SegmentRequirementRef
  children: [PhysicalAssetRequirementRef]
  parent: PhysicalAssetRequirementRef
  properties: [PhysicalAssetRequirementPropertyRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  jobOrder: JobOrderRef
  testedBy: [TestSpecificationRef]
  specifiesTests: [TestSpecificationRef]
  testResults: [TestResultRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type PhysicalAssetSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  physicalLocation(filter: OperationalLocationFilter): OperationalLocation
  physicalAssetUse: String
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion
  children(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
  parent(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecification
  properties(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
  physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
  propertiesAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
}

type PhysicalAssetSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  physicalAssetUseMin: String
  physicalAssetUseMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PhysicalAssetSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetSpecificationHasFilter]
  and: [PhysicalAssetSpecificationFilter]
  or: [PhysicalAssetSpecificationFilter]
  not: PhysicalAssetSpecificationFilter
}

enum PhysicalAssetSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  physicalLocation @join__enumValue(graph: BASS)
  physicalAssetUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  processSegmentVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  physicalAssetClass @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
}

input PhysicalAssetSpecificationOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetSpecificationOrderable
  desc: PhysicalAssetSpecificationOrderable
  then: PhysicalAssetSpecificationOrder
}

enum PhysicalAssetSpecificationOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  physicalAssetUse @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PhysicalAssetSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  physicalLocation: OperationalLocationRef
  physicalAssetUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [PhysicalAssetSpecificationRef]
  parent: PhysicalAssetSpecificationRef
  properties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type PhysicalAssetSpecificationProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  quantity: Float
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  children(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
  parent(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationProperty
  physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecification!
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
}

type PhysicalAssetSpecificationPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PhysicalAssetSpecificationPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetSpecificationPropertyHasFilter]
  and: [PhysicalAssetSpecificationPropertyFilter]
  or: [PhysicalAssetSpecificationPropertyFilter]
  not: PhysicalAssetSpecificationPropertyFilter
}

enum PhysicalAssetSpecificationPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  physicalAssetSpecification @join__enumValue(graph: BASS)
  physicalAssetClassProperty @join__enumValue(graph: BASS)
  physicalAssetProperty @join__enumValue(graph: BASS)
}

input PhysicalAssetSpecificationPropertyOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetSpecificationPropertyOrderable
  desc: PhysicalAssetSpecificationPropertyOrderable
  then: PhysicalAssetSpecificationPropertyOrder
}

enum PhysicalAssetSpecificationPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input PhysicalAssetSpecificationPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [PhysicalAssetSpecificationPropertyRef]
  parent: PhysicalAssetSpecificationPropertyRef
  physicalAssetSpecification: PhysicalAssetSpecificationRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetSpecificationPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  children: [PhysicalAssetSpecificationPropertyRef]
  parent: PhysicalAssetSpecificationPropertyRef
  physicalAssetSpecification: PhysicalAssetSpecificationRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  physicalLocation: OperationalLocationRef
  physicalAssetUse: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  operationsSegment: OperationsSegmentRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [PhysicalAssetSpecificationRef]
  parent: PhysicalAssetSpecificationRef
  properties: [PhysicalAssetSpecificationPropertyRef]
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type PhysicalAssetVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset! @join__field(graph: BASS)
  isActiveVersionOf(filter: PhysicalAssetFilter): PhysicalAsset @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition @join__field(graph: BASS)
  fixedAssetID: String @join__field(graph: BASS)
  vendorID: String @join__field(graph: BASS)
  physicalLocation(filter: OperationalLocationFilter): OperationalLocation @join__field(graph: BASS)
  physicalLocationDescription: String @join__field(graph: BASS)
  physicalAssetClasses(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @join__field(graph: BASS)
  properties(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty] @join__field(graph: BASS)
  dataSources(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource] @join__field(graph: BASS)
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @join__field(graph: BASS)
  stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  physicalAssetClassesAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult @join__field(graph: BASS)
  dataSourcesAggregate(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult @join__field(graph: BASS)
  physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult @join__field(graph: BASS)
  stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
  inheritedProperties(options: PhysicalAssetInheritedPropertyOptions): [PhysicalAssetInheritedProperty] @join__field(graph: CORE)
}

type PhysicalAssetVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  fixedAssetIDMin: String
  fixedAssetIDMax: String
  vendorIDMin: String
  vendorIDMax: String
  physicalLocationDescriptionMin: String
  physicalLocationDescriptionMax: String
}

input PhysicalAssetVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  fixedAssetID: StringExactFilter_StringFullTextFilter
  vendorID: StringExactFilter_StringFullTextFilter
  physicalLocationDescription: StringExactFilter_StringFullTextFilter
  has: [PhysicalAssetVersionHasFilter]
  and: [PhysicalAssetVersionFilter]
  or: [PhysicalAssetVersionFilter]
  not: PhysicalAssetVersionFilter
}

enum PhysicalAssetVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  fixedAssetID @join__enumValue(graph: BASS)
  vendorID @join__enumValue(graph: BASS)
  physicalLocation @join__enumValue(graph: BASS)
  physicalLocationDescription @join__enumValue(graph: BASS)
  physicalAssetClasses @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  dataSources @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  stateModels @join__enumValue(graph: BASS)
}

input PhysicalAssetVersionOrder
  @join__type(graph: BASS)
{
  asc: PhysicalAssetVersionOrderable
  desc: PhysicalAssetVersionOrderable
  then: PhysicalAssetVersionOrder
}

enum PhysicalAssetVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  fixedAssetID @join__enumValue(graph: BASS)
  vendorID @join__enumValue(graph: BASS)
  physicalLocationDescription @join__enumValue(graph: BASS)
}

input PhysicalAssetVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  physicalAsset: PhysicalAssetRef
  isActiveVersionOf: PhysicalAssetRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  fixedAssetID: String
  vendorID: String
  physicalLocation: OperationalLocationRef
  physicalLocationDescription: String
  physicalAssetClasses: [PhysicalAssetClassRef]
  properties: [PhysicalAssetPropertyRef]
  dataSources: [PhysicalAssetDataSourceRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  stateModels: [StateModelDefinitionRef]
}

input PhysicalAssetVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  physicalAsset: PhysicalAssetRef
  isActiveVersionOf: PhysicalAssetRef
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  fixedAssetID: String
  vendorID: String
  physicalLocation: OperationalLocationRef
  physicalLocationDescription: String
  physicalAssetClasses: [PhysicalAssetClassRef]
  properties: [PhysicalAssetPropertyRef]
  dataSources: [PhysicalAssetDataSourceRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  stateModels: [StateModelDefinitionRef]
}

type Point
  @join__type(graph: BASS)
{
  longitude: Float!
  latitude: Float!
}

input PointGeoFilter
  @join__type(graph: BASS)
{
  near: NearFilter
  within: WithinFilter
}

type PointList
  @join__type(graph: BASS)
{
  points: [Point!]!
}

input PointListRef
  @join__type(graph: BASS)
{
  points: [PointRef!]!
}

input PointRef
  @join__type(graph: BASS)
{
  longitude: Float!
  latitude: Float!
}

type Polygon
  @join__type(graph: BASS)
{
  coordinates: [PointList!]!
}

input PolygonGeoFilter
  @join__type(graph: BASS)
{
  near: NearFilter
  within: WithinFilter
  contains: ContainsFilter
  intersects: IntersectsFilter
}

input PolygonRef
  @join__type(graph: BASS)
{
  coordinates: [PointListRef!]!
}

enum ProcessLocation
  @join__type(graph: BASS)
{
  Edge @join__enumValue(graph: BASS)
  Core @join__enumValue(graph: BASS)
}

input ProcessLocation_hash
  @join__type(graph: BASS)
{
  eq: ProcessLocation
  in: [ProcessLocation]
}

type ProcessSegment
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  versions(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion] @join__field(graph: BASS)
  activeVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  isMadeUpOf(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment] @join__field(graph: BASS)
  isPartOf(filter: ProcessSegmentFilter): ProcessSegment @join__field(graph: BASS)
  workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @join__field(graph: BASS)
  inflows(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency] @join__field(graph: BASS)
  outflows(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency] @join__field(graph: BASS)
  operationsSegments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @join__field(graph: BASS)
  segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @join__field(graph: BASS)
  segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: ProcessSegmentVersionFilter): ProcessSegmentVersionAggregateResult @join__field(graph: BASS)
  isMadeUpOfAggregate(filter: ProcessSegmentFilter): ProcessSegmentAggregateResult @join__field(graph: BASS)
  workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult @join__field(graph: BASS)
  inflowsAggregate(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult @join__field(graph: BASS)
  outflowsAggregate(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult @join__field(graph: BASS)
  operationsSegmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult @join__field(graph: BASS)
  segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult @join__field(graph: BASS)
  segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult @join__field(graph: BASS)
}

type ProcessSegmentAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

type ProcessSegmentDependency
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  condition: String
  from(filter: ProcessSegmentFilter): ProcessSegment!
  to(filter: ProcessSegmentFilter): ProcessSegment!
  rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  rulesAggregate(filter: RuleFilter): RuleAggregateResult
}

type ProcessSegmentDependencyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  dependencyFactorMin: Float
  dependencyFactorMax: Float
  dependencyFactorSum: Float
  dependencyFactorAvg: Float
  conditionMin: String
  conditionMax: String
}

input ProcessSegmentDependencyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [ProcessSegmentDependencyHasFilter]
  and: [ProcessSegmentDependencyFilter]
  or: [ProcessSegmentDependencyFilter]
  not: ProcessSegmentDependencyFilter
}

enum ProcessSegmentDependencyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  dependencyType @join__enumValue(graph: BASS)
  dependencyFactor @join__enumValue(graph: BASS)
  factorUoM @join__enumValue(graph: BASS)
  condition @join__enumValue(graph: BASS)
  from @join__enumValue(graph: BASS)
  to @join__enumValue(graph: BASS)
  rules @join__enumValue(graph: BASS)
}

input ProcessSegmentDependencyOrder
  @join__type(graph: BASS)
{
  asc: ProcessSegmentDependencyOrderable
  desc: ProcessSegmentDependencyOrderable
  then: ProcessSegmentDependencyOrder
}

enum ProcessSegmentDependencyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  dependencyFactor @join__enumValue(graph: BASS)
  condition @join__enumValue(graph: BASS)
}

input ProcessSegmentDependencyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  from: ProcessSegmentRef
  to: ProcessSegmentRef
  rules: [RuleRef]
}

input ProcessSegmentDependencyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  from: ProcessSegmentRef
  to: ProcessSegmentRef
  rules: [RuleRef]
}

input ProcessSegmentFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [ProcessSegmentHasFilter]
  and: [ProcessSegmentFilter]
  or: [ProcessSegmentFilter]
  not: ProcessSegmentFilter
}

enum ProcessSegmentHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isMadeUpOf @join__enumValue(graph: BASS)
  isPartOf @join__enumValue(graph: BASS)
  workMasters @join__enumValue(graph: BASS)
  inflows @join__enumValue(graph: BASS)
  outflows @join__enumValue(graph: BASS)
  operationsSegments @join__enumValue(graph: BASS)
  segmentRequirements @join__enumValue(graph: BASS)
  segmentResponses @join__enumValue(graph: BASS)
}

input ProcessSegmentOrder
  @join__type(graph: BASS)
{
  asc: ProcessSegmentOrderable
  desc: ProcessSegmentOrderable
  then: ProcessSegmentOrder
}

enum ProcessSegmentOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

type ProcessSegmentParameter
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion!
  children(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
  parent(filter: ProcessSegmentParameterFilter): ProcessSegmentParameter
  segmentParameters(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
  jobOrderParameter(filter: JobOrderParameterFilter): JobOrderParameter
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult
  segmentParametersAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
}

type ProcessSegmentParameterAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input ProcessSegmentParameterFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [ProcessSegmentParameterHasFilter]
  and: [ProcessSegmentParameterFilter]
  or: [ProcessSegmentParameterFilter]
  not: ProcessSegmentParameterFilter
}

enum ProcessSegmentParameterHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  processSegmentVersion @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  segmentParameters @join__enumValue(graph: BASS)
  jobOrderParameter @join__enumValue(graph: BASS)
}

input ProcessSegmentParameterOrder
  @join__type(graph: BASS)
{
  asc: ProcessSegmentParameterOrderable
  desc: ProcessSegmentParameterOrderable
  then: ProcessSegmentParameterOrder
}

enum ProcessSegmentParameterOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input ProcessSegmentParameterPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [ProcessSegmentParameterRef]
  parent: ProcessSegmentParameterRef
  segmentParameters: [SegmentParameterRef]
  jobOrderParameter: JobOrderParameterRef
}

input ProcessSegmentParameterRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  processSegmentVersion: ProcessSegmentVersionRef
  children: [ProcessSegmentParameterRef]
  parent: ProcessSegmentParameterRef
  segmentParameters: [SegmentParameterRef]
  jobOrderParameter: JobOrderParameterRef
}

input ProcessSegmentPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [ProcessSegmentVersionRef]
  activeVersion: ProcessSegmentVersionRef
  nextVersion: String
  id: String
  label: String
  isMadeUpOf: [ProcessSegmentRef]
  isPartOf: ProcessSegmentRef
  workMasters: [WorkMasterRef]
  inflows: [ProcessSegmentDependencyRef]
  outflows: [ProcessSegmentDependencyRef]
  operationsSegments: [OperationsSegmentRef]
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef]
}

input ProcessSegmentRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  versions: [ProcessSegmentVersionRef]
  activeVersion: ProcessSegmentVersionRef
  nextVersion: String
  id: String
  label: String
  isMadeUpOf: [ProcessSegmentRef]
  isPartOf: ProcessSegmentRef
  workMasters: [WorkMasterRef]
  inflows: [ProcessSegmentDependencyRef]
  outflows: [ProcessSegmentDependencyRef]
  operationsSegments: [OperationsSegmentRef]
  segmentRequirements: [SegmentRequirementRef]
  segmentResponses: [SegmentResponseRef]
}

type ProcessSegmentVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  processSegment(filter: ProcessSegmentFilter): ProcessSegment! @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  isActiveVersionOf(filter: ProcessSegmentFilter): ProcessSegment @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  operationsType: WorkType! @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  definitionType: DefinitionType @join__field(graph: BASS)
  duration: Float @join__field(graph: BASS)
  durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: BASS)
  processSegmentParameters(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter] @join__field(graph: BASS)
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: BASS)
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: BASS)
  physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @join__field(graph: BASS)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  processSegmentParametersAggregate(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult @join__field(graph: BASS)
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: BASS)
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: BASS)
  physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult @join__field(graph: BASS)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: BASS)
}

type ProcessSegmentVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  versionMin: String
  versionMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
}

input ProcessSegmentVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  operationsType: WorkType_hash
  has: [ProcessSegmentVersionHasFilter]
  and: [ProcessSegmentVersionFilter]
  or: [ProcessSegmentVersionFilter]
  not: ProcessSegmentVersionFilter
}

enum ProcessSegmentVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  processSegment @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  durationUoM @join__enumValue(graph: BASS)
  processSegmentParameters @join__enumValue(graph: BASS)
  personnelSpecifications @join__enumValue(graph: BASS)
  equipmentSpecifications @join__enumValue(graph: BASS)
  physicalAssetSpecifications @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
}

input ProcessSegmentVersionOrder
  @join__type(graph: BASS)
{
  asc: ProcessSegmentVersionOrderable
  desc: ProcessSegmentVersionOrderable
  then: ProcessSegmentVersionOrder
}

enum ProcessSegmentVersionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
}

input ProcessSegmentVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  processSegment: ProcessSegmentRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  isActiveVersionOf: ProcessSegmentRef
  id: String
  description: String
  operationsType: WorkType
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  duration: Float
  durationUoM: UnitOfMeasureRef
  processSegmentParameters: [ProcessSegmentParameterRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
}

input ProcessSegmentVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  processSegment: ProcessSegmentRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  version: String
  versionStatus: VersionState
  isActiveVersionOf: ProcessSegmentRef
  id: String
  description: String
  operationsType: WorkType
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  duration: Float
  durationUoM: UnitOfMeasureRef
  processSegmentParameters: [ProcessSegmentParameterRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
}

enum PropertyBindingType
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  BOUND @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  STATIC @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  CALCULATED @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input PropertyBindingType_hash
  @join__type(graph: BASS)
{
  eq: PropertyBindingType
  in: [PropertyBindingType]
}

type PropertyMeasurement
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  measurementDate: DateTime
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  expiration: DateTime
  testResult(filter: TestResultFilter): TestResult!
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty
  personProperty(filter: PersonPropertyFilter): PersonProperty
  equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty
  equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty
  materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty
  materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
}

type PropertyMeasurementAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
  measurementDateMin: DateTime
  measurementDateMax: DateTime
  valueMin: String
  valueMax: String
  expirationMin: DateTime
  expirationMax: DateTime
}

input PropertyMeasurementFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [PropertyMeasurementHasFilter]
  and: [PropertyMeasurementFilter]
  or: [PropertyMeasurementFilter]
  not: PropertyMeasurementFilter
}

enum PropertyMeasurementHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  measurementDate @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  expiration @join__enumValue(graph: BASS)
  testResult @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
  personnelClassProperty @join__enumValue(graph: BASS)
  personProperty @join__enumValue(graph: BASS)
  equipmentClassProperty @join__enumValue(graph: BASS)
  equipmentProperty @join__enumValue(graph: BASS)
  physicalAssetClassProperty @join__enumValue(graph: BASS)
  physicalAssetProperty @join__enumValue(graph: BASS)
  materialClassProperty @join__enumValue(graph: BASS)
  materialDefinitionProperty @join__enumValue(graph: BASS)
  materialLotProperty @join__enumValue(graph: BASS)
}

input PropertyMeasurementOrder
  @join__type(graph: BASS)
{
  asc: PropertyMeasurementOrderable
  desc: PropertyMeasurementOrderable
  then: PropertyMeasurementOrder
}

enum PropertyMeasurementOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  measurementDate @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  expiration @join__enumValue(graph: BASS)
}

input PropertyMeasurementPatch
  @join__type(graph: BASS)
{
  id: String
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  measurementDate: DateTime
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  expiration: DateTime
  testResult: TestResultRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

input PropertyMeasurementRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  measurementDate: DateTime
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  expiration: DateTime
  testResult: TestResultRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  personnelClassProperty: PersonnelClassPropertyRef
  personProperty: PersonPropertyRef
  equipmentClassProperty: EquipmentClassPropertyRef
  equipmentProperty: EquipmentPropertyRef
  physicalAssetClassProperty: PhysicalAssetClassPropertyRef
  physicalAssetProperty: PhysicalAssetPropertyRef
  materialClassProperty: MaterialClassPropertyRef
  materialDefinitionProperty: MaterialDefinitionPropertyRef
  materialLotProperty: MaterialLotPropertyRef
}

type PropertyNameAlias
  @join__type(graph: BASS)
{
  iid: ID!
  propertyLabel: String!
  expression: String
  equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion!
  dataSource(filter: DataSourceFilter): DataSource
  dataSourceTopic(filter: DataSourceTopicFilter): DataSourceTopic @deprecated(reason: "use dataSourceTopicLabel instead")
  dataSourceTopicLabel: String
}

type PropertyNameAliasAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  propertyLabelMin: String
  propertyLabelMax: String
  expressionMin: String
  expressionMax: String
  dataSourceTopicLabelMin: String
  dataSourceTopicLabelMax: String
}

input PropertyNameAliasFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  propertyLabel: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  dataSourceTopicLabel: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [PropertyNameAliasHasFilter]
  and: [PropertyNameAliasFilter]
  or: [PropertyNameAliasFilter]
  not: PropertyNameAliasFilter
}

enum PropertyNameAliasHasFilter
  @join__type(graph: BASS)
{
  propertyLabel @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
  equipmentVersion @join__enumValue(graph: BASS)
  dataSource @join__enumValue(graph: BASS)
  dataSourceTopic @join__enumValue(graph: BASS)
  dataSourceTopicLabel @join__enumValue(graph: BASS)
}

input PropertyNameAliasOrder
  @join__type(graph: BASS)
{
  asc: PropertyNameAliasOrderable
  desc: PropertyNameAliasOrderable
  then: PropertyNameAliasOrder
}

enum PropertyNameAliasOrderable
  @join__type(graph: BASS)
{
  propertyLabel @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
  dataSourceTopicLabel @join__enumValue(graph: BASS)
}

input PropertyNameAliasPatch
  @join__type(graph: BASS)
{
  propertyLabel: String
  expression: String
  equipmentVersion: EquipmentVersionRef
  dataSource: DataSourceRef
  dataSourceTopic: DataSourceTopicRef
  dataSourceTopicLabel: String
}

input PropertyNameAliasRef
  @join__type(graph: BASS)
{
  iid: ID
  propertyLabel: String
  expression: String
  equipmentVersion: EquipmentVersionRef
  dataSource: DataSourceRef
  dataSourceTopic: DataSourceTopicRef
  dataSourceTopicLabel: String
}

type PropertyValueAlias
  @join__type(graph: BASS)
{
  iid: ID!
  property(filter: EquipmentClassPropertyFilter): EquipmentClassProperty!
  value: String!
  alias: String!
  system: String!
}

type PropertyValueAliasAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  valueMin: String
  valueMax: String
  aliasMin: String
  aliasMax: String
  systemMin: String
  systemMax: String
}

input PropertyValueAliasFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  value: StringFullTextFilter
  alias: StringFullTextFilter
  system: StringFullTextFilter
  has: [PropertyValueAliasHasFilter]
  and: [PropertyValueAliasFilter]
  or: [PropertyValueAliasFilter]
  not: PropertyValueAliasFilter
}

enum PropertyValueAliasHasFilter
  @join__type(graph: BASS)
{
  property @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  alias @join__enumValue(graph: BASS)
  system @join__enumValue(graph: BASS)
}

input PropertyValueAliasOrder
  @join__type(graph: BASS)
{
  asc: PropertyValueAliasOrderable
  desc: PropertyValueAliasOrderable
  then: PropertyValueAliasOrder
}

enum PropertyValueAliasOrderable
  @join__type(graph: BASS)
{
  value @join__enumValue(graph: BASS)
  alias @join__enumValue(graph: BASS)
  system @join__enumValue(graph: BASS)
}

input PropertyValueAliasPatch
  @join__type(graph: BASS)
{
  property: EquipmentClassPropertyRef
  value: String
  alias: String
  system: String
}

input PropertyValueAliasRef
  @join__type(graph: BASS)
{
  iid: ID
  property: EquipmentClassPropertyRef
  value: String
  alias: String
  system: String
}

type Query
  @join__type(graph: BASS)
  @join__type(graph: BPMN_ENGINE)
  @join__type(graph: CORE)
{
  getEvent(iid: ID!): Event @join__field(graph: BASS)
  queryEvent(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @join__field(graph: BASS)
  aggregateEvent(filter: EventFilter): EventAggregateResult @join__field(graph: BASS)
  getAlarmEvent(iid: ID!): AlarmEvent @join__field(graph: BASS)
  queryAlarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent] @join__field(graph: BASS)
  aggregateAlarmEvent(filter: AlarmEventFilter): AlarmEventAggregateResult @join__field(graph: BASS)
  getEventType(iid: ID!): EventType @join__field(graph: BASS)
  queryEventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType] @join__field(graph: BASS)
  aggregateEventType(filter: EventTypeFilter): EventTypeAggregateResult @join__field(graph: BASS)
  getEventSubtype(iid: ID!): EventSubtype @join__field(graph: BASS)
  queryEventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype] @join__field(graph: BASS)
  aggregateEventSubtype(filter: EventSubtypeFilter): EventSubtypeAggregateResult @join__field(graph: BASS)
  getEventProperty(iid: ID!): EventProperty @join__field(graph: BASS)
  queryEventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty] @join__field(graph: BASS)
  aggregateEventProperty(filter: EventPropertyFilter): EventPropertyAggregateResult @join__field(graph: BASS)
  getEventAssociation(iid: ID!): EventAssociation @join__field(graph: BASS)
  queryEventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation] @join__field(graph: BASS)
  aggregateEventAssociation(filter: EventAssociationFilter): EventAssociationAggregateResult @join__field(graph: BASS)
  getHierarchyScope(iid: ID, id: String): HierarchyScope @join__field(graph: BASS)
  queryHierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope] @join__field(graph: BASS)
  aggregateHierarchyScope(filter: HierarchyScopeFilter): HierarchyScopeAggregateResult @join__field(graph: BASS)
  getSpatialDefinition(iid: ID, id: String): SpatialDefinition @join__field(graph: BASS)
  querySpatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition] @join__field(graph: BASS)
  aggregateSpatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinitionAggregateResult @join__field(graph: BASS)
  getOperationalLocationClass(iid: ID, id: String): OperationalLocationClass @join__field(graph: BASS)
  queryOperationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @join__field(graph: BASS)
  aggregateOperationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult @join__field(graph: BASS)
  getOperationalLocationClassVersion(iid: ID, id: String, version: String): OperationalLocationClassVersion @join__field(graph: BASS)
  queryOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @join__field(graph: BASS)
  aggregateOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult @join__field(graph: BASS)
  getOperationalLocationClassProperty(iid: ID, id: String): OperationalLocationClassProperty @join__field(graph: BASS)
  queryOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty] @join__field(graph: BASS)
  aggregateOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult @join__field(graph: BASS)
  getOperationalLocation(iid: ID, id: String): OperationalLocation @join__field(graph: BASS)
  queryOperationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation] @join__field(graph: BASS)
  aggregateOperationalLocation(filter: OperationalLocationFilter): OperationalLocationAggregateResult @join__field(graph: BASS)
  getOperationalLocationVersion(iid: ID, id: String, version: String): OperationalLocationVersion @join__field(graph: BASS)
  queryOperationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion] @join__field(graph: BASS)
  aggregateOperationalLocationVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult @join__field(graph: BASS)
  getOperationalLocationProperty(iid: ID, id: String): OperationalLocationProperty @join__field(graph: BASS)
  queryOperationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @join__field(graph: BASS)
  aggregateOperationalLocationProperty(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult @join__field(graph: BASS)
  getPersonnelClass(iid: ID, id: String): PersonnelClass @join__field(graph: BASS)
  queryPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @join__field(graph: BASS)
  aggregatePersonnelClass(filter: PersonnelClassFilter): PersonnelClassAggregateResult @join__field(graph: BASS)
  getPersonnelClassVersion(iid: ID, id: String, version: String): PersonnelClassVersion @join__field(graph: BASS)
  queryPersonnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion] @join__field(graph: BASS)
  aggregatePersonnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult @join__field(graph: BASS)
  getPersonnelClassProperty(iid: ID, id: String): PersonnelClassProperty @join__field(graph: BASS)
  queryPersonnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty] @join__field(graph: BASS)
  aggregatePersonnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult @join__field(graph: BASS)
  getPerson(iid: ID, id: String): Person @join__field(graph: BASS)
  queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person] @join__field(graph: BASS)
  aggregatePerson(filter: PersonFilter): PersonAggregateResult @join__field(graph: BASS)
  getPersonVersion(iid: ID, id: String, version: String): PersonVersion @join__field(graph: BASS)
  queryPersonVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion] @join__field(graph: BASS)
  aggregatePersonVersion(filter: PersonVersionFilter): PersonVersionAggregateResult @join__field(graph: BASS)
  getPersonProperty(iid: ID, id: String): PersonProperty @join__field(graph: BASS)
  queryPersonProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty] @join__field(graph: BASS)
  aggregatePersonProperty(filter: PersonPropertyFilter): PersonPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentClass(iid: ID, id: String): EquipmentClass @join__field(graph: BASS)
  queryEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: BASS)
  aggregateEquipmentClass(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: BASS)
  getEquipmentClassVersion(iid: ID, id: String, version: String): EquipmentClassVersion @join__field(graph: BASS)
  queryEquipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @join__field(graph: BASS)
  aggregateEquipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult @join__field(graph: BASS)
  getEquipmentClassProperty(iid: ID, id: String): EquipmentClassProperty @join__field(graph: BASS)
  queryEquipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @join__field(graph: BASS)
  aggregateEquipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult @join__field(graph: BASS)
  getEquipment(iid: ID, id: String): Equipment @join__field(graph: BASS)
  queryEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @join__field(graph: BASS)
  aggregateEquipment(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: BASS)
  getEquipmentVersion(iid: ID, id: String, version: String): EquipmentVersion @join__field(graph: BASS)
  queryEquipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @join__field(graph: BASS)
  aggregateEquipmentVersion(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult @join__field(graph: BASS)
  getEquipmentDataSource(iid: ID!): EquipmentDataSource @join__field(graph: BASS)
  queryEquipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @join__field(graph: BASS)
  aggregateEquipmentDataSource(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult @join__field(graph: BASS)
  getEquipmentProperty(iid: ID, id: String): EquipmentProperty @join__field(graph: BASS)
  queryEquipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty] @join__field(graph: BASS)
  aggregateEquipmentProperty(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetClass(iid: ID, id: String): PhysicalAssetClass @join__field(graph: BASS)
  queryPhysicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @join__field(graph: BASS)
  aggregatePhysicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult @join__field(graph: BASS)
  getPhysicalAssetClassVersion(iid: ID, id: String, version: String): PhysicalAssetClassVersion @join__field(graph: BASS)
  queryPhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion] @join__field(graph: BASS)
  aggregatePhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult @join__field(graph: BASS)
  getPhysicalAssetClassProperty(iid: ID, id: String): PhysicalAssetClassProperty @join__field(graph: BASS)
  queryPhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAsset(iid: ID, id: String): PhysicalAsset @join__field(graph: BASS)
  queryPhysicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset] @join__field(graph: BASS)
  aggregatePhysicalAsset(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult @join__field(graph: BASS)
  getPhysicalAssetVersion(iid: ID, id: String, version: String): PhysicalAssetVersion @join__field(graph: BASS)
  queryPhysicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion] @join__field(graph: BASS)
  aggregatePhysicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult @join__field(graph: BASS)
  getPhysicalAssetProperty(iid: ID, id: String): PhysicalAssetProperty @join__field(graph: BASS)
  queryPhysicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentAssetMapping(iid: ID, id: String): EquipmentAssetMapping @join__field(graph: BASS)
  queryEquipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping] @join__field(graph: BASS)
  aggregateEquipmentAssetMapping(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult @join__field(graph: BASS)
  getPhysicalAssetDataSource(iid: ID!): PhysicalAssetDataSource @join__field(graph: BASS)
  queryPhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource] @join__field(graph: BASS)
  aggregatePhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult @join__field(graph: BASS)
  getMaterialClass(iid: ID, id: String): MaterialClass @join__field(graph: BASS)
  queryMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: BASS)
  aggregateMaterialClass(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: BASS)
  getMaterialClassVersion(iid: ID, id: String, version: String): MaterialClassVersion @join__field(graph: BASS)
  queryMaterialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion] @join__field(graph: BASS)
  aggregateMaterialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult @join__field(graph: BASS)
  getMaterialClassProperty(iid: ID, id: String): MaterialClassProperty @join__field(graph: BASS)
  queryMaterialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty] @join__field(graph: BASS)
  aggregateMaterialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult @join__field(graph: BASS)
  getMaterialDefinition(iid: ID, id: String): MaterialDefinition @join__field(graph: BASS)
  queryMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition] @join__field(graph: BASS)
  aggregateMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult @join__field(graph: BASS)
  getMaterialDefinitionVersion(iid: ID, id: String, version: String): MaterialDefinitionVersion @join__field(graph: BASS)
  queryMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @join__field(graph: BASS)
  aggregateMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult @join__field(graph: BASS)
  getMaterialDefinitionProperty(iid: ID, id: String): MaterialDefinitionProperty @join__field(graph: BASS)
  queryMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty] @join__field(graph: BASS)
  aggregateMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult @join__field(graph: BASS)
  getMaterialLot(iid: ID, id: String): MaterialLot @join__field(graph: BASS)
  queryMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @join__field(graph: BASS)
  aggregateMaterialLot(filter: MaterialLotFilter): MaterialLotAggregateResult @join__field(graph: BASS)
  getMaterialLotProperty(iid: ID, id: String): MaterialLotProperty @join__field(graph: BASS)
  queryMaterialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty] @join__field(graph: BASS)
  aggregateMaterialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult @join__field(graph: BASS)
  getMaterialSubLot(iid: ID!): MaterialSubLot @join__field(graph: BASS)
  queryMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: BASS)
  aggregateMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: BASS)
  getMaterialAlternate(iid: ID!): MaterialAlternate @join__field(graph: BASS)
  queryMaterialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @join__field(graph: BASS)
  aggregateMaterialAlternate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult @join__field(graph: BASS)
  getUnitOfMeasure(iid: ID, id: String): UnitOfMeasure @join__field(graph: BASS)
  queryUnitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure] @join__field(graph: BASS)
  aggregateUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasureAggregateResult @join__field(graph: BASS)
  getUnitOfMeasureConversion(iid: ID!): UnitOfMeasureConversion @join__field(graph: BASS)
  queryUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion] @join__field(graph: BASS)
  aggregateUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult @join__field(graph: BASS)
  getProcessSegment(iid: ID, id: String): ProcessSegment @join__field(graph: BASS)
  queryProcessSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment] @join__field(graph: BASS)
  aggregateProcessSegment(filter: ProcessSegmentFilter): ProcessSegmentAggregateResult @join__field(graph: BASS)
  getProcessSegmentVersion(iid: ID, id: String, version: String): ProcessSegmentVersion @join__field(graph: BASS)
  queryProcessSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion] @join__field(graph: BASS)
  aggregateProcessSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersionAggregateResult @join__field(graph: BASS)
  getProcessSegmentDependency(iid: ID, id: String): ProcessSegmentDependency @join__field(graph: BASS)
  queryProcessSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency] @join__field(graph: BASS)
  aggregateProcessSegmentDependency(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult @join__field(graph: BASS)
  getProcessSegmentParameter(iid: ID, id: String): ProcessSegmentParameter @join__field(graph: BASS)
  queryProcessSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter] @join__field(graph: BASS)
  aggregateProcessSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult @join__field(graph: BASS)
  getTestSpecification(iid: ID, id: String, key: String): TestSpecification @join__field(graph: BASS)
  queryTestSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  aggregateTestSpecification(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  getTestSpecificationProperty(iid: ID, id: String): TestSpecificationProperty @join__field(graph: BASS)
  queryTestSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty] @join__field(graph: BASS)
  aggregateTestSpecificationProperty(filter: TestSpecificationPropertyFilter): TestSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getTestSpecificationCriteria(iid: ID, id: String): TestSpecificationCriteria @join__field(graph: BASS)
  queryTestSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria] @join__field(graph: BASS)
  aggregateTestSpecificationCriteria(filter: TestSpecificationCriteriaFilter): TestSpecificationCriteriaAggregateResult @join__field(graph: BASS)
  getEvaluatedProperty(iid: ID, id: String): EvaluatedProperty @join__field(graph: BASS)
  queryEvaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty] @join__field(graph: BASS)
  aggregateEvaluatedProperty(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult @join__field(graph: BASS)
  getTestResult(iid: ID, id: String): TestResult @join__field(graph: BASS)
  queryTestResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: BASS)
  aggregateTestResult(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: BASS)
  getPropertyMeasurement(iid: ID, id: String): PropertyMeasurement @join__field(graph: BASS)
  queryPropertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @join__field(graph: BASS)
  aggregatePropertyMeasurement(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult @join__field(graph: BASS)
  getOperationsEventClass(iid: ID, id: String): OperationsEventClass @join__field(graph: BASS)
  queryOperationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass] @join__field(graph: BASS)
  aggregateOperationsEventClass(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult @join__field(graph: BASS)
  getOperationsEventClassVersion(iid: ID, id: String, version: String): OperationsEventClassVersion @join__field(graph: BASS)
  queryOperationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion] @join__field(graph: BASS)
  aggregateOperationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersionAggregateResult @join__field(graph: BASS)
  getOperationsEventClassRecordSpecification(iid: ID!): OperationsEventClassRecordSpecification @join__field(graph: BASS)
  queryOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification] @join__field(graph: BASS)
  aggregateOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter): OperationsEventClassRecordSpecificationAggregateResult @join__field(graph: BASS)
  queryMultiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity] @join__field(graph: BASS)
  aggregateMultiplicity(filter: MultiplicityFilter): MultiplicityAggregateResult @join__field(graph: BASS)
  getOperationsEventClassProperty(iid: ID, id: String): OperationsEventClassProperty @join__field(graph: BASS)
  queryOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty] @join__field(graph: BASS)
  aggregateOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinition(iid: ID, id: String): OperationsEventDefinition @join__field(graph: BASS)
  queryOperationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition] @join__field(graph: BASS)
  aggregateOperationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinitionVersion(iid: ID, id: String, version: String): OperationsEventDefinitionVersion @join__field(graph: BASS)
  queryOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion] @join__field(graph: BASS)
  aggregateOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinitionRecordSpecification(iid: ID!): OperationsEventDefinitionRecordSpecification @join__field(graph: BASS)
  queryOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification] @join__field(graph: BASS)
  aggregateOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecificationAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinitionProperty(iid: ID!): OperationsEventDefinitionProperty @join__field(graph: BASS)
  queryOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty] @join__field(graph: BASS)
  aggregateOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult @join__field(graph: BASS)
  getOperationsEvent(iid: ID, id: String): OperationsEvent @join__field(graph: BASS)
  queryOperationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent] @join__field(graph: BASS)
  aggregateOperationsEvent(filter: OperationsEventFilter): OperationsEventAggregateResult @join__field(graph: BASS)
  getOperationsEventProperty(iid: ID, id: String): OperationsEventProperty @join__field(graph: BASS)
  queryOperationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty] @join__field(graph: BASS)
  aggregateOperationsEventProperty(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult @join__field(graph: BASS)
  getOperationsEventRecord(iid: ID, id: String): OperationsEventRecord @join__field(graph: BASS)
  queryOperationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord] @join__field(graph: BASS)
  aggregateOperationsEventRecord(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult @join__field(graph: BASS)
  getOperationsEventRecordEntry(iid: ID, id: String, recordId: String): OperationsEventRecordEntry @join__field(graph: BASS)
  queryOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry] @join__field(graph: BASS)
  aggregateOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult @join__field(graph: BASS)
  getOperationsDefinition(iid: ID, id: String): OperationsDefinition @join__field(graph: BASS)
  queryOperationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @join__field(graph: BASS)
  aggregateOperationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult @join__field(graph: BASS)
  getOperationsDefinitionVersion(iid: ID, id: String, version: String): OperationsDefinitionVersion @join__field(graph: BASS)
  queryOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion] @join__field(graph: BASS)
  aggregateOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersionAggregateResult @join__field(graph: BASS)
  getOperationsMaterialBill(iid: ID, id: String): OperationsMaterialBill @join__field(graph: BASS)
  queryOperationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill] @join__field(graph: BASS)
  aggregateOperationsMaterialBill(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult @join__field(graph: BASS)
  getOperationsSegment(iid: ID, id: String): OperationsSegment @join__field(graph: BASS)
  queryOperationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @join__field(graph: BASS)
  aggregateOperationsSegment(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult @join__field(graph: BASS)
  getOperationsSegmentDependency(iid: ID, id: String): OperationsSegmentDependency @join__field(graph: BASS)
  queryOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency] @join__field(graph: BASS)
  aggregateOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult @join__field(graph: BASS)
  getParameterSpecification(iid: ID, id: String): ParameterSpecification @join__field(graph: BASS)
  queryParameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @join__field(graph: BASS)
  aggregateParameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult @join__field(graph: BASS)
  getPersonnelSpecification(iid: ID, id: String): PersonnelSpecification @join__field(graph: BASS)
  queryPersonnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: BASS)
  aggregatePersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: BASS)
  getPersonnelSpecificationProperty(iid: ID, id: String): PersonnelSpecificationProperty @join__field(graph: BASS)
  queryPersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @join__field(graph: BASS)
  aggregatePersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentSpecification(iid: ID, id: String): EquipmentSpecification @join__field(graph: BASS)
  queryEquipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: BASS)
  aggregateEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: BASS)
  getEquipmentSpecificationProperty(iid: ID, id: String): EquipmentSpecificationProperty @join__field(graph: BASS)
  queryEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @join__field(graph: BASS)
  aggregateEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetSpecification(iid: ID, id: String): PhysicalAssetSpecification @join__field(graph: BASS)
  queryPhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @join__field(graph: BASS)
  aggregatePhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult @join__field(graph: BASS)
  getPhysicalAssetSpecificationProperty(iid: ID, id: String): PhysicalAssetSpecificationProperty @join__field(graph: BASS)
  queryPhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getMaterialSpecification(iid: ID, id: String): MaterialSpecification @join__field(graph: BASS)
  queryMaterialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: BASS)
  aggregateMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: BASS)
  getMaterialSpecificationProperty(iid: ID, id: String): MaterialSpecificationProperty @join__field(graph: BASS)
  queryMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @join__field(graph: BASS)
  aggregateMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getOperationsSchedule(iid: ID!): OperationsSchedule @join__field(graph: BASS)
  queryOperationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule] @join__field(graph: BASS)
  aggregateOperationsSchedule(filter: OperationsScheduleFilter): OperationsScheduleAggregateResult @join__field(graph: BASS)
  getOperationsRequest(iid: ID!): OperationsRequest @join__field(graph: BASS)
  queryOperationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @join__field(graph: BASS)
  aggregateOperationsRequest(filter: OperationsRequestFilter): OperationsRequestAggregateResult @join__field(graph: BASS)
  getSegmentRequirement(iid: ID!): SegmentRequirement @join__field(graph: BASS)
  querySegmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @join__field(graph: BASS)
  aggregateSegmentRequirement(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult @join__field(graph: BASS)
  getSegmentParameter(iid: ID, id: String): SegmentParameter @join__field(graph: BASS)
  querySegmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter] @join__field(graph: BASS)
  aggregateSegmentParameter(filter: SegmentParameterFilter): SegmentParameterAggregateResult @join__field(graph: BASS)
  getPersonnelRequirement(iid: ID, id: String): PersonnelRequirement @join__field(graph: BASS)
  queryPersonnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @join__field(graph: BASS)
  aggregatePersonnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult @join__field(graph: BASS)
  getPersonnelRequirementProperty(iid: ID, id: String): PersonnelRequirementProperty @join__field(graph: BASS)
  queryPersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @join__field(graph: BASS)
  aggregatePersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentRequirement(iid: ID, id: String): EquipmentRequirement @join__field(graph: BASS)
  queryEquipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @join__field(graph: BASS)
  aggregateEquipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult @join__field(graph: BASS)
  getEquipmentRequirementProperty(iid: ID, id: String): EquipmentRequirementProperty @join__field(graph: BASS)
  queryEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @join__field(graph: BASS)
  aggregateEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetRequirement(iid: ID, id: String): PhysicalAssetRequirement @join__field(graph: BASS)
  queryPhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @join__field(graph: BASS)
  aggregatePhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult @join__field(graph: BASS)
  getPhysicalAssetRequirementProperty(iid: ID, id: String): PhysicalAssetRequirementProperty @join__field(graph: BASS)
  queryPhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult @join__field(graph: BASS)
  getMaterialRequirement(iid: ID, id: String): MaterialRequirement @join__field(graph: BASS)
  queryMaterialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @join__field(graph: BASS)
  aggregateMaterialRequirement(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult @join__field(graph: BASS)
  getMaterialRequirementProperty(iid: ID, id: String): MaterialRequirementProperty @join__field(graph: BASS)
  queryMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @join__field(graph: BASS)
  aggregateMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult @join__field(graph: BASS)
  getOperationsPerformance(iid: ID, id: String): OperationsPerformance @join__field(graph: BASS)
  queryOperationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance] @join__field(graph: BASS)
  aggregateOperationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformanceAggregateResult @join__field(graph: BASS)
  getOperationsResponse(iid: ID, id: String): OperationsResponse @join__field(graph: BASS)
  queryOperationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse] @join__field(graph: BASS)
  aggregateOperationsResponse(filter: OperationsResponseFilter): OperationsResponseAggregateResult @join__field(graph: BASS)
  getSegmentResponse(iid: ID, id: String): SegmentResponse @join__field(graph: BASS)
  querySegmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @join__field(graph: BASS)
  aggregateSegmentResponse(filter: SegmentResponseFilter): SegmentResponseAggregateResult @join__field(graph: BASS)
  getSegmentData(iid: ID!): SegmentData @join__field(graph: BASS)
  querySegmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData] @join__field(graph: BASS)
  aggregateSegmentData(filter: SegmentDataFilter): SegmentDataAggregateResult @join__field(graph: BASS)
  getPersonnelActual(iid: ID!): PersonnelActual @join__field(graph: BASS)
  queryPersonnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @join__field(graph: BASS)
  aggregatePersonnelActual(filter: PersonnelActualFilter): PersonnelActualAggregateResult @join__field(graph: BASS)
  getPersonnelActualProperty(iid: ID!): PersonnelActualProperty @join__field(graph: BASS)
  queryPersonnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @join__field(graph: BASS)
  aggregatePersonnelActualProperty(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentActual(iid: ID!): EquipmentActual @join__field(graph: BASS)
  queryEquipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @join__field(graph: BASS)
  aggregateEquipmentActual(filter: EquipmentActualFilter): EquipmentActualAggregateResult @join__field(graph: BASS)
  getEquipmentActualProperty(iid: ID!): EquipmentActualProperty @join__field(graph: BASS)
  queryEquipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @join__field(graph: BASS)
  aggregateEquipmentActualProperty(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetActual(iid: ID!): PhysicalAssetActual @join__field(graph: BASS)
  queryPhysicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @join__field(graph: BASS)
  aggregatePhysicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult @join__field(graph: BASS)
  getPhysicalAssetActualProperty(iid: ID!): PhysicalAssetActualProperty @join__field(graph: BASS)
  queryPhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult @join__field(graph: BASS)
  getMaterialActual(iid: ID, id: String): MaterialActual @join__field(graph: BASS)
  queryMaterialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @join__field(graph: BASS)
  aggregateMaterialActual(filter: MaterialActualFilter): MaterialActualAggregateResult @join__field(graph: BASS)
  getMaterialActualProperty(iid: ID!): MaterialActualProperty @join__field(graph: BASS)
  queryMaterialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @join__field(graph: BASS)
  aggregateMaterialActualProperty(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult @join__field(graph: BASS)
  getOperationsResponseProperty(iid: ID!): OperationsResponseProperty @join__field(graph: BASS)
  queryOperationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty] @join__field(graph: BASS)
  aggregateOperationsResponseProperty(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult @join__field(graph: BASS)
  getWorkMaster(iid: ID, id: String, version: String): WorkMaster @join__field(graph: BASS)
  queryWorkMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @join__field(graph: BASS)
  aggregateWorkMaster(filter: WorkMasterFilter): WorkMasterAggregateResult @join__field(graph: BASS)
  getWorkDirective(iid: ID, id: String, version: String): WorkDirective @join__field(graph: BASS)
  queryWorkDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @join__field(graph: BASS)
  aggregateWorkDirective(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult @join__field(graph: BASS)
  getWorkflowSpecification(iid: ID, id: String): WorkflowSpecification @join__field(graph: BASS)
  queryWorkflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification] @join__field(graph: BASS)
  aggregateWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationVersion(iid: ID, id: String, version: String): WorkflowSpecificationVersion @join__field(graph: BASS)
  queryWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion] @join__field(graph: BASS)
  aggregateWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationProperty(iid: ID, id: String): WorkflowSpecificationProperty @join__field(graph: BASS)
  queryWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getWorkflowTimer(iid: ID, id: String): WorkflowTimer @join__field(graph: BASS)
  queryWorkflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer] @join__field(graph: BASS)
  aggregateWorkflowTimer(filter: WorkflowTimerFilter): WorkflowTimerAggregateResult @join__field(graph: BASS)
  getWorkflowMessage(iid: ID, id: String): WorkflowMessage @join__field(graph: BASS)
  queryWorkflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage] @join__field(graph: BASS)
  aggregateWorkflowMessage(filter: WorkflowMessageFilter): WorkflowMessageAggregateResult @join__field(graph: BASS)
  getWorkflowError(iid: ID, id: String): WorkflowError @join__field(graph: BASS)
  queryWorkflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError] @join__field(graph: BASS)
  aggregateWorkflowError(filter: WorkflowErrorFilter): WorkflowErrorAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNode(iid: ID, id: String): WorkflowSpecificationNode @join__field(graph: BASS)
  queryWorkflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNode(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNodeTestCase(iid: ID, id: String): WorkflowSpecificationNodeTestCase @join__field(graph: BASS)
  queryWorkflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter): WorkflowSpecificationNodeTestCaseAggregateResult @join__field(graph: BASS)
  getWorkflowShape(iid: ID, id: String): WorkflowShape @join__field(graph: BASS)
  queryWorkflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape] @join__field(graph: BASS)
  aggregateWorkflowShape(filter: WorkflowShapeFilter): WorkflowShapeAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNodeVariable(iid: ID!): WorkflowSpecificationNodeVariable @join__field(graph: BASS)
  queryWorkflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter): WorkflowSpecificationNodeVariableAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNodeProperty(iid: ID, id: String): WorkflowSpecificationNodeProperty @join__field(graph: BASS)
  queryWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNodeType(iid: ID, id: String): WorkflowSpecificationNodeType @join__field(graph: BASS)
  queryWorkflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeTypeAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNodeTypeProperty(iid: ID, id: String): WorkflowSpecificationNodeTypeProperty @join__field(graph: BASS)
  queryWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationConnection(iid: ID, id: String): WorkflowSpecificationConnection @join__field(graph: BASS)
  queryWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection] @join__field(graph: BASS)
  aggregateWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult @join__field(graph: BASS)
  getWorkflowWaypoint(iid: ID!): WorkflowWaypoint @join__field(graph: BASS)
  queryWorkflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint] @join__field(graph: BASS)
  aggregateWorkflowWaypoint(filter: WorkflowWaypointFilter): WorkflowWaypointAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationConnectionProperty(iid: ID, id: String): WorkflowSpecificationConnectionProperty @join__field(graph: BASS)
  queryWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationConnectionType(iid: ID, id: String): WorkflowSpecificationConnectionType @join__field(graph: BASS)
  queryWorkflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType] @join__field(graph: BASS)
  aggregateWorkflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionTypeAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationConnectionTypeProperty(iid: ID, id: String): WorkflowSpecificationConnectionTypeProperty @join__field(graph: BASS)
  queryWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult @join__field(graph: BASS)
  getForm(iid: ID, id: String): Form @join__field(graph: BASS)
  queryForm(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form] @join__field(graph: BASS)
  aggregateForm(filter: FormFilter): FormAggregateResult @join__field(graph: BASS)
  getWorkSchedule(iid: ID, id: String): WorkSchedule @join__field(graph: BASS)
  queryWorkSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule] @join__field(graph: BASS)
  aggregateWorkSchedule(filter: WorkScheduleFilter): WorkScheduleAggregateResult @join__field(graph: BASS)
  getWorkRequest(iid: ID, id: String): WorkRequest @join__field(graph: BASS)
  queryWorkRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest] @join__field(graph: BASS)
  aggregateWorkRequest(filter: WorkRequestFilter): WorkRequestAggregateResult @join__field(graph: BASS)
  getJobList(iid: ID, id: String): JobList @join__field(graph: BASS)
  queryJobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList] @join__field(graph: BASS)
  aggregateJobList(filter: JobListFilter): JobListAggregateResult @join__field(graph: BASS)
  getJobOrder(iid: ID, id: String): JobOrder @join__field(graph: BASS)
  queryJobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: BASS)
  aggregateJobOrder(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: BASS)
  getJobOrderParameter(iid: ID, id: String): JobOrderParameter @join__field(graph: BASS)
  queryJobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter] @join__field(graph: BASS)
  aggregateJobOrderParameter(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult @join__field(graph: BASS)
  getWorkPerformance(iid: ID, id: String): WorkPerformance @join__field(graph: BASS)
  queryWorkPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance] @join__field(graph: BASS)
  aggregateWorkPerformance(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult @join__field(graph: BASS)
  getWorkResponse(iid: ID, id: String): WorkResponse @join__field(graph: BASS)
  queryWorkResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse] @join__field(graph: BASS)
  aggregateWorkResponse(filter: WorkResponseFilter): WorkResponseAggregateResult @join__field(graph: BASS)
  getJobResponseList(iid: ID, id: String): JobResponseList @join__field(graph: BASS)
  queryJobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList] @join__field(graph: BASS)
  aggregateJobResponseList(filter: JobResponseListFilter): JobResponseListAggregateResult @join__field(graph: BASS)
  getJobResponse(iid: ID, id: String): JobResponse @join__field(graph: BASS)
  queryJobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: BASS)
  aggregateJobResponse(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: BASS)
  getJobResponseData(iid: ID, id: String): JobResponseData @join__field(graph: BASS)
  queryJobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData] @join__field(graph: BASS)
  aggregateJobResponseData(filter: JobResponseDataFilter): JobResponseDataAggregateResult @join__field(graph: BASS)
  getWorkCalendarDefinitionEntry(iid: ID!): WorkCalendarDefinitionEntry @join__field(graph: BASS)
  queryWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry] @join__field(graph: BASS)
  aggregateWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult @join__field(graph: BASS)
  getWorkCalendarDefinitionEntryProperty(iid: ID, id: String): WorkCalendarDefinitionEntryProperty @join__field(graph: BASS)
  queryWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty] @join__field(graph: BASS)
  aggregateWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult @join__field(graph: BASS)
  getWorkCalendarEntry(iid: ID!): WorkCalendarEntry @join__field(graph: BASS)
  queryWorkCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @join__field(graph: BASS)
  aggregateWorkCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult @join__field(graph: BASS)
  getWorkCalendarEntryProperty(iid: ID, id: String): WorkCalendarEntryProperty @join__field(graph: BASS)
  queryWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty] @join__field(graph: BASS)
  aggregateWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult @join__field(graph: BASS)
  getWorkCalendar(iid: ID, name: String): WorkCalendar @join__field(graph: BASS)
  queryWorkCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar] @join__field(graph: BASS)
  aggregateWorkCalendar(filter: WorkCalendarFilter): WorkCalendarAggregateResult @join__field(graph: BASS)
  getInformationObject(iid: ID!): InformationObject @join__field(graph: BASS)
  queryInformationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  aggregateInformationObject(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  getStateModelDefinition(iid: ID, id: String): StateModelDefinition @join__field(graph: BASS)
  queryStateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @join__field(graph: BASS)
  aggregateStateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult @join__field(graph: BASS)
  getStateModelState(iid: ID, id: String): StateModelState @join__field(graph: BASS)
  queryStateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState] @join__field(graph: BASS)
  aggregateStateModelState(filter: StateModelStateFilter): StateModelStateAggregateResult @join__field(graph: BASS)
  getStateModelTransition(iid: ID, id: String): StateModelTransition @join__field(graph: BASS)
  queryStateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition] @join__field(graph: BASS)
  aggregateStateModelTransition(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult @join__field(graph: BASS)
  getStateModelEvent(iid: ID, id: String): StateModelEvent @join__field(graph: BASS)
  queryStateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent] @join__field(graph: BASS)
  aggregateStateModelEvent(filter: StateModelEventFilter): StateModelEventAggregateResult @join__field(graph: BASS)
  getStateModelAction(iid: ID, id: String): StateModelAction @join__field(graph: BASS)
  queryStateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction] @join__field(graph: BASS)
  aggregateStateModelAction(filter: StateModelActionFilter): StateModelActionAggregateResult @join__field(graph: BASS)
  getStateModelInstance(iid: ID, id: String): StateModelInstance @join__field(graph: BASS)
  queryStateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @join__field(graph: BASS)
  aggregateStateModelInstance(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult @join__field(graph: BASS)
  getStateTransitionInstance(iid: ID!): StateTransitionInstance @join__field(graph: BASS)
  queryStateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance] @join__field(graph: BASS)
  aggregateStateTransitionInstance(filter: StateTransitionInstanceFilter): StateTransitionInstanceAggregateResult @join__field(graph: BASS)
  getStateModelProperty(iid: ID, id: String): StateModelProperty @join__field(graph: BASS)
  queryStateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty] @join__field(graph: BASS)
  aggregateStateModelProperty(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult @join__field(graph: BASS)
  getAccessPermission(iid: ID!): AccessPermission @join__field(graph: BASS)
  queryAccessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  aggregateAccessPermission(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  getLibreService(id: ID, name: String): LibreService @join__field(graph: BASS)
  queryLibreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService] @join__field(graph: BASS)
  aggregateLibreService(filter: LibreServiceFilter): LibreServiceAggregateResult @join__field(graph: BASS)
  getDataSubscription(id: ID, name: String): DataSubscription @join__field(graph: BASS)
  queryDataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription] @join__field(graph: BASS)
  aggregateDataSubscription(filter: DataSubscriptionFilter): DataSubscriptionAggregateResult @join__field(graph: BASS)
  getMenu(iid: ID!): Menu @join__field(graph: BASS)
  queryMenu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu] @join__field(graph: BASS)
  aggregateMenu(filter: MenuFilter): MenuAggregateResult @join__field(graph: BASS)
  getEquipmentPropertyOverride(iid: ID, id: String): EquipmentPropertyOverride @join__field(graph: BASS)
  queryEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @join__field(graph: BASS)
  aggregateEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult @join__field(graph: BASS)
  getEquipmentNameAlias(iid: ID!): EquipmentNameAlias @join__field(graph: BASS)
  queryEquipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias] @join__field(graph: BASS)
  aggregateEquipmentNameAlias(filter: EquipmentNameAliasFilter): EquipmentNameAliasAggregateResult @join__field(graph: BASS)
  getPropertyNameAlias(iid: ID!): PropertyNameAlias @join__field(graph: BASS)
  queryPropertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: BASS)
  aggregatePropertyNameAlias(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: BASS)
  getPropertyValueAlias(iid: ID!): PropertyValueAlias @join__field(graph: BASS)
  queryPropertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias] @join__field(graph: BASS)
  aggregatePropertyValueAlias(filter: PropertyValueAliasFilter): PropertyValueAliasAggregateResult @join__field(graph: BASS)
  getDataSource(iid: ID, id: String): DataSource @join__field(graph: BASS)
  queryDataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource] @join__field(graph: BASS)
  aggregateDataSource(filter: DataSourceFilter): DataSourceAggregateResult @join__field(graph: BASS)
  getDataSourceVersion(iid: ID, id: String, version: String): DataSourceVersion @join__field(graph: BASS)
  queryDataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion] @join__field(graph: BASS)
  aggregateDataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersionAggregateResult @join__field(graph: BASS)
  getDataSourceTopic(iid: ID, id: String): DataSourceTopic @join__field(graph: BASS)
  queryDataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic] @join__field(graph: BASS)
  aggregateDataSourceTopic(filter: DataSourceTopicFilter): DataSourceTopicAggregateResult @join__field(graph: BASS)
  getDataSourceMethod(iid: ID, id: String): DataSourceMethod @join__field(graph: BASS)
  queryDataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod] @join__field(graph: BASS)
  aggregateDataSourceMethod(filter: DataSourceMethodFilter): DataSourceMethodAggregateResult @join__field(graph: BASS)
  getDataSourceMethodArgument(iid: ID, id: String): DataSourceMethodArgument @join__field(graph: BASS)
  queryDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument] @join__field(graph: BASS)
  aggregateDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter): DataSourceMethodArgumentAggregateResult @join__field(graph: BASS)
  getRule(iid: ID, id: String): Rule @join__field(graph: BASS)
  queryRule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @join__field(graph: BASS)
  aggregateRule(filter: RuleFilter): RuleAggregateResult @join__field(graph: BASS)
  getPayloadFieldDefinition(iid: ID!): PayloadFieldDefinition @join__field(graph: BASS)
  queryPayloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition] @join__field(graph: BASS)
  aggregatePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult @join__field(graph: BASS)
  getEnvironmentalVariable(iid: ID, id: String): EnvironmentalVariable @join__field(graph: BASS)
  queryEnvironmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable] @join__field(graph: BASS)
  aggregateEnvironmentalVariable(filter: EnvironmentalVariableFilter): EnvironmentalVariableAggregateResult @join__field(graph: BASS)
  getEnvironmentalVariableVersion(iid: ID, id: String, version: String): EnvironmentalVariableVersion @join__field(graph: BASS)
  queryEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion] @join__field(graph: BASS)
  aggregateEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersionAggregateResult @join__field(graph: BASS)
  getSecret(iid: ID, id: String): Secret @join__field(graph: BASS)
  querySecret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret] @join__field(graph: BASS)
  aggregateSecret(filter: SecretFilter): SecretAggregateResult @join__field(graph: BASS)
  getSecretVersion(iid: ID, id: String, version: String): SecretVersion @join__field(graph: BASS)
  querySecretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion] @join__field(graph: BASS)
  aggregateSecretVersion(filter: SecretVersionFilter): SecretVersionAggregateResult @join__field(graph: BASS)
  getSignature(iid: ID!): Signature @join__field(graph: BASS)
  querySignature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @join__field(graph: BASS)
  aggregateSignature(filter: SignatureFilter): SignatureAggregateResult @join__field(graph: BASS)
  getSignatureReason(iid: ID!): SignatureReason @join__field(graph: BASS)
  querySignatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason] @join__field(graph: BASS)
  aggregateSignatureReason(filter: SignatureReasonFilter): SignatureReasonAggregateResult @join__field(graph: BASS)
  getComment(iid: ID, id: String): Comment @join__field(graph: BASS)
  queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @join__field(graph: BASS)
  aggregateComment(filter: CommentFilter): CommentAggregateResult @join__field(graph: BASS)

  """ queryInstances takes a workflowSpecification id and version to search Tempo. DateTime range and number of results can be passed to filter results  
  """
  queryInstances(workflowSpecificationId: String, version: String, startTime: DateTime!, endTime: DateTime!, limit: String!, customQuery: String): [QueryInstancesResults] @join__field(graph: BPMN_ENGINE)

  """ getInstance takes a traceId  to pull the instance from Tempo """
  getInstance(traceId: String!): Instance! @join__field(graph: BPMN_ENGINE)
  getSyncEquipmentsFromDBtoNATSStatus: SyncEquipmentsFromDBtoNATSStatus! @join__field(graph: CORE)
}

type QueryInstancesResults
  @join__type(graph: BPMN_ENGINE)
{
  """ The Workflow Specification ID related to a instance """
  workflowSpecificationId: String

  """ The Workflow Specification Version related to a instance """
  version: String

  """ The Workflow Specification status related to a instance """
  versionStatus: String

  """ The trace (instance) ID of an instance """
  traceId: String

  """ The DateTime this instance executed """
  startTime: DateTime

  """ The amount of time spent executing an instance """
  duration: String

  """ If any node in an instance had an error """
  error: Boolean
}

type Rule
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  label: String! @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  processLocation: ProcessLocation @join__field(graph: BASS)
  triggerExpression: String! @join__field(graph: BASS)
  delayOption: Boolean @join__field(graph: BASS)
  delayTime: Int @join__field(graph: BASS)
  payloadFields(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition] @join__field(graph: BASS)
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @join__field(graph: BASS)
  triggerProperties(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @join__field(graph: BASS)
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @join__field(graph: BASS)
  operationsSegmentDependency(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependency @join__field(graph: BASS)
  processSegmentDependency(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependency @join__field(graph: BASS)
  equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  payloadFieldsAggregate(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult @join__field(graph: BASS)
  triggerPropertiesAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult @join__field(graph: BASS)
}

type RuleAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  triggerExpressionMin: String
  triggerExpressionMax: String
  delayTimeMin: Int
  delayTimeMax: Int
  delayTimeSum: Int
  delayTimeAvg: Float
}

input RuleFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  processLocation: ProcessLocation_hash
  has: [RuleHasFilter]
  and: [RuleFilter]
  or: [RuleFilter]
  not: RuleFilter
}

enum RuleHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  processLocation @join__enumValue(graph: BASS)
  triggerExpression @join__enumValue(graph: BASS)
  delayOption @join__enumValue(graph: BASS)
  delayTime @join__enumValue(graph: BASS)
  payloadFields @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  triggerProperties @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  operationsSegmentDependency @join__enumValue(graph: BASS)
  processSegmentDependency @join__enumValue(graph: BASS)
  equipmentClassVersion @join__enumValue(graph: BASS)
}

input RuleOrder
  @join__type(graph: BASS)
{
  asc: RuleOrderable
  desc: RuleOrderable
  then: RuleOrder
}

enum RuleOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  triggerExpression @join__enumValue(graph: BASS)
  delayTime @join__enumValue(graph: BASS)
}

input RulePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  processLocation: ProcessLocation
  triggerExpression: String
  delayOption: Boolean
  delayTime: Int
  payloadFields: [PayloadFieldDefinitionRef]
  workflowSpecification: WorkflowSpecificationRef
  triggerProperties: [EquipmentClassPropertyRef]
  operationsSegment: OperationsSegmentRef
  operationsSegmentDependency: OperationsSegmentDependencyRef
  processSegmentDependency: ProcessSegmentDependencyRef
  equipmentClassVersion: EquipmentClassVersionRef
}

input RuleRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  processLocation: ProcessLocation
  triggerExpression: String
  delayOption: Boolean
  delayTime: Int
  payloadFields: [PayloadFieldDefinitionRef]
  workflowSpecification: WorkflowSpecificationRef
  triggerProperties: [EquipmentClassPropertyRef]
  operationsSegment: OperationsSegmentRef
  operationsSegmentDependency: OperationsSegmentDependencyRef
  processSegmentDependency: ProcessSegmentDependencyRef
  equipmentClassVersion: EquipmentClassVersionRef
}

enum ScheduleState
  @join__type(graph: BASS)
{
  """ The requirements have not been released for planning. """
  FORECAST @join__enumValue(graph: BASS)

  """ The requirements have been released for execution. """
  RELEASED @join__enumValue(graph: BASS)

  """ A scheduling decision has been taken to cancel the requirements prior to commencement of execution. 
  """
  CANCELLED @join__enumValue(graph: BASS)

  """ Necessary preconditions have not been met and the job orders or activities are not ready to run. 
  """
  WAITING @join__enumValue(graph: BASS)

  """ Necessary preconditions have been met and the job orders or activities are ready to run. 
  """
  READY @join__enumValue(graph: BASS)

  """ Job orders or activities are in execution. """
  RUNNING @join__enumValue(graph: BASS)

  """ Job orders or activities have been completed and are no longer in execution. 
  """
  COMPLETED @join__enumValue(graph: BASS)

  """
   An execution decision has been taken to terminate the job orders or activities that may, or may not, 
  have been previously commenced. 
  """
  ABORTED @join__enumValue(graph: BASS)

  """ Job orders or activities have been temporarily stopped due to a constraint of some form. 
  """
  HELD @join__enumValue(graph: BASS)

  """ Job orders or activities have been temporarily stopped due to a deliberate decision within execution. 
  """
  SUSPENDED @join__enumValue(graph: BASS)

  """
   Job orders or activities have been completed and fully reconciled. No further changes, or restatement 
  of actuals is expected. 
  """
  CLOSED @join__enumValue(graph: BASS)
}

input ScheduleState_hash
  @join__type(graph: BASS)
{
  eq: ScheduleState
  in: [ScheduleState]
}

type Secret
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  versions(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion] @join__field(graph: BASS)
  activeVersion(filter: SecretVersionFilter): SecretVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: SecretVersionFilter): SecretVersionAggregateResult @join__field(graph: BASS)
}

type SecretAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  nextVersionMin: String
  nextVersionMax: String
  idMin: String
  idMax: String
}

input SecretFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [SecretHasFilter]
  and: [SecretFilter]
  or: [SecretFilter]
  not: SecretFilter
}

enum SecretHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
}

input SecretOrder
  @join__type(graph: BASS)
{
  asc: SecretOrderable
  desc: SecretOrderable
  then: SecretOrder
}

enum SecretOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
}

input SecretPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versions: [SecretVersionRef]
  activeVersion: SecretVersionRef
  nextVersion: String
  id: String
}

input SecretRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  versions: [SecretVersionRef]
  activeVersion: SecretVersionRef
  nextVersion: String
  id: String
}

type SecretVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  secret(filter: SecretFilter): Secret! @join__field(graph: BASS)
  isActiveVersionOf(filter: SecretFilter): Secret @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  value: String! @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
}

type SecretVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  versionMin: String
  versionMax: String
  idMin: String
  idMax: String
  valueMin: String
  valueMax: String
}

input SecretVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [SecretVersionHasFilter]
  and: [SecretVersionFilter]
  or: [SecretVersionFilter]
  not: SecretVersionFilter
}

enum SecretVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  secret @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input SecretVersionOrder
  @join__type(graph: BASS)
{
  asc: SecretVersionOrderable
  desc: SecretVersionOrderable
  then: SecretVersionOrder
}

enum SecretVersionOrderable
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input SecretVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  secret: SecretRef
  isActiveVersionOf: SecretRef
  id: String
  value: String
}

input SecretVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  version: String
  versionStatus: VersionState
  secret: SecretRef
  isActiveVersionOf: SecretRef
  id: String
  value: String
}

type SegmentData
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  segmentResponse(filter: SegmentResponseFilter): SegmentResponse
  children(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
  parent(filter: SegmentDataFilter): SegmentData
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: SegmentDataFilter): SegmentDataAggregateResult
}

type SegmentDataAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input SegmentDataFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [SegmentDataHasFilter]
  and: [SegmentDataFilter]
  or: [SegmentDataFilter]
  not: SegmentDataFilter
}

enum SegmentDataHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  segmentResponse @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input SegmentDataOrder
  @join__type(graph: BASS)
{
  asc: SegmentDataOrderable
  desc: SegmentDataOrderable
  then: SegmentDataOrder
}

enum SegmentDataOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input SegmentDataPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [SegmentDataRef]
  parent: SegmentDataRef
}

input SegmentDataRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  segmentResponse: SegmentResponseRef
  children: [SegmentDataRef]
  parent: SegmentDataRef
}

type SegmentParameter
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement!
  children(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
  parent(filter: SegmentParameterFilter): SegmentParameter
  parameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecification
  processSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameter
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type SegmentParameterAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input SegmentParameterFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [SegmentParameterHasFilter]
  and: [SegmentParameterFilter]
  or: [SegmentParameterFilter]
  not: SegmentParameterFilter
}

enum SegmentParameterHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  segmentRequirement @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  parameterSpecification @join__enumValue(graph: BASS)
  processSegmentParameter @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input SegmentParameterOrder
  @join__type(graph: BASS)
{
  asc: SegmentParameterOrderable
  desc: SegmentParameterOrderable
  then: SegmentParameterOrder
}

enum SegmentParameterOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input SegmentParameterPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  segmentRequirement: SegmentRequirementRef
  children: [SegmentParameterRef]
  parent: SegmentParameterRef
  parameterSpecification: ParameterSpecificationRef
  processSegmentParameter: ProcessSegmentParameterRef
  comments: [CommentRef]
}

input SegmentParameterRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  segmentRequirement: SegmentRequirementRef
  children: [SegmentParameterRef]
  parent: SegmentParameterRef
  parameterSpecification: ParameterSpecificationRef
  processSegmentParameter: ProcessSegmentParameterRef
  comments: [CommentRef]
}

type SegmentRequirement
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  operationsType: WorkType!
  earliestStartDate: DateTime
  latestEndDate: DateTime
  duration: Float
  durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  segmentState: ScheduleState!
  notes: String
  operationsRequest(filter: OperationsRequestFilter): OperationsRequest!
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  processSegment(filter: ProcessSegmentFilter): ProcessSegment
  children(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
  parent(filter: SegmentRequirementFilter): SegmentRequirement
  workRequests(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
  segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
  parameters(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
  personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
  equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
  physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
  materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
  workRequestsAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
  operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
  segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
  parametersAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
  personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
  equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
  physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
  materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
}

type SegmentRequirementAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  earliestStartDateMin: DateTime
  earliestStartDateMax: DateTime
  latestEndDateMin: DateTime
  latestEndDateMax: DateTime
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
  notesMin: String
  notesMax: String
}

input SegmentRequirementFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  earliestStartDate: DateTimeFilter
  latestEndDate: DateTimeFilter
  has: [SegmentRequirementHasFilter]
  and: [SegmentRequirementFilter]
  or: [SegmentRequirementFilter]
  not: SegmentRequirementFilter
}

enum SegmentRequirementHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  earliestStartDate @join__enumValue(graph: BASS)
  latestEndDate @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  durationUoM @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  segmentState @join__enumValue(graph: BASS)
  notes @join__enumValue(graph: BASS)
  operationsRequest @join__enumValue(graph: BASS)
  operationsDefinition @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  processSegment @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  workRequests @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
  operationsResponses @join__enumValue(graph: BASS)
  segmentResponses @join__enumValue(graph: BASS)
  parameters @join__enumValue(graph: BASS)
  personnelRequirements @join__enumValue(graph: BASS)
  equipmentRequirements @join__enumValue(graph: BASS)
  physicalAssetRequirements @join__enumValue(graph: BASS)
  materialRequirements @join__enumValue(graph: BASS)
}

input SegmentRequirementOrder
  @join__type(graph: BASS)
{
  asc: SegmentRequirementOrderable
  desc: SegmentRequirementOrderable
  then: SegmentRequirementOrder
}

enum SegmentRequirementOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  earliestStartDate @join__enumValue(graph: BASS)
  latestEndDate @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  notes @join__enumValue(graph: BASS)
}

input SegmentRequirementPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  operationsType: WorkType
  earliestStartDate: DateTime
  latestEndDate: DateTime
  duration: Float
  durationUoM: UnitOfMeasureRef
  hierarchyScope: HierarchyScopeRef
  segmentState: ScheduleState
  notes: String
  operationsRequest: OperationsRequestRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  processSegment: ProcessSegmentRef
  children: [SegmentRequirementRef]
  parent: SegmentRequirementRef
  workRequests: [WorkRequestRef]
  jobOrders: [JobOrderRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
  parameters: [SegmentParameterRef]
  personnelRequirements: [PersonnelRequirementRef]
  equipmentRequirements: [EquipmentRequirementRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  materialRequirements: [MaterialRequirementRef]
}

input SegmentRequirementRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  operationsType: WorkType
  earliestStartDate: DateTime
  latestEndDate: DateTime
  duration: Float
  durationUoM: UnitOfMeasureRef
  hierarchyScope: HierarchyScopeRef
  segmentState: ScheduleState
  notes: String
  operationsRequest: OperationsRequestRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  processSegment: ProcessSegmentRef
  children: [SegmentRequirementRef]
  parent: SegmentRequirementRef
  workRequests: [WorkRequestRef]
  jobOrders: [JobOrderRef]
  operationsResponses: [OperationsResponseRef]
  segmentResponses: [SegmentResponseRef]
  parameters: [SegmentParameterRef]
  personnelRequirements: [PersonnelRequirementRef]
  equipmentRequirements: [EquipmentRequirementRef]
  physicalAssetRequirements: [PhysicalAssetRequirementRef]
  materialRequirements: [MaterialRequirementRef]
}

type SegmentResponse
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  operationsType: WorkType!
  actualStartDateTime: DateTime
  actualEndDateTime: DateTime
  postingDateTime: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  segmentState: JobState
  operationsDefinitions(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
  operationsSegments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  processSegment(filter: ProcessSegmentFilter): ProcessSegment
  operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
  workResponses(filter: WorkResponseFilter): WorkResponse
  jobResponses(filter: JobResponseFilter): JobResponse
  children(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
  parent(filter: SegmentResponseFilter): SegmentResponse
  operationsResponse(filter: OperationsResponseFilter): OperationsResponse!
  segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  operationsDefinitionsAggregate(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
  operationsSegmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
  operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
  segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
  childrenAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
  segmentDataAggregate(filter: SegmentDataFilter): SegmentDataAggregateResult
  personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
  equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
  physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
  materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
}

type SegmentResponseAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  actualStartDateTimeMin: DateTime
  actualStartDateTimeMax: DateTime
  actualEndDateTimeMin: DateTime
  actualEndDateTimeMax: DateTime
  postingDateTimeMin: DateTime
  postingDateTimeMax: DateTime
}

input SegmentResponseFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  operationsType: WorkType_hash
  actualStartDateTime: DateTimeFilter
  actualEndDateTime: DateTimeFilter
  postingDateTime: DateTimeFilter
  segmentState: JobState_hash
  has: [SegmentResponseHasFilter]
  and: [SegmentResponseFilter]
  or: [SegmentResponseFilter]
  not: SegmentResponseFilter
}

enum SegmentResponseHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  operationsType @join__enumValue(graph: BASS)
  actualStartDateTime @join__enumValue(graph: BASS)
  actualEndDateTime @join__enumValue(graph: BASS)
  postingDateTime @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  segmentState @join__enumValue(graph: BASS)
  operationsDefinitions @join__enumValue(graph: BASS)
  operationsSegments @join__enumValue(graph: BASS)
  processSegment @join__enumValue(graph: BASS)
  operationsRequests @join__enumValue(graph: BASS)
  segmentRequirements @join__enumValue(graph: BASS)
  workResponses @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  operationsResponse @join__enumValue(graph: BASS)
  segmentData @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
}

input SegmentResponseOrder
  @join__type(graph: BASS)
{
  asc: SegmentResponseOrderable
  desc: SegmentResponseOrderable
  then: SegmentResponseOrder
}

enum SegmentResponseOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  actualStartDateTime @join__enumValue(graph: BASS)
  actualEndDateTime @join__enumValue(graph: BASS)
  postingDateTime @join__enumValue(graph: BASS)
}

input SegmentResponsePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  operationsType: WorkType
  actualStartDateTime: DateTime
  actualEndDateTime: DateTime
  postingDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  segmentState: JobState
  operationsDefinitions: [OperationsDefinitionRef]
  operationsSegments: [OperationsSegmentRef]
  processSegment: ProcessSegmentRef
  operationsRequests: [OperationsRequestRef]
  segmentRequirements: [SegmentRequirementRef]
  workResponses: WorkResponseRef
  jobResponses: JobResponseRef
  children: [SegmentResponseRef]
  parent: SegmentResponseRef
  operationsResponse: OperationsResponseRef
  segmentData: [SegmentDataRef]
  personnelActual: [PersonnelActualRef]
  equipmentActual: [EquipmentActualRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  materialActual: [MaterialActualRef]
}

input SegmentResponseRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  operationsType: WorkType
  actualStartDateTime: DateTime
  actualEndDateTime: DateTime
  postingDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  segmentState: JobState
  operationsDefinitions: [OperationsDefinitionRef]
  operationsSegments: [OperationsSegmentRef]
  processSegment: ProcessSegmentRef
  operationsRequests: [OperationsRequestRef]
  segmentRequirements: [SegmentRequirementRef]
  workResponses: WorkResponseRef
  jobResponses: JobResponseRef
  children: [SegmentResponseRef]
  parent: SegmentResponseRef
  operationsResponse: OperationsResponseRef
  segmentData: [SegmentDataRef]
  personnelActual: [PersonnelActualRef]
  equipmentActual: [EquipmentActualRef]
  physicalAssetActual: [PhysicalAssetActualRef]
  materialActual: [MaterialActualRef]
}

type Signature
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  timestamp: DateTime!
  changeIndication: String!
  signatureReason(filter: SignatureReasonFilter): SignatureReason!
  personVersion(filter: PersonVersionFilter): PersonVersion!
  comment(filter: CommentFilter): Comment
  signatureForAComment(filter: CommentFilter): Comment
  event(filter: EventFilter): Event
  alarmEvent(filter: AlarmEventFilter): AlarmEvent
  workResponse(filter: WorkResponseFilter): WorkResponse
  jobResponse(filter: JobResponseFilter): JobResponse
  jobResponseData(filter: JobResponseDataFilter): JobResponseData
  materialActual(filter: MaterialActualFilter): MaterialActual
  equipmentActual(filter: EquipmentActualFilter): EquipmentActual
  physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual
  personnelActual(filter: PersonnelActualFilter): PersonnelActual
  workRequest(filter: WorkRequestFilter): WorkRequest
  jobOrder(filter: JobOrderFilter): JobOrder
  materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement
  equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement
  physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement
  personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement
  workMaster(filter: WorkMasterFilter): WorkMaster
  workDirective(filter: WorkDirectiveFilter): WorkDirective
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type SignatureAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  timestampMin: DateTime
  timestampMax: DateTime
  changeIndicationMin: String
  changeIndicationMax: String
}

input SignatureFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [SignatureHasFilter]
  and: [SignatureFilter]
  or: [SignatureFilter]
  not: SignatureFilter
}

enum SignatureHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  timestamp @join__enumValue(graph: BASS)
  changeIndication @join__enumValue(graph: BASS)
  signatureReason @join__enumValue(graph: BASS)
  personVersion @join__enumValue(graph: BASS)
  comment @join__enumValue(graph: BASS)
  signatureForAComment @join__enumValue(graph: BASS)
  event @join__enumValue(graph: BASS)
  alarmEvent @join__enumValue(graph: BASS)
  workResponse @join__enumValue(graph: BASS)
  jobResponse @join__enumValue(graph: BASS)
  jobResponseData @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  workRequest @join__enumValue(graph: BASS)
  jobOrder @join__enumValue(graph: BASS)
  materialRequirement @join__enumValue(graph: BASS)
  equipmentRequirement @join__enumValue(graph: BASS)
  physicalAssetRequirement @join__enumValue(graph: BASS)
  personnelRequirement @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  workDirective @join__enumValue(graph: BASS)
}

input SignatureOrder
  @join__type(graph: BASS)
{
  asc: SignatureOrderable
  desc: SignatureOrderable
  then: SignatureOrder
}

enum SignatureOrderable
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  timestamp @join__enumValue(graph: BASS)
  changeIndication @join__enumValue(graph: BASS)
}

input SignaturePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  timestamp: DateTime
  changeIndication: String
  signatureReason: SignatureReasonRef
  personVersion: PersonVersionRef
  comment: CommentRef
  signatureForAComment: CommentRef
  event: EventRef
  alarmEvent: AlarmEventRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  materialActual: MaterialActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  personnelActual: PersonnelActualRef
  workRequest: WorkRequestRef
  jobOrder: JobOrderRef
  materialRequirement: MaterialRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  personnelRequirement: PersonnelRequirementRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type SignatureReason
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
}

type SignatureReasonAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
}

input SignatureReasonFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [SignatureReasonHasFilter]
  and: [SignatureReasonFilter]
  or: [SignatureReasonFilter]
  not: SignatureReasonFilter
}

enum SignatureReasonHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
}

input SignatureReasonOrder
  @join__type(graph: BASS)
{
  asc: SignatureReasonOrderable
  desc: SignatureReasonOrderable
  then: SignatureReasonOrder
}

enum SignatureReasonOrderable
  @join__type(graph: BASS)
{
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
}

input SignatureReasonPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  signatures: [SignatureRef]
}

input SignatureReasonRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  signatures: [SignatureRef]
}

input SignatureRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  timestamp: DateTime
  changeIndication: String
  signatureReason: SignatureReasonRef
  personVersion: PersonVersionRef
  comment: CommentRef
  signatureForAComment: CommentRef
  event: EventRef
  alarmEvent: AlarmEventRef
  workResponse: WorkResponseRef
  jobResponse: JobResponseRef
  jobResponseData: JobResponseDataRef
  materialActual: MaterialActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  personnelActual: PersonnelActualRef
  workRequest: WorkRequestRef
  jobOrder: JobOrderRef
  materialRequirement: MaterialRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  personnelRequirement: PersonnelRequirementRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
}

type SpatialDefinition
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  pointValue: Point
  polygonValue: Polygon
  multiPolygonValue: MultiPolygon
  srid: String
  sridAuthority: String
}

type SpatialDefinitionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  sridMin: String
  sridMax: String
  sridAuthorityMin: String
  sridAuthorityMax: String
}

input SpatialDefinitionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  srid: StringExactFilter_StringFullTextFilter
  sridAuthority: StringExactFilter_StringFullTextFilter
  has: [SpatialDefinitionHasFilter]
  and: [SpatialDefinitionFilter]
  or: [SpatialDefinitionFilter]
  not: SpatialDefinitionFilter
}

enum SpatialDefinitionHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  pointValue @join__enumValue(graph: BASS)
  polygonValue @join__enumValue(graph: BASS)
  multiPolygonValue @join__enumValue(graph: BASS)
  srid @join__enumValue(graph: BASS)
  sridAuthority @join__enumValue(graph: BASS)
}

input SpatialDefinitionOrder
  @join__type(graph: BASS)
{
  asc: SpatialDefinitionOrderable
  desc: SpatialDefinitionOrderable
  then: SpatialDefinitionOrder
}

enum SpatialDefinitionOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  srid @join__enumValue(graph: BASS)
  sridAuthority @join__enumValue(graph: BASS)
}

input SpatialDefinitionPatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  pointValue: PointRef
  polygonValue: PolygonRef
  multiPolygonValue: MultiPolygonRef
  srid: String
  sridAuthority: String
}

input SpatialDefinitionRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  pointValue: PointRef
  polygonValue: PolygonRef
  multiPolygonValue: MultiPolygonRef
  srid: String
  sridAuthority: String
}

type StateModelAction
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  actionType: StateModelActionType
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification
  variables: String
  transition(filter: StateModelTransitionFilter): StateModelTransition
  isEntryActionForState(filter: StateModelStateFilter): StateModelState
  isExitActionForState(filter: StateModelStateFilter): StateModelState
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type StateModelActionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  variablesMin: String
  variablesMax: String
}

input StateModelActionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  actionType: StateModelActionType_hash
  has: [StateModelActionHasFilter]
  and: [StateModelActionFilter]
  or: [StateModelActionFilter]
  not: StateModelActionFilter
}

enum StateModelActionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  actionType @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  variables @join__enumValue(graph: BASS)
  transition @join__enumValue(graph: BASS)
  isEntryActionForState @join__enumValue(graph: BASS)
  isExitActionForState @join__enumValue(graph: BASS)
}

input StateModelActionOrder
  @join__type(graph: BASS)
{
  asc: StateModelActionOrderable
  desc: StateModelActionOrderable
  then: StateModelActionOrder
}

enum StateModelActionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  variables @join__enumValue(graph: BASS)
}

input StateModelActionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  actionType: StateModelActionType
  workflowSpecification: WorkflowSpecificationRef
  variables: String
  transition: StateModelTransitionRef
  isEntryActionForState: StateModelStateRef
  isExitActionForState: StateModelStateRef
}

input StateModelActionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  actionType: StateModelActionType
  workflowSpecification: WorkflowSpecificationRef
  variables: String
  transition: StateModelTransitionRef
  isEntryActionForState: StateModelStateRef
  isExitActionForState: StateModelStateRef
}

enum StateModelActionType
  @join__type(graph: BASS)
{
  ENTRY @join__enumValue(graph: BASS)
  EXIT @join__enumValue(graph: BASS)
}

input StateModelActionType_hash
  @join__type(graph: BASS)
{
  eq: StateModelActionType
  in: [StateModelActionType]
}

type StateModelDefinition
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  states(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
  transitions(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
  events(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
  bpmnXMLEncoded: String!
  equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion
  equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion
  materialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersion
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion
  personnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion
  personVersion(filter: PersonVersionFilter): PersonVersion
  physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion
  physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion
  instances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
  properties(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  statesAggregate(filter: StateModelStateFilter): StateModelStateAggregateResult
  transitionsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
  eventsAggregate(filter: StateModelEventFilter): StateModelEventAggregateResult
  instancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
  propertiesAggregate(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult
}

type StateModelDefinitionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  bpmnXMLEncodedMin: String
  bpmnXMLEncodedMax: String
}

input StateModelDefinitionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  has: [StateModelDefinitionHasFilter]
  and: [StateModelDefinitionFilter]
  or: [StateModelDefinitionFilter]
  not: StateModelDefinitionFilter
}

enum StateModelDefinitionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  states @join__enumValue(graph: BASS)
  transitions @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  bpmnXMLEncoded @join__enumValue(graph: BASS)
  equipmentClassVersion @join__enumValue(graph: BASS)
  equipmentVersion @join__enumValue(graph: BASS)
  materialClassVersion @join__enumValue(graph: BASS)
  materialDefinitionVersion @join__enumValue(graph: BASS)
  personnelClassVersion @join__enumValue(graph: BASS)
  personVersion @join__enumValue(graph: BASS)
  physicalAssetClassVersion @join__enumValue(graph: BASS)
  physicalAssetVersion @join__enumValue(graph: BASS)
  instances @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
}

input StateModelDefinitionOrder
  @join__type(graph: BASS)
{
  asc: StateModelDefinitionOrderable
  desc: StateModelDefinitionOrderable
  then: StateModelDefinitionOrder
}

enum StateModelDefinitionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  bpmnXMLEncoded @join__enumValue(graph: BASS)
}

input StateModelDefinitionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  states: [StateModelStateRef]
  transitions: [StateModelTransitionRef]
  events: [StateModelEventRef]
  bpmnXMLEncoded: String
  equipmentClassVersion: EquipmentClassVersionRef
  equipmentVersion: EquipmentVersionRef
  materialClassVersion: MaterialClassVersionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  personnelClassVersion: PersonnelClassVersionRef
  personVersion: PersonVersionRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  physicalAssetVersion: PhysicalAssetVersionRef
  instances: [StateModelInstanceRef]
  properties: [StateModelPropertyRef]
}

input StateModelDefinitionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  description: String
  hierarchyScope: HierarchyScopeRef
  states: [StateModelStateRef]
  transitions: [StateModelTransitionRef]
  events: [StateModelEventRef]
  bpmnXMLEncoded: String
  equipmentClassVersion: EquipmentClassVersionRef
  equipmentVersion: EquipmentVersionRef
  materialClassVersion: MaterialClassVersionRef
  materialDefinitionVersion: MaterialDefinitionVersionRef
  personnelClassVersion: PersonnelClassVersionRef
  personVersion: PersonVersionRef
  physicalAssetClassVersion: PhysicalAssetClassVersionRef
  physicalAssetVersion: PhysicalAssetVersionRef
  instances: [StateModelInstanceRef]
  properties: [StateModelPropertyRef]
}

type StateModelEvent
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition!
  transitions(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  transitionsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
}

type StateModelEventAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input StateModelEventFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [StateModelEventHasFilter]
  and: [StateModelEventFilter]
  or: [StateModelEventFilter]
  not: StateModelEventFilter
}

enum StateModelEventHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  stateModelDefinition @join__enumValue(graph: BASS)
  transitions @join__enumValue(graph: BASS)
}

input StateModelEventOrder
  @join__type(graph: BASS)
{
  asc: StateModelEventOrderable
  desc: StateModelEventOrderable
  then: StateModelEventOrder
}

enum StateModelEventOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input StateModelEventPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  stateModelDefinition: StateModelDefinitionRef
  transitions: [StateModelTransitionRef]
}

input StateModelEventRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  stateModelDefinition: StateModelDefinitionRef
  transitions: [StateModelTransitionRef]
}

type StateModelInstance
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  label: String!
  stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  state: String
  transitions(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
  equipment(filter: EquipmentFilter): Equipment
  materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition
  materialLot(filter: MaterialLotFilter): MaterialLot
  materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  person(filter: PersonFilter): Person
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  transitionsAggregate(filter: StateTransitionInstanceFilter): StateTransitionInstanceAggregateResult
}

type StateModelInstanceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  descriptionMin: String
  descriptionMax: String
  stateMin: String
  stateMax: String
}

input StateModelInstanceFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  state: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [StateModelInstanceHasFilter]
  and: [StateModelInstanceFilter]
  or: [StateModelInstanceFilter]
  not: StateModelInstanceFilter
}

enum StateModelInstanceHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  stateModelDefinition @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  state @join__enumValue(graph: BASS)
  transitions @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  materialDefinition @join__enumValue(graph: BASS)
  materialLot @join__enumValue(graph: BASS)
  materialSubLot @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
}

input StateModelInstanceOrder
  @join__type(graph: BASS)
{
  asc: StateModelInstanceOrderable
  desc: StateModelInstanceOrderable
  then: StateModelInstanceOrder
}

enum StateModelInstanceOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  state @join__enumValue(graph: BASS)
}

input StateModelInstancePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  stateModelDefinition: StateModelDefinitionRef
  description: String
  hierarchyScope: HierarchyScopeRef
  state: String
  transitions: [StateTransitionInstanceRef]
  equipment: EquipmentRef
  materialDefinition: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  person: PersonRef
  physicalAsset: PhysicalAssetRef
}

input StateModelInstanceRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  label: String
  stateModelDefinition: StateModelDefinitionRef
  description: String
  hierarchyScope: HierarchyScopeRef
  state: String
  transitions: [StateTransitionInstanceRef]
  equipment: EquipmentRef
  materialDefinition: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  person: PersonRef
  physicalAsset: PhysicalAssetRef
}

type StateModelProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  StateModel(filter: StateModelDefinitionFilter): StateModelDefinition!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
  parent(filter: StateModelPropertyFilter): StateModelProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult
}

type StateModelPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
}

input StateModelPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [StateModelPropertyHasFilter]
  and: [StateModelPropertyFilter]
  or: [StateModelPropertyFilter]
  not: StateModelPropertyFilter
}

enum StateModelPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  StateModel @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input StateModelPropertyOrder
  @join__type(graph: BASS)
{
  asc: StateModelPropertyOrderable
  desc: StateModelPropertyOrderable
  then: StateModelPropertyOrder
}

enum StateModelPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
}

input StateModelPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  StateModel: StateModelDefinitionRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [StateModelPropertyRef]
  parent: StateModelPropertyRef
}

input StateModelPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  StateModel: StateModelDefinitionRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [StateModelPropertyRef]
  parent: StateModelPropertyRef
}

type StateModelState
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  parent(filter: StateModelStateFilter): StateModelState
  children(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
  id: String!
  label: String!
  isInitialState: Boolean
  isFinalState: Boolean
  stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition
  inflows(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
  outflows(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
  onEntry(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
  onExit(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: StateModelStateFilter): StateModelStateAggregateResult
  inflowsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
  outflowsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
  onEntryAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult
  onExitAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult
}

type StateModelStateAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
}

input StateModelStateFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  isInitialState: Boolean
  isFinalState: Boolean
  has: [StateModelStateHasFilter]
  and: [StateModelStateFilter]
  or: [StateModelStateFilter]
  not: StateModelStateFilter
}

enum StateModelStateHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  isInitialState @join__enumValue(graph: BASS)
  isFinalState @join__enumValue(graph: BASS)
  stateModelDefinition @join__enumValue(graph: BASS)
  inflows @join__enumValue(graph: BASS)
  outflows @join__enumValue(graph: BASS)
  onEntry @join__enumValue(graph: BASS)
  onExit @join__enumValue(graph: BASS)
}

input StateModelStateOrder
  @join__type(graph: BASS)
{
  asc: StateModelStateOrderable
  desc: StateModelStateOrderable
  then: StateModelStateOrder
}

enum StateModelStateOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
}

input StateModelStatePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  parent: StateModelStateRef
  children: [StateModelStateRef]
  id: String
  label: String
  isInitialState: Boolean
  isFinalState: Boolean
  stateModelDefinition: StateModelDefinitionRef
  inflows: [StateModelTransitionRef]
  outflows: [StateModelTransitionRef]
  onEntry: [StateModelActionRef]
  onExit: [StateModelActionRef]
}

input StateModelStateRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  parent: StateModelStateRef
  children: [StateModelStateRef]
  id: String
  label: String
  isInitialState: Boolean
  isFinalState: Boolean
  stateModelDefinition: StateModelDefinitionRef
  inflows: [StateModelTransitionRef]
  outflows: [StateModelTransitionRef]
  onEntry: [StateModelActionRef]
  onExit: [StateModelActionRef]
}

type StateModelTransition
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String!
  label: String!
  stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition!
  stateModelEvents(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
  from(filter: StateModelStateFilter): StateModelState!
  to(filter: StateModelStateFilter): StateModelState!
  condition: String
  stateModelActions(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  stateModelEventsAggregate(filter: StateModelEventFilter): StateModelEventAggregateResult
  stateModelActionsAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult
}

type StateModelTransitionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  conditionMin: String
  conditionMax: String
}

input StateModelTransitionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [StateModelTransitionHasFilter]
  and: [StateModelTransitionFilter]
  or: [StateModelTransitionFilter]
  not: StateModelTransitionFilter
}

enum StateModelTransitionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  stateModelDefinition @join__enumValue(graph: BASS)
  stateModelEvents @join__enumValue(graph: BASS)
  from @join__enumValue(graph: BASS)
  to @join__enumValue(graph: BASS)
  condition @join__enumValue(graph: BASS)
  stateModelActions @join__enumValue(graph: BASS)
}

input StateModelTransitionOrder
  @join__type(graph: BASS)
{
  asc: StateModelTransitionOrderable
  desc: StateModelTransitionOrderable
  then: StateModelTransitionOrder
}

enum StateModelTransitionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  condition @join__enumValue(graph: BASS)
}

input StateModelTransitionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  stateModelDefinition: StateModelDefinitionRef
  stateModelEvents: [StateModelEventRef]
  from: StateModelStateRef
  to: StateModelStateRef
  condition: String
  stateModelActions: [StateModelActionRef]
}

input StateModelTransitionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  label: String
  stateModelDefinition: StateModelDefinitionRef
  stateModelEvents: [StateModelEventRef]
  from: StateModelStateRef
  to: StateModelStateRef
  condition: String
  stateModelActions: [StateModelActionRef]
}

type StateTransitionInstance
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  stateModelInstance(filter: StateModelInstanceFilter): StateModelInstance!
  timestamp: DateTime!
  fromState: String
  toState: String!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type StateTransitionInstanceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  timestampMin: DateTime
  timestampMax: DateTime
  fromStateMin: String
  fromStateMax: String
  toStateMin: String
  toStateMax: String
}

input StateTransitionInstanceFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  timestamp: DateTimeFilter
  fromState: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  toState: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [StateTransitionInstanceHasFilter]
  and: [StateTransitionInstanceFilter]
  or: [StateTransitionInstanceFilter]
  not: StateTransitionInstanceFilter
}

enum StateTransitionInstanceHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  stateModelInstance @join__enumValue(graph: BASS)
  timestamp @join__enumValue(graph: BASS)
  fromState @join__enumValue(graph: BASS)
  toState @join__enumValue(graph: BASS)
}

input StateTransitionInstanceOrder
  @join__type(graph: BASS)
{
  asc: StateTransitionInstanceOrderable
  desc: StateTransitionInstanceOrderable
  then: StateTransitionInstanceOrder
}

enum StateTransitionInstanceOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  timestamp @join__enumValue(graph: BASS)
  fromState @join__enumValue(graph: BASS)
  toState @join__enumValue(graph: BASS)
}

input StateTransitionInstancePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  stateModelInstance: StateModelInstanceRef
  timestamp: DateTime
  fromState: String
  toState: String
}

input StateTransitionInstanceRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  stateModelInstance: StateModelInstanceRef
  timestamp: DateTime
  fromState: String
  toState: String
}

input StringExactFilter
  @join__type(graph: BASS)
{
  eq: String
  in: [String]
  le: String
  lt: String
  ge: String
  gt: String
  between: StringRange
}

input StringExactFilter_StringFullTextFilter
  @join__type(graph: BASS)
{
  eq: String
  in: [String]
  le: String
  lt: String
  ge: String
  gt: String
  between: StringRange
  alloftext: String
  anyoftext: String
}

input StringExactFilter_StringFullTextFilter_StringRegExpFilter
  @join__type(graph: BASS)
{
  eq: String
  in: [String]
  le: String
  lt: String
  ge: String
  gt: String
  between: StringRange
  alloftext: String
  anyoftext: String
  regexp: String
}

input StringFullTextFilter
  @join__type(graph: BASS)
{
  alloftext: String
  anyoftext: String
}

input StringHashFilter
  @join__type(graph: BASS)
{
  eq: String
  in: [String]
}

input StringRange
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  min: String!
  max: String!
}

input StringRegExpFilter
  @join__type(graph: BASS)
{
  regexp: String
}

input StringTermFilter
  @join__type(graph: BASS)
{
  allofterms: String
  anyofterms: String
}

type Subscription
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  getEvent(iid: ID!): Event @join__field(graph: BASS)
  queryEvent(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @join__field(graph: BASS)
  aggregateEvent(filter: EventFilter): EventAggregateResult @join__field(graph: BASS)
  getAlarmEvent(iid: ID!): AlarmEvent @join__field(graph: BASS)
  queryAlarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent] @join__field(graph: BASS)
  aggregateAlarmEvent(filter: AlarmEventFilter): AlarmEventAggregateResult @join__field(graph: BASS)
  getEventType(iid: ID!): EventType @join__field(graph: BASS)
  queryEventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType] @join__field(graph: BASS)
  aggregateEventType(filter: EventTypeFilter): EventTypeAggregateResult @join__field(graph: BASS)
  getEventSubtype(iid: ID!): EventSubtype @join__field(graph: BASS)
  queryEventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype] @join__field(graph: BASS)
  aggregateEventSubtype(filter: EventSubtypeFilter): EventSubtypeAggregateResult @join__field(graph: BASS)
  getEventProperty(iid: ID!): EventProperty @join__field(graph: BASS)
  queryEventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty] @join__field(graph: BASS)
  aggregateEventProperty(filter: EventPropertyFilter): EventPropertyAggregateResult @join__field(graph: BASS)
  getEventAssociation(iid: ID!): EventAssociation @join__field(graph: BASS)
  queryEventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation] @join__field(graph: BASS)
  aggregateEventAssociation(filter: EventAssociationFilter): EventAssociationAggregateResult @join__field(graph: BASS)
  getHierarchyScope(iid: ID, id: String): HierarchyScope @join__field(graph: BASS)
  queryHierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope] @join__field(graph: BASS)
  aggregateHierarchyScope(filter: HierarchyScopeFilter): HierarchyScopeAggregateResult @join__field(graph: BASS)
  getSpatialDefinition(iid: ID, id: String): SpatialDefinition @join__field(graph: BASS)
  querySpatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition] @join__field(graph: BASS)
  aggregateSpatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinitionAggregateResult @join__field(graph: BASS)
  getOperationalLocationClass(iid: ID, id: String): OperationalLocationClass @join__field(graph: BASS)
  queryOperationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @join__field(graph: BASS)
  aggregateOperationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult @join__field(graph: BASS)
  getOperationalLocationClassVersion(iid: ID, id: String, version: String): OperationalLocationClassVersion @join__field(graph: BASS)
  queryOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @join__field(graph: BASS)
  aggregateOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult @join__field(graph: BASS)
  getOperationalLocationClassProperty(iid: ID, id: String): OperationalLocationClassProperty @join__field(graph: BASS)
  queryOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty] @join__field(graph: BASS)
  aggregateOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult @join__field(graph: BASS)
  getOperationalLocation(iid: ID, id: String): OperationalLocation @join__field(graph: BASS)
  queryOperationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation] @join__field(graph: BASS)
  aggregateOperationalLocation(filter: OperationalLocationFilter): OperationalLocationAggregateResult @join__field(graph: BASS)
  getOperationalLocationProperty(iid: ID, id: String): OperationalLocationProperty @join__field(graph: BASS)
  queryOperationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @join__field(graph: BASS)
  aggregateOperationalLocationProperty(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult @join__field(graph: BASS)
  getPersonnelClass(iid: ID, id: String): PersonnelClass @join__field(graph: BASS)
  queryPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @join__field(graph: BASS)
  aggregatePersonnelClass(filter: PersonnelClassFilter): PersonnelClassAggregateResult @join__field(graph: BASS)
  getPersonnelClassVersion(iid: ID, id: String, version: String): PersonnelClassVersion @join__field(graph: BASS)
  queryPersonnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion] @join__field(graph: BASS)
  aggregatePersonnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult @join__field(graph: BASS)
  getPersonnelClassProperty(iid: ID, id: String): PersonnelClassProperty @join__field(graph: BASS)
  queryPersonnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty] @join__field(graph: BASS)
  aggregatePersonnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult @join__field(graph: BASS)
  getPerson(iid: ID, id: String): Person @join__field(graph: BASS)
  queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person] @join__field(graph: BASS)
  aggregatePerson(filter: PersonFilter): PersonAggregateResult @join__field(graph: BASS)
  getPersonVersion(iid: ID, id: String, version: String): PersonVersion @join__field(graph: BASS)
  queryPersonVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion] @join__field(graph: BASS)
  aggregatePersonVersion(filter: PersonVersionFilter): PersonVersionAggregateResult @join__field(graph: BASS)
  getPersonProperty(iid: ID, id: String): PersonProperty @join__field(graph: BASS)
  queryPersonProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty] @join__field(graph: BASS)
  aggregatePersonProperty(filter: PersonPropertyFilter): PersonPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentClass(iid: ID, id: String): EquipmentClass @join__field(graph: BASS)
  queryEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: BASS)
  aggregateEquipmentClass(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: BASS)
  getEquipmentClassVersion(iid: ID, id: String, version: String): EquipmentClassVersion @join__field(graph: BASS)
  queryEquipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @join__field(graph: BASS)
  aggregateEquipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult @join__field(graph: BASS)
  getEquipmentClassProperty(iid: ID, id: String): EquipmentClassProperty @join__field(graph: BASS)
  queryEquipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @join__field(graph: BASS)
  aggregateEquipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult @join__field(graph: BASS)
  getEquipment(iid: ID, id: String): Equipment @join__field(graph: BASS)
  queryEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @join__field(graph: BASS)
  aggregateEquipment(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: BASS)
  getEquipmentVersion(iid: ID, id: String, version: String): EquipmentVersion @join__field(graph: BASS)
  queryEquipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @join__field(graph: BASS)
  aggregateEquipmentVersion(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult @join__field(graph: BASS)
  getEquipmentDataSource(iid: ID!): EquipmentDataSource @join__field(graph: BASS)
  queryEquipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @join__field(graph: BASS)
  aggregateEquipmentDataSource(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult @join__field(graph: BASS)
  getEquipmentProperty(iid: ID, id: String): EquipmentProperty @join__field(graph: BASS)
  queryEquipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty] @join__field(graph: BASS)
  aggregateEquipmentProperty(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetClass(iid: ID, id: String): PhysicalAssetClass @join__field(graph: BASS)
  queryPhysicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @join__field(graph: BASS)
  aggregatePhysicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult @join__field(graph: BASS)
  getPhysicalAssetClassVersion(iid: ID, id: String, version: String): PhysicalAssetClassVersion @join__field(graph: BASS)
  queryPhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion] @join__field(graph: BASS)
  aggregatePhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult @join__field(graph: BASS)
  getPhysicalAssetClassProperty(iid: ID, id: String): PhysicalAssetClassProperty @join__field(graph: BASS)
  queryPhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAsset(iid: ID, id: String): PhysicalAsset @join__field(graph: BASS)
  queryPhysicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset] @join__field(graph: BASS)
  aggregatePhysicalAsset(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult @join__field(graph: BASS)
  getPhysicalAssetVersion(iid: ID, id: String, version: String): PhysicalAssetVersion @join__field(graph: BASS)
  queryPhysicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion] @join__field(graph: BASS)
  aggregatePhysicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult @join__field(graph: BASS)
  getPhysicalAssetProperty(iid: ID, id: String): PhysicalAssetProperty @join__field(graph: BASS)
  queryPhysicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentAssetMapping(iid: ID, id: String): EquipmentAssetMapping @join__field(graph: BASS)
  queryEquipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping] @join__field(graph: BASS)
  aggregateEquipmentAssetMapping(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult @join__field(graph: BASS)
  getPhysicalAssetDataSource(iid: ID!): PhysicalAssetDataSource @join__field(graph: BASS)
  queryPhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource] @join__field(graph: BASS)
  aggregatePhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult @join__field(graph: BASS)
  getMaterialClass(iid: ID, id: String): MaterialClass @join__field(graph: BASS)
  queryMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: BASS)
  aggregateMaterialClass(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: BASS)
  getMaterialClassVersion(iid: ID, id: String, version: String): MaterialClassVersion @join__field(graph: BASS)
  queryMaterialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion] @join__field(graph: BASS)
  aggregateMaterialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult @join__field(graph: BASS)
  getMaterialClassProperty(iid: ID, id: String): MaterialClassProperty @join__field(graph: BASS)
  queryMaterialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty] @join__field(graph: BASS)
  aggregateMaterialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult @join__field(graph: BASS)
  getMaterialDefinition(iid: ID, id: String): MaterialDefinition @join__field(graph: BASS)
  queryMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition] @join__field(graph: BASS)
  aggregateMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult @join__field(graph: BASS)
  getMaterialDefinitionVersion(iid: ID, id: String, version: String): MaterialDefinitionVersion @join__field(graph: BASS)
  queryMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @join__field(graph: BASS)
  aggregateMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult @join__field(graph: BASS)
  getMaterialDefinitionProperty(iid: ID, id: String): MaterialDefinitionProperty @join__field(graph: BASS)
  queryMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty] @join__field(graph: BASS)
  aggregateMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult @join__field(graph: BASS)
  getMaterialLot(iid: ID, id: String): MaterialLot @join__field(graph: BASS)
  queryMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @join__field(graph: BASS)
  aggregateMaterialLot(filter: MaterialLotFilter): MaterialLotAggregateResult @join__field(graph: BASS)
  getMaterialLotProperty(iid: ID, id: String): MaterialLotProperty @join__field(graph: BASS)
  queryMaterialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty] @join__field(graph: BASS)
  aggregateMaterialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult @join__field(graph: BASS)
  getMaterialSubLot(iid: ID!): MaterialSubLot @join__field(graph: BASS)
  queryMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: BASS)
  aggregateMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: BASS)
  getUnitOfMeasure(iid: ID, id: String): UnitOfMeasure @join__field(graph: BASS)
  queryUnitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure] @join__field(graph: BASS)
  aggregateUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasureAggregateResult @join__field(graph: BASS)
  getUnitOfMeasureConversion(iid: ID!): UnitOfMeasureConversion @join__field(graph: BASS)
  queryUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion] @join__field(graph: BASS)
  aggregateUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult @join__field(graph: BASS)
  getProcessSegment(iid: ID, id: String): ProcessSegment @join__field(graph: BASS)
  queryProcessSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment] @join__field(graph: BASS)
  aggregateProcessSegment(filter: ProcessSegmentFilter): ProcessSegmentAggregateResult @join__field(graph: BASS)
  getProcessSegmentVersion(iid: ID, id: String, version: String): ProcessSegmentVersion @join__field(graph: BASS)
  queryProcessSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion] @join__field(graph: BASS)
  aggregateProcessSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersionAggregateResult @join__field(graph: BASS)
  getProcessSegmentDependency(iid: ID, id: String): ProcessSegmentDependency @join__field(graph: BASS)
  queryProcessSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency] @join__field(graph: BASS)
  aggregateProcessSegmentDependency(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult @join__field(graph: BASS)
  getProcessSegmentParameter(iid: ID, id: String): ProcessSegmentParameter @join__field(graph: BASS)
  queryProcessSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter] @join__field(graph: BASS)
  aggregateProcessSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult @join__field(graph: BASS)
  getTestSpecification(iid: ID, id: String, key: String): TestSpecification @join__field(graph: BASS)
  queryTestSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: BASS)
  aggregateTestSpecification(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: BASS)
  getOperationsEventClass(iid: ID, id: String): OperationsEventClass @join__field(graph: BASS)
  queryOperationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass] @join__field(graph: BASS)
  aggregateOperationsEventClass(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult @join__field(graph: BASS)
  getOperationsEventClassVersion(iid: ID, id: String, version: String): OperationsEventClassVersion @join__field(graph: BASS)
  queryOperationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion] @join__field(graph: BASS)
  aggregateOperationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersionAggregateResult @join__field(graph: BASS)
  getOperationsEventClassRecordSpecification(iid: ID!): OperationsEventClassRecordSpecification @join__field(graph: BASS)
  queryOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification] @join__field(graph: BASS)
  aggregateOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter): OperationsEventClassRecordSpecificationAggregateResult @join__field(graph: BASS)
  getOperationsEventClassProperty(iid: ID, id: String): OperationsEventClassProperty @join__field(graph: BASS)
  queryOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty] @join__field(graph: BASS)
  aggregateOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinition(iid: ID, id: String): OperationsEventDefinition @join__field(graph: BASS)
  queryOperationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition] @join__field(graph: BASS)
  aggregateOperationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinitionVersion(iid: ID, id: String, version: String): OperationsEventDefinitionVersion @join__field(graph: BASS)
  queryOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion] @join__field(graph: BASS)
  aggregateOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinitionRecordSpecification(iid: ID!): OperationsEventDefinitionRecordSpecification @join__field(graph: BASS)
  queryOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification] @join__field(graph: BASS)
  aggregateOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecificationAggregateResult @join__field(graph: BASS)
  getOperationsEventDefinitionProperty(iid: ID!): OperationsEventDefinitionProperty @join__field(graph: BASS)
  queryOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty] @join__field(graph: BASS)
  aggregateOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult @join__field(graph: BASS)
  getOperationsEvent(iid: ID, id: String): OperationsEvent @join__field(graph: BASS)
  queryOperationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent] @join__field(graph: BASS)
  aggregateOperationsEvent(filter: OperationsEventFilter): OperationsEventAggregateResult @join__field(graph: BASS)
  getOperationsEventProperty(iid: ID, id: String): OperationsEventProperty @join__field(graph: BASS)
  queryOperationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty] @join__field(graph: BASS)
  aggregateOperationsEventProperty(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult @join__field(graph: BASS)
  getOperationsEventRecord(iid: ID, id: String): OperationsEventRecord @join__field(graph: BASS)
  queryOperationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord] @join__field(graph: BASS)
  aggregateOperationsEventRecord(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult @join__field(graph: BASS)
  getOperationsEventRecordEntry(iid: ID, id: String, recordId: String): OperationsEventRecordEntry @join__field(graph: BASS)
  queryOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry] @join__field(graph: BASS)
  aggregateOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult @join__field(graph: BASS)
  getOperationsDefinition(iid: ID, id: String): OperationsDefinition @join__field(graph: BASS)
  queryOperationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @join__field(graph: BASS)
  aggregateOperationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult @join__field(graph: BASS)
  getOperationsDefinitionVersion(iid: ID, id: String, version: String): OperationsDefinitionVersion @join__field(graph: BASS)
  queryOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion] @join__field(graph: BASS)
  aggregateOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersionAggregateResult @join__field(graph: BASS)
  getOperationsMaterialBill(iid: ID, id: String): OperationsMaterialBill @join__field(graph: BASS)
  queryOperationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill] @join__field(graph: BASS)
  aggregateOperationsMaterialBill(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult @join__field(graph: BASS)
  getOperationsSegment(iid: ID, id: String): OperationsSegment @join__field(graph: BASS)
  queryOperationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @join__field(graph: BASS)
  aggregateOperationsSegment(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult @join__field(graph: BASS)
  getOperationsSegmentDependency(iid: ID, id: String): OperationsSegmentDependency @join__field(graph: BASS)
  queryOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency] @join__field(graph: BASS)
  aggregateOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult @join__field(graph: BASS)
  getParameterSpecification(iid: ID, id: String): ParameterSpecification @join__field(graph: BASS)
  queryParameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @join__field(graph: BASS)
  aggregateParameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult @join__field(graph: BASS)
  getPersonnelSpecification(iid: ID, id: String): PersonnelSpecification @join__field(graph: BASS)
  queryPersonnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: BASS)
  aggregatePersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: BASS)
  getPersonnelSpecificationProperty(iid: ID, id: String): PersonnelSpecificationProperty @join__field(graph: BASS)
  queryPersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @join__field(graph: BASS)
  aggregatePersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentSpecification(iid: ID, id: String): EquipmentSpecification @join__field(graph: BASS)
  queryEquipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: BASS)
  aggregateEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: BASS)
  getEquipmentSpecificationProperty(iid: ID, id: String): EquipmentSpecificationProperty @join__field(graph: BASS)
  queryEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @join__field(graph: BASS)
  aggregateEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetSpecification(iid: ID, id: String): PhysicalAssetSpecification @join__field(graph: BASS)
  queryPhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @join__field(graph: BASS)
  aggregatePhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult @join__field(graph: BASS)
  getPhysicalAssetSpecificationProperty(iid: ID, id: String): PhysicalAssetSpecificationProperty @join__field(graph: BASS)
  queryPhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getMaterialSpecification(iid: ID, id: String): MaterialSpecification @join__field(graph: BASS)
  queryMaterialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: BASS)
  aggregateMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: BASS)
  getMaterialSpecificationProperty(iid: ID, id: String): MaterialSpecificationProperty @join__field(graph: BASS)
  queryMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @join__field(graph: BASS)
  aggregateMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getOperationsSchedule(iid: ID!): OperationsSchedule @join__field(graph: BASS)
  queryOperationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule] @join__field(graph: BASS)
  aggregateOperationsSchedule(filter: OperationsScheduleFilter): OperationsScheduleAggregateResult @join__field(graph: BASS)
  getOperationsRequest(iid: ID!): OperationsRequest @join__field(graph: BASS)
  queryOperationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @join__field(graph: BASS)
  aggregateOperationsRequest(filter: OperationsRequestFilter): OperationsRequestAggregateResult @join__field(graph: BASS)
  getSegmentRequirement(iid: ID!): SegmentRequirement @join__field(graph: BASS)
  querySegmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @join__field(graph: BASS)
  aggregateSegmentRequirement(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult @join__field(graph: BASS)
  getSegmentParameter(iid: ID, id: String): SegmentParameter @join__field(graph: BASS)
  querySegmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter] @join__field(graph: BASS)
  aggregateSegmentParameter(filter: SegmentParameterFilter): SegmentParameterAggregateResult @join__field(graph: BASS)
  getPersonnelRequirement(iid: ID, id: String): PersonnelRequirement @join__field(graph: BASS)
  queryPersonnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @join__field(graph: BASS)
  aggregatePersonnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult @join__field(graph: BASS)
  getPersonnelRequirementProperty(iid: ID, id: String): PersonnelRequirementProperty @join__field(graph: BASS)
  queryPersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @join__field(graph: BASS)
  aggregatePersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentRequirement(iid: ID, id: String): EquipmentRequirement @join__field(graph: BASS)
  queryEquipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @join__field(graph: BASS)
  aggregateEquipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult @join__field(graph: BASS)
  getEquipmentRequirementProperty(iid: ID, id: String): EquipmentRequirementProperty @join__field(graph: BASS)
  queryEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @join__field(graph: BASS)
  aggregateEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetRequirement(iid: ID, id: String): PhysicalAssetRequirement @join__field(graph: BASS)
  queryPhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @join__field(graph: BASS)
  aggregatePhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult @join__field(graph: BASS)
  getPhysicalAssetRequirementProperty(iid: ID, id: String): PhysicalAssetRequirementProperty @join__field(graph: BASS)
  queryPhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult @join__field(graph: BASS)
  getMaterialRequirement(iid: ID, id: String): MaterialRequirement @join__field(graph: BASS)
  queryMaterialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @join__field(graph: BASS)
  aggregateMaterialRequirement(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult @join__field(graph: BASS)
  getMaterialRequirementProperty(iid: ID, id: String): MaterialRequirementProperty @join__field(graph: BASS)
  queryMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @join__field(graph: BASS)
  aggregateMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult @join__field(graph: BASS)
  getOperationsPerformance(iid: ID, id: String): OperationsPerformance @join__field(graph: BASS)
  queryOperationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance] @join__field(graph: BASS)
  aggregateOperationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformanceAggregateResult @join__field(graph: BASS)
  getOperationsResponse(iid: ID, id: String): OperationsResponse @join__field(graph: BASS)
  queryOperationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse] @join__field(graph: BASS)
  aggregateOperationsResponse(filter: OperationsResponseFilter): OperationsResponseAggregateResult @join__field(graph: BASS)
  getSegmentResponse(iid: ID, id: String): SegmentResponse @join__field(graph: BASS)
  querySegmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @join__field(graph: BASS)
  aggregateSegmentResponse(filter: SegmentResponseFilter): SegmentResponseAggregateResult @join__field(graph: BASS)
  getSegmentData(iid: ID!): SegmentData @join__field(graph: BASS)
  querySegmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData] @join__field(graph: BASS)
  aggregateSegmentData(filter: SegmentDataFilter): SegmentDataAggregateResult @join__field(graph: BASS)
  getPersonnelActual(iid: ID!): PersonnelActual @join__field(graph: BASS)
  queryPersonnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @join__field(graph: BASS)
  aggregatePersonnelActual(filter: PersonnelActualFilter): PersonnelActualAggregateResult @join__field(graph: BASS)
  getPersonnelActualProperty(iid: ID!): PersonnelActualProperty @join__field(graph: BASS)
  queryPersonnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @join__field(graph: BASS)
  aggregatePersonnelActualProperty(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult @join__field(graph: BASS)
  getEquipmentActual(iid: ID!): EquipmentActual @join__field(graph: BASS)
  queryEquipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @join__field(graph: BASS)
  aggregateEquipmentActual(filter: EquipmentActualFilter): EquipmentActualAggregateResult @join__field(graph: BASS)
  getEquipmentActualProperty(iid: ID!): EquipmentActualProperty @join__field(graph: BASS)
  queryEquipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @join__field(graph: BASS)
  aggregateEquipmentActualProperty(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult @join__field(graph: BASS)
  getPhysicalAssetActual(iid: ID!): PhysicalAssetActual @join__field(graph: BASS)
  queryPhysicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @join__field(graph: BASS)
  aggregatePhysicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult @join__field(graph: BASS)
  getPhysicalAssetActualProperty(iid: ID!): PhysicalAssetActualProperty @join__field(graph: BASS)
  queryPhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @join__field(graph: BASS)
  aggregatePhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult @join__field(graph: BASS)
  getMaterialActual(iid: ID, id: String): MaterialActual @join__field(graph: BASS)
  queryMaterialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @join__field(graph: BASS)
  aggregateMaterialActual(filter: MaterialActualFilter): MaterialActualAggregateResult @join__field(graph: BASS)
  getMaterialActualProperty(iid: ID!): MaterialActualProperty @join__field(graph: BASS)
  queryMaterialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @join__field(graph: BASS)
  aggregateMaterialActualProperty(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult @join__field(graph: BASS)
  getOperationsResponseProperty(iid: ID!): OperationsResponseProperty @join__field(graph: BASS)
  queryOperationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty] @join__field(graph: BASS)
  aggregateOperationsResponseProperty(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult @join__field(graph: BASS)
  getWorkMaster(iid: ID, id: String, version: String): WorkMaster @join__field(graph: BASS)
  queryWorkMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @join__field(graph: BASS)
  aggregateWorkMaster(filter: WorkMasterFilter): WorkMasterAggregateResult @join__field(graph: BASS)
  getWorkDirective(iid: ID, id: String, version: String): WorkDirective @join__field(graph: BASS)
  queryWorkDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @join__field(graph: BASS)
  aggregateWorkDirective(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult @join__field(graph: BASS)
  getWorkflowSpecification(iid: ID, id: String): WorkflowSpecification @join__field(graph: BASS)
  queryWorkflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification] @join__field(graph: BASS)
  aggregateWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationVersion(iid: ID, id: String, version: String): WorkflowSpecificationVersion @join__field(graph: BASS)
  queryWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion] @join__field(graph: BASS)
  aggregateWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationProperty(iid: ID, id: String): WorkflowSpecificationProperty @join__field(graph: BASS)
  queryWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNodeProperty(iid: ID, id: String): WorkflowSpecificationNodeProperty @join__field(graph: BASS)
  queryWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationNodeTypeProperty(iid: ID, id: String): WorkflowSpecificationNodeTypeProperty @join__field(graph: BASS)
  queryWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationConnection(iid: ID, id: String): WorkflowSpecificationConnection @join__field(graph: BASS)
  queryWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection] @join__field(graph: BASS)
  aggregateWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult @join__field(graph: BASS)
  getWorkflowWaypoint(iid: ID!): WorkflowWaypoint @join__field(graph: BASS)
  queryWorkflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint] @join__field(graph: BASS)
  aggregateWorkflowWaypoint(filter: WorkflowWaypointFilter): WorkflowWaypointAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationConnectionProperty(iid: ID, id: String): WorkflowSpecificationConnectionProperty @join__field(graph: BASS)
  queryWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult @join__field(graph: BASS)
  getWorkflowSpecificationConnectionTypeProperty(iid: ID, id: String): WorkflowSpecificationConnectionTypeProperty @join__field(graph: BASS)
  queryWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty] @join__field(graph: BASS)
  aggregateWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult @join__field(graph: BASS)
  getForm(iid: ID, id: String): Form @join__field(graph: BASS)
  queryForm(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form] @join__field(graph: BASS)
  aggregateForm(filter: FormFilter): FormAggregateResult @join__field(graph: BASS)
  getWorkSchedule(iid: ID, id: String): WorkSchedule @join__field(graph: BASS)
  queryWorkSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule] @join__field(graph: BASS)
  aggregateWorkSchedule(filter: WorkScheduleFilter): WorkScheduleAggregateResult @join__field(graph: BASS)
  getWorkRequest(iid: ID, id: String): WorkRequest @join__field(graph: BASS)
  queryWorkRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest] @join__field(graph: BASS)
  aggregateWorkRequest(filter: WorkRequestFilter): WorkRequestAggregateResult @join__field(graph: BASS)
  getJobList(iid: ID, id: String): JobList @join__field(graph: BASS)
  queryJobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList] @join__field(graph: BASS)
  aggregateJobList(filter: JobListFilter): JobListAggregateResult @join__field(graph: BASS)
  getJobOrder(iid: ID, id: String): JobOrder @join__field(graph: BASS)
  queryJobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: BASS)
  aggregateJobOrder(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: BASS)
  getJobOrderParameter(iid: ID, id: String): JobOrderParameter @join__field(graph: BASS)
  queryJobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter] @join__field(graph: BASS)
  aggregateJobOrderParameter(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult @join__field(graph: BASS)
  getWorkPerformance(iid: ID, id: String): WorkPerformance @join__field(graph: BASS)
  queryWorkPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance] @join__field(graph: BASS)
  aggregateWorkPerformance(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult @join__field(graph: BASS)
  getWorkResponse(iid: ID, id: String): WorkResponse @join__field(graph: BASS)
  queryWorkResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse] @join__field(graph: BASS)
  aggregateWorkResponse(filter: WorkResponseFilter): WorkResponseAggregateResult @join__field(graph: BASS)
  getJobResponseList(iid: ID, id: String): JobResponseList @join__field(graph: BASS)
  queryJobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList] @join__field(graph: BASS)
  aggregateJobResponseList(filter: JobResponseListFilter): JobResponseListAggregateResult @join__field(graph: BASS)
  getJobResponse(iid: ID, id: String): JobResponse @join__field(graph: BASS)
  queryJobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: BASS)
  aggregateJobResponse(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: BASS)
  getJobResponseData(iid: ID, id: String): JobResponseData @join__field(graph: BASS)
  queryJobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData] @join__field(graph: BASS)
  aggregateJobResponseData(filter: JobResponseDataFilter): JobResponseDataAggregateResult @join__field(graph: BASS)
  getWorkCalendarDefinitionEntry(iid: ID!): WorkCalendarDefinitionEntry @join__field(graph: BASS)
  queryWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry] @join__field(graph: BASS)
  aggregateWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult @join__field(graph: BASS)
  getWorkCalendarDefinitionEntryProperty(iid: ID, id: String): WorkCalendarDefinitionEntryProperty @join__field(graph: BASS)
  queryWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty] @join__field(graph: BASS)
  aggregateWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult @join__field(graph: BASS)
  getWorkCalendarEntry(iid: ID!): WorkCalendarEntry @join__field(graph: BASS)
  queryWorkCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @join__field(graph: BASS)
  aggregateWorkCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult @join__field(graph: BASS)
  getWorkCalendarEntryProperty(iid: ID, id: String): WorkCalendarEntryProperty @join__field(graph: BASS)
  queryWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty] @join__field(graph: BASS)
  aggregateWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult @join__field(graph: BASS)
  getWorkCalendar(iid: ID, name: String): WorkCalendar @join__field(graph: BASS)
  queryWorkCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar] @join__field(graph: BASS)
  aggregateWorkCalendar(filter: WorkCalendarFilter): WorkCalendarAggregateResult @join__field(graph: BASS)
  getInformationObject(iid: ID!): InformationObject @join__field(graph: BASS)
  queryInformationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  aggregateInformationObject(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  getStateModelProperty(iid: ID, id: String): StateModelProperty @join__field(graph: BASS)
  queryStateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty] @join__field(graph: BASS)
  aggregateStateModelProperty(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult @join__field(graph: BASS)
  getLibreService(id: ID, name: String): LibreService @join__field(graph: BASS)
  queryLibreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService] @join__field(graph: BASS)
  aggregateLibreService(filter: LibreServiceFilter): LibreServiceAggregateResult @join__field(graph: BASS)
  getDataSubscription(id: ID, name: String): DataSubscription @join__field(graph: BASS)
  queryDataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription] @join__field(graph: BASS)
  aggregateDataSubscription(filter: DataSubscriptionFilter): DataSubscriptionAggregateResult @join__field(graph: BASS)
  getEquipmentPropertyOverride(iid: ID, id: String): EquipmentPropertyOverride @join__field(graph: BASS)
  queryEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @join__field(graph: BASS)
  aggregateEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult @join__field(graph: BASS)
  getEquipmentNameAlias(iid: ID!): EquipmentNameAlias @join__field(graph: BASS)
  queryEquipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias] @join__field(graph: BASS)
  aggregateEquipmentNameAlias(filter: EquipmentNameAliasFilter): EquipmentNameAliasAggregateResult @join__field(graph: BASS)
  getPropertyNameAlias(iid: ID!): PropertyNameAlias @join__field(graph: BASS)
  queryPropertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: BASS)
  aggregatePropertyNameAlias(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: BASS)
  getPropertyValueAlias(iid: ID!): PropertyValueAlias @join__field(graph: BASS)
  queryPropertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias] @join__field(graph: BASS)
  aggregatePropertyValueAlias(filter: PropertyValueAliasFilter): PropertyValueAliasAggregateResult @join__field(graph: BASS)
  getDataSource(iid: ID, id: String): DataSource @join__field(graph: BASS)
  queryDataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource] @join__field(graph: BASS)
  aggregateDataSource(filter: DataSourceFilter): DataSourceAggregateResult @join__field(graph: BASS)
  getDataSourceVersion(iid: ID, id: String, version: String): DataSourceVersion @join__field(graph: BASS)
  queryDataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion] @join__field(graph: BASS)
  aggregateDataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersionAggregateResult @join__field(graph: BASS)
  getDataSourceTopic(iid: ID, id: String): DataSourceTopic @join__field(graph: BASS)
  queryDataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic] @join__field(graph: BASS)
  aggregateDataSourceTopic(filter: DataSourceTopicFilter): DataSourceTopicAggregateResult @join__field(graph: BASS)
  getDataSourceMethod(iid: ID, id: String): DataSourceMethod @join__field(graph: BASS)
  queryDataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod] @join__field(graph: BASS)
  aggregateDataSourceMethod(filter: DataSourceMethodFilter): DataSourceMethodAggregateResult @join__field(graph: BASS)
  getDataSourceMethodArgument(iid: ID, id: String): DataSourceMethodArgument @join__field(graph: BASS)
  queryDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument] @join__field(graph: BASS)
  aggregateDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter): DataSourceMethodArgumentAggregateResult @join__field(graph: BASS)
  getPayloadFieldDefinition(iid: ID!): PayloadFieldDefinition @join__field(graph: BASS)
  queryPayloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition] @join__field(graph: BASS)
  aggregatePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult @join__field(graph: BASS)
  getEnvironmentalVariable(iid: ID, id: String): EnvironmentalVariable @join__field(graph: BASS)
  queryEnvironmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable] @join__field(graph: BASS)
  aggregateEnvironmentalVariable(filter: EnvironmentalVariableFilter): EnvironmentalVariableAggregateResult @join__field(graph: BASS)
  getEnvironmentalVariableVersion(iid: ID, id: String, version: String): EnvironmentalVariableVersion @join__field(graph: BASS)
  queryEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion] @join__field(graph: BASS)
  aggregateEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersionAggregateResult @join__field(graph: BASS)
  getSecret(iid: ID, id: String): Secret @join__field(graph: BASS)
  querySecret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret] @join__field(graph: BASS)
  aggregateSecret(filter: SecretFilter): SecretAggregateResult @join__field(graph: BASS)
  getSecretVersion(iid: ID, id: String, version: String): SecretVersion @join__field(graph: BASS)
  querySecretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion] @join__field(graph: BASS)
  aggregateSecretVersion(filter: SecretVersionFilter): SecretVersionAggregateResult @join__field(graph: BASS)
  getSignature(iid: ID!): Signature @join__field(graph: BASS)
  querySignature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @join__field(graph: BASS)
  aggregateSignature(filter: SignatureFilter): SignatureAggregateResult @join__field(graph: BASS)
  getSignatureReason(iid: ID!): SignatureReason @join__field(graph: BASS)
  querySignatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason] @join__field(graph: BASS)
  aggregateSignatureReason(filter: SignatureReasonFilter): SignatureReasonAggregateResult @join__field(graph: BASS)
  getComment(iid: ID, id: String): Comment @join__field(graph: BASS)
  queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @join__field(graph: BASS)
  aggregateComment(filter: CommentFilter): CommentAggregateResult @join__field(graph: BASS)
  mutationStatus(id: String!): MutationStatus! @join__field(graph: CORE)
}

type SyncEquipmentsFromDBtoNATSStatus
  @join__type(graph: CORE)
{
  running: Boolean!

  """
  Total count of active equipment versions that will be loaded from DB to NATS KV.
  """
  total: Int!

  """
  Count of active equipment versions that have been loaded from DB to NATS KV.
  """
  loaded: Int!
}

type TestResult
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  evaluationDate: DateTime
  evaluationCriterionResult: String
  expiration: DateTime
  parent(filter: TestResultFilter): TestResult
  children(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  propertyMeasurements(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
  personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement
  equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement
  physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement
  materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement
  personnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecification
  equipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecification
  materialSpecification(filter: MaterialSpecificationFilter): MaterialSpecification
  personnelClass(filter: PersonnelClassFilter): PersonnelClass
  person(filter: PersonFilter): Person
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass
  equipment(filter: EquipmentFilter): Equipment
  physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass
  physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  materialClass(filter: MaterialClassFilter): MaterialClass
  materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition
  materialLot(filter: MaterialLotFilter): MaterialLot
  materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  personnelActual(filter: PersonnelActualFilter): PersonnelActual
  equipmentActual(filter: EquipmentActualFilter): EquipmentActual
  physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual
  materialActual(filter: MaterialActualFilter): MaterialActual
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  childrenAggregate(filter: TestResultFilter): TestResultAggregateResult
  propertyMeasurementsAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
}

type TestResultAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
  evaluationDateMin: DateTime
  evaluationDateMax: DateTime
  evaluationCriterionResultMin: String
  evaluationCriterionResultMax: String
  expirationMin: DateTime
  expirationMax: DateTime
}

input TestResultFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  has: [TestResultHasFilter]
  and: [TestResultFilter]
  or: [TestResultFilter]
  not: TestResultFilter
}

enum TestResultHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  evaluationDate @join__enumValue(graph: BASS)
  evaluationCriterionResult @join__enumValue(graph: BASS)
  expiration @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  propertyMeasurements @join__enumValue(graph: BASS)
  personnelRequirement @join__enumValue(graph: BASS)
  equipmentRequirement @join__enumValue(graph: BASS)
  physicalAssetRequirement @join__enumValue(graph: BASS)
  materialRequirement @join__enumValue(graph: BASS)
  personnelSpecification @join__enumValue(graph: BASS)
  equipmentSpecification @join__enumValue(graph: BASS)
  materialSpecification @join__enumValue(graph: BASS)
  personnelClass @join__enumValue(graph: BASS)
  person @join__enumValue(graph: BASS)
  equipmentClass @join__enumValue(graph: BASS)
  equipment @join__enumValue(graph: BASS)
  physicalAssetClass @join__enumValue(graph: BASS)
  physicalAsset @join__enumValue(graph: BASS)
  materialClass @join__enumValue(graph: BASS)
  materialDefinition @join__enumValue(graph: BASS)
  materialLot @join__enumValue(graph: BASS)
  materialSubLot @join__enumValue(graph: BASS)
  personnelActual @join__enumValue(graph: BASS)
  equipmentActual @join__enumValue(graph: BASS)
  physicalAssetActual @join__enumValue(graph: BASS)
  materialActual @join__enumValue(graph: BASS)
}

input TestResultOrder
  @join__type(graph: BASS)
{
  asc: TestResultOrderable
  desc: TestResultOrderable
  then: TestResultOrder
}

enum TestResultOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  evaluationDate @join__enumValue(graph: BASS)
  evaluationCriterionResult @join__enumValue(graph: BASS)
  expiration @join__enumValue(graph: BASS)
}

input TestResultPatch
  @join__type(graph: BASS)
{
  id: String
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  hierarchyScope: HierarchyScopeRef
  evaluationDate: DateTime
  evaluationCriterionResult: String
  expiration: DateTime
  parent: TestResultRef
  children: [TestResultRef]
  propertyMeasurements: [PropertyMeasurementRef]
  personnelRequirement: PersonnelRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  materialRequirement: MaterialRequirementRef
  personnelSpecification: PersonnelSpecificationRef
  equipmentSpecification: EquipmentSpecificationRef
  materialSpecification: MaterialSpecificationRef
  personnelClass: PersonnelClassRef
  person: PersonRef
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  materialClass: MaterialClassRef
  materialDefinition: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  personnelActual: PersonnelActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  materialActual: MaterialActualRef
}

input TestResultRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  recordEntries: [InformationObjectRef]
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  hierarchyScope: HierarchyScopeRef
  evaluationDate: DateTime
  evaluationCriterionResult: String
  expiration: DateTime
  parent: TestResultRef
  children: [TestResultRef]
  propertyMeasurements: [PropertyMeasurementRef]
  personnelRequirement: PersonnelRequirementRef
  equipmentRequirement: EquipmentRequirementRef
  physicalAssetRequirement: PhysicalAssetRequirementRef
  materialRequirement: MaterialRequirementRef
  personnelSpecification: PersonnelSpecificationRef
  equipmentSpecification: EquipmentSpecificationRef
  materialSpecification: MaterialSpecificationRef
  personnelClass: PersonnelClassRef
  person: PersonRef
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  physicalAssetClass: PhysicalAssetClassRef
  physicalAsset: PhysicalAssetRef
  materialClass: MaterialClassRef
  materialDefinition: MaterialDefinitionRef
  materialLot: MaterialLotRef
  materialSubLot: MaterialSubLotRef
  personnelActual: PersonnelActualRef
  equipmentActual: EquipmentActualRef
  physicalAssetActual: PhysicalAssetActualRef
  materialActual: MaterialActualRef
}

type TestSpecification
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  label: String!
  version: String!
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  key: String!
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  publishedDate: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  testSampleSize: String
  physicalSample: Boolean
  recurrenceQuantity: String
  recurrenceTimeInterval: String
  parent(filter: TestSpecificationFilter): TestSpecification
  children(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  properties(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
  criteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
  evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
  requiredByPersonnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement
  requiredByEquipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement
  requiredByPhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement
  requiredByMaterialRequirement(filter: MaterialRequirementFilter): MaterialRequirement
  requiredByPersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecification
  requiredByEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecification
  requiredByMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecification
  testsPersonnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
  testsEquipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
  testsPhysicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
  testsMaterialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  testsPersonnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  testsEquipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  testsMaterialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  requiredByPersonnelClass(filter: PersonnelClassFilter): PersonnelClass
  requiredByPerson(filter: PersonFilter): Person
  requiredByEquipmentClass(filter: EquipmentClassFilter): EquipmentClass
  requiredByEquipment(filter: EquipmentFilter): Equipment
  requiredByPhysicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass
  requiredByPhysicalAsset(filter: PhysicalAssetFilter): PhysicalAsset
  requiredByMaterialClass(filter: MaterialClassFilter): MaterialClass
  requiredByMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition
  requiredByMaterialLot(filter: MaterialLotFilter): MaterialLot
  requiredByMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLot
  testsPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  testsPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  testsEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
  testsEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
  testsPhysicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
  testsPhysicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
  testsMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
  testsMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
  testsMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  testsMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  childrenAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
  propertiesAggregate(filter: TestSpecificationPropertyFilter): TestSpecificationPropertyAggregateResult
  criteriaAggregate(filter: TestSpecificationCriteriaFilter): TestSpecificationCriteriaAggregateResult
  evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
  testsPersonnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
  testsEquipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
  testsPhysicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
  testsMaterialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
  testsPersonnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
  testsEquipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
  testsMaterialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
  testsPersonnelClassAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult
  testsPersonAggregate(filter: PersonFilter): PersonAggregateResult
  testsEquipmentClassAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult
  testsEquipmentAggregate(filter: EquipmentFilter): EquipmentAggregateResult
  testsPhysicalAssetClassAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
  testsPhysicalAssetAggregate(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult
  testsMaterialClassAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult
  testsMaterialDefinitionAggregate(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult
  testsMaterialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
  testsMaterialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
}

type TestSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  versionMin: String
  versionMax: String
  keyMin: String
  keyMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
  publishedDateMin: DateTime
  publishedDateMax: DateTime
  testSampleSizeMin: String
  testSampleSizeMax: String
  recurrenceQuantityMin: String
  recurrenceQuantityMax: String
  recurrenceTimeIntervalMin: String
  recurrenceTimeIntervalMax: String
}

type TestSpecificationCriteria
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  sequence: Int
  expression: String
  result: String
  testSpecification(filter: TestSpecificationFilter): TestSpecification!
  evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
  evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
}

type TestSpecificationCriteriaAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
  sequenceMin: Int
  sequenceMax: Int
  sequenceSum: Int
  sequenceAvg: Float
  expressionMin: String
  expressionMax: String
  resultMin: String
  resultMax: String
}

input TestSpecificationCriteriaFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  expression: StringExactFilter_StringFullTextFilter
  result: StringExactFilter_StringFullTextFilter
  has: [TestSpecificationCriteriaHasFilter]
  and: [TestSpecificationCriteriaFilter]
  or: [TestSpecificationCriteriaFilter]
  not: TestSpecificationCriteriaFilter
}

enum TestSpecificationCriteriaHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  sequence @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
  result @join__enumValue(graph: BASS)
  testSpecification @join__enumValue(graph: BASS)
  evaluatedProperties @join__enumValue(graph: BASS)
}

input TestSpecificationCriteriaOrder
  @join__type(graph: BASS)
{
  asc: TestSpecificationCriteriaOrderable
  desc: TestSpecificationCriteriaOrderable
  then: TestSpecificationCriteriaOrder
}

enum TestSpecificationCriteriaOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  sequence @join__enumValue(graph: BASS)
  expression @join__enumValue(graph: BASS)
  result @join__enumValue(graph: BASS)
}

input TestSpecificationCriteriaPatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  sequence: Int
  expression: String
  result: String
  testSpecification: TestSpecificationRef
  evaluatedProperties: [EvaluatedPropertyRef]
}

input TestSpecificationCriteriaRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  sequence: Int
  expression: String
  result: String
  testSpecification: TestSpecificationRef
  evaluatedProperties: [EvaluatedPropertyRef]
}

input TestSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  version: StringExactFilter_StringFullTextFilter
  key: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  has: [TestSpecificationHasFilter]
  and: [TestSpecificationFilter]
  or: [TestSpecificationFilter]
  not: TestSpecificationFilter
}

enum TestSpecificationHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  key @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  testSampleSize @join__enumValue(graph: BASS)
  physicalSample @join__enumValue(graph: BASS)
  recurrenceQuantity @join__enumValue(graph: BASS)
  recurrenceTimeInterval @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  criteria @join__enumValue(graph: BASS)
  evaluatedProperties @join__enumValue(graph: BASS)
  requiredByPersonnelRequirement @join__enumValue(graph: BASS)
  requiredByEquipmentRequirement @join__enumValue(graph: BASS)
  requiredByPhysicalAssetRequirement @join__enumValue(graph: BASS)
  requiredByMaterialRequirement @join__enumValue(graph: BASS)
  requiredByPersonnelSpecification @join__enumValue(graph: BASS)
  requiredByEquipmentSpecification @join__enumValue(graph: BASS)
  requiredByMaterialSpecification @join__enumValue(graph: BASS)
  testsPersonnelRequirements @join__enumValue(graph: BASS)
  testsEquipmentRequirements @join__enumValue(graph: BASS)
  testsPhysicalAssetRequirements @join__enumValue(graph: BASS)
  testsMaterialRequirements @join__enumValue(graph: BASS)
  testsPersonnelSpecifications @join__enumValue(graph: BASS)
  testsEquipmentSpecifications @join__enumValue(graph: BASS)
  testsMaterialSpecifications @join__enumValue(graph: BASS)
  requiredByPersonnelClass @join__enumValue(graph: BASS)
  requiredByPerson @join__enumValue(graph: BASS)
  requiredByEquipmentClass @join__enumValue(graph: BASS)
  requiredByEquipment @join__enumValue(graph: BASS)
  requiredByPhysicalAssetClass @join__enumValue(graph: BASS)
  requiredByPhysicalAsset @join__enumValue(graph: BASS)
  requiredByMaterialClass @join__enumValue(graph: BASS)
  requiredByMaterialDefinition @join__enumValue(graph: BASS)
  requiredByMaterialLot @join__enumValue(graph: BASS)
  requiredByMaterialSubLot @join__enumValue(graph: BASS)
  testsPersonnelClass @join__enumValue(graph: BASS)
  testsPerson @join__enumValue(graph: BASS)
  testsEquipmentClass @join__enumValue(graph: BASS)
  testsEquipment @join__enumValue(graph: BASS)
  testsPhysicalAssetClass @join__enumValue(graph: BASS)
  testsPhysicalAsset @join__enumValue(graph: BASS)
  testsMaterialClass @join__enumValue(graph: BASS)
  testsMaterialDefinition @join__enumValue(graph: BASS)
  testsMaterialLot @join__enumValue(graph: BASS)
  testsMaterialSubLot @join__enumValue(graph: BASS)
}

input TestSpecificationOrder
  @join__type(graph: BASS)
{
  asc: TestSpecificationOrderable
  desc: TestSpecificationOrderable
  then: TestSpecificationOrder
}

enum TestSpecificationOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  key @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  testSampleSize @join__enumValue(graph: BASS)
  recurrenceQuantity @join__enumValue(graph: BASS)
  recurrenceTimeInterval @join__enumValue(graph: BASS)
}

input TestSpecificationPatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  version: String
  recordEntries: [InformationObjectRef]
  key: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  testSampleSize: String
  physicalSample: Boolean
  recurrenceQuantity: String
  recurrenceTimeInterval: String
  parent: TestSpecificationRef
  children: [TestSpecificationRef]
  properties: [TestSpecificationPropertyRef]
  criteria: [TestSpecificationCriteriaRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  requiredByPersonnelRequirement: PersonnelRequirementRef
  requiredByEquipmentRequirement: EquipmentRequirementRef
  requiredByPhysicalAssetRequirement: PhysicalAssetRequirementRef
  requiredByMaterialRequirement: MaterialRequirementRef
  requiredByPersonnelSpecification: PersonnelSpecificationRef
  requiredByEquipmentSpecification: EquipmentSpecificationRef
  requiredByMaterialSpecification: MaterialSpecificationRef
  testsPersonnelRequirements: [PersonnelRequirementRef]
  testsEquipmentRequirements: [EquipmentRequirementRef]
  testsPhysicalAssetRequirements: [PhysicalAssetRequirementRef]
  testsMaterialRequirements: [MaterialRequirementRef]
  testsPersonnelSpecifications: [PersonnelSpecificationRef]
  testsEquipmentSpecifications: [EquipmentSpecificationRef]
  testsMaterialSpecifications: [MaterialSpecificationRef]
  requiredByPersonnelClass: PersonnelClassRef
  requiredByPerson: PersonRef
  requiredByEquipmentClass: EquipmentClassRef
  requiredByEquipment: EquipmentRef
  requiredByPhysicalAssetClass: PhysicalAssetClassRef
  requiredByPhysicalAsset: PhysicalAssetRef
  requiredByMaterialClass: MaterialClassRef
  requiredByMaterialDefinition: MaterialDefinitionRef
  requiredByMaterialLot: MaterialLotRef
  requiredByMaterialSubLot: MaterialSubLotRef
  testsPersonnelClass: [PersonnelClassRef]
  testsPerson: [PersonRef]
  testsEquipmentClass: [EquipmentClassRef]
  testsEquipment: [EquipmentRef]
  testsPhysicalAssetClass: [PhysicalAssetClassRef]
  testsPhysicalAsset: [PhysicalAssetRef]
  testsMaterialClass: [MaterialClassRef]
  testsMaterialDefinition: [MaterialDefinitionRef]
  testsMaterialLot: [MaterialLotRef]
  testsMaterialSubLot: [MaterialSubLotRef]
}

type TestSpecificationProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  label: String!
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  parent(filter: TestSpecificationPropertyFilter): TestSpecificationProperty
  children(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
  testSpecification(filter: TestSpecificationFilter): TestSpecification!
  childrenAggregate(filter: TestSpecificationPropertyFilter): TestSpecificationPropertyAggregateResult
}

type TestSpecificationPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  labelMin: String
  labelMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input TestSpecificationPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  has: [TestSpecificationPropertyHasFilter]
  and: [TestSpecificationPropertyFilter]
  or: [TestSpecificationPropertyFilter]
  not: TestSpecificationPropertyFilter
}

enum TestSpecificationPropertyHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  testSpecification @join__enumValue(graph: BASS)
}

input TestSpecificationPropertyOrder
  @join__type(graph: BASS)
{
  asc: TestSpecificationPropertyOrderable
  desc: TestSpecificationPropertyOrderable
  then: TestSpecificationPropertyOrder
}

enum TestSpecificationPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  label @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
}

input TestSpecificationPropertyPatch
  @join__type(graph: BASS)
{
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  parent: TestSpecificationPropertyRef
  children: [TestSpecificationPropertyRef]
  testSpecification: TestSpecificationRef
}

input TestSpecificationPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  parent: TestSpecificationPropertyRef
  children: [TestSpecificationPropertyRef]
  testSpecification: TestSpecificationRef
}

input TestSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  label: String
  version: String
  recordEntries: [InformationObjectRef]
  key: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  description: String
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  testSampleSize: String
  physicalSample: Boolean
  recurrenceQuantity: String
  recurrenceTimeInterval: String
  parent: TestSpecificationRef
  children: [TestSpecificationRef]
  properties: [TestSpecificationPropertyRef]
  criteria: [TestSpecificationCriteriaRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  requiredByPersonnelRequirement: PersonnelRequirementRef
  requiredByEquipmentRequirement: EquipmentRequirementRef
  requiredByPhysicalAssetRequirement: PhysicalAssetRequirementRef
  requiredByMaterialRequirement: MaterialRequirementRef
  requiredByPersonnelSpecification: PersonnelSpecificationRef
  requiredByEquipmentSpecification: EquipmentSpecificationRef
  requiredByMaterialSpecification: MaterialSpecificationRef
  testsPersonnelRequirements: [PersonnelRequirementRef]
  testsEquipmentRequirements: [EquipmentRequirementRef]
  testsPhysicalAssetRequirements: [PhysicalAssetRequirementRef]
  testsMaterialRequirements: [MaterialRequirementRef]
  testsPersonnelSpecifications: [PersonnelSpecificationRef]
  testsEquipmentSpecifications: [EquipmentSpecificationRef]
  testsMaterialSpecifications: [MaterialSpecificationRef]
  requiredByPersonnelClass: PersonnelClassRef
  requiredByPerson: PersonRef
  requiredByEquipmentClass: EquipmentClassRef
  requiredByEquipment: EquipmentRef
  requiredByPhysicalAssetClass: PhysicalAssetClassRef
  requiredByPhysicalAsset: PhysicalAssetRef
  requiredByMaterialClass: MaterialClassRef
  requiredByMaterialDefinition: MaterialDefinitionRef
  requiredByMaterialLot: MaterialLotRef
  requiredByMaterialSubLot: MaterialSubLotRef
  testsPersonnelClass: [PersonnelClassRef]
  testsPerson: [PersonRef]
  testsEquipmentClass: [EquipmentClassRef]
  testsEquipment: [EquipmentRef]
  testsPhysicalAssetClass: [PhysicalAssetClassRef]
  testsPhysicalAsset: [PhysicalAssetRef]
  testsMaterialClass: [MaterialClassRef]
  testsMaterialDefinition: [MaterialDefinitionRef]
  testsMaterialLot: [MaterialLotRef]
  testsMaterialSubLot: [MaterialSubLotRef]
}

type UnitOfMeasure
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  _createdOn: DateTime! @join__field(graph: BASS)
  _modifiedOn: DateTime @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  effectiveStart: DateTime! @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  dataType: DataType @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
}

type UnitOfMeasureAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
}

type UnitOfMeasureConversion
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  fromUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure!
  toUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure!
  numerator: Float!
  denominator: Float!
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion!
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type UnitOfMeasureConversionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  numeratorMin: Float
  numeratorMax: Float
  numeratorSum: Float
  numeratorAvg: Float
  denominatorMin: Float
  denominatorMax: Float
  denominatorSum: Float
  denominatorAvg: Float
}

input UnitOfMeasureConversionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  has: [UnitOfMeasureConversionHasFilter]
  and: [UnitOfMeasureConversionFilter]
  or: [UnitOfMeasureConversionFilter]
  not: UnitOfMeasureConversionFilter
}

enum UnitOfMeasureConversionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  fromUnitOfMeasure @join__enumValue(graph: BASS)
  toUnitOfMeasure @join__enumValue(graph: BASS)
  numerator @join__enumValue(graph: BASS)
  denominator @join__enumValue(graph: BASS)
  materialDefinitionVersion @join__enumValue(graph: BASS)
}

input UnitOfMeasureConversionOrder
  @join__type(graph: BASS)
{
  asc: UnitOfMeasureConversionOrderable
  desc: UnitOfMeasureConversionOrderable
  then: UnitOfMeasureConversionOrder
}

enum UnitOfMeasureConversionOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  numerator @join__enumValue(graph: BASS)
  denominator @join__enumValue(graph: BASS)
}

input UnitOfMeasureConversionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  fromUnitOfMeasure: UnitOfMeasureRef
  toUnitOfMeasure: UnitOfMeasureRef
  numerator: Float
  denominator: Float
  materialDefinitionVersion: MaterialDefinitionVersionRef
}

input UnitOfMeasureConversionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  fromUnitOfMeasure: UnitOfMeasureRef
  toUnitOfMeasure: UnitOfMeasureRef
  numerator: Float
  denominator: Float
  materialDefinitionVersion: MaterialDefinitionVersionRef
}

input UnitOfMeasureFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [UnitOfMeasureHasFilter]
  and: [UnitOfMeasureFilter]
  or: [UnitOfMeasureFilter]
  not: UnitOfMeasureFilter
}

enum UnitOfMeasureHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
}

input UnitOfMeasureOrder
  @join__type(graph: BASS)
{
  asc: UnitOfMeasureOrderable
  desc: UnitOfMeasureOrderable
  then: UnitOfMeasureOrder
}

enum UnitOfMeasureOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
}

input UnitOfMeasurePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  dataType: DataType
}

input UnitOfMeasureRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  dataType: DataType
}

input UpdateAccessPermissionInput
  @join__type(graph: BASS)
{
  filter: AccessPermissionFilter!
  set: AccessPermissionPatch
  remove: AccessPermissionPatch
}

type UpdateAccessPermissionPayload
  @join__type(graph: BASS)
{
  accessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  numUids: Int
}

input UpdateAlarmEventInput
  @join__type(graph: BASS)
{
  filter: AlarmEventFilter!
  set: AlarmEventPatch
  remove: AlarmEventPatch
}

type UpdateAlarmEventPayload
  @join__type(graph: BASS)
{
  alarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
  numUids: Int
}

input UpdateCommentInput
  @join__type(graph: BASS)
{
  filter: CommentFilter!
  set: CommentPatch
  remove: CommentPatch
}

type UpdateCommentPayload
  @join__type(graph: BASS)
{
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input UpdateDataSourceInput
  @join__type(graph: BASS)
{
  filter: DataSourceFilter!
  set: DataSourcePatch
  remove: DataSourcePatch
}

input UpdateDataSourceMethodArgumentInput
  @join__type(graph: BASS)
{
  filter: DataSourceMethodArgumentFilter!
  set: DataSourceMethodArgumentPatch
  remove: DataSourceMethodArgumentPatch
}

type UpdateDataSourceMethodArgumentPayload
  @join__type(graph: BASS)
{
  dataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
  numUids: Int
}

input UpdateDataSourceMethodInput
  @join__type(graph: BASS)
{
  filter: DataSourceMethodFilter!
  set: DataSourceMethodPatch
  remove: DataSourceMethodPatch
}

type UpdateDataSourceMethodPayload
  @join__type(graph: BASS)
{
  dataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
  numUids: Int
}

type UpdateDataSourcePayload
  @join__type(graph: BASS)
{
  dataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
  numUids: Int
}

input UpdateDataSourceTopicInput
  @join__type(graph: BASS)
{
  filter: DataSourceTopicFilter!
  set: DataSourceTopicPatch
  remove: DataSourceTopicPatch
}

type UpdateDataSourceTopicPayload
  @join__type(graph: BASS)
{
  dataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
  numUids: Int
}

input UpdateDataSourceVersionInput
  @join__type(graph: BASS)
{
  filter: DataSourceVersionFilter!
  set: DataSourceVersionPatch
  remove: DataSourceVersionPatch
}

type UpdateDataSourceVersionPayload
  @join__type(graph: BASS)
{
  dataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
  numUids: Int
}

input UpdateDataSubscriptionInput
  @join__type(graph: BASS)
{
  filter: DataSubscriptionFilter!
  set: DataSubscriptionPatch
  remove: DataSubscriptionPatch
}

type UpdateDataSubscriptionPayload
  @join__type(graph: BASS)
{
  dataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
  numUids: Int
}

input UpdateEnvironmentalVariableInput
  @join__type(graph: BASS)
{
  filter: EnvironmentalVariableFilter!
  set: EnvironmentalVariablePatch
  remove: EnvironmentalVariablePatch
}

type UpdateEnvironmentalVariablePayload
  @join__type(graph: BASS)
{
  environmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
  numUids: Int
}

input UpdateEnvironmentalVariableVersionInput
  @join__type(graph: BASS)
{
  filter: EnvironmentalVariableVersionFilter!
  set: EnvironmentalVariableVersionPatch
  remove: EnvironmentalVariableVersionPatch
}

type UpdateEnvironmentalVariableVersionPayload
  @join__type(graph: BASS)
{
  environmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
  numUids: Int
}

input UpdateEquipmentActualInput
  @join__type(graph: BASS)
{
  filter: EquipmentActualFilter!
  set: EquipmentActualPatch
  remove: EquipmentActualPatch
}

type UpdateEquipmentActualPayload
  @join__type(graph: BASS)
{
  equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
  numUids: Int
}

input UpdateEquipmentActualPropertyInput
  @join__type(graph: BASS)
{
  filter: EquipmentActualPropertyFilter!
  set: EquipmentActualPropertyPatch
  remove: EquipmentActualPropertyPatch
}

type UpdateEquipmentActualPropertyPayload
  @join__type(graph: BASS)
{
  equipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
  numUids: Int
}

input UpdateEquipmentAssetMappingInput
  @join__type(graph: BASS)
{
  filter: EquipmentAssetMappingFilter!
  set: EquipmentAssetMappingPatch
  remove: EquipmentAssetMappingPatch
}

type UpdateEquipmentAssetMappingPayload
  @join__type(graph: BASS)
{
  equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
  numUids: Int
}

input UpdateEquipmentClassInput
  @join__type(graph: BASS)
{
  filter: EquipmentClassFilter!
  set: EquipmentClassPatch
  remove: EquipmentClassPatch
}

type UpdateEquipmentClassPayload
  @join__type(graph: BASS)
{
  equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
  numUids: Int
}

input UpdateEquipmentClassPropertyInput
  @join__type(graph: BASS)
{
  filter: EquipmentClassPropertyFilter!
  set: EquipmentClassPropertyPatch
  remove: EquipmentClassPropertyPatch
}

type UpdateEquipmentClassPropertyPayload
  @join__type(graph: BASS)
{
  equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
  numUids: Int
}

input UpdateEquipmentClassVersionInput
  @join__type(graph: BASS)
{
  filter: EquipmentClassVersionFilter!
  set: EquipmentClassVersionPatch
  remove: EquipmentClassVersionPatch
}

type UpdateEquipmentClassVersionPayload
  @join__type(graph: BASS)
{
  equipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
  numUids: Int
}

input UpdateEquipmentDataSourceInput
  @join__type(graph: BASS)
{
  filter: EquipmentDataSourceFilter!
  set: EquipmentDataSourcePatch
  remove: EquipmentDataSourcePatch
}

type UpdateEquipmentDataSourcePayload
  @join__type(graph: BASS)
{
  equipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
  numUids: Int
}

input UpdateEquipmentInput
  @join__type(graph: BASS)
{
  filter: EquipmentFilter!
  set: EquipmentPatch
  remove: EquipmentPatch
}

input UpdateEquipmentNameAliasInput
  @join__type(graph: BASS)
{
  filter: EquipmentNameAliasFilter!
  set: EquipmentNameAliasPatch
  remove: EquipmentNameAliasPatch
}

type UpdateEquipmentNameAliasPayload
  @join__type(graph: BASS)
{
  equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
  numUids: Int
}

type UpdateEquipmentPayload
  @join__type(graph: BASS)
{
  equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
  numUids: Int
}

input UpdateEquipmentPropertyInput
  @join__type(graph: BASS)
{
  filter: EquipmentPropertyFilter!
  set: EquipmentPropertyPatch
  remove: EquipmentPropertyPatch
}

input UpdateEquipmentPropertyOverrideInput
  @join__type(graph: BASS)
{
  filter: EquipmentPropertyOverrideFilter!
  set: EquipmentPropertyOverridePatch
  remove: EquipmentPropertyOverridePatch
}

type UpdateEquipmentPropertyOverridePayload
  @join__type(graph: BASS)
{
  equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
  numUids: Int
}

type UpdateEquipmentPropertyPayload
  @join__type(graph: BASS)
{
  equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
  numUids: Int
}

input UpdateEquipmentRequirementInput
  @join__type(graph: BASS)
{
  filter: EquipmentRequirementFilter!
  set: EquipmentRequirementPatch
  remove: EquipmentRequirementPatch
}

type UpdateEquipmentRequirementPayload
  @join__type(graph: BASS)
{
  equipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
  numUids: Int
}

input UpdateEquipmentRequirementPropertyInput
  @join__type(graph: BASS)
{
  filter: EquipmentRequirementPropertyFilter!
  set: EquipmentRequirementPropertyPatch
  remove: EquipmentRequirementPropertyPatch
}

type UpdateEquipmentRequirementPropertyPayload
  @join__type(graph: BASS)
{
  equipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
  numUids: Int
}

input UpdateEquipmentSpecificationInput
  @join__type(graph: BASS)
{
  filter: EquipmentSpecificationFilter!
  set: EquipmentSpecificationPatch
  remove: EquipmentSpecificationPatch
}

type UpdateEquipmentSpecificationPayload
  @join__type(graph: BASS)
{
  equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  numUids: Int
}

input UpdateEquipmentSpecificationPropertyInput
  @join__type(graph: BASS)
{
  filter: EquipmentSpecificationPropertyFilter!
  set: EquipmentSpecificationPropertyPatch
  remove: EquipmentSpecificationPropertyPatch
}

type UpdateEquipmentSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  equipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
  numUids: Int
}

input UpdateEquipmentVersionInput
  @join__type(graph: BASS)
{
  filter: EquipmentVersionFilter!
  set: EquipmentVersionPatch
  remove: EquipmentVersionPatch
}

type UpdateEquipmentVersionPayload
  @join__type(graph: BASS)
{
  equipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
  numUids: Int
}

input UpdateEvaluatedPropertyInput
  @join__type(graph: BASS)
{
  filter: EvaluatedPropertyFilter!
  set: EvaluatedPropertyPatch
  remove: EvaluatedPropertyPatch
}

type UpdateEvaluatedPropertyPayload
  @join__type(graph: BASS)
{
  evaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
  numUids: Int
}

input UpdateEventAssociationInput
  @join__type(graph: BASS)
{
  filter: EventAssociationFilter!
  set: EventAssociationPatch
  remove: EventAssociationPatch
}

type UpdateEventAssociationPayload
  @join__type(graph: BASS)
{
  eventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
  numUids: Int
}

input UpdateEventInput
  @join__type(graph: BASS)
{
  filter: EventFilter!
  set: EventPatch
  remove: EventPatch
}

type UpdateEventPayload
  @join__type(graph: BASS)
{
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input UpdateEventPropertyInput
  @join__type(graph: BASS)
{
  filter: EventPropertyFilter!
  set: EventPropertyPatch
  remove: EventPropertyPatch
}

type UpdateEventPropertyPayload
  @join__type(graph: BASS)
{
  eventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
  numUids: Int
}

input UpdateEventSubtypeInput
  @join__type(graph: BASS)
{
  filter: EventSubtypeFilter!
  set: EventSubtypePatch
  remove: EventSubtypePatch
}

type UpdateEventSubtypePayload
  @join__type(graph: BASS)
{
  eventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
  numUids: Int
}

input UpdateEventTypeInput
  @join__type(graph: BASS)
{
  filter: EventTypeFilter!
  set: EventTypePatch
  remove: EventTypePatch
}

type UpdateEventTypePayload
  @join__type(graph: BASS)
{
  eventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
  numUids: Int
}

input UpdateFormInput
  @join__type(graph: BASS)
{
  filter: FormFilter!
  set: FormPatch
  remove: FormPatch
}

type UpdateFormPayload
  @join__type(graph: BASS)
{
  form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
  numUids: Int
}

input UpdateHierarchyScopeInput
  @join__type(graph: BASS)
{
  filter: HierarchyScopeFilter!
  set: HierarchyScopePatch
  remove: HierarchyScopePatch
}

type UpdateHierarchyScopePayload
  @join__type(graph: BASS)
{
  hierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
  numUids: Int
}

input UpdateInformationObjectInput
  @join__type(graph: BASS)
{
  filter: InformationObjectFilter!
  set: InformationObjectPatch
  remove: InformationObjectPatch
}

type UpdateInformationObjectPayload
  @join__type(graph: BASS)
{
  informationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  numUids: Int
}

input UpdateJobListInput
  @join__type(graph: BASS)
{
  filter: JobListFilter!
  set: JobListPatch
  remove: JobListPatch
}

type UpdateJobListPayload
  @join__type(graph: BASS)
{
  jobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
  numUids: Int
}

input UpdateJobOrderInput
  @join__type(graph: BASS)
{
  filter: JobOrderFilter!
  set: JobOrderPatch
  remove: JobOrderPatch
}

input UpdateJobOrderParameterInput
  @join__type(graph: BASS)
{
  filter: JobOrderParameterFilter!
  set: JobOrderParameterPatch
  remove: JobOrderParameterPatch
}

type UpdateJobOrderParameterPayload
  @join__type(graph: BASS)
{
  jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
  numUids: Int
}

type UpdateJobOrderPayload
  @join__type(graph: BASS)
{
  jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  numUids: Int
}

input UpdateJobResponseDataInput
  @join__type(graph: BASS)
{
  filter: JobResponseDataFilter!
  set: JobResponseDataPatch
  remove: JobResponseDataPatch
}

type UpdateJobResponseDataPayload
  @join__type(graph: BASS)
{
  jobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
  numUids: Int
}

input UpdateJobResponseInput
  @join__type(graph: BASS)
{
  filter: JobResponseFilter!
  set: JobResponsePatch
  remove: JobResponsePatch
}

input UpdateJobResponseListInput
  @join__type(graph: BASS)
{
  filter: JobResponseListFilter!
  set: JobResponseListPatch
  remove: JobResponseListPatch
}

type UpdateJobResponseListPayload
  @join__type(graph: BASS)
{
  jobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
  numUids: Int
}

type UpdateJobResponsePayload
  @join__type(graph: BASS)
{
  jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  numUids: Int
}

input UpdateLibreServiceInput
  @join__type(graph: BASS)
{
  filter: LibreServiceFilter!
  set: LibreServicePatch
  remove: LibreServicePatch
}

type UpdateLibreServicePayload
  @join__type(graph: BASS)
{
  libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
  numUids: Int
}

input UpdateMaterialActualInput
  @join__type(graph: BASS)
{
  filter: MaterialActualFilter!
  set: MaterialActualPatch
  remove: MaterialActualPatch
}

type UpdateMaterialActualPayload
  @join__type(graph: BASS)
{
  materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
  numUids: Int
}

input UpdateMaterialActualPropertyInput
  @join__type(graph: BASS)
{
  filter: MaterialActualPropertyFilter!
  set: MaterialActualPropertyPatch
  remove: MaterialActualPropertyPatch
}

type UpdateMaterialActualPropertyPayload
  @join__type(graph: BASS)
{
  materialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
  numUids: Int
}

input UpdateMaterialAlternateInput
  @join__type(graph: BASS)
{
  filter: MaterialAlternateFilter!
  set: MaterialAlternatePatch
  remove: MaterialAlternatePatch
}

type UpdateMaterialAlternatePayload
  @join__type(graph: BASS)
{
  materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
  numUids: Int
}

input UpdateMaterialClassInput
  @join__type(graph: BASS)
{
  filter: MaterialClassFilter!
  set: MaterialClassPatch
  remove: MaterialClassPatch
}

type UpdateMaterialClassPayload
  @join__type(graph: BASS)
{
  materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
  numUids: Int
}

input UpdateMaterialClassPropertyInput
  @join__type(graph: BASS)
{
  filter: MaterialClassPropertyFilter!
  set: MaterialClassPropertyPatch
  remove: MaterialClassPropertyPatch
}

type UpdateMaterialClassPropertyPayload
  @join__type(graph: BASS)
{
  materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
  numUids: Int
}

input UpdateMaterialClassVersionInput
  @join__type(graph: BASS)
{
  filter: MaterialClassVersionFilter!
  set: MaterialClassVersionPatch
  remove: MaterialClassVersionPatch
}

type UpdateMaterialClassVersionPayload
  @join__type(graph: BASS)
{
  materialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
  numUids: Int
}

input UpdateMaterialDefinitionInput
  @join__type(graph: BASS)
{
  filter: MaterialDefinitionFilter!
  set: MaterialDefinitionPatch
  remove: MaterialDefinitionPatch
}

type UpdateMaterialDefinitionPayload
  @join__type(graph: BASS)
{
  materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
  numUids: Int
}

input UpdateMaterialDefinitionPropertyInput
  @join__type(graph: BASS)
{
  filter: MaterialDefinitionPropertyFilter!
  set: MaterialDefinitionPropertyPatch
  remove: MaterialDefinitionPropertyPatch
}

type UpdateMaterialDefinitionPropertyPayload
  @join__type(graph: BASS)
{
  materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
  numUids: Int
}

input UpdateMaterialDefinitionVersionInput
  @join__type(graph: BASS)
{
  filter: MaterialDefinitionVersionFilter!
  set: MaterialDefinitionVersionPatch
  remove: MaterialDefinitionVersionPatch
}

type UpdateMaterialDefinitionVersionPayload
  @join__type(graph: BASS)
{
  materialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
  numUids: Int
}

input UpdateMaterialLotInput
  @join__type(graph: BASS)
{
  filter: MaterialLotFilter!
  set: MaterialLotPatch
  remove: MaterialLotPatch
}

type UpdateMaterialLotPayload
  @join__type(graph: BASS)
{
  materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  numUids: Int
}

input UpdateMaterialLotPropertyInput
  @join__type(graph: BASS)
{
  filter: MaterialLotPropertyFilter!
  set: MaterialLotPropertyPatch
  remove: MaterialLotPropertyPatch
}

type UpdateMaterialLotPropertyPayload
  @join__type(graph: BASS)
{
  materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
  numUids: Int
}

input UpdateMaterialRequirementInput
  @join__type(graph: BASS)
{
  filter: MaterialRequirementFilter!
  set: MaterialRequirementPatch
  remove: MaterialRequirementPatch
}

type UpdateMaterialRequirementPayload
  @join__type(graph: BASS)
{
  materialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
  numUids: Int
}

input UpdateMaterialRequirementPropertyInput
  @join__type(graph: BASS)
{
  filter: MaterialRequirementPropertyFilter!
  set: MaterialRequirementPropertyPatch
  remove: MaterialRequirementPropertyPatch
}

type UpdateMaterialRequirementPropertyPayload
  @join__type(graph: BASS)
{
  materialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
  numUids: Int
}

input UpdateMaterialSpecificationInput
  @join__type(graph: BASS)
{
  filter: MaterialSpecificationFilter!
  set: MaterialSpecificationPatch
  remove: MaterialSpecificationPatch
}

type UpdateMaterialSpecificationPayload
  @join__type(graph: BASS)
{
  materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  numUids: Int
}

input UpdateMaterialSpecificationPropertyInput
  @join__type(graph: BASS)
{
  filter: MaterialSpecificationPropertyFilter!
  set: MaterialSpecificationPropertyPatch
  remove: MaterialSpecificationPropertyPatch
}

type UpdateMaterialSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  materialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
  numUids: Int
}

input UpdateMaterialSubLotInput
  @join__type(graph: BASS)
{
  filter: MaterialSubLotFilter!
  set: MaterialSubLotPatch
  remove: MaterialSubLotPatch
}

type UpdateMaterialSubLotPayload
  @join__type(graph: BASS)
{
  materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  numUids: Int
}

input UpdateMenuInput
  @join__type(graph: BASS)
{
  filter: MenuFilter!
  set: MenuPatch
  remove: MenuPatch
}

type UpdateMenuPayload
  @join__type(graph: BASS)
{
  menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
  numUids: Int
}

input UpdateMultiplicityInput
  @join__type(graph: BASS)
{
  filter: MultiplicityFilter!
  set: MultiplicityPatch
  remove: MultiplicityPatch
}

type UpdateMultiplicityPayload
  @join__type(graph: BASS)
{
  multiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity]
  numUids: Int
}

input UpdateOperationalLocationClassInput
  @join__type(graph: BASS)
{
  filter: OperationalLocationClassFilter!
  set: OperationalLocationClassPatch
  remove: OperationalLocationClassPatch
}

type UpdateOperationalLocationClassPayload
  @join__type(graph: BASS)
{
  operationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
  numUids: Int
}

input UpdateOperationalLocationClassPropertyInput
  @join__type(graph: BASS)
{
  filter: OperationalLocationClassPropertyFilter!
  set: OperationalLocationClassPropertyPatch
  remove: OperationalLocationClassPropertyPatch
}

type UpdateOperationalLocationClassPropertyPayload
  @join__type(graph: BASS)
{
  operationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
  numUids: Int
}

input UpdateOperationalLocationClassVersionInput
  @join__type(graph: BASS)
{
  filter: OperationalLocationClassVersionFilter!
  set: OperationalLocationClassVersionPatch
  remove: OperationalLocationClassVersionPatch
}

type UpdateOperationalLocationClassVersionPayload
  @join__type(graph: BASS)
{
  operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
  numUids: Int
}

input UpdateOperationalLocationInput
  @join__type(graph: BASS)
{
  filter: OperationalLocationFilter!
  set: OperationalLocationPatch
  remove: OperationalLocationPatch
}

type UpdateOperationalLocationPayload
  @join__type(graph: BASS)
{
  operationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
  numUids: Int
}

input UpdateOperationalLocationPropertyInput
  @join__type(graph: BASS)
{
  filter: OperationalLocationPropertyFilter!
  set: OperationalLocationPropertyPatch
  remove: OperationalLocationPropertyPatch
}

type UpdateOperationalLocationPropertyPayload
  @join__type(graph: BASS)
{
  operationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
  numUids: Int
}

input UpdateOperationalLocationVersionInput
  @join__type(graph: BASS)
{
  filter: OperationalLocationVersionFilter!
  set: OperationalLocationVersionPatch
  remove: OperationalLocationVersionPatch
}

type UpdateOperationalLocationVersionPayload
  @join__type(graph: BASS)
{
  operationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion]
  numUids: Int
}

input UpdateOperationsDefinitionInput
  @join__type(graph: BASS)
{
  filter: OperationsDefinitionFilter!
  set: OperationsDefinitionPatch
  remove: OperationsDefinitionPatch
}

type UpdateOperationsDefinitionPayload
  @join__type(graph: BASS)
{
  operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
  numUids: Int
}

input UpdateOperationsDefinitionVersionInput
  @join__type(graph: BASS)
{
  filter: OperationsDefinitionVersionFilter!
  set: OperationsDefinitionVersionPatch
  remove: OperationsDefinitionVersionPatch
}

type UpdateOperationsDefinitionVersionPayload
  @join__type(graph: BASS)
{
  operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
  numUids: Int
}

input UpdateOperationsEventClassInput
  @join__type(graph: BASS)
{
  filter: OperationsEventClassFilter!
  set: OperationsEventClassPatch
  remove: OperationsEventClassPatch
}

type UpdateOperationsEventClassPayload
  @join__type(graph: BASS)
{
  operationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
  numUids: Int
}

input UpdateOperationsEventClassPropertyInput
  @join__type(graph: BASS)
{
  filter: OperationsEventClassPropertyFilter!
  set: OperationsEventClassPropertyPatch
  remove: OperationsEventClassPropertyPatch
}

type UpdateOperationsEventClassPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
  numUids: Int
}

input UpdateOperationsEventClassRecordSpecificationInput
  @join__type(graph: BASS)
{
  filter: OperationsEventClassRecordSpecificationFilter!
  set: OperationsEventClassRecordSpecificationPatch
  remove: OperationsEventClassRecordSpecificationPatch
}

type UpdateOperationsEventClassRecordSpecificationPayload
  @join__type(graph: BASS)
{
  operationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
  numUids: Int
}

input UpdateOperationsEventClassVersionInput
  @join__type(graph: BASS)
{
  filter: OperationsEventClassVersionFilter!
  set: OperationsEventClassVersionPatch
  remove: OperationsEventClassVersionPatch
}

type UpdateOperationsEventClassVersionPayload
  @join__type(graph: BASS)
{
  operationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
  numUids: Int
}

input UpdateOperationsEventDefinitionInput
  @join__type(graph: BASS)
{
  filter: OperationsEventDefinitionFilter!
  set: OperationsEventDefinitionPatch
  remove: OperationsEventDefinitionPatch
}

type UpdateOperationsEventDefinitionPayload
  @join__type(graph: BASS)
{
  operationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
  numUids: Int
}

input UpdateOperationsEventDefinitionPropertyInput
  @join__type(graph: BASS)
{
  filter: OperationsEventDefinitionPropertyFilter!
  set: OperationsEventDefinitionPropertyPatch
  remove: OperationsEventDefinitionPropertyPatch
}

type UpdateOperationsEventDefinitionPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
  numUids: Int
}

input UpdateOperationsEventDefinitionRecordSpecificationInput
  @join__type(graph: BASS)
{
  filter: OperationsEventDefinitionRecordSpecificationFilter!
  set: OperationsEventDefinitionRecordSpecificationPatch
  remove: OperationsEventDefinitionRecordSpecificationPatch
}

type UpdateOperationsEventDefinitionRecordSpecificationPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
  numUids: Int
}

input UpdateOperationsEventDefinitionVersionInput
  @join__type(graph: BASS)
{
  filter: OperationsEventDefinitionVersionFilter!
  set: OperationsEventDefinitionVersionPatch
  remove: OperationsEventDefinitionVersionPatch
}

type UpdateOperationsEventDefinitionVersionPayload
  @join__type(graph: BASS)
{
  operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
  numUids: Int
}

input UpdateOperationsEventInput
  @join__type(graph: BASS)
{
  filter: OperationsEventFilter!
  set: OperationsEventPatch
  remove: OperationsEventPatch
}

type UpdateOperationsEventPayload
  @join__type(graph: BASS)
{
  operationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
  numUids: Int
}

input UpdateOperationsEventPropertyInput
  @join__type(graph: BASS)
{
  filter: OperationsEventPropertyFilter!
  set: OperationsEventPropertyPatch
  remove: OperationsEventPropertyPatch
}

type UpdateOperationsEventPropertyPayload
  @join__type(graph: BASS)
{
  operationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
  numUids: Int
}

input UpdateOperationsEventRecordEntryInput
  @join__type(graph: BASS)
{
  filter: OperationsEventRecordEntryFilter!
  set: OperationsEventRecordEntryPatch
  remove: OperationsEventRecordEntryPatch
}

type UpdateOperationsEventRecordEntryPayload
  @join__type(graph: BASS)
{
  operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
  numUids: Int
}

input UpdateOperationsEventRecordInput
  @join__type(graph: BASS)
{
  filter: OperationsEventRecordFilter!
  set: OperationsEventRecordPatch
  remove: OperationsEventRecordPatch
}

type UpdateOperationsEventRecordPayload
  @join__type(graph: BASS)
{
  operationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
  numUids: Int
}

input UpdateOperationsMaterialBillInput
  @join__type(graph: BASS)
{
  filter: OperationsMaterialBillFilter!
  set: OperationsMaterialBillPatch
  remove: OperationsMaterialBillPatch
}

type UpdateOperationsMaterialBillPayload
  @join__type(graph: BASS)
{
  operationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
  numUids: Int
}

input UpdateOperationsPerformanceInput
  @join__type(graph: BASS)
{
  filter: OperationsPerformanceFilter!
  set: OperationsPerformancePatch
  remove: OperationsPerformancePatch
}

type UpdateOperationsPerformancePayload
  @join__type(graph: BASS)
{
  operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
  numUids: Int
}

input UpdateOperationsRequestInput
  @join__type(graph: BASS)
{
  filter: OperationsRequestFilter!
  set: OperationsRequestPatch
  remove: OperationsRequestPatch
}

type UpdateOperationsRequestPayload
  @join__type(graph: BASS)
{
  operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  numUids: Int
}

input UpdateOperationsResponseInput
  @join__type(graph: BASS)
{
  filter: OperationsResponseFilter!
  set: OperationsResponsePatch
  remove: OperationsResponsePatch
}

type UpdateOperationsResponsePayload
  @join__type(graph: BASS)
{
  operationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
  numUids: Int
}

input UpdateOperationsResponsePropertyInput
  @join__type(graph: BASS)
{
  filter: OperationsResponsePropertyFilter!
  set: OperationsResponsePropertyPatch
  remove: OperationsResponsePropertyPatch
}

type UpdateOperationsResponsePropertyPayload
  @join__type(graph: BASS)
{
  operationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
  numUids: Int
}

input UpdateOperationsScheduleInput
  @join__type(graph: BASS)
{
  filter: OperationsScheduleFilter!
  set: OperationsSchedulePatch
  remove: OperationsSchedulePatch
}

type UpdateOperationsSchedulePayload
  @join__type(graph: BASS)
{
  operationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
  numUids: Int
}

input UpdateOperationsSegmentDependencyInput
  @join__type(graph: BASS)
{
  filter: OperationsSegmentDependencyFilter!
  set: OperationsSegmentDependencyPatch
  remove: OperationsSegmentDependencyPatch
}

type UpdateOperationsSegmentDependencyPayload
  @join__type(graph: BASS)
{
  operationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
  numUids: Int
}

input UpdateOperationsSegmentInput
  @join__type(graph: BASS)
{
  filter: OperationsSegmentFilter!
  set: OperationsSegmentPatch
  remove: OperationsSegmentPatch
}

type UpdateOperationsSegmentPayload
  @join__type(graph: BASS)
{
  operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  numUids: Int
}

input UpdateParameterSpecificationInput
  @join__type(graph: BASS)
{
  filter: ParameterSpecificationFilter!
  set: ParameterSpecificationPatch
  remove: ParameterSpecificationPatch
}

type UpdateParameterSpecificationPayload
  @join__type(graph: BASS)
{
  parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
  numUids: Int
}

input UpdatePayloadFieldDefinitionInput
  @join__type(graph: BASS)
{
  filter: PayloadFieldDefinitionFilter!
  set: PayloadFieldDefinitionPatch
  remove: PayloadFieldDefinitionPatch
}

type UpdatePayloadFieldDefinitionPayload
  @join__type(graph: BASS)
{
  payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
  numUids: Int
}

input UpdatePersonInput
  @join__type(graph: BASS)
{
  filter: PersonFilter!
  set: PersonPatch
  remove: PersonPatch
}

input UpdatePersonnelActualInput
  @join__type(graph: BASS)
{
  filter: PersonnelActualFilter!
  set: PersonnelActualPatch
  remove: PersonnelActualPatch
}

type UpdatePersonnelActualPayload
  @join__type(graph: BASS)
{
  personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
  numUids: Int
}

input UpdatePersonnelActualPropertyInput
  @join__type(graph: BASS)
{
  filter: PersonnelActualPropertyFilter!
  set: PersonnelActualPropertyPatch
  remove: PersonnelActualPropertyPatch
}

type UpdatePersonnelActualPropertyPayload
  @join__type(graph: BASS)
{
  personnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
  numUids: Int
}

input UpdatePersonnelClassInput
  @join__type(graph: BASS)
{
  filter: PersonnelClassFilter!
  set: PersonnelClassPatch
  remove: PersonnelClassPatch
}

type UpdatePersonnelClassPayload
  @join__type(graph: BASS)
{
  personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  numUids: Int
}

input UpdatePersonnelClassPropertyInput
  @join__type(graph: BASS)
{
  filter: PersonnelClassPropertyFilter!
  set: PersonnelClassPropertyPatch
  remove: PersonnelClassPropertyPatch
}

type UpdatePersonnelClassPropertyPayload
  @join__type(graph: BASS)
{
  personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
  numUids: Int
}

input UpdatePersonnelClassVersionInput
  @join__type(graph: BASS)
{
  filter: PersonnelClassVersionFilter!
  set: PersonnelClassVersionPatch
  remove: PersonnelClassVersionPatch
}

type UpdatePersonnelClassVersionPayload
  @join__type(graph: BASS)
{
  personnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
  numUids: Int
}

input UpdatePersonnelRequirementInput
  @join__type(graph: BASS)
{
  filter: PersonnelRequirementFilter!
  set: PersonnelRequirementPatch
  remove: PersonnelRequirementPatch
}

type UpdatePersonnelRequirementPayload
  @join__type(graph: BASS)
{
  personnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
  numUids: Int
}

input UpdatePersonnelRequirementPropertyInput
  @join__type(graph: BASS)
{
  filter: PersonnelRequirementPropertyFilter!
  set: PersonnelRequirementPropertyPatch
  remove: PersonnelRequirementPropertyPatch
}

type UpdatePersonnelRequirementPropertyPayload
  @join__type(graph: BASS)
{
  personnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
  numUids: Int
}

input UpdatePersonnelSpecificationInput
  @join__type(graph: BASS)
{
  filter: PersonnelSpecificationFilter!
  set: PersonnelSpecificationPatch
  remove: PersonnelSpecificationPatch
}

type UpdatePersonnelSpecificationPayload
  @join__type(graph: BASS)
{
  personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  numUids: Int
}

input UpdatePersonnelSpecificationPropertyInput
  @join__type(graph: BASS)
{
  filter: PersonnelSpecificationPropertyFilter!
  set: PersonnelSpecificationPropertyPatch
  remove: PersonnelSpecificationPropertyPatch
}

type UpdatePersonnelSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  personnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
  numUids: Int
}

type UpdatePersonPayload
  @join__type(graph: BASS)
{
  person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  numUids: Int
}

input UpdatePersonPropertyInput
  @join__type(graph: BASS)
{
  filter: PersonPropertyFilter!
  set: PersonPropertyPatch
  remove: PersonPropertyPatch
}

type UpdatePersonPropertyPayload
  @join__type(graph: BASS)
{
  personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
  numUids: Int
}

input UpdatePersonVersionInput
  @join__type(graph: BASS)
{
  filter: PersonVersionFilter!
  set: PersonVersionPatch
  remove: PersonVersionPatch
}

type UpdatePersonVersionPayload
  @join__type(graph: BASS)
{
  personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
  numUids: Int
}

input UpdatePhysicalAssetActualInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetActualFilter!
  set: PhysicalAssetActualPatch
  remove: PhysicalAssetActualPatch
}

type UpdatePhysicalAssetActualPayload
  @join__type(graph: BASS)
{
  physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
  numUids: Int
}

input UpdatePhysicalAssetActualPropertyInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetActualPropertyFilter!
  set: PhysicalAssetActualPropertyPatch
  remove: PhysicalAssetActualPropertyPatch
}

type UpdatePhysicalAssetActualPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
  numUids: Int
}

input UpdatePhysicalAssetClassInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetClassFilter!
  set: PhysicalAssetClassPatch
  remove: PhysicalAssetClassPatch
}

type UpdatePhysicalAssetClassPayload
  @join__type(graph: BASS)
{
  physicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
  numUids: Int
}

input UpdatePhysicalAssetClassPropertyInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetClassPropertyFilter!
  set: PhysicalAssetClassPropertyPatch
  remove: PhysicalAssetClassPropertyPatch
}

type UpdatePhysicalAssetClassPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
  numUids: Int
}

input UpdatePhysicalAssetClassVersionInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetClassVersionFilter!
  set: PhysicalAssetClassVersionPatch
  remove: PhysicalAssetClassVersionPatch
}

type UpdatePhysicalAssetClassVersionPayload
  @join__type(graph: BASS)
{
  physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
  numUids: Int
}

input UpdatePhysicalAssetDataSourceInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetDataSourceFilter!
  set: PhysicalAssetDataSourcePatch
  remove: PhysicalAssetDataSourcePatch
}

type UpdatePhysicalAssetDataSourcePayload
  @join__type(graph: BASS)
{
  physicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
  numUids: Int
}

input UpdatePhysicalAssetInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetFilter!
  set: PhysicalAssetPatch
  remove: PhysicalAssetPatch
}

type UpdatePhysicalAssetPayload
  @join__type(graph: BASS)
{
  physicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
  numUids: Int
}

input UpdatePhysicalAssetPropertyInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetPropertyFilter!
  set: PhysicalAssetPropertyPatch
  remove: PhysicalAssetPropertyPatch
}

type UpdatePhysicalAssetPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
  numUids: Int
}

input UpdatePhysicalAssetRequirementInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetRequirementFilter!
  set: PhysicalAssetRequirementPatch
  remove: PhysicalAssetRequirementPatch
}

type UpdatePhysicalAssetRequirementPayload
  @join__type(graph: BASS)
{
  physicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
  numUids: Int
}

input UpdatePhysicalAssetRequirementPropertyInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetRequirementPropertyFilter!
  set: PhysicalAssetRequirementPropertyPatch
  remove: PhysicalAssetRequirementPropertyPatch
}

type UpdatePhysicalAssetRequirementPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
  numUids: Int
}

input UpdatePhysicalAssetSpecificationInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetSpecificationFilter!
  set: PhysicalAssetSpecificationPatch
  remove: PhysicalAssetSpecificationPatch
}

type UpdatePhysicalAssetSpecificationPayload
  @join__type(graph: BASS)
{
  physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
  numUids: Int
}

input UpdatePhysicalAssetSpecificationPropertyInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetSpecificationPropertyFilter!
  set: PhysicalAssetSpecificationPropertyPatch
  remove: PhysicalAssetSpecificationPropertyPatch
}

type UpdatePhysicalAssetSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  physicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
  numUids: Int
}

input UpdatePhysicalAssetVersionInput
  @join__type(graph: BASS)
{
  filter: PhysicalAssetVersionFilter!
  set: PhysicalAssetVersionPatch
  remove: PhysicalAssetVersionPatch
}

type UpdatePhysicalAssetVersionPayload
  @join__type(graph: BASS)
{
  physicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
  numUids: Int
}

input UpdateProcessSegmentDependencyInput
  @join__type(graph: BASS)
{
  filter: ProcessSegmentDependencyFilter!
  set: ProcessSegmentDependencyPatch
  remove: ProcessSegmentDependencyPatch
}

type UpdateProcessSegmentDependencyPayload
  @join__type(graph: BASS)
{
  processSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
  numUids: Int
}

input UpdateProcessSegmentInput
  @join__type(graph: BASS)
{
  filter: ProcessSegmentFilter!
  set: ProcessSegmentPatch
  remove: ProcessSegmentPatch
}

input UpdateProcessSegmentParameterInput
  @join__type(graph: BASS)
{
  filter: ProcessSegmentParameterFilter!
  set: ProcessSegmentParameterPatch
  remove: ProcessSegmentParameterPatch
}

type UpdateProcessSegmentParameterPayload
  @join__type(graph: BASS)
{
  processSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
  numUids: Int
}

type UpdateProcessSegmentPayload
  @join__type(graph: BASS)
{
  processSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
  numUids: Int
}

input UpdateProcessSegmentVersionInput
  @join__type(graph: BASS)
{
  filter: ProcessSegmentVersionFilter!
  set: ProcessSegmentVersionPatch
  remove: ProcessSegmentVersionPatch
}

type UpdateProcessSegmentVersionPayload
  @join__type(graph: BASS)
{
  processSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
  numUids: Int
}

input UpdatePropertyMeasurementInput
  @join__type(graph: BASS)
{
  filter: PropertyMeasurementFilter!
  set: PropertyMeasurementPatch
  remove: PropertyMeasurementPatch
}

type UpdatePropertyMeasurementPayload
  @join__type(graph: BASS)
{
  propertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
  numUids: Int
}

input UpdatePropertyNameAliasInput
  @join__type(graph: BASS)
{
  filter: PropertyNameAliasFilter!
  set: PropertyNameAliasPatch
  remove: PropertyNameAliasPatch
}

type UpdatePropertyNameAliasPayload
  @join__type(graph: BASS)
{
  propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
  numUids: Int
}

input UpdatePropertyValueAliasInput
  @join__type(graph: BASS)
{
  filter: PropertyValueAliasFilter!
  set: PropertyValueAliasPatch
  remove: PropertyValueAliasPatch
}

type UpdatePropertyValueAliasPayload
  @join__type(graph: BASS)
{
  propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
  numUids: Int
}

input UpdateRuleInput
  @join__type(graph: BASS)
{
  filter: RuleFilter!
  set: RulePatch
  remove: RulePatch
}

type UpdateRulePayload
  @join__type(graph: BASS)
{
  rule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
  numUids: Int
}

input UpdateSecretInput
  @join__type(graph: BASS)
{
  filter: SecretFilter!
  set: SecretPatch
  remove: SecretPatch
}

type UpdateSecretPayload
  @join__type(graph: BASS)
{
  secret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
  numUids: Int
}

input UpdateSecretVersionInput
  @join__type(graph: BASS)
{
  filter: SecretVersionFilter!
  set: SecretVersionPatch
  remove: SecretVersionPatch
}

type UpdateSecretVersionPayload
  @join__type(graph: BASS)
{
  secretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
  numUids: Int
}

input UpdateSegmentDataInput
  @join__type(graph: BASS)
{
  filter: SegmentDataFilter!
  set: SegmentDataPatch
  remove: SegmentDataPatch
}

type UpdateSegmentDataPayload
  @join__type(graph: BASS)
{
  segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
  numUids: Int
}

input UpdateSegmentParameterInput
  @join__type(graph: BASS)
{
  filter: SegmentParameterFilter!
  set: SegmentParameterPatch
  remove: SegmentParameterPatch
}

type UpdateSegmentParameterPayload
  @join__type(graph: BASS)
{
  segmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
  numUids: Int
}

input UpdateSegmentRequirementInput
  @join__type(graph: BASS)
{
  filter: SegmentRequirementFilter!
  set: SegmentRequirementPatch
  remove: SegmentRequirementPatch
}

type UpdateSegmentRequirementPayload
  @join__type(graph: BASS)
{
  segmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
  numUids: Int
}

input UpdateSegmentResponseInput
  @join__type(graph: BASS)
{
  filter: SegmentResponseFilter!
  set: SegmentResponsePatch
  remove: SegmentResponsePatch
}

type UpdateSegmentResponsePayload
  @join__type(graph: BASS)
{
  segmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
  numUids: Int
}

input UpdateSignatureInput
  @join__type(graph: BASS)
{
  filter: SignatureFilter!
  set: SignaturePatch
  remove: SignaturePatch
}

type UpdateSignaturePayload
  @join__type(graph: BASS)
{
  signature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  numUids: Int
}

input UpdateSignatureReasonInput
  @join__type(graph: BASS)
{
  filter: SignatureReasonFilter!
  set: SignatureReasonPatch
  remove: SignatureReasonPatch
}

type UpdateSignatureReasonPayload
  @join__type(graph: BASS)
{
  signatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
  numUids: Int
}

input UpdateSpatialDefinitionInput
  @join__type(graph: BASS)
{
  filter: SpatialDefinitionFilter!
  set: SpatialDefinitionPatch
  remove: SpatialDefinitionPatch
}

type UpdateSpatialDefinitionPayload
  @join__type(graph: BASS)
{
  spatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
  numUids: Int
}

input UpdateStateModelActionInput
  @join__type(graph: BASS)
{
  filter: StateModelActionFilter!
  set: StateModelActionPatch
  remove: StateModelActionPatch
}

type UpdateStateModelActionPayload
  @join__type(graph: BASS)
{
  stateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
  numUids: Int
}

input UpdateStateModelDefinitionInput
  @join__type(graph: BASS)
{
  filter: StateModelDefinitionFilter!
  set: StateModelDefinitionPatch
  remove: StateModelDefinitionPatch
}

type UpdateStateModelDefinitionPayload
  @join__type(graph: BASS)
{
  stateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition]
  numUids: Int
}

input UpdateStateModelEventInput
  @join__type(graph: BASS)
{
  filter: StateModelEventFilter!
  set: StateModelEventPatch
  remove: StateModelEventPatch
}

type UpdateStateModelEventPayload
  @join__type(graph: BASS)
{
  stateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
  numUids: Int
}

input UpdateStateModelInstanceInput
  @join__type(graph: BASS)
{
  filter: StateModelInstanceFilter!
  set: StateModelInstancePatch
  remove: StateModelInstancePatch
}

type UpdateStateModelInstancePayload
  @join__type(graph: BASS)
{
  stateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
  numUids: Int
}

input UpdateStateModelPropertyInput
  @join__type(graph: BASS)
{
  filter: StateModelPropertyFilter!
  set: StateModelPropertyPatch
  remove: StateModelPropertyPatch
}

type UpdateStateModelPropertyPayload
  @join__type(graph: BASS)
{
  stateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
  numUids: Int
}

input UpdateStateModelStateInput
  @join__type(graph: BASS)
{
  filter: StateModelStateFilter!
  set: StateModelStatePatch
  remove: StateModelStatePatch
}

type UpdateStateModelStatePayload
  @join__type(graph: BASS)
{
  stateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
  numUids: Int
}

input UpdateStateModelTransitionInput
  @join__type(graph: BASS)
{
  filter: StateModelTransitionFilter!
  set: StateModelTransitionPatch
  remove: StateModelTransitionPatch
}

type UpdateStateModelTransitionPayload
  @join__type(graph: BASS)
{
  stateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
  numUids: Int
}

input UpdateStateTransitionInstanceInput
  @join__type(graph: BASS)
{
  filter: StateTransitionInstanceFilter!
  set: StateTransitionInstancePatch
  remove: StateTransitionInstancePatch
}

type UpdateStateTransitionInstancePayload
  @join__type(graph: BASS)
{
  stateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
  numUids: Int
}

input UpdateTestResultInput
  @join__type(graph: BASS)
{
  filter: TestResultFilter!
  set: TestResultPatch
  remove: TestResultPatch
}

type UpdateTestResultPayload
  @join__type(graph: BASS)
{
  testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  numUids: Int
}

input UpdateTestSpecificationCriteriaInput
  @join__type(graph: BASS)
{
  filter: TestSpecificationCriteriaFilter!
  set: TestSpecificationCriteriaPatch
  remove: TestSpecificationCriteriaPatch
}

type UpdateTestSpecificationCriteriaPayload
  @join__type(graph: BASS)
{
  testSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
  numUids: Int
}

input UpdateTestSpecificationInput
  @join__type(graph: BASS)
{
  filter: TestSpecificationFilter!
  set: TestSpecificationPatch
  remove: TestSpecificationPatch
}

type UpdateTestSpecificationPayload
  @join__type(graph: BASS)
{
  testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  numUids: Int
}

input UpdateTestSpecificationPropertyInput
  @join__type(graph: BASS)
{
  filter: TestSpecificationPropertyFilter!
  set: TestSpecificationPropertyPatch
  remove: TestSpecificationPropertyPatch
}

type UpdateTestSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  testSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
  numUids: Int
}

input UpdateUnitOfMeasureConversionInput
  @join__type(graph: BASS)
{
  filter: UnitOfMeasureConversionFilter!
  set: UnitOfMeasureConversionPatch
  remove: UnitOfMeasureConversionPatch
}

type UpdateUnitOfMeasureConversionPayload
  @join__type(graph: BASS)
{
  unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
  numUids: Int
}

input UpdateUnitOfMeasureInput
  @join__type(graph: BASS)
{
  filter: UnitOfMeasureFilter!
  set: UnitOfMeasurePatch
  remove: UnitOfMeasurePatch
}

type UpdateUnitOfMeasurePayload
  @join__type(graph: BASS)
{
  unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
  numUids: Int
}

input UpdateWorkCalendarDefinitionEntryInput
  @join__type(graph: BASS)
{
  filter: WorkCalendarDefinitionEntryFilter!
  set: WorkCalendarDefinitionEntryPatch
  remove: WorkCalendarDefinitionEntryPatch
}

type UpdateWorkCalendarDefinitionEntryPayload
  @join__type(graph: BASS)
{
  workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
  numUids: Int
}

input UpdateWorkCalendarDefinitionEntryPropertyInput
  @join__type(graph: BASS)
{
  filter: WorkCalendarDefinitionEntryPropertyFilter!
  set: WorkCalendarDefinitionEntryPropertyPatch
  remove: WorkCalendarDefinitionEntryPropertyPatch
}

type UpdateWorkCalendarDefinitionEntryPropertyPayload
  @join__type(graph: BASS)
{
  workCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
  numUids: Int
}

input UpdateWorkCalendarEntryInput
  @join__type(graph: BASS)
{
  filter: WorkCalendarEntryFilter!
  set: WorkCalendarEntryPatch
  remove: WorkCalendarEntryPatch
}

type UpdateWorkCalendarEntryPayload
  @join__type(graph: BASS)
{
  workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  numUids: Int
}

input UpdateWorkCalendarEntryPropertyInput
  @join__type(graph: BASS)
{
  filter: WorkCalendarEntryPropertyFilter!
  set: WorkCalendarEntryPropertyPatch
  remove: WorkCalendarEntryPropertyPatch
}

type UpdateWorkCalendarEntryPropertyPayload
  @join__type(graph: BASS)
{
  workCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
  numUids: Int
}

input UpdateWorkCalendarInput
  @join__type(graph: BASS)
{
  filter: WorkCalendarFilter!
  set: WorkCalendarPatch
  remove: WorkCalendarPatch
}

type UpdateWorkCalendarPayload
  @join__type(graph: BASS)
{
  workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
  numUids: Int
}

input UpdateWorkDirectiveInput
  @join__type(graph: BASS)
{
  filter: WorkDirectiveFilter!
  set: WorkDirectivePatch
  remove: WorkDirectivePatch
}

type UpdateWorkDirectivePayload
  @join__type(graph: BASS)
{
  workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  numUids: Int
}

input UpdateWorkflowErrorInput
  @join__type(graph: BASS)
{
  filter: WorkflowErrorFilter!
  set: WorkflowErrorPatch
  remove: WorkflowErrorPatch
}

type UpdateWorkflowErrorPayload
  @join__type(graph: BASS)
{
  workflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError]
  numUids: Int
}

input UpdateWorkflowMessageInput
  @join__type(graph: BASS)
{
  filter: WorkflowMessageFilter!
  set: WorkflowMessagePatch
  remove: WorkflowMessagePatch
}

type UpdateWorkflowMessagePayload
  @join__type(graph: BASS)
{
  workflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage]
  numUids: Int
}

input UpdateWorkflowShapeInput
  @join__type(graph: BASS)
{
  filter: WorkflowShapeFilter!
  set: WorkflowShapePatch
  remove: WorkflowShapePatch
}

type UpdateWorkflowShapePayload
  @join__type(graph: BASS)
{
  workflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape]
  numUids: Int
}

input UpdateWorkflowSpecificationConnectionInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationConnectionFilter!
  set: WorkflowSpecificationConnectionPatch
  remove: WorkflowSpecificationConnectionPatch
}

type UpdateWorkflowSpecificationConnectionPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
  numUids: Int
}

input UpdateWorkflowSpecificationConnectionPropertyInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationConnectionPropertyFilter!
  set: WorkflowSpecificationConnectionPropertyPatch
  remove: WorkflowSpecificationConnectionPropertyPatch
}

type UpdateWorkflowSpecificationConnectionPropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
  numUids: Int
}

input UpdateWorkflowSpecificationConnectionTypeInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationConnectionTypeFilter!
  set: WorkflowSpecificationConnectionTypePatch
  remove: WorkflowSpecificationConnectionTypePatch
}

type UpdateWorkflowSpecificationConnectionTypePayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType]
  numUids: Int
}

input UpdateWorkflowSpecificationConnectionTypePropertyInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationConnectionTypePropertyFilter!
  set: WorkflowSpecificationConnectionTypePropertyPatch
  remove: WorkflowSpecificationConnectionTypePropertyPatch
}

type UpdateWorkflowSpecificationConnectionTypePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
  numUids: Int
}

input UpdateWorkflowSpecificationInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationFilter!
  set: WorkflowSpecificationPatch
  remove: WorkflowSpecificationPatch
}

input UpdateWorkflowSpecificationNodeInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationNodeFilter!
  set: WorkflowSpecificationNodePatch
  remove: WorkflowSpecificationNodePatch
}

type UpdateWorkflowSpecificationNodePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
  numUids: Int
}

input UpdateWorkflowSpecificationNodePropertyInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationNodePropertyFilter!
  set: WorkflowSpecificationNodePropertyPatch
  remove: WorkflowSpecificationNodePropertyPatch
}

type UpdateWorkflowSpecificationNodePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
  numUids: Int
}

input UpdateWorkflowSpecificationNodeTestCaseInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationNodeTestCaseFilter!
  set: WorkflowSpecificationNodeTestCasePatch
  remove: WorkflowSpecificationNodeTestCasePatch
}

type UpdateWorkflowSpecificationNodeTestCasePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
  numUids: Int
}

input UpdateWorkflowSpecificationNodeTypeInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationNodeTypeFilter!
  set: WorkflowSpecificationNodeTypePatch
  remove: WorkflowSpecificationNodeTypePatch
}

type UpdateWorkflowSpecificationNodeTypePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType]
  numUids: Int
}

input UpdateWorkflowSpecificationNodeTypePropertyInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationNodeTypePropertyFilter!
  set: WorkflowSpecificationNodeTypePropertyPatch
  remove: WorkflowSpecificationNodeTypePropertyPatch
}

type UpdateWorkflowSpecificationNodeTypePropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
  numUids: Int
}

input UpdateWorkflowSpecificationNodeVariableInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationNodeVariableFilter!
  set: WorkflowSpecificationNodeVariablePatch
  remove: WorkflowSpecificationNodeVariablePatch
}

type UpdateWorkflowSpecificationNodeVariablePayload
  @join__type(graph: BASS)
{
  workflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
  numUids: Int
}

type UpdateWorkflowSpecificationPayload
  @join__type(graph: BASS)
{
  workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
  numUids: Int
}

input UpdateWorkflowSpecificationPropertyInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationPropertyFilter!
  set: WorkflowSpecificationPropertyPatch
  remove: WorkflowSpecificationPropertyPatch
}

type UpdateWorkflowSpecificationPropertyPayload
  @join__type(graph: BASS)
{
  workflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
  numUids: Int
}

input UpdateWorkflowSpecificationVersionInput
  @join__type(graph: BASS)
{
  filter: WorkflowSpecificationVersionFilter!
  set: WorkflowSpecificationVersionPatch
  remove: WorkflowSpecificationVersionPatch
}

type UpdateWorkflowSpecificationVersionPayload
  @join__type(graph: BASS)
{
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
  numUids: Int
}

input UpdateWorkflowTimerInput
  @join__type(graph: BASS)
{
  filter: WorkflowTimerFilter!
  set: WorkflowTimerPatch
  remove: WorkflowTimerPatch
}

type UpdateWorkflowTimerPayload
  @join__type(graph: BASS)
{
  workflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer]
  numUids: Int
}

input UpdateWorkflowWaypointInput
  @join__type(graph: BASS)
{
  filter: WorkflowWaypointFilter!
  set: WorkflowWaypointPatch
  remove: WorkflowWaypointPatch
}

type UpdateWorkflowWaypointPayload
  @join__type(graph: BASS)
{
  workflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
  numUids: Int
}

input UpdateWorkMasterInput
  @join__type(graph: BASS)
{
  filter: WorkMasterFilter!
  set: WorkMasterPatch
  remove: WorkMasterPatch
}

type UpdateWorkMasterPayload
  @join__type(graph: BASS)
{
  workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  numUids: Int
}

input UpdateWorkPerformanceInput
  @join__type(graph: BASS)
{
  filter: WorkPerformanceFilter!
  set: WorkPerformancePatch
  remove: WorkPerformancePatch
}

type UpdateWorkPerformancePayload
  @join__type(graph: BASS)
{
  workPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
  numUids: Int
}

input UpdateWorkRequestInput
  @join__type(graph: BASS)
{
  filter: WorkRequestFilter!
  set: WorkRequestPatch
  remove: WorkRequestPatch
}

type UpdateWorkRequestPayload
  @join__type(graph: BASS)
{
  workRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
  numUids: Int
}

input UpdateWorkResponseInput
  @join__type(graph: BASS)
{
  filter: WorkResponseFilter!
  set: WorkResponsePatch
  remove: WorkResponsePatch
}

type UpdateWorkResponsePayload
  @join__type(graph: BASS)
{
  workResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
  numUids: Int
}

input UpdateWorkScheduleInput
  @join__type(graph: BASS)
{
  filter: WorkScheduleFilter!
  set: WorkSchedulePatch
  remove: WorkSchedulePatch
}

type UpdateWorkSchedulePayload
  @join__type(graph: BASS)
{
  workSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
  numUids: Int
}

enum VersionState
  @join__type(graph: BASS)
  @join__type(graph: BPMN_ENGINE)
  @join__type(graph: CORE)
{
  DRAFT @join__enumValue(graph: BASS) @join__enumValue(graph: BPMN_ENGINE) @join__enumValue(graph: CORE)
  FOR_REVIEW @join__enumValue(graph: BASS) @join__enumValue(graph: BPMN_ENGINE) @join__enumValue(graph: CORE)
  APPROVED @join__enumValue(graph: BASS) @join__enumValue(graph: BPMN_ENGINE) @join__enumValue(graph: CORE)
  ACTIVE @join__enumValue(graph: BASS) @join__enumValue(graph: BPMN_ENGINE) @join__enumValue(graph: CORE)
  DEPRECATED @join__enumValue(graph: BASS) @join__enumValue(graph: BPMN_ENGINE) @join__enumValue(graph: CORE)
}

input VersionState_hash
  @join__type(graph: BASS)
{
  eq: VersionState
  in: [VersionState]
}

enum Weekday
  @join__type(graph: BASS)
{
  MO @join__enumValue(graph: BASS)
  TU @join__enumValue(graph: BASS)
  WE @join__enumValue(graph: BASS)
  TH @join__enumValue(graph: BASS)
  FR @join__enumValue(graph: BASS)
  SA @join__enumValue(graph: BASS)
  SU @join__enumValue(graph: BASS)
}

input WithinFilter
  @join__type(graph: BASS)
{
  polygon: PolygonRef!
}

type WorkCalendar
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  name: String!
  description: String
  definition(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
  entries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  definitionAggregate(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult
  entriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
  equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
}

type WorkCalendarAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

type WorkCalendarDefinitionEntry
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  isActive: Boolean
  description: String
  hierarchyScope(filter: EquipmentFilter): Equipment
  freq: Frequency!
  startDateTime: DateTime!
  endDateTime: DateTime
  count: Int
  interval: Int
  wkst: Weekday
  byWeekDay: [Weekday]
  byMonth: [Int]
  bySetPos: [Int]
  byMonthDay: [Int]
  byYearDay: [Int]
  byWeekNo: [Int]
  byHour: [Int]
  byMinute: [Int]
  bySecond: [Int]
  duration: String
  entryType: WorkCalendarEntryType!
  properties(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
  calendarEntries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  workCalendar(filter: WorkCalendarFilter): WorkCalendar
  propertiesAggregate(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult
  calendarEntriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
}

type WorkCalendarDefinitionEntryAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
  countMin: Int
  countMax: Int
  countSum: Int
  countAvg: Float
  intervalMin: Int
  intervalMax: Int
  intervalSum: Int
  intervalAvg: Float
  durationMin: String
  durationMax: String
}

input WorkCalendarDefinitionEntryFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  isActive: Boolean
  has: [WorkCalendarDefinitionEntryHasFilter]
  and: [WorkCalendarDefinitionEntryFilter]
  or: [WorkCalendarDefinitionEntryFilter]
  not: WorkCalendarDefinitionEntryFilter
}

enum WorkCalendarDefinitionEntryHasFilter
  @join__type(graph: BASS)
{
  isActive @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  freq @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  count @join__enumValue(graph: BASS)
  interval @join__enumValue(graph: BASS)
  wkst @join__enumValue(graph: BASS)
  byWeekDay @join__enumValue(graph: BASS)
  byMonth @join__enumValue(graph: BASS)
  bySetPos @join__enumValue(graph: BASS)
  byMonthDay @join__enumValue(graph: BASS)
  byYearDay @join__enumValue(graph: BASS)
  byWeekNo @join__enumValue(graph: BASS)
  byHour @join__enumValue(graph: BASS)
  byMinute @join__enumValue(graph: BASS)
  bySecond @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  entryType @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  calendarEntries @join__enumValue(graph: BASS)
  workCalendar @join__enumValue(graph: BASS)
}

input WorkCalendarDefinitionEntryOrder
  @join__type(graph: BASS)
{
  asc: WorkCalendarDefinitionEntryOrderable
  desc: WorkCalendarDefinitionEntryOrderable
  then: WorkCalendarDefinitionEntryOrder
}

enum WorkCalendarDefinitionEntryOrderable
  @join__type(graph: BASS)
{
  description @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  count @join__enumValue(graph: BASS)
  interval @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
}

input WorkCalendarDefinitionEntryPatch
  @join__type(graph: BASS)
{
  isActive: Boolean
  description: String
  hierarchyScope: EquipmentRef
  freq: Frequency
  startDateTime: DateTime
  endDateTime: DateTime
  count: Int
  interval: Int
  wkst: Weekday
  byWeekDay: [Weekday]
  byMonth: [Int]
  bySetPos: [Int]
  byMonthDay: [Int]
  byYearDay: [Int]
  byWeekNo: [Int]
  byHour: [Int]
  byMinute: [Int]
  bySecond: [Int]
  duration: String
  entryType: WorkCalendarEntryType
  properties: [WorkCalendarDefinitionEntryPropertyRef]
  calendarEntries: [WorkCalendarEntryRef]
  workCalendar: WorkCalendarRef
}

type WorkCalendarDefinitionEntryProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntry!
  children(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
  parent(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult
}

type WorkCalendarDefinitionEntryPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  useMin: String
  useMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input WorkCalendarDefinitionEntryPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [WorkCalendarDefinitionEntryPropertyHasFilter]
  and: [WorkCalendarDefinitionEntryPropertyFilter]
  or: [WorkCalendarDefinitionEntryPropertyFilter]
  not: WorkCalendarDefinitionEntryPropertyFilter
}

enum WorkCalendarDefinitionEntryPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  workCalendarDefinitionEntry @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input WorkCalendarDefinitionEntryPropertyOrder
  @join__type(graph: BASS)
{
  asc: WorkCalendarDefinitionEntryPropertyOrderable
  desc: WorkCalendarDefinitionEntryPropertyOrderable
  then: WorkCalendarDefinitionEntryPropertyOrder
}

enum WorkCalendarDefinitionEntryPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input WorkCalendarDefinitionEntryPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  workCalendarDefinitionEntry: WorkCalendarDefinitionEntryRef
  children: [WorkCalendarDefinitionEntryPropertyRef]
  parent: WorkCalendarDefinitionEntryPropertyRef
}

input WorkCalendarDefinitionEntryPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  workCalendarDefinitionEntry: WorkCalendarDefinitionEntryRef
  children: [WorkCalendarDefinitionEntryPropertyRef]
  parent: WorkCalendarDefinitionEntryPropertyRef
}

input WorkCalendarDefinitionEntryRef
  @join__type(graph: BASS)
{
  iid: ID
  isActive: Boolean
  description: String
  hierarchyScope: EquipmentRef
  freq: Frequency
  startDateTime: DateTime
  endDateTime: DateTime
  count: Int
  interval: Int
  wkst: Weekday
  byWeekDay: [Weekday]
  byMonth: [Int]
  bySetPos: [Int]
  byMonthDay: [Int]
  byYearDay: [Int]
  byWeekNo: [Int]
  byHour: [Int]
  byMinute: [Int]
  bySecond: [Int]
  duration: String
  entryType: WorkCalendarEntryType
  properties: [WorkCalendarDefinitionEntryPropertyRef]
  calendarEntries: [WorkCalendarEntryRef]
  workCalendar: WorkCalendarRef
}

type WorkCalendarEntry
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  isActive: Boolean
  description: String
  definition(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntry
  hierarchyScope(filter: EquipmentFilter): Equipment
  startDateTime: DateTime!
  finishDateTime: DateTime!
  entryType: WorkCalendarEntryType!
  properties(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
  workCalendar(filter: WorkCalendarFilter): WorkCalendar
  propertiesAggregate(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult
}

type WorkCalendarEntryAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  finishDateTimeMin: DateTime
  finishDateTimeMax: DateTime
}

input WorkCalendarEntryFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  isActive: Boolean
  startDateTime: DateTimeFilter
  finishDateTime: DateTimeFilter
  entryType: WorkCalendarEntryType_hash
  has: [WorkCalendarEntryHasFilter]
  and: [WorkCalendarEntryFilter]
  or: [WorkCalendarEntryFilter]
  not: WorkCalendarEntryFilter
}

enum WorkCalendarEntryHasFilter
  @join__type(graph: BASS)
{
  isActive @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  definition @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  finishDateTime @join__enumValue(graph: BASS)
  entryType @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  workCalendar @join__enumValue(graph: BASS)
}

input WorkCalendarEntryOrder
  @join__type(graph: BASS)
{
  asc: WorkCalendarEntryOrderable
  desc: WorkCalendarEntryOrderable
  then: WorkCalendarEntryOrder
}

enum WorkCalendarEntryOrderable
  @join__type(graph: BASS)
{
  description @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  finishDateTime @join__enumValue(graph: BASS)
}

input WorkCalendarEntryPatch
  @join__type(graph: BASS)
{
  isActive: Boolean
  description: String
  definition: WorkCalendarDefinitionEntryRef
  hierarchyScope: EquipmentRef
  startDateTime: DateTime
  finishDateTime: DateTime
  entryType: WorkCalendarEntryType
  properties: [WorkCalendarEntryPropertyRef]
  workCalendar: WorkCalendarRef
}

type WorkCalendarEntryProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
  operationalLocation(filter: OperationalLocationFilter): OperationalLocation
  use: String
  quantity: Float!
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
  workCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntry!
  children(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
  parent(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult
}

type WorkCalendarEntryPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  useMin: String
  useMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input WorkCalendarEntryPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  use: StringExactFilter_StringFullTextFilter
  has: [WorkCalendarEntryPropertyHasFilter]
  and: [WorkCalendarEntryPropertyFilter]
  or: [WorkCalendarEntryPropertyFilter]
  not: WorkCalendarEntryPropertyFilter
}

enum WorkCalendarEntryPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  spatialDefinition @join__enumValue(graph: BASS)
  operationalLocation @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
  quantityUoM @join__enumValue(graph: BASS)
  workCalendarEntry @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input WorkCalendarEntryPropertyOrder
  @join__type(graph: BASS)
{
  asc: WorkCalendarEntryPropertyOrderable
  desc: WorkCalendarEntryPropertyOrderable
  then: WorkCalendarEntryPropertyOrder
}

enum WorkCalendarEntryPropertyOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  use @join__enumValue(graph: BASS)
  quantity @join__enumValue(graph: BASS)
}

input WorkCalendarEntryPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  workCalendarEntry: WorkCalendarEntryRef
  children: [WorkCalendarEntryPropertyRef]
  parent: WorkCalendarEntryPropertyRef
}

input WorkCalendarEntryPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  spatialDefinition: SpatialDefinitionRef
  operationalLocation: OperationalLocationRef
  use: String
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  workCalendarEntry: WorkCalendarEntryRef
  children: [WorkCalendarEntryPropertyRef]
  parent: WorkCalendarEntryPropertyRef
}

input WorkCalendarEntryRef
  @join__type(graph: BASS)
{
  iid: ID
  isActive: Boolean
  description: String
  definition: WorkCalendarDefinitionEntryRef
  hierarchyScope: EquipmentRef
  startDateTime: DateTime
  finishDateTime: DateTime
  entryType: WorkCalendarEntryType
  properties: [WorkCalendarEntryPropertyRef]
  workCalendar: WorkCalendarRef
}

enum WorkCalendarEntryType
  @join__type(graph: BASS)
{
  PlannedBusyTime @join__enumValue(graph: BASS)
  PlannedDowntime @join__enumValue(graph: BASS)
  PlannedShutdown @join__enumValue(graph: BASS)
}

input WorkCalendarEntryType_hash
  @join__type(graph: BASS)
{
  eq: WorkCalendarEntryType
  in: [WorkCalendarEntryType]
}

input WorkCalendarFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  name: StringHashFilter
  has: [WorkCalendarHasFilter]
  and: [WorkCalendarFilter]
  or: [WorkCalendarFilter]
  not: WorkCalendarFilter
}

enum WorkCalendarHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  definition @join__enumValue(graph: BASS)
  entries @join__enumValue(graph: BASS)
  equipmentVersions @join__enumValue(graph: BASS)
}

input WorkCalendarOrder
  @join__type(graph: BASS)
{
  asc: WorkCalendarOrderable
  desc: WorkCalendarOrderable
  then: WorkCalendarOrder
}

enum WorkCalendarOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
}

input WorkCalendarPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  name: String
  description: String
  definition: [WorkCalendarDefinitionEntryRef]
  entries: [WorkCalendarEntryRef]
  equipmentVersions: [EquipmentVersionRef]
}

input WorkCalendarRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  name: String
  description: String
  definition: [WorkCalendarDefinitionEntryRef]
  entries: [WorkCalendarEntryRef]
  equipmentVersions: [EquipmentVersionRef]
}

type WorkDirective
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  version: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  workType: WorkType
  duration: Float
  durationUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  publishedDate: DateTime
  state: WorkDirectiveState
  parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
  propertyMeasurements(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
  workMaster(filter: WorkMasterFilter): WorkMaster
  children(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  parent(filter: WorkDirectiveFilter): WorkDirective
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
  physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
  evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
  propertyMeasurementsAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
  childrenAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type WorkDirectiveAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
  publishedDateMin: DateTime
  publishedDateMax: DateTime
}

input WorkDirectiveFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  version: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  publishedDate: DateTimeFilter
  has: [WorkDirectiveHasFilter]
  and: [WorkDirectiveFilter]
  or: [WorkDirectiveFilter]
  not: WorkDirectiveFilter
}

enum WorkDirectiveHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  durationUnitOfMeasure @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  state @join__enumValue(graph: BASS)
  parameterSpecifications @join__enumValue(graph: BASS)
  personnelSpecifications @join__enumValue(graph: BASS)
  equipmentSpecifications @join__enumValue(graph: BASS)
  physicalAssetSpecifications @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
  evaluatedProperties @join__enumValue(graph: BASS)
  propertyMeasurements @join__enumValue(graph: BASS)
  workMaster @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input WorkDirectiveOrder
  @join__type(graph: BASS)
{
  asc: WorkDirectiveOrderable
  desc: WorkDirectiveOrderable
  then: WorkDirectiveOrder
}

enum WorkDirectiveOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
}

input WorkDirectivePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  version: String
  description: String
  hierarchyScope: HierarchyScopeRef
  workType: WorkType
  duration: Float
  durationUnitOfMeasure: UnitOfMeasureRef
  publishedDate: DateTime
  state: WorkDirectiveState
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  propertyMeasurements: [PropertyMeasurementRef]
  workMaster: WorkMasterRef
  children: [WorkDirectiveRef]
  parent: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input WorkDirectiveRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  version: String
  description: String
  hierarchyScope: HierarchyScopeRef
  workType: WorkType
  duration: Float
  durationUnitOfMeasure: UnitOfMeasureRef
  publishedDate: DateTime
  state: WorkDirectiveState
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  propertyMeasurements: [PropertyMeasurementRef]
  workMaster: WorkMasterRef
  children: [WorkDirectiveRef]
  parent: WorkDirectiveRef
  workflowSpecification: WorkflowSpecificationRef
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

enum WorkDirectiveState
  @join__type(graph: BASS)
{
  WAITING @join__enumValue(graph: BASS)
  READY @join__enumValue(graph: BASS)
  RUNNING @join__enumValue(graph: BASS)
  COMPLETED @join__enumValue(graph: BASS)
  ABORTED @join__enumValue(graph: BASS)
  HELD @join__enumValue(graph: BASS)
  SUSPENDED @join__enumValue(graph: BASS)
  CLOSED @join__enumValue(graph: BASS)
}

type WorkflowError
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  reference: String
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion
  node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode
  code: String
}

type WorkflowErrorAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  referenceMin: String
  referenceMax: String
  codeMin: String
  codeMax: String
}

input WorkflowErrorFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringHashFilter
  reference: StringExactFilter_StringFullTextFilter
  has: [WorkflowErrorHasFilter]
  and: [WorkflowErrorFilter]
  or: [WorkflowErrorFilter]
  not: WorkflowErrorFilter
}

enum WorkflowErrorHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  reference @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  node @join__enumValue(graph: BASS)
  code @join__enumValue(graph: BASS)
}

input WorkflowErrorOrder
  @join__type(graph: BASS)
{
  asc: WorkflowErrorOrderable
  desc: WorkflowErrorOrderable
  then: WorkflowErrorOrder
}

enum WorkflowErrorOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  reference @join__enumValue(graph: BASS)
  code @join__enumValue(graph: BASS)
}

input WorkflowErrorPatch
  @join__type(graph: BASS)
{
  id: String
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  code: String
}

input WorkflowErrorRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  code: String
}

"""
Responses from BPMN Engine use a BPMN engine specific type, allowing federated access to the type.
Note: BPMN engine internally represents this type as a JobResponse
"""
type WorkflowInstance
  @join__type(graph: BPMN_ENGINE, key: "iid")
{
  """ Unique internal database identifier. """
  iid: ID!

  """ The date and time in UTC that the entity was created. """
  _createdOn: DateTime!

  """ The date and time in UTC that the entity was last mutated. """
  _modifiedOn: DateTime

  """ The username from the token which created the entity. """
  _createdBy: String

  """ The username from the token from the last mutation of this entity. """
  _modifiedBy: String

  """ Entity is considered active from this point in time forward. """
  effectiveStart: DateTime!

  """ Entity is considered active until this time, or until the end of time if empty. 
  """
  effectiveEnd: DateTime

  """ An identification within the associated Workflow Instance. """
  id: String!

  """ Contains additional information and descriptions of the Workflow Instance. 
  """
  description: String

  """ The date and time on which the resource relationship network was published or generated. 
  """
  publishedDate: DateTime

  """ The actual starting time of information in the Workflow Instance. """
  startDateTime: DateTime

  """ The actual ending time of information in the Workflow Instance. """
  endDateTime: DateTime

  """ Indicates the state of job work response. """
  jobState: String

  """ The variable context for process instance. May be moved to data field. 
  """
  dataJSON: String

  """ The production day this work was finished. """
  productionDate: String

  """ The workflow Specification Version being executed in this Workflow Instance 
  """
  workflowSpecificationVersion: String

  """ The related object(s), job response, makes up part of this job response as the whole. 
  """
  children: [WorkflowInstance]

  """ The related object, job response, this job response makes up part of as the whole. 
  """
  parent: WorkflowInstance
}

type WorkflowMessage
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  reference: String
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion
  node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode
  enabled: Boolean!
}

type WorkflowMessageAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  referenceMin: String
  referenceMax: String
}

input WorkflowMessageFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringHashFilter
  reference: StringExactFilter_StringFullTextFilter
  has: [WorkflowMessageHasFilter]
  and: [WorkflowMessageFilter]
  or: [WorkflowMessageFilter]
  not: WorkflowMessageFilter
}

enum WorkflowMessageHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  reference @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  node @join__enumValue(graph: BASS)
  enabled @join__enumValue(graph: BASS)
}

input WorkflowMessageOrder
  @join__type(graph: BASS)
{
  asc: WorkflowMessageOrderable
  desc: WorkflowMessageOrderable
  then: WorkflowMessageOrder
}

enum WorkflowMessageOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  reference @join__enumValue(graph: BASS)
}

input WorkflowMessagePatch
  @join__type(graph: BASS)
{
  id: String
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  enabled: Boolean
}

input WorkflowMessageRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  enabled: Boolean
}

type WorkflowShape
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode!
  x: String!
  y: String!
  width: String!
  height: String!
  icon: String
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type WorkflowShapeAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  xMin: String
  xMax: String
  yMin: String
  yMax: String
  widthMin: String
  widthMax: String
  heightMin: String
  heightMax: String
  iconMin: String
  iconMax: String
}

input WorkflowShapeFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [WorkflowShapeHasFilter]
  and: [WorkflowShapeFilter]
  or: [WorkflowShapeFilter]
  not: WorkflowShapeFilter
}

enum WorkflowShapeHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  node @join__enumValue(graph: BASS)
  x @join__enumValue(graph: BASS)
  y @join__enumValue(graph: BASS)
  width @join__enumValue(graph: BASS)
  height @join__enumValue(graph: BASS)
  icon @join__enumValue(graph: BASS)
}

input WorkflowShapeOrder
  @join__type(graph: BASS)
{
  asc: WorkflowShapeOrderable
  desc: WorkflowShapeOrderable
  then: WorkflowShapeOrder
}

enum WorkflowShapeOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  x @join__enumValue(graph: BASS)
  y @join__enumValue(graph: BASS)
  width @join__enumValue(graph: BASS)
  height @join__enumValue(graph: BASS)
  icon @join__enumValue(graph: BASS)
}

input WorkflowShapePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  node: WorkflowSpecificationNodeRef
  x: String
  y: String
  width: String
  height: String
  icon: String
}

input WorkflowShapeRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  node: WorkflowSpecificationNodeRef
  x: String
  y: String
  width: String
  height: String
  icon: String
}

type WorkflowSpecification
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: BPMN_ENGINE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  versions(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion] @join__field(graph: BASS)
  activeVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @join__field(graph: BASS)
  nextVersion: String @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _createdDateTime: DateTime @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  _modifiedDateTime: DateTime @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  includedIn(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion] @join__field(graph: BASS)
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: BASS)
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: BASS)
  workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @join__field(graph: BASS)
  workDirectives(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @join__field(graph: BASS)
  stateModelActions(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction] @join__field(graph: BASS)
  rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @join__field(graph: BASS)
  calledByNodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  versionsAggregate(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult @join__field(graph: BASS)
  includedInAggregate(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult @join__field(graph: BASS)
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: BASS)
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: BASS)
  workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult @join__field(graph: BASS)
  workDirectivesAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult @join__field(graph: BASS)
  stateModelActionsAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult @join__field(graph: BASS)
  rulesAggregate(filter: RuleFilter): RuleAggregateResult @join__field(graph: BASS)
  calledByNodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult @join__field(graph: BASS)
}

type WorkflowSpecificationAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  nextVersionMin: String
  nextVersionMax: String
  _createdByMin: String
  _createdByMax: String
  _createdDateTimeMin: DateTime
  _createdDateTimeMax: DateTime
  _modifiedByMin: String
  _modifiedByMax: String
  _modifiedDateTimeMin: DateTime
  _modifiedDateTimeMax: DateTime
  idMin: String
  idMax: String
}

type WorkflowSpecificationConnection
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  condition: String
  id: String!
  name: String
  waypoints(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
  description: String
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion!
  connectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionType!
  properties(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
  to(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode!
  from(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode!
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  waypointsAggregate(filter: WorkflowWaypointFilter): WorkflowWaypointAggregateResult
  propertiesAggregate(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult
}

type WorkflowSpecificationConnectionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  conditionMin: String
  conditionMax: String
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  _createdByMin: String
  _createdByMax: String
  _createdDateTimeMin: DateTime
  _createdDateTimeMax: DateTime
  _modifiedByMin: String
  _modifiedByMax: String
  _modifiedDateTimeMin: DateTime
  _modifiedDateTimeMax: DateTime
}

input WorkflowSpecificationConnectionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  description: StringHashFilter
  _createdDateTime: DateTimeFilter
  _modifiedDateTime: DateTimeFilter
  has: [WorkflowSpecificationConnectionHasFilter]
  and: [WorkflowSpecificationConnectionFilter]
  or: [WorkflowSpecificationConnectionFilter]
  not: WorkflowSpecificationConnectionFilter
}

enum WorkflowSpecificationConnectionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  condition @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  waypoints @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  connectionType @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  to @join__enumValue(graph: BASS)
  from @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationConnectionOrderable
  desc: WorkflowSpecificationConnectionOrderable
  then: WorkflowSpecificationConnectionOrder
}

enum WorkflowSpecificationConnectionOrderable
  @join__type(graph: BASS)
{
  condition @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  condition: String
  id: String
  name: String
  waypoints: [WorkflowWaypointRef]
  description: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  connectionType: WorkflowSpecificationConnectionTypeRef
  properties: [WorkflowSpecificationConnectionPropertyRef]
  to: WorkflowSpecificationNodeRef
  from: WorkflowSpecificationNodeRef
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type WorkflowSpecificationConnectionProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  connection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnection!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
  parent(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult
}

type WorkflowSpecificationConnectionPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
}

input WorkflowSpecificationConnectionPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [WorkflowSpecificationConnectionPropertyHasFilter]
  and: [WorkflowSpecificationConnectionPropertyFilter]
  or: [WorkflowSpecificationConnectionPropertyFilter]
  not: WorkflowSpecificationConnectionPropertyFilter
}

enum WorkflowSpecificationConnectionPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  connection @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionPropertyOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationConnectionPropertyOrderable
  desc: WorkflowSpecificationConnectionPropertyOrderable
  then: WorkflowSpecificationConnectionPropertyOrder
}

enum WorkflowSpecificationConnectionPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  connection: WorkflowSpecificationConnectionRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationConnectionPropertyRef]
  parent: WorkflowSpecificationConnectionPropertyRef
}

input WorkflowSpecificationConnectionPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  connection: WorkflowSpecificationConnectionRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationConnectionPropertyRef]
  parent: WorkflowSpecificationConnectionPropertyRef
}

input WorkflowSpecificationConnectionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  condition: String
  id: String
  name: String
  waypoints: [WorkflowWaypointRef]
  description: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  connectionType: WorkflowSpecificationConnectionTypeRef
  properties: [WorkflowSpecificationConnectionPropertyRef]
  to: WorkflowSpecificationNodeRef
  from: WorkflowSpecificationNodeRef
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type WorkflowSpecificationConnectionType
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  connections(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
  properties(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  connectionsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
  propertiesAggregate(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult
}

type WorkflowSpecificationConnectionTypeAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  _createdByMin: String
  _createdByMax: String
  _createdDateTimeMin: DateTime
  _createdDateTimeMax: DateTime
  _modifiedByMin: String
  _modifiedByMax: String
  _modifiedDateTimeMin: DateTime
  _modifiedDateTimeMax: DateTime
}

input WorkflowSpecificationConnectionTypeFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringHashFilter
  _createdDateTime: DateTimeFilter
  _modifiedDateTime: DateTimeFilter
  has: [WorkflowSpecificationConnectionTypeHasFilter]
  and: [WorkflowSpecificationConnectionTypeFilter]
  or: [WorkflowSpecificationConnectionTypeFilter]
  not: WorkflowSpecificationConnectionTypeFilter
}

enum WorkflowSpecificationConnectionTypeHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  connections @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionTypeOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationConnectionTypeOrderable
  desc: WorkflowSpecificationConnectionTypeOrderable
  then: WorkflowSpecificationConnectionTypeOrder
}

enum WorkflowSpecificationConnectionTypeOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionTypePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  connections: [WorkflowSpecificationConnectionRef]
  properties: [WorkflowSpecificationConnectionTypePropertyRef]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type WorkflowSpecificationConnectionTypeProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  connectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionType!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
  parent(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypeProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult
}

type WorkflowSpecificationConnectionTypePropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
}

input WorkflowSpecificationConnectionTypePropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [WorkflowSpecificationConnectionTypePropertyHasFilter]
  and: [WorkflowSpecificationConnectionTypePropertyFilter]
  or: [WorkflowSpecificationConnectionTypePropertyFilter]
  not: WorkflowSpecificationConnectionTypePropertyFilter
}

enum WorkflowSpecificationConnectionTypePropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  connectionType @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionTypePropertyOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationConnectionTypePropertyOrderable
  desc: WorkflowSpecificationConnectionTypePropertyOrderable
  then: WorkflowSpecificationConnectionTypePropertyOrder
}

enum WorkflowSpecificationConnectionTypePropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
}

input WorkflowSpecificationConnectionTypePropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  connectionType: WorkflowSpecificationConnectionTypeRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationConnectionTypePropertyRef]
  parent: WorkflowSpecificationConnectionTypePropertyRef
}

input WorkflowSpecificationConnectionTypePropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  connectionType: WorkflowSpecificationConnectionTypeRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationConnectionTypePropertyRef]
  parent: WorkflowSpecificationConnectionTypePropertyRef
}

input WorkflowSpecificationConnectionTypeRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  connections: [WorkflowSpecificationConnectionRef]
  properties: [WorkflowSpecificationConnectionTypePropertyRef]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

input WorkflowSpecificationFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdDateTime: DateTimeFilter
  _modifiedDateTime: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [WorkflowSpecificationHasFilter]
  and: [WorkflowSpecificationFilter]
  or: [WorkflowSpecificationFilter]
  not: WorkflowSpecificationFilter
}

enum WorkflowSpecificationHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  versions @join__enumValue(graph: BASS)
  activeVersion @join__enumValue(graph: BASS)
  nextVersion @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  includedIn @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
  workMasters @join__enumValue(graph: BASS)
  workDirectives @join__enumValue(graph: BASS)
  stateModelActions @join__enumValue(graph: BASS)
  rules @join__enumValue(graph: BASS)
  calledByNodes @join__enumValue(graph: BASS)
}

type WorkflowSpecificationNode
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  id: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion!
  properties(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  outflows(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
  inflows(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
  containsWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  form(filter: FormFilter): Form
  inputs(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
  outputs(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
  message(filter: WorkflowMessageFilter): WorkflowMessage
  error(filter: WorkflowErrorFilter): WorkflowError
  timer(filter: WorkflowTimerFilter): WorkflowTimer
  nodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeType!
  role: String
  shape(filter: WorkflowShapeFilter): WorkflowShape
  uiComponent: String
  testCases(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
  boundaryEvents(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
  attachedTo(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  propertiesAggregate(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
  outflowsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
  inflowsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
  inputsAggregate(filter: WorkflowSpecificationNodeVariableFilter): WorkflowSpecificationNodeVariableAggregateResult
  outputsAggregate(filter: WorkflowSpecificationNodeVariableFilter): WorkflowSpecificationNodeVariableAggregateResult
  testCasesAggregate(filter: WorkflowSpecificationNodeTestCaseFilter): WorkflowSpecificationNodeTestCaseAggregateResult
  boundaryEventsAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
}

type WorkflowSpecificationNodeAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  _createdByMin: String
  _createdByMax: String
  _createdDateTimeMin: DateTime
  _createdDateTimeMax: DateTime
  _modifiedByMin: String
  _modifiedByMax: String
  _modifiedDateTimeMin: DateTime
  _modifiedDateTimeMax: DateTime
  roleMin: String
  roleMax: String
  uiComponentMin: String
  uiComponentMax: String
}

input WorkflowSpecificationNodeFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _createdDateTime: DateTimeFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  _modifiedDateTime: DateTimeFilter
  role: StringExactFilter_StringFullTextFilter
  uiComponent: StringExactFilter_StringFullTextFilter
  has: [WorkflowSpecificationNodeHasFilter]
  and: [WorkflowSpecificationNodeFilter]
  or: [WorkflowSpecificationNodeFilter]
  not: WorkflowSpecificationNodeFilter
}

enum WorkflowSpecificationNodeHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
  outflows @join__enumValue(graph: BASS)
  inflows @join__enumValue(graph: BASS)
  containsWorkflowSpecification @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
  form @join__enumValue(graph: BASS)
  inputs @join__enumValue(graph: BASS)
  outputs @join__enumValue(graph: BASS)
  message @join__enumValue(graph: BASS)
  error @join__enumValue(graph: BASS)
  timer @join__enumValue(graph: BASS)
  nodeType @join__enumValue(graph: BASS)
  role @join__enumValue(graph: BASS)
  shape @join__enumValue(graph: BASS)
  uiComponent @join__enumValue(graph: BASS)
  testCases @join__enumValue(graph: BASS)
  boundaryEvents @join__enumValue(graph: BASS)
  attachedTo @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationNodeOrderable
  desc: WorkflowSpecificationNodeOrderable
  then: WorkflowSpecificationNodeOrder
}

enum WorkflowSpecificationNodeOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
  role @join__enumValue(graph: BASS)
  uiComponent @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  properties: [WorkflowSpecificationNodePropertyRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  outflows: [WorkflowSpecificationConnectionRef]
  inflows: [WorkflowSpecificationConnectionRef]
  containsWorkflowSpecification: WorkflowSpecificationRef
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  form: FormRef
  inputs: [WorkflowSpecificationNodeVariableRef]
  outputs: [WorkflowSpecificationNodeVariableRef]
  message: WorkflowMessageRef
  error: WorkflowErrorRef
  timer: WorkflowTimerRef
  nodeType: WorkflowSpecificationNodeTypeRef
  role: String
  shape: WorkflowShapeRef
  uiComponent: String
  testCases: [WorkflowSpecificationNodeTestCaseRef]
  boundaryEvents: [WorkflowSpecificationNodeRef]
  attachedTo: WorkflowSpecificationNodeRef
}

type WorkflowSpecificationNodeProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
  parent(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodeProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult
}

type WorkflowSpecificationNodePropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
}

input WorkflowSpecificationNodePropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [WorkflowSpecificationNodePropertyHasFilter]
  and: [WorkflowSpecificationNodePropertyFilter]
  or: [WorkflowSpecificationNodePropertyFilter]
  not: WorkflowSpecificationNodePropertyFilter
}

enum WorkflowSpecificationNodePropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  node @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodePropertyOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationNodePropertyOrderable
  desc: WorkflowSpecificationNodePropertyOrderable
  then: WorkflowSpecificationNodePropertyOrder
}

enum WorkflowSpecificationNodePropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodePropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  node: WorkflowSpecificationNodeRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationNodePropertyRef]
  parent: WorkflowSpecificationNodePropertyRef
}

input WorkflowSpecificationNodePropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  node: WorkflowSpecificationNodeRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationNodePropertyRef]
  parent: WorkflowSpecificationNodePropertyRef
}

input WorkflowSpecificationNodeRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  id: String
  description: String
  hierarchyScope: HierarchyScopeRef
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  properties: [WorkflowSpecificationNodePropertyRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  outflows: [WorkflowSpecificationConnectionRef]
  inflows: [WorkflowSpecificationConnectionRef]
  containsWorkflowSpecification: WorkflowSpecificationRef
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  form: FormRef
  inputs: [WorkflowSpecificationNodeVariableRef]
  outputs: [WorkflowSpecificationNodeVariableRef]
  message: WorkflowMessageRef
  error: WorkflowErrorRef
  timer: WorkflowTimerRef
  nodeType: WorkflowSpecificationNodeTypeRef
  role: String
  shape: WorkflowShapeRef
  uiComponent: String
  testCases: [WorkflowSpecificationNodeTestCaseRef]
  boundaryEvents: [WorkflowSpecificationNodeRef]
  attachedTo: WorkflowSpecificationNodeRef
}

type WorkflowSpecificationNodeTestCase
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode!
  id: String!
  inputJson: String!
  expectedResult: String!
}

type WorkflowSpecificationNodeTestCaseAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  inputJsonMin: String
  inputJsonMax: String
  expectedResultMin: String
  expectedResultMax: String
}

input WorkflowSpecificationNodeTestCaseFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  has: [WorkflowSpecificationNodeTestCaseHasFilter]
  and: [WorkflowSpecificationNodeTestCaseFilter]
  or: [WorkflowSpecificationNodeTestCaseFilter]
  not: WorkflowSpecificationNodeTestCaseFilter
}

enum WorkflowSpecificationNodeTestCaseHasFilter
  @join__type(graph: BASS)
{
  node @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  inputJson @join__enumValue(graph: BASS)
  expectedResult @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeTestCaseOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationNodeTestCaseOrderable
  desc: WorkflowSpecificationNodeTestCaseOrderable
  then: WorkflowSpecificationNodeTestCaseOrder
}

enum WorkflowSpecificationNodeTestCaseOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  inputJson @join__enumValue(graph: BASS)
  expectedResult @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeTestCasePatch
  @join__type(graph: BASS)
{
  node: WorkflowSpecificationNodeRef
  id: String
  inputJson: String
  expectedResult: String
}

input WorkflowSpecificationNodeTestCaseRef
  @join__type(graph: BASS)
{
  iid: ID
  node: WorkflowSpecificationNodeRef
  id: String
  inputJson: String
  expectedResult: String
}

type WorkflowSpecificationNodeType
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  id: String!
  name: String
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  properties(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
  nodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  propertiesAggregate(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult
  nodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
}

type WorkflowSpecificationNodeTypeAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  _createdByMin: String
  _createdByMax: String
  _createdDateTimeMin: DateTime
  _createdDateTimeMax: DateTime
  _modifiedByMin: String
  _modifiedByMax: String
  _modifiedDateTimeMin: DateTime
  _modifiedDateTimeMax: DateTime
}

input WorkflowSpecificationNodeTypeFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  _createdDateTime: DateTimeFilter
  _modifiedDateTime: DateTimeFilter
  has: [WorkflowSpecificationNodeTypeHasFilter]
  and: [WorkflowSpecificationNodeTypeFilter]
  or: [WorkflowSpecificationNodeTypeFilter]
  not: WorkflowSpecificationNodeTypeFilter
}

enum WorkflowSpecificationNodeTypeHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  nodes @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeTypeOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationNodeTypeOrderable
  desc: WorkflowSpecificationNodeTypeOrderable
  then: WorkflowSpecificationNodeTypeOrder
}

enum WorkflowSpecificationNodeTypeOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeTypePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  name: String
  description: String
  hierarchyScope: HierarchyScopeRef
  properties: [WorkflowSpecificationNodeTypePropertyRef]
  nodes: [WorkflowSpecificationNodeRef]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type WorkflowSpecificationNodeTypeProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  nodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeType!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
  parent(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypeProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult
}

type WorkflowSpecificationNodeTypePropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
}

input WorkflowSpecificationNodeTypePropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [WorkflowSpecificationNodeTypePropertyHasFilter]
  and: [WorkflowSpecificationNodeTypePropertyFilter]
  or: [WorkflowSpecificationNodeTypePropertyFilter]
  not: WorkflowSpecificationNodeTypePropertyFilter
}

enum WorkflowSpecificationNodeTypePropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  nodeType @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeTypePropertyOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationNodeTypePropertyOrderable
  desc: WorkflowSpecificationNodeTypePropertyOrderable
  then: WorkflowSpecificationNodeTypePropertyOrder
}

enum WorkflowSpecificationNodeTypePropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeTypePropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  nodeType: WorkflowSpecificationNodeTypeRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationNodeTypePropertyRef]
  parent: WorkflowSpecificationNodeTypePropertyRef
}

input WorkflowSpecificationNodeTypePropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  nodeType: WorkflowSpecificationNodeTypeRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationNodeTypePropertyRef]
  parent: WorkflowSpecificationNodeTypePropertyRef
}

input WorkflowSpecificationNodeTypeRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  name: String
  description: String
  hierarchyScope: HierarchyScopeRef
  properties: [WorkflowSpecificationNodeTypePropertyRef]
  nodes: [WorkflowSpecificationNodeRef]
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
}

type WorkflowSpecificationNodeVariable
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  source: String!
  target: String!
}

type WorkflowSpecificationNodeVariableAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  sourceMin: String
  sourceMax: String
  targetMin: String
  targetMax: String
}

input WorkflowSpecificationNodeVariableFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  has: [WorkflowSpecificationNodeVariableHasFilter]
  and: [WorkflowSpecificationNodeVariableFilter]
  or: [WorkflowSpecificationNodeVariableFilter]
  not: WorkflowSpecificationNodeVariableFilter
}

enum WorkflowSpecificationNodeVariableHasFilter
  @join__type(graph: BASS)
{
  source @join__enumValue(graph: BASS)
  target @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeVariableOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationNodeVariableOrderable
  desc: WorkflowSpecificationNodeVariableOrderable
  then: WorkflowSpecificationNodeVariableOrder
}

enum WorkflowSpecificationNodeVariableOrderable
  @join__type(graph: BASS)
{
  source @join__enumValue(graph: BASS)
  target @join__enumValue(graph: BASS)
}

input WorkflowSpecificationNodeVariablePatch
  @join__type(graph: BASS)
{
  source: String
  target: String
}

input WorkflowSpecificationNodeVariableRef
  @join__type(graph: BASS)
{
  iid: ID
  source: String
  target: String
}

input WorkflowSpecificationOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationOrderable
  desc: WorkflowSpecificationOrderable
  then: WorkflowSpecificationOrder
}

enum WorkflowSpecificationOrderable
  @join__type(graph: BASS)
{
  nextVersion @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
}

input WorkflowSpecificationPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  versions: [WorkflowSpecificationVersionRef]
  activeVersion: WorkflowSpecificationVersionRef
  nextVersion: String
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  id: String
  includedIn: [WorkflowSpecificationVersionRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  workMasters: [WorkMasterRef]
  workDirectives: [WorkDirectiveRef]
  stateModelActions: [StateModelActionRef]
  rules: [RuleRef]
  calledByNodes: [WorkflowSpecificationNodeRef]
}

type WorkflowSpecificationProperty
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion!
  id: String!
  name: String!
  dataType: DataType
  definitionType: DefinitionType!
  description: String
  value: String
  valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
  parent(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationProperty
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  childrenAggregate(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult
}

type WorkflowSpecificationPropertyAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
}

input WorkflowSpecificationPropertyFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  name: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  value: StringExactFilter_StringFullTextFilter
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  has: [WorkflowSpecificationPropertyHasFilter]
  and: [WorkflowSpecificationPropertyFilter]
  or: [WorkflowSpecificationPropertyFilter]
  not: WorkflowSpecificationPropertyFilter
}

enum WorkflowSpecificationPropertyHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  dataType @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  valueUnitOfMeasure @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
}

input WorkflowSpecificationPropertyOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationPropertyOrderable
  desc: WorkflowSpecificationPropertyOrderable
  then: WorkflowSpecificationPropertyOrder
}

enum WorkflowSpecificationPropertyOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  name @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  value @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
}

input WorkflowSpecificationPropertyPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationPropertyRef]
  parent: WorkflowSpecificationPropertyRef
}

input WorkflowSpecificationPropertyRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  id: String
  name: String
  dataType: DataType
  definitionType: DefinitionType
  description: String
  value: String
  valueUnitOfMeasure: UnitOfMeasureRef
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  children: [WorkflowSpecificationPropertyRef]
  parent: WorkflowSpecificationPropertyRef
}

input WorkflowSpecificationRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  versions: [WorkflowSpecificationVersionRef]
  activeVersion: WorkflowSpecificationVersionRef
  nextVersion: String
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  id: String
  includedIn: [WorkflowSpecificationVersionRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  workMasters: [WorkMasterRef]
  workDirectives: [WorkDirectiveRef]
  stateModelActions: [StateModelActionRef]
  rules: [RuleRef]
  calledByNodes: [WorkflowSpecificationNodeRef]
}

type WorkflowSpecificationVersion
  @join__type(graph: BASS, key: "iid")
  @join__type(graph: BPMN_ENGINE, key: "iid")
  @join__type(graph: CORE, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission] @join__field(graph: BASS)
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @join__field(graph: BASS)
  id: String! @join__field(graph: BASS)
  version: String! @join__field(graph: BASS)
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @join__field(graph: BASS)
  isActiveVersionOf(filter: WorkflowSpecificationFilter): WorkflowSpecification @join__field(graph: BASS)
  versionStatus: VersionState! @join__field(graph: BASS)
  effectiveStart: DateTime @join__field(graph: BASS)
  effectiveEnd: DateTime @join__field(graph: BASS)
  description: String @join__field(graph: BASS)
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @join__field(graph: BASS)
  definitionType: DefinitionType! @join__field(graph: BASS)
  bpmnXMLEncoded: String @join__field(graph: BASS)
  schemaDefinition: String @join__field(graph: BASS)
  isExecutable: Boolean @join__field(graph: BASS)
  _createdBy: String @join__field(graph: BASS)
  _createdDateTime: DateTime @join__field(graph: BASS)
  _modifiedBy: String @join__field(graph: BASS)
  _modifiedDateTime: DateTime @join__field(graph: BASS)
  includePropertiesOf(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification] @join__field(graph: BASS)
  messages(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage] @join__field(graph: BASS)
  timers(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer] @join__field(graph: BASS)
  errors(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError] @join__field(graph: BASS)
  nodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @join__field(graph: BASS)
  connections(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection] @join__field(graph: BASS)
  properties(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty] @join__field(graph: BASS)
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: BASS)
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: BASS)
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult @join__field(graph: BASS)
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult @join__field(graph: BASS)
  includePropertiesOfAggregate(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult @join__field(graph: BASS)
  messagesAggregate(filter: WorkflowMessageFilter): WorkflowMessageAggregateResult @join__field(graph: BASS)
  timersAggregate(filter: WorkflowTimerFilter): WorkflowTimerAggregateResult @join__field(graph: BASS)
  errorsAggregate(filter: WorkflowErrorFilter): WorkflowErrorAggregateResult @join__field(graph: BASS)
  nodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult @join__field(graph: BASS)
  connectionsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult @join__field(graph: BASS)
  propertiesAggregate(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult @join__field(graph: BASS)
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: BASS)
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: BASS)
}

type WorkflowSpecificationVersionAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  versionMin: String
  versionMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  descriptionMin: String
  descriptionMax: String
  bpmnXMLEncodedMin: String
  bpmnXMLEncodedMax: String
  schemaDefinitionMin: String
  schemaDefinitionMax: String
  _createdByMin: String
  _createdByMax: String
  _createdDateTimeMin: DateTime
  _createdDateTimeMax: DateTime
  _modifiedByMin: String
  _modifiedByMax: String
  _modifiedDateTimeMin: DateTime
  _modifiedDateTimeMax: DateTime
}

input WorkflowSpecificationVersionFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  version: StringExactFilter_StringFullTextFilter
  versionStatus: VersionState_hash
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  _createdDateTime: DateTimeFilter
  _modifiedDateTime: DateTimeFilter
  has: [WorkflowSpecificationVersionHasFilter]
  and: [WorkflowSpecificationVersionFilter]
  or: [WorkflowSpecificationVersionFilter]
  not: WorkflowSpecificationVersionFilter
}

enum WorkflowSpecificationVersionHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  isActiveVersionOf @join__enumValue(graph: BASS)
  versionStatus @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  bpmnXMLEncoded @join__enumValue(graph: BASS)
  schemaDefinition @join__enumValue(graph: BASS)
  isExecutable @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
  includePropertiesOf @join__enumValue(graph: BASS)
  messages @join__enumValue(graph: BASS)
  timers @join__enumValue(graph: BASS)
  errors @join__enumValue(graph: BASS)
  nodes @join__enumValue(graph: BASS)
  connections @join__enumValue(graph: BASS)
  properties @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
}

input WorkflowSpecificationVersionOrder
  @join__type(graph: BASS)
{
  asc: WorkflowSpecificationVersionOrderable
  desc: WorkflowSpecificationVersionOrderable
  then: WorkflowSpecificationVersionOrder
}

enum WorkflowSpecificationVersionOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  bpmnXMLEncoded @join__enumValue(graph: BASS)
  schemaDefinition @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _createdDateTime @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  _modifiedDateTime @join__enumValue(graph: BASS)
}

input WorkflowSpecificationVersionPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  version: String
  workflowSpecification: WorkflowSpecificationRef
  isActiveVersionOf: WorkflowSpecificationRef
  versionStatus: VersionState
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  bpmnXMLEncoded: String
  schemaDefinition: String
  isExecutable: Boolean
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  includePropertiesOf: [WorkflowSpecificationRef]
  messages: [WorkflowMessageRef]
  timers: [WorkflowTimerRef]
  errors: [WorkflowErrorRef]
  nodes: [WorkflowSpecificationNodeRef]
  connections: [WorkflowSpecificationConnectionRef]
  properties: [WorkflowSpecificationPropertyRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
}

input WorkflowSpecificationVersionRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  id: String
  version: String
  workflowSpecification: WorkflowSpecificationRef
  isActiveVersionOf: WorkflowSpecificationRef
  versionStatus: VersionState
  effectiveStart: DateTime
  effectiveEnd: DateTime
  description: String
  hierarchyScope: HierarchyScopeRef
  definitionType: DefinitionType
  bpmnXMLEncoded: String
  schemaDefinition: String
  isExecutable: Boolean
  _createdBy: String
  _createdDateTime: DateTime
  _modifiedBy: String
  _modifiedDateTime: DateTime
  includePropertiesOf: [WorkflowSpecificationRef]
  messages: [WorkflowMessageRef]
  timers: [WorkflowTimerRef]
  errors: [WorkflowErrorRef]
  nodes: [WorkflowSpecificationNodeRef]
  connections: [WorkflowSpecificationConnectionRef]
  properties: [WorkflowSpecificationPropertyRef]
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
}

type WorkflowTimer
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  id: String!
  reference: String
  workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion
  node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode
  enabled: Boolean
}

type WorkflowTimerAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  idMin: String
  idMax: String
  referenceMin: String
  referenceMax: String
}

input WorkflowTimerFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  id: StringHashFilter
  reference: StringExactFilter_StringFullTextFilter
  has: [WorkflowTimerHasFilter]
  and: [WorkflowTimerFilter]
  or: [WorkflowTimerFilter]
  not: WorkflowTimerFilter
}

enum WorkflowTimerHasFilter
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  reference @join__enumValue(graph: BASS)
  workflowSpecificationVersion @join__enumValue(graph: BASS)
  node @join__enumValue(graph: BASS)
  enabled @join__enumValue(graph: BASS)
}

input WorkflowTimerOrder
  @join__type(graph: BASS)
{
  asc: WorkflowTimerOrderable
  desc: WorkflowTimerOrderable
  then: WorkflowTimerOrder
}

enum WorkflowTimerOrderable
  @join__type(graph: BASS)
{
  id @join__enumValue(graph: BASS)
  reference @join__enumValue(graph: BASS)
}

input WorkflowTimerPatch
  @join__type(graph: BASS)
{
  id: String
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  enabled: Boolean
}

input WorkflowTimerRef
  @join__type(graph: BASS)
{
  iid: ID
  id: String
  reference: String
  workflowSpecificationVersion: WorkflowSpecificationVersionRef
  node: WorkflowSpecificationNodeRef
  enabled: Boolean
}

type WorkflowWaypoint
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  connection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnection!
  x: String!
  y: String!
}

type WorkflowWaypointAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  xMin: String
  xMax: String
  yMin: String
  yMax: String
}

input WorkflowWaypointFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  has: [WorkflowWaypointHasFilter]
  and: [WorkflowWaypointFilter]
  or: [WorkflowWaypointFilter]
  not: WorkflowWaypointFilter
}

enum WorkflowWaypointHasFilter
  @join__type(graph: BASS)
{
  connection @join__enumValue(graph: BASS)
  x @join__enumValue(graph: BASS)
  y @join__enumValue(graph: BASS)
}

input WorkflowWaypointOrder
  @join__type(graph: BASS)
{
  asc: WorkflowWaypointOrderable
  desc: WorkflowWaypointOrderable
  then: WorkflowWaypointOrder
}

enum WorkflowWaypointOrderable
  @join__type(graph: BASS)
{
  x @join__enumValue(graph: BASS)
  y @join__enumValue(graph: BASS)
}

input WorkflowWaypointPatch
  @join__type(graph: BASS)
{
  connection: WorkflowSpecificationConnectionRef
  x: String
  y: String
}

input WorkflowWaypointRef
  @join__type(graph: BASS)
{
  iid: ID
  connection: WorkflowSpecificationConnectionRef
  x: String
  y: String
}

type WorkMaster
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  version: String!
  description: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  workType: WorkType
  duration: Float
  durationUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
  publishedDate: DateTime
  definitionType: DefinitionType!
  parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
  propertyMeasurements(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
  parent(filter: WorkMasterFilter): WorkMaster
  children(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  workDirectives(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  defines(filter: WorkMasterFilter): WorkMaster
  definedBy(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  processSegment(filter: ProcessSegmentFilter): ProcessSegment
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
  physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
  evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
  propertyMeasurementsAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
  childrenAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
  workDirectivesAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
  definedByAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type WorkMasterAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
  publishedDateMin: DateTime
  publishedDateMax: DateTime
}

input WorkMasterFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  version: StringExactFilter_StringFullTextFilter
  description: StringExactFilter_StringFullTextFilter
  publishedDate: DateTimeFilter
  definitionType: DefinitionType_hash
  has: [WorkMasterHasFilter]
  and: [WorkMasterFilter]
  or: [WorkMasterFilter]
  not: WorkMasterFilter
}

enum WorkMasterHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  durationUnitOfMeasure @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  definitionType @join__enumValue(graph: BASS)
  parameterSpecifications @join__enumValue(graph: BASS)
  personnelSpecifications @join__enumValue(graph: BASS)
  equipmentSpecifications @join__enumValue(graph: BASS)
  physicalAssetSpecifications @join__enumValue(graph: BASS)
  materialSpecifications @join__enumValue(graph: BASS)
  evaluatedProperties @join__enumValue(graph: BASS)
  propertyMeasurements @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  workDirectives @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
  defines @join__enumValue(graph: BASS)
  definedBy @join__enumValue(graph: BASS)
  processSegment @join__enumValue(graph: BASS)
  operationsDefinition @join__enumValue(graph: BASS)
  operationsSegment @join__enumValue(graph: BASS)
  workflowSpecification @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input WorkMasterOrder
  @join__type(graph: BASS)
{
  asc: WorkMasterOrderable
  desc: WorkMasterOrderable
  then: WorkMasterOrder
}

enum WorkMasterOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  version @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  duration @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
}

input WorkMasterPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  version: String
  description: String
  hierarchyScope: HierarchyScopeRef
  workType: WorkType
  duration: Float
  durationUnitOfMeasure: UnitOfMeasureRef
  publishedDate: DateTime
  definitionType: DefinitionType
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  propertyMeasurements: [PropertyMeasurementRef]
  parent: WorkMasterRef
  children: [WorkMasterRef]
  workDirectives: [WorkDirectiveRef]
  jobOrders: [JobOrderRef]
  defines: WorkMasterRef
  definedBy: [WorkMasterRef]
  processSegment: ProcessSegmentRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  workflowSpecification: WorkflowSpecificationRef
  jobResponses: [JobResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input WorkMasterRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  version: String
  description: String
  hierarchyScope: HierarchyScopeRef
  workType: WorkType
  duration: Float
  durationUnitOfMeasure: UnitOfMeasureRef
  publishedDate: DateTime
  definitionType: DefinitionType
  parameterSpecifications: [ParameterSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
  materialSpecifications: [MaterialSpecificationRef]
  evaluatedProperties: [EvaluatedPropertyRef]
  propertyMeasurements: [PropertyMeasurementRef]
  parent: WorkMasterRef
  children: [WorkMasterRef]
  workDirectives: [WorkDirectiveRef]
  jobOrders: [JobOrderRef]
  defines: WorkMasterRef
  definedBy: [WorkMasterRef]
  processSegment: ProcessSegmentRef
  operationsDefinition: OperationsDefinitionRef
  operationsSegment: OperationsSegmentRef
  workflowSpecification: WorkflowSpecificationRef
  jobResponses: [JobResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type WorkPerformance
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  workState: JobState
  workResponses(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse!]!
  children(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
  parent(filter: WorkPerformanceFilter): WorkPerformance
  workSchedule(filter: WorkScheduleFilter): WorkSchedule
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  workResponsesAggregate(filter: WorkResponseFilter): WorkResponseAggregateResult
  childrenAggregate(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult
}

type WorkPerformanceAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
  publishedDateMin: DateTime
  publishedDateMax: DateTime
}

input WorkPerformanceFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  workType: WorkType_hash
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  publishedDate: DateTimeFilter
  has: [WorkPerformanceHasFilter]
  and: [WorkPerformanceFilter]
  or: [WorkPerformanceFilter]
  not: WorkPerformanceFilter
}

enum WorkPerformanceHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  workState @join__enumValue(graph: BASS)
  workResponses @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  workSchedule @join__enumValue(graph: BASS)
}

input WorkPerformanceOrder
  @join__type(graph: BASS)
{
  asc: WorkPerformanceOrderable
  desc: WorkPerformanceOrderable
  then: WorkPerformanceOrder
}

enum WorkPerformanceOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
}

input WorkPerformancePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  workState: JobState
  workResponses: [WorkResponseRef!]
  children: [WorkPerformanceRef]
  parent: WorkPerformanceRef
  workSchedule: WorkScheduleRef
}

input WorkPerformanceRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  workState: JobState
  workResponses: [WorkResponseRef!]
  children: [WorkPerformanceRef]
  parent: WorkPerformanceRef
  workSchedule: WorkScheduleRef
}

type WorkRequest
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  workType: WorkType!
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  priority: String
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  requestState: ScheduleState!
  children(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
  parent(filter: WorkRequestFilter): WorkRequest
  workSchedule(filter: WorkScheduleFilter): WorkSchedule!
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder!]!
  operationsRequest(filter: OperationsRequestFilter): OperationsRequest
  segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement
  workResponses(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  childrenAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
  workResponsesAggregate(filter: WorkResponseFilter): WorkResponseAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type WorkRequestAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  plannedStartDateTimeMin: DateTime
  plannedStartDateTimeMax: DateTime
  plannedEndDateTimeMin: DateTime
  plannedEndDateTimeMax: DateTime
  priorityMin: String
  priorityMax: String
}

input WorkRequestFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  workType: WorkType_hash
  description: StringExactFilter_StringFullTextFilter
  plannedStartDateTime: DateTimeFilter
  plannedEndDateTime: DateTimeFilter
  has: [WorkRequestHasFilter]
  and: [WorkRequestFilter]
  or: [WorkRequestFilter]
  not: WorkRequestFilter
}

enum WorkRequestHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  plannedStartDateTime @join__enumValue(graph: BASS)
  plannedEndDateTime @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  requestState @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  workSchedule @join__enumValue(graph: BASS)
  jobOrders @join__enumValue(graph: BASS)
  operationsRequest @join__enumValue(graph: BASS)
  segmentRequirement @join__enumValue(graph: BASS)
  workResponses @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input WorkRequestOrder
  @join__type(graph: BASS)
{
  asc: WorkRequestOrderable
  desc: WorkRequestOrderable
  then: WorkRequestOrder
}

enum WorkRequestOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  plannedStartDateTime @join__enumValue(graph: BASS)
  plannedEndDateTime @join__enumValue(graph: BASS)
  priority @join__enumValue(graph: BASS)
}

input WorkRequestPatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  workType: WorkType
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  priority: String
  hierarchyScope: HierarchyScopeRef
  requestState: ScheduleState
  children: [WorkRequestRef]
  parent: WorkRequestRef
  workSchedule: WorkScheduleRef
  jobOrders: [JobOrderRef!]
  operationsRequest: OperationsRequestRef
  segmentRequirement: SegmentRequirementRef
  workResponses: [WorkResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input WorkRequestRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  workType: WorkType
  description: String
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  priority: String
  hierarchyScope: HierarchyScopeRef
  requestState: ScheduleState
  children: [WorkRequestRef]
  parent: WorkRequestRef
  workSchedule: WorkScheduleRef
  jobOrders: [JobOrderRef!]
  operationsRequest: OperationsRequestRef
  segmentRequirement: SegmentRequirementRef
  workResponses: [WorkResponseRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type WorkResponse
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  responseState: JobState
  workPerformance(filter: WorkPerformanceFilter): WorkPerformance!
  children(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
  parent(filter: WorkResponseFilter): WorkResponse
  workRequest(filter: WorkRequestFilter): WorkRequest
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse!]!
  segmentResponse(filter: SegmentResponseFilter): SegmentResponse
  events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  childrenAggregate(filter: WorkResponseFilter): WorkResponseAggregateResult
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
  eventsAggregate(filter: EventFilter): EventAggregateResult
  signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type WorkResponseAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
}

input WorkResponseFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  description: StringExactFilter_StringFullTextFilter
  workType: WorkType_hash
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  responseState: JobState_hash
  has: [WorkResponseHasFilter]
  and: [WorkResponseFilter]
  or: [WorkResponseFilter]
  not: WorkResponseFilter
}

enum WorkResponseHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  responseState @join__enumValue(graph: BASS)
  workPerformance @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  workRequest @join__enumValue(graph: BASS)
  jobResponses @join__enumValue(graph: BASS)
  segmentResponse @join__enumValue(graph: BASS)
  events @join__enumValue(graph: BASS)
  signatures @join__enumValue(graph: BASS)
  comments @join__enumValue(graph: BASS)
}

input WorkResponseOrder
  @join__type(graph: BASS)
{
  asc: WorkResponseOrderable
  desc: WorkResponseOrderable
  then: WorkResponseOrder
}

enum WorkResponseOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  startDateTime @join__enumValue(graph: BASS)
  endDateTime @join__enumValue(graph: BASS)
}

input WorkResponsePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  responseState: JobState
  workPerformance: WorkPerformanceRef
  children: [WorkResponseRef]
  parent: WorkResponseRef
  workRequest: WorkRequestRef
  jobResponses: [JobResponseRef!]
  segmentResponse: SegmentResponseRef
  events: [EventRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

input WorkResponseRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  description: String
  workType: WorkType
  startDateTime: DateTime
  endDateTime: DateTime
  hierarchyScope: HierarchyScopeRef
  responseState: JobState
  workPerformance: WorkPerformanceRef
  children: [WorkResponseRef]
  parent: WorkResponseRef
  workRequest: WorkRequestRef
  jobResponses: [JobResponseRef!]
  segmentResponse: SegmentResponseRef
  events: [EventRef]
  signatures: [SignatureRef]
  comments: [CommentRef]
}

type WorkSchedule
  @join__type(graph: BASS, key: "iid")
{
  iid: ID!
  acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
  recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
  _createdOn: DateTime!
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime!
  effectiveEnd: DateTime
  id: String!
  workType: WorkType
  description: String
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
  scheduleState: ScheduleState
  workRequests(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
  children(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
  parent(filter: WorkScheduleFilter): WorkSchedule
  workPerformances(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
  aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
  recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
  workRequestsAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
  childrenAggregate(filter: WorkScheduleFilter): WorkScheduleAggregateResult
  workPerformancesAggregate(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult
}

type WorkScheduleAggregateResult
  @join__type(graph: BASS)
{
  count: Int
  _createdOnMin: DateTime
  _createdOnMax: DateTime
  _modifiedOnMin: DateTime
  _modifiedOnMax: DateTime
  _createdByMin: String
  _createdByMax: String
  _modifiedByMin: String
  _modifiedByMax: String
  effectiveStartMin: DateTime
  effectiveStartMax: DateTime
  effectiveEndMin: DateTime
  effectiveEndMax: DateTime
  idMin: String
  idMax: String
  descriptionMin: String
  descriptionMax: String
  scheduledStartDateMin: DateTime
  scheduledStartDateMax: DateTime
  scheduledEndDateMin: DateTime
  scheduledEndDateMax: DateTime
  publishedDateMin: DateTime
  publishedDateMax: DateTime
}

input WorkScheduleFilter
  @join__type(graph: BASS)
{
  iid: [ID!]
  _createdBy: StringExactFilter_StringFullTextFilter
  _modifiedBy: StringExactFilter_StringFullTextFilter
  effectiveStart: DateTimeFilter
  effectiveEnd: DateTimeFilter
  id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
  workType: WorkType_hash
  description: StringExactFilter_StringFullTextFilter
  scheduledStartDate: DateTimeFilter
  scheduledEndDate: DateTimeFilter
  publishedDate: DateTimeFilter
  scheduleState: ScheduleState_hash
  has: [WorkScheduleHasFilter]
  and: [WorkScheduleFilter]
  or: [WorkScheduleFilter]
  not: WorkScheduleFilter
}

enum WorkScheduleHasFilter
  @join__type(graph: BASS)
{
  acl @join__enumValue(graph: BASS)
  recordEntries @join__enumValue(graph: BASS)
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  workType @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  scheduledStartDate @join__enumValue(graph: BASS)
  scheduledEndDate @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
  hierarchyScope @join__enumValue(graph: BASS)
  scheduleState @join__enumValue(graph: BASS)
  workRequests @join__enumValue(graph: BASS)
  children @join__enumValue(graph: BASS)
  parent @join__enumValue(graph: BASS)
  workPerformances @join__enumValue(graph: BASS)
}

input WorkScheduleOrder
  @join__type(graph: BASS)
{
  asc: WorkScheduleOrderable
  desc: WorkScheduleOrderable
  then: WorkScheduleOrder
}

enum WorkScheduleOrderable
  @join__type(graph: BASS)
{
  _createdOn @join__enumValue(graph: BASS)
  _modifiedOn @join__enumValue(graph: BASS)
  _createdBy @join__enumValue(graph: BASS)
  _modifiedBy @join__enumValue(graph: BASS)
  effectiveStart @join__enumValue(graph: BASS)
  effectiveEnd @join__enumValue(graph: BASS)
  id @join__enumValue(graph: BASS)
  description @join__enumValue(graph: BASS)
  scheduledStartDate @join__enumValue(graph: BASS)
  scheduledEndDate @join__enumValue(graph: BASS)
  publishedDate @join__enumValue(graph: BASS)
}

input WorkSchedulePatch
  @join__type(graph: BASS)
{
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  workType: WorkType
  description: String
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  scheduleState: ScheduleState
  workRequests: [WorkRequestRef]
  children: [WorkScheduleRef]
  parent: WorkScheduleRef
  workPerformances: [WorkPerformanceRef]
}

input WorkScheduleRef
  @join__type(graph: BASS)
{
  iid: ID
  acl: [AccessPermissionRef]
  recordEntries: [InformationObjectRef]
  _createdOn: DateTime
  _modifiedOn: DateTime
  _createdBy: String
  _modifiedBy: String
  effectiveStart: DateTime
  effectiveEnd: DateTime
  id: String
  workType: WorkType
  description: String
  scheduledStartDate: DateTime
  scheduledEndDate: DateTime
  publishedDate: DateTime
  hierarchyScope: HierarchyScopeRef
  scheduleState: ScheduleState
  workRequests: [WorkRequestRef]
  children: [WorkScheduleRef]
  parent: WorkScheduleRef
  workPerformances: [WorkPerformanceRef]
}

enum WorkType
  @join__type(graph: BASS)
  @join__type(graph: CORE)
{
  PRODUCTION @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  MAINTENANCE @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  QUALITY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  INVENTORY @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
  MIXED @join__enumValue(graph: BASS) @join__enumValue(graph: CORE)
}

input WorkType_hash
  @join__type(graph: BASS)
{
  eq: WorkType
  in: [WorkType]
}