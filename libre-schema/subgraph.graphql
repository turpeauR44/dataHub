#######################
# Input Schema
#######################

type Event @withSubscription @key(fields: "iid") {
	iid: ID!
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: event)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	value: String
	previousValue: String
	messageText: String @search(by: [hash])
	personID: String @search(by: [hash])
	computerID: String @search(by: [hash])
	proceduralElementReference: String @search(by: [hash])
	category: String @search(by: [hash])
	effectiveDateTime: DateTime @search
	recordedDateTime: DateTime @search
	attribute: String @search(by: [hash])
	eventProperties(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty] @hasInverse(field: event)
	eventType(filter: EventTypeFilter): EventType @hasInverse(field: events)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: events)
	person(filter: PersonFilter): Person @hasInverse(field: events)
	materialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: events)
	materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: events)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: events)
	workResponse(filter: WorkResponseFilter): WorkResponse @hasInverse(field: events)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: events)
	jobResponseData(filter: JobResponseDataFilter): JobResponseData @hasInverse(field: events)
	alarmEvents(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent] @hasInverse(field: event)
	eventAssociationsFrom(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation] @hasInverse(field: from)
	eventAssociationsTo(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation] @hasInverse(field: to)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: event)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: event)
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	eventPropertiesAggregate(filter: EventPropertyFilter): EventPropertyAggregateResult
	alarmEventsAggregate(filter: AlarmEventFilter): AlarmEventAggregateResult
	eventAssociationsFromAggregate(filter: EventAssociationFilter): EventAssociationAggregateResult
	eventAssociationsToAggregate(filter: EventAssociationFilter): EventAssociationAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type AlarmEvent @withSubscription @key(fields: "iid") {
	iid: ID!
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	alarmEvent: String! @search(by: [hash])
	alarmLimit: String @search(by: [hash])
	alarmType: String @search(by: [hash])
	priority: String @search(by: [hash])
	event(filter: EventFilter): Event @hasInverse(field: alarmEvents)
	effectiveDateTime: DateTime @search
	recordedDateTime: DateTime @search
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: alarmEvent)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: alarmEvent)
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type EventType @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	version: String @search(by: [fulltext,exact])
	label: String! @search(by: [fulltext,exact,regexp])
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: eventType)
	parent(filter: EventTypeFilter): EventType @hasInverse(field: children)
	children(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType] @hasInverse(field: parent)
	eventSubtypes(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype] @hasInverse(field: eventTypes)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	childrenAggregate(filter: EventTypeFilter): EventTypeAggregateResult
	eventSubtypesAggregate(filter: EventSubtypeFilter): EventSubtypeAggregateResult
}

type EventSubtype @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	version: String @search(by: [fulltext,exact])
	label: String! @search(by: [fulltext,exact,regexp])
	eventTypes(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType!] @hasInverse(field: eventSubtypes)
	parent(filter: EventSubtypeFilter): EventSubtype @hasInverse(field: children)
	children(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype] @hasInverse(field: parent)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	eventTypesAggregate(filter: EventTypeFilter): EventTypeAggregateResult
	childrenAggregate(filter: EventSubtypeFilter): EventSubtypeAggregateResult
}

type EventProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	version: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact,regexp])
	label: String @search(by: [fulltext,exact,regexp])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	parent(filter: EventPropertyFilter): EventProperty @hasInverse(field: children)
	children(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty] @hasInverse(field: parent)
	event(filter: EventFilter): Event @hasInverse(field: eventProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EventPropertyFilter): EventPropertyAggregateResult
}

type EventAssociation @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	version: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact,regexp])
	from(filter: EventFilter): Event! @hasInverse(field: eventAssociationsFrom)
	to(filter: EventFilter): Event! @hasInverse(field: eventAssociationsTo)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type HierarchyScope @withSubscription @key(fields: "iid") {
	iid: ID!
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: hierarchyScope)
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	equipmentLevel: EquipmentElementLevel
	children(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope] @hasInverse(field: parent)
	parent(filter: HierarchyScopeFilter): HierarchyScope @hasInverse(field: children)
	equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @hasInverse(field: hierarchyScope)
	materialClassVersions(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion] @hasInverse(field: hierarchyScope)
	materialDefinitionVersions(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @hasInverse(field: hierarchyScope)
	materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: hierarchyScope)
	materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: hierarchyScope)
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childrenAggregate(filter: HierarchyScopeFilter): HierarchyScopeAggregateResult
	equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
	materialClassVersionsAggregate(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult
	materialDefinitionVersionsAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult
	materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
}

type SpatialDefinition @withSubscription @key(fields: "iid") {
	iid: ID!
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: spatialDefinition)
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	pointValue: Point
	polygonValue: Polygon
	multiPolygonValue: MultiPolygon
	srid: String @search(by: [fulltext,exact])
	sridAuthority: String @search(by: [fulltext,exact])
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
}

type OperationalLocationClass @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationalLocationClass)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @hasInverse(field: operationalLocationClass)
	activeVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	includedIn(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @hasInverse(field: includesPropertiesOf)
	isPartOf(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @hasInverse(field: isMadeUpOf)
	isMadeUpOf(filter: OperationalLocationClassFilter): OperationalLocationClass @hasInverse(field: isPartOf)
	operationalLocationVersions(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion] @hasInverse(field: operationalLocationClasses)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult
	includedInAggregate(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult
	isPartOfAggregate(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult
	operationalLocationVersionsAggregate(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult
}

type OperationalLocationClassVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationalLocationClassVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: OperationalLocationClassFilter): OperationalLocationClass @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	name: String @search(by: [fulltext])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	operationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClass! @hasInverse(field: versions)
	includesPropertiesOf(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @hasInverse(field: includedIn)
	isPartOf(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion] @hasInverse(field: isMadeUpOf)
	isMadeUpOf(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion @hasInverse(field: isPartOf)
	properties(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty] @hasInverse(field: operationalLocationClassVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	includesPropertiesOfAggregate(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult
	isPartOfAggregate(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult
	propertiesAggregate(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult
}

type OperationalLocationClassProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	propertyType: Isa95PropertyType!
	isPartOf(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty] @hasInverse(field: isMadeUpOf)
	isMadeUpOf(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassProperty @hasInverse(field: isPartOf)
	operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion! @hasInverse(field: properties)
	mapsTo(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @hasInverse(field: mapsTo)
	isPartOfAggregate(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult
	mapsToAggregate(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult
}

type OperationalLocation @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationalLocation)
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion] @hasInverse(field: operationalLocation)
	activeVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	isPartOf(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation] @hasInverse(field: isMadeUpOf)
	isMadeUpOf(filter: OperationalLocationFilter): OperationalLocation @hasInverse(field: isPartOf)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult
	isPartOfAggregate(filter: OperationalLocationFilter): OperationalLocationAggregateResult
}

type OperationalLocationVersion @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationalLocationVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: OperationalLocationFilter): OperationalLocation @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	name: String @search(by: [fulltext])
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation! @hasInverse(field: versions)
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocationClasses(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass] @hasInverse(field: operationalLocationVersions)
	properties(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @hasInverse(field: operationalLocationVersion)
	isPartOf(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion] @hasInverse(field: isMadeUpOf)
	isMadeUpOf(filter: OperationalLocationVersionFilter): OperationalLocationVersion @hasInverse(field: isPartOf)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	operationalLocationClassesAggregate(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult
	propertiesAggregate(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult
	isPartOfAggregate(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult
}

type OperationalLocationProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	isPartOf(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty] @hasInverse(field: isMadeUpOf)
	isMadeUpOf(filter: OperationalLocationPropertyFilter): OperationalLocationProperty @hasInverse(field: isPartOf)
	operationalLocationVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersion! @hasInverse(field: properties)
	mapsTo(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassProperty @hasInverse(field: mapsTo)
	isPartOfAggregate(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult
}

type PersonnelClass @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: personnelClass)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion] @hasInverse(field: personnelClass)
	activeVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isIncludedIn(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion] @hasInverse(field: includesPropertiesOf)
	personVersions(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion] @hasInverse(field: personnelClasses)
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: personnelClass)
	personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @hasInverse(field: personnelClass)
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: personnelClass)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByPersonnelClass)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsPersonnelClass)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: personnelClass)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult
	isIncludedInAggregate(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult
	personVersionsAggregate(filter: PersonVersionFilter): PersonVersionAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type PersonnelClassVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	personnelClass(filter: PersonnelClassFilter): PersonnelClass! @hasInverse(field: versions)
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: personnelClassVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: PersonnelClassFilter): PersonnelClass @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	properties(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty] @hasInverse(field: personnelClassVersion)
	includesPropertiesOf(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @hasInverse(field: isIncludedIn)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: personnelClassVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	propertiesAggregate(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult
	includesPropertiesOfAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
}

type PersonnelClassProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	propertyType: Isa95PropertyType!
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	personnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion! @hasInverse(field: properties)
	children(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty] @hasInverse(field: parent)
	parent(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @hasInverse(field: children)
	personProperty(filter: PersonPropertyFilter): PersonProperty @hasInverse(field: personnelClassProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: personnelClassProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: personnelClassProperty)
	personnelRequirementProperties(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @hasInverse(field: personnelClassProperty)
	personnelSpecificationProperties(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @hasInverse(field: personnelClassProperty)
	personnelActualProperties(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @hasInverse(field: personnelClassProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	personnelRequirementPropertiesAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
	personnelSpecificationPropertiesAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
	personnelActualPropertiesAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
}

type Person @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: person)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion] @hasInverse(field: person)
	activeVersion(filter: PersonVersionFilter): PersonVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: person)
	personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @hasInverse(field: person)
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: person)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByPerson)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsPerson)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: person)
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: person)
	stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @hasInverse(field: person)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: PersonVersionFilter): PersonVersionAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
}

type PersonVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	person(filter: PersonFilter): Person! @hasInverse(field: versions)
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: personVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: PersonFilter): Person @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	name: String! @search(by: [fulltext,exact])
	personnelClasses(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @hasInverse(field: personVersions)
	properties(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty] @hasInverse(field: personVersion)
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: personVersion)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: personVersion)
	signaturesMade(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: personVersion)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: personVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	personnelClassesAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	propertiesAggregate(filter: PersonPropertyFilter): PersonPropertyAggregateResult
	personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
	signaturesMadeAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PersonProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	personVersion(filter: PersonVersionFilter): PersonVersion! @hasInverse(field: properties)
	children(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty] @hasInverse(field: parent)
	parent(filter: PersonPropertyFilter): PersonProperty @hasInverse(field: children)
	personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @hasInverse(field: personProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: personProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: personProperty)
	personnelSpecificationProperties(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @hasInverse(field: personProperty)
	personnelRequirementProperties(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @hasInverse(field: personProperty)
	personnelActualProperties(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @hasInverse(field: personProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonPropertyFilter): PersonPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	personnelSpecificationPropertiesAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
	personnelRequirementPropertiesAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
	personnelActualPropertiesAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
}

type EquipmentClass @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: equipmentClass)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @hasInverse(field: equipmentClass)
	activeVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isIncludedIn(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @hasInverse(field: includesPropertiesOf)
	isMadeUpOf(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @hasInverse(field: isPartOf)
	isPartOf(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @hasInverse(field: isMadeUpOf)
	equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @hasInverse(field: equipmentClasses)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: equipmentClass)
	equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @hasInverse(field: equipmentClass)
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: equipmentClass)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByEquipmentClass)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsEquipmentClass)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: equipmentClass)
	uiSortIndex: Int
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult
	isIncludedInAggregate(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult
	isMadeUpOfAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	isPartOfAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type EquipmentClassVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass! @hasInverse(field: versions)
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: equipmentClassVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	equipmentLevel: EquipmentElementLevel
	properties(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @hasInverse(field: equipmentClassVersion)
	rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @hasInverse(field: equipmentClassVersion)
	includesPropertiesOf(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @hasInverse(field: isIncludedIn)
	equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @hasInverse(field: equipmentClassVersions)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: equipmentClassVersion)
	image: String
	displayName: String @search(by: [hash])
	uiMonochromeIcon: String
	uiMonochromeIconColour: String
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	propertiesAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult
	rulesAggregate(filter: RuleFilter): RuleAggregateResult
	includesPropertiesOfAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
}

type EquipmentClassProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	propertyType: Isa95PropertyType!
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	bindingType: PropertyBindingType @search
	equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion! @hasInverse(field: properties)
	children(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @hasInverse(field: parent)
	parent(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @hasInverse(field: children)
	equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty @hasInverse(field: equipmentClassProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: equipmentClassProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: equipmentClassProperty)
	equipmentRequirementProperties(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @hasInverse(field: equipmentClassProperty)
	equipmentSpecificationProperties(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @hasInverse(field: equipmentClassProperty)
	equipmentActualProperties(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @hasInverse(field: equipmentClassProperty)
	triggersRules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @hasInverse(field: triggerProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	equipmentRequirementPropertiesAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
	equipmentSpecificationPropertiesAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
	equipmentActualPropertiesAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
	triggersRulesAggregate(filter: RuleFilter): RuleAggregateResult
}

type Equipment @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: equipment)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @hasInverse(field: equipment)
	activeVersion(filter: EquipmentVersionFilter): EquipmentVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isMadeUpOf(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @hasInverse(field: isPartOf)
	isPartOf(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @hasInverse(field: isMadeUpOf)
	equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping] @hasInverse(field: equipment)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: equipment)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: equipment)
	equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @hasInverse(field: equipment)
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: equipment)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByEquipment)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsEquipment)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: equipment)
	stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @hasInverse(field: equipment)
	materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: storageLocationEquipment)
	materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: storageLocationEquipment)
	uiSortIndex: Int
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: equipment)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
	isMadeUpOfAggregate(filter: EquipmentFilter): EquipmentAggregateResult
	isPartOfAggregate(filter: EquipmentFilter): EquipmentAggregateResult
	equipmentAssetMappingAggregate(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
	materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
}

type EquipmentVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	equipment(filter: EquipmentFilter): Equipment! @hasInverse(field: versions)
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: equipmentVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: EquipmentFilter): Equipment @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @hasInverse(field: equipmentVersions)
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	equipmentLevel: EquipmentElementLevel
	displayName: String @search(by: [hash])
	timeZoneName: String
	equipmentClasses(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @hasInverse(field: equipmentVersions)
	equipmentClassVersions(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion] @hasInverse(field: equipmentVersions)
	properties(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty] @hasInverse(field: equipmentVersion)
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: equipmentVersion)
	propertyOverrides(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @hasInverse(field: equipmentVersions)
	propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @hasInverse(field: equipmentVersion)
	workCalendar(filter: WorkCalendarFilter): WorkCalendar @hasInverse(field: equipmentVersions)
	dataSources(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @hasInverse(field: equipmentVersion)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: equipmentVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	equipmentClassesAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	equipmentClassVersionsAggregate(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult
	propertiesAggregate(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult
	equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	propertyOverridesAggregate(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult
	propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
	dataSourcesAggregate(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
}

type EquipmentDataSource @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion! @hasInverse(field: dataSources)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	topicTemplate: String
	dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion @hasInverse(field: equipmentDataSources) @deprecated(reason: "EquipmentDataSource should link to a DataSource rather tha")
	dataSource(filter: DataSourceFilter): DataSource @hasInverse(field: equipmentDataSources)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type EquipmentProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	bindingType: PropertyBindingType @search
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion! @hasInverse(field: properties)
	children(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty] @hasInverse(field: parent)
	parent(filter: EquipmentPropertyFilter): EquipmentProperty @hasInverse(field: children)
	equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @hasInverse(field: equipmentProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: equipmentProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: equipmentProperty)
	equipmentSpecificationProperties(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @hasInverse(field: equipmentProperty)
	equipmentRequirementProperties(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @hasInverse(field: equipmentProperty)
	equipmentActualProperties(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @hasInverse(field: equipmentProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	equipmentSpecificationPropertiesAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
	equipmentRequirementPropertiesAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
	equipmentActualPropertiesAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
}

enum EquipmentElementLevel {
	Enterprise
	Site
	Area
	ProcessCell
	Unit
	ProductionLine
	WorkCell
	ProductionUnit
	Warehouse
	StorageZone
	StorageUnit
	WorkCenter
	WorkUnit
	EquipmentModule
	ControlModule
	Other
}

type PhysicalAssetClass @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: physicalAssetClass)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion] @hasInverse(field: physicalAssetClass)
	activeVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isIncludedIn(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion] @hasInverse(field: includesPropertiesOf)
	isMadeUpOf(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @hasInverse(field: isPartOf)
	isPartOf(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @hasInverse(field: isMadeUpOf)
	physicalAssetVersions(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion] @hasInverse(field: physicalAssetClasses)
	physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @hasInverse(field: physicalAssetClass)
	physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @hasInverse(field: physicalAssetClass)
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @hasInverse(field: physicalAssetClass)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByPhysicalAssetClass)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsPhysicalAssetClass)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: physicalAssetClass)
	uiSortIndex: Int
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult
	isIncludedInAggregate(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult
	isMadeUpOfAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
	isPartOfAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
	physicalAssetVersionsAggregate(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult
	physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type PhysicalAssetClassVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: physicalAssetClassVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass! @hasInverse(field: versions)
	isActiveVersionOf(filter: PhysicalAssetClassFilter): PhysicalAssetClass @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	manufacturer: String @search(by: [fulltext,exact])
	properties(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty] @hasInverse(field: physicalAssetClassVersion)
	includesPropertiesOf(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @hasInverse(field: isIncludedIn)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: physicalAssetClassVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	propertiesAggregate(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult
	includesPropertiesOfAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
}

type PhysicalAssetClassProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	propertyType: Isa95PropertyType!
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion! @hasInverse(field: properties)
	children(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty] @hasInverse(field: parent)
	parent(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @hasInverse(field: children)
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @hasInverse(field: physicalAssetClassProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: physicalAssetClassProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: physicalAssetClassProperty)
	physicalAssetRequirementProperties(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @hasInverse(field: physicalAssetClassProperty)
	physicalAssetSpecificationProperties(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @hasInverse(field: physicalAssetClassProperty)
	physicalAssetActualProperties(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @hasInverse(field: physicalAssetClassProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	physicalAssetRequirementPropertiesAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
	physicalAssetSpecificationPropertiesAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
	physicalAssetActualPropertiesAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
}

type PhysicalAsset @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: physicalAsset)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion] @hasInverse(field: physicalAsset)
	activeVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isMadeUpOf(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset] @hasInverse(field: isPartOf)
	isPartOf(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset] @hasInverse(field: isMadeUpOf)
	equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping] @hasInverse(field: physicalAsset)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: physicalAsset)
	physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @hasInverse(field: physicalAsset)
	physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @hasInverse(field: physicalAsset)
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @hasInverse(field: physicalAsset)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByPhysicalAsset)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsPhysicalAsset)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: physicalAsset)
	materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: storageLocationPhysicalAsset)
	materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: storageLocationPhysicalAsset)
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: physicalAsset)
	stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @hasInverse(field: physicalAsset)
	uiSortIndex: Int
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult
	isMadeUpOfAggregate(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult
	isPartOfAggregate(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult
	equipmentAssetMappingAggregate(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult
	physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
}

type PhysicalAssetVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: physicalAssetVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset! @hasInverse(field: versions)
	isActiveVersionOf(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	fixedAssetID: String @search(by: [fulltext,exact])
	vendorID: String @search(by: [fulltext,exact])
	physicalLocation(filter: OperationalLocationFilter): OperationalLocation
	physicalLocationDescription: String @search(by: [fulltext,exact])
	physicalAssetClasses(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @hasInverse(field: physicalAssetVersions)
	properties(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty] @hasInverse(field: physicalAssetVersion)
	dataSources(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource] @hasInverse(field: physicalAssetVersion)
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @hasInverse(field: physicalAssetVersion)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: physicalAssetVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	physicalAssetClassesAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
	propertiesAggregate(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult
	dataSourcesAggregate(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult
	physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
}

type PhysicalAssetProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion! @hasInverse(field: properties)
	children(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty] @hasInverse(field: parent)
	parent(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @hasInverse(field: children)
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @hasInverse(field: physicalAssetProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: physicalAssetProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: physicalAssetProperty)
	physicalAssetSpecificationProperties(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @hasInverse(field: physicalAssetProperty)
	physicalAssetRequirementProperties(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @hasInverse(field: physicalAssetProperty)
	physicalAssetActualProperties(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @hasInverse(field: physicalAssetProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	physicalAssetSpecificationPropertiesAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
	physicalAssetRequirementPropertiesAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
	physicalAssetActualPropertiesAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
}

type EquipmentAssetMapping @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	startTime: DateTime
	endTime: DateTime
	equipment(filter: EquipmentFilter): Equipment! @hasInverse(field: equipmentAssetMapping)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset! @hasInverse(field: equipmentAssetMapping)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type PhysicalAssetDataSource @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion! @hasInverse(field: dataSources)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	topicTemplate: String
	dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion @hasInverse(field: physicalAssetDataSources)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type MaterialClass @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: materialClass)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion] @hasInverse(field: materialClass)
	activeVersion(filter: MaterialClassVersionFilter): MaterialClassVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isIncludedIn(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion] @hasInverse(field: includesPropertiesOf)
	isAssembledFrom(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @hasInverse(field: isComponentOf)
	isComponentOf(filter: MaterialClassFilter): MaterialClass @hasInverse(field: isAssembledFrom)
	materialDefinitionVersions(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @hasInverse(field: materialClasses)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: materialClass)
	materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: materialClass)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialClass)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByMaterialClass)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsMaterialClass)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: materialClass)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult
	isIncludedInAggregate(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult
	isAssembledFromAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult
	materialDefinitionVersionsAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type MaterialClassVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: materialClassVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	materialClass(filter: MaterialClassFilter): MaterialClass! @hasInverse(field: versions)
	isActiveVersionOf(filter: MaterialClassFilter): MaterialClass @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @hasInverse(field: materialClassVersions)
	assemblyType: AssemblyType @search(by: [exact])
	assemblyRelationship: AssemblyRelationship @search(by: [exact])
	properties(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty] @hasInverse(field: materialClassVersion)
	includesPropertiesOf(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @hasInverse(field: isIncludedIn)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: materialClassVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	propertiesAggregate(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult
	includesPropertiesOfAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
}

type MaterialClassProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	propertyType: Isa95PropertyType!
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	materialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersion! @hasInverse(field: properties)
	children(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty] @hasInverse(field: parent)
	parent(filter: MaterialClassPropertyFilter): MaterialClassProperty @hasInverse(field: children)
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @hasInverse(field: materialClassProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: materialClassProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: materialClassProperty)
	materialSpecificationProperties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @hasInverse(field: materialClassProperty)
	materialRequirementProperties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @hasInverse(field: materialClassProperty)
	materialActualProperties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @hasInverse(field: materialClassProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	materialSpecificationPropertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
	materialRequirementPropertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
	materialActualPropertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
}

type MaterialDefinition @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: materialDefinition)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @hasInverse(field: materialDefinition)
	activeVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: material)
	materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: material)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialDefinition)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByMaterialDefinition)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsMaterialDefinition)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: materialDefinition)
	stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @hasInverse(field: materialDefinition)
	isAlternateFor(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @hasInverse(field: alternateMaterial)
	materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: materialDefinition)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
	isAlternateForAggregate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult
	materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
}

type MaterialDefinitionVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: materialDefinitionVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: versions)
	isActiveVersionOf(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: activeVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @hasInverse(field: materialDefinitionVersions)
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	assemblyType: AssemblyType @search(by: [exact])
	assemblyRelationship: AssemblyRelationship @search(by: [exact])
	baseUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	materialClasses(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @hasInverse(field: materialDefinitionVersions)
	properties(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty] @hasInverse(field: materialDefinitionVersion)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialDefinitionVersion)
	alternates(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @hasInverse(field: materialDefinitionVersion)
	isAssembledFrom(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion] @hasInverse(field: isComponentOf)
	isComponentOf(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion @hasInverse(field: isAssembledFrom)
	uomConversions(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion] @hasInverse(field: materialDefinitionVersion)
	materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: materialDefinitionVersion)
	stateModels(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition] @hasInverse(field: materialDefinitionVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	materialClassesAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult
	propertiesAggregate(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	alternatesAggregate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult
	isAssembledFromAggregate(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult
	uomConversionsAggregate(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult
	materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	stateModelsAggregate(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
}

type MaterialDefinitionProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion! @hasInverse(field: properties)
	children(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty] @hasInverse(field: parent)
	parent(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @hasInverse(field: children)
	materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty @hasInverse(field: materialDefinitionProperty)
	materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty @hasInverse(field: materialDefinitionProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: materialDefinitionProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: materialDefinitionProperty)
	materialSpecificationProperties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @hasInverse(field: materialDefinitionProperty)
	materialRequirementProperties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @hasInverse(field: materialDefinitionProperty)
	materialActualProperties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @hasInverse(field: materialDefinitionProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	materialSpecificationPropertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
	materialRequirementPropertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
	materialActualPropertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
}

type MaterialLot @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: materialLot)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact,regexp])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @hasInverse(field: materialLots)
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	storageLocationOperationalLocation(filter: OperationalLocationFilter): OperationalLocation
	storageLocationEquipment(filter: EquipmentFilter): Equipment @hasInverse(field: materialLots)
	storageLocationPhysicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: materialLots)
	storageLocationDescription: String @search(by: [fulltext,exact])
	assemblyType: AssemblyType @search(by: [exact])
	assemblyRelationship: AssemblyRelationship @search(by: [exact])
	status: String @search(by: [fulltext,exact])
	disposition: Disposition @search(by: [exact])
	quantity: Float
	quantityUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	isAssembledFromMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: isComponentOfMaterialLot)
	isComponentOfMaterialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: isAssembledFromMaterialLot)
	properties(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty] @hasInverse(field: materialLot)
	materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: materialLots)
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion! @hasInverse(field: materialLots)
	childSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: parentMaterialLot)
	isAssembledFromMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: isComponentOfMaterialLot)
	isComponentOfMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: isAssembledFromMaterialLot)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: materialLot)
	materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: materialLots)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialLot)
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: materialLot)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByMaterialLot)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsMaterialLot)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: materialLot)
	stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @hasInverse(field: materialLot)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	isAssembledFromMaterialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	propertiesAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
	childSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	isAssembledFromMaterialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
}

type MaterialLotProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	materialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: properties)
	materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: properties)
	children(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty] @hasInverse(field: parent)
	parent(filter: MaterialLotPropertyFilter): MaterialLotProperty @hasInverse(field: children)
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @hasInverse(field: materialLotProperty)
	correspondsTo(filter: EvaluatedPropertyFilter): EvaluatedProperty @hasInverse(field: materialLotProperty)
	recordsMeasurementOf(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: materialLotProperty)
	materialSpecificationProperties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @hasInverse(field: materialLotProperty)
	materialRequirementProperties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @hasInverse(field: materialLotProperty)
	materialActualProperties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @hasInverse(field: materialLotProperty)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
	recordsMeasurementOfAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	materialSpecificationPropertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
	materialRequirementPropertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
	materialActualPropertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
}

type MaterialSubLot @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: materialSubLot)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact,regexp])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @hasInverse(field: materialSubLots)
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	storageLocationOperationalLocation(filter: OperationalLocationFilter): OperationalLocation
	storageLocationEquipment(filter: EquipmentFilter): Equipment @hasInverse(field: materialSubLots)
	storageLocationPhysicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: materialSubLots)
	storageLocationDescription: String @search(by: [fulltext,exact])
	assemblyType: AssemblyType @search(by: [exact])
	assemblyRelationship: AssemblyRelationship @search(by: [exact])
	status: String @search(by: [fulltext,exact])
	disposition: Disposition @search(by: [exact])
	quantity: Float
	quantityUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	children(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: parent)
	parent(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: children)
	properties(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty] @hasInverse(field: materialSubLot)
	isAssembledFromMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: isComponentOfMaterialSubLot)
	isComponentOfMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: isAssembledFromMaterialSubLot)
	isComponentOfMaterialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: isAssembledFromMaterialSubLot)
	isAssembledFromMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: isComponentOfMaterialSubLot)
	parentMaterialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: childSubLot)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: materialSubLot)
	materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: materialSubLots)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialSubLot)
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: materialSubLot)
	stateModelInstances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @hasInverse(field: materialSubLot)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByMaterialSubLot)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsMaterialSubLot)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: materialSubLot)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childrenAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	propertiesAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
	isAssembledFromMaterialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	isAssembledFromMaterialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	stateModelInstancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type MaterialAlternate @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	effectiveDateTime: DateTime!
	priorityOrder: Int!
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion! @hasInverse(field: alternates)
	alternateMaterial(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: isAlternateFor)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type UnitOfMeasure @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: unitOfMeasure)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	dataType: DataType
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
}

type UnitOfMeasureConversion @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	fromUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure!
	toUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure!
	numerator: Float!
	denominator: Float!
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion! @hasInverse(field: uomConversions)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

enum MaterialUse {
	Initial
	Produced
	ByProduct
	CoProduct
	Consumable
	Consumed
	Transferred
	Scrap
	Rework
	Received
	Packed
	Shipped
	Adjustment
}

enum Disposition {
	""" A material lot or sublot that does not yet physically exist, is assigned to an operations request 
 (segment requirement) or work request (Part 4 object) or job order (Part 4 object). """
	Planned
	""" The material lot or sublot is in the process of being worked on. """
	InProcess
	""" A material lot or sublot is not permitted for normal use due to a restriction condition. """
	Restricted
	""" Material lot or sublot is permitted for normal use without restriction. """
	Unrestricted
	""" Material lot or sublot has been reconciled as completely consumed, sold or disposed of. """
	Closed
}

enum AssemblyType {
	""" The components of the assembly are physically connected or in the same area. """
	Physical
	""" The components of the assembly are not necessarily physically connected or in the same area. """
	Logical
}

enum AssemblyRelationship {
	""" An assembly that is not intended to be split during the production process. """
	Permanent
	""" A temporary assembly using during production, such as a pallet of different materials or a batch kit. """
	Transient
}

type ProcessSegment @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: processSegment)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion] @hasInverse(field: processSegment)
	activeVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isMadeUpOf(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment] @hasInverse(field: isPartOf)
	isPartOf(filter: ProcessSegmentFilter): ProcessSegment @hasInverse(field: isMadeUpOf)
	workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @hasInverse(field: processSegment)
	inflows(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency] @hasInverse(field: to)
	outflows(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency] @hasInverse(field: from)
	operationsSegments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: processSegment)
	segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @hasInverse(field: processSegment)
	segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @hasInverse(field: processSegment)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: ProcessSegmentVersionFilter): ProcessSegmentVersionAggregateResult
	isMadeUpOfAggregate(filter: ProcessSegmentFilter): ProcessSegmentAggregateResult
	workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
	inflowsAggregate(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult
	outflowsAggregate(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult
	operationsSegmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
}

type ProcessSegmentVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: processSegmentVersion)
	processSegment(filter: ProcessSegmentFilter): ProcessSegment! @hasInverse(field: versions)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: ProcessSegmentFilter): ProcessSegment @hasInverse(field: activeVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact,regexp])
	operationsType: WorkType! @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	definitionType: DefinitionType
	duration: Float
	durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	processSegmentParameters(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter] @hasInverse(field: processSegmentVersion)
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: processSegmentVersion)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: processSegmentVersion)
	physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @hasInverse(field: processSegmentVersion)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: processSegmentVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	processSegmentParametersAggregate(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
}

type ProcessSegmentDependency @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	condition: String
	from(filter: ProcessSegmentFilter): ProcessSegment! @hasInverse(field: outflows)
	to(filter: ProcessSegmentFilter): ProcessSegment! @hasInverse(field: inflows)
	rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @hasInverse(field: processSegmentDependency)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	rulesAggregate(filter: RuleFilter): RuleAggregateResult
}

type ProcessSegmentParameter @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	value: String
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion! @hasInverse(field: processSegmentParameters)
	children(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter] @hasInverse(field: parent)
	parent(filter: ProcessSegmentParameterFilter): ProcessSegmentParameter @hasInverse(field: children)
	segmentParameters(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter] @hasInverse(field: processSegmentParameter)
	jobOrderParameter(filter: JobOrderParameterFilter): JobOrderParameter @hasInverse(field: processSegmentParameter)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult
	segmentParametersAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
}

type TestSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	version: String! @search(by: [fulltext,exact])
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: testSpecification)
	key: String! @id @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	publishedDate: DateTime
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	testSampleSize: String
	physicalSample: Boolean
	recurrenceQuantity: String
	recurrenceTimeInterval: String
	parent(filter: TestSpecificationFilter): TestSpecification @hasInverse(field: "children")
	children(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: "parent")
	properties(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty] @hasInverse(field: "testSpecification")
	criteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria] @hasInverse(field: "testSpecification")
	evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty] @hasInverse(field: "testSpecification")
	requiredByPersonnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement @hasInverse(field: testedBy)
	requiredByEquipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement @hasInverse(field: testedBy)
	requiredByPhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement @hasInverse(field: testedBy)
	requiredByMaterialRequirement(filter: MaterialRequirementFilter): MaterialRequirement @hasInverse(field: testedBy)
	requiredByPersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecification @hasInverse(field: testedBy)
	requiredByEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecification @hasInverse(field: testedBy)
	requiredByMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecification @hasInverse(field: testedBy)
	testsPersonnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @hasInverse(field: specifiesTests)
	testsEquipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @hasInverse(field: specifiesTests)
	testsPhysicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @hasInverse(field: specifiesTests)
	testsMaterialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: specifiesTests)
	testsPersonnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: specifiesTests)
	testsEquipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: specifiesTests)
	testsMaterialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: specifiesTests)
	requiredByPersonnelClass(filter: PersonnelClassFilter): PersonnelClass @hasInverse(field: testedBy)
	requiredByPerson(filter: PersonFilter): Person @hasInverse(field: testedBy)
	requiredByEquipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: testedBy)
	requiredByEquipment(filter: EquipmentFilter): Equipment @hasInverse(field: testedBy)
	requiredByPhysicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass @hasInverse(field: testedBy)
	requiredByPhysicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: testedBy)
	requiredByMaterialClass(filter: MaterialClassFilter): MaterialClass @hasInverse(field: testedBy)
	requiredByMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: testedBy)
	requiredByMaterialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: testedBy)
	requiredByMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: testedBy)
	testsPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @hasInverse(field: specifiesTests)
	testsPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person] @hasInverse(field: specifiesTests)
	testsEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @hasInverse(field: specifiesTests)
	testsEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @hasInverse(field: specifiesTests)
	testsPhysicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass] @hasInverse(field: specifiesTests)
	testsPhysicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset] @hasInverse(field: specifiesTests)
	testsMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @hasInverse(field: specifiesTests)
	testsMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition] @hasInverse(field: specifiesTests)
	testsMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: specifiesTests)
	testsMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: specifiesTests)
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childrenAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	propertiesAggregate(filter: TestSpecificationPropertyFilter): TestSpecificationPropertyAggregateResult
	criteriaAggregate(filter: TestSpecificationCriteriaFilter): TestSpecificationCriteriaAggregateResult
	evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
	testsPersonnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	testsEquipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	testsPhysicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	testsMaterialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	testsPersonnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	testsEquipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	testsMaterialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	testsPersonnelClassAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	testsPersonAggregate(filter: PersonFilter): PersonAggregateResult
	testsEquipmentClassAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	testsEquipmentAggregate(filter: EquipmentFilter): EquipmentAggregateResult
	testsPhysicalAssetClassAggregate(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
	testsPhysicalAssetAggregate(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult
	testsMaterialClassAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult
	testsMaterialDefinitionAggregate(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult
	testsMaterialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	testsMaterialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
}

type TestSpecificationProperty @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	parent(filter: TestSpecificationPropertyFilter): TestSpecificationProperty @hasInverse(field: "children")
	children(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty] @hasInverse(field: "parent")
	testSpecification(filter: TestSpecificationFilter): TestSpecification! @hasInverse(field: "properties")
	childrenAggregate(filter: TestSpecificationPropertyFilter): TestSpecificationPropertyAggregateResult
}

type TestSpecificationCriteria @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	sequence: Int
	expression: String @search(by: [fulltext,exact])
	result: String @search(by: [fulltext,exact])
	testSpecification(filter: TestSpecificationFilter): TestSpecification! @hasInverse(field: "criteria")
	evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty] @hasInverse(field: "criteria")
	evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
}

type EvaluatedProperty @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: evaluatedProperties)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: evaluatedProperties)
	testSpecification(filter: TestSpecificationFilter): TestSpecification! @hasInverse(field: "evaluatedProperties")
	criteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria] @hasInverse(field: "evaluatedProperties")
	personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty] @hasInverse(field: correspondsTo)
	personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty] @hasInverse(field: correspondsTo)
	equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @hasInverse(field: correspondsTo)
	equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty] @hasInverse(field: correspondsTo)
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty] @hasInverse(field: correspondsTo)
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty] @hasInverse(field: correspondsTo)
	materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty] @hasInverse(field: correspondsTo)
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty] @hasInverse(field: correspondsTo)
	materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty] @hasInverse(field: correspondsTo)
	criteriaAggregate(filter: TestSpecificationCriteriaFilter): TestSpecificationCriteriaAggregateResult
	personnelClassPropertyAggregate(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult
	personPropertyAggregate(filter: PersonPropertyFilter): PersonPropertyAggregateResult
	equipmentClassPropertyAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult
	equipmentPropertyAggregate(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult
	physicalAssetClassPropertyAggregate(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult
	physicalAssetPropertyAggregate(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult
	materialClassPropertyAggregate(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult
	materialDefinitionPropertyAggregate(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult
	materialLotPropertyAggregate(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
}

type TestResult @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: testResult)
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	evaluationDate: DateTime
	evaluationCriterionResult: String
	expiration: DateTime
	parent(filter: TestResultFilter): TestResult @hasInverse(field: "children")
	children(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: "parent")
	propertyMeasurements(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: "testResult")
	personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement @hasInverse(field: testResults)
	equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement @hasInverse(field: testResults)
	physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement @hasInverse(field: testResults)
	materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement @hasInverse(field: testResults)
	personnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecification @hasInverse(field: testResults)
	equipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecification @hasInverse(field: testResults)
	materialSpecification(filter: MaterialSpecificationFilter): MaterialSpecification @hasInverse(field: testResults)
	personnelClass(filter: PersonnelClassFilter): PersonnelClass @hasInverse(field: testResults)
	person(filter: PersonFilter): Person @hasInverse(field: testResults)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: testResults)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: testResults)
	physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass @hasInverse(field: testResults)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: testResults)
	materialClass(filter: MaterialClassFilter): MaterialClass @hasInverse(field: testResults)
	materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: testResults)
	materialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: testResults)
	materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: testResults)
	personnelActual(filter: PersonnelActualFilter): PersonnelActual @hasInverse(field: testResults)
	equipmentActual(filter: EquipmentActualFilter): EquipmentActual @hasInverse(field: testResults)
	physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual @hasInverse(field: testResults)
	materialActual(filter: MaterialActualFilter): MaterialActual @hasInverse(field: testResults)
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childrenAggregate(filter: TestResultFilter): TestResultAggregateResult
	propertyMeasurementsAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
}

type PropertyMeasurement @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: propertyMeasurement)
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	measurementDate: DateTime
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	expiration: DateTime
	testResult(filter: TestResultFilter): TestResult! @hasInverse(field: "propertyMeasurements")
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: propertyMeasurements)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: propertyMeasurements)
	personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @hasInverse(field: recordsMeasurementOf)
	personProperty(filter: PersonPropertyFilter): PersonProperty @hasInverse(field: recordsMeasurementOf)
	equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @hasInverse(field: recordsMeasurementOf)
	equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty @hasInverse(field: recordsMeasurementOf)
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @hasInverse(field: recordsMeasurementOf)
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @hasInverse(field: recordsMeasurementOf)
	materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty @hasInverse(field: recordsMeasurementOf)
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @hasInverse(field: recordsMeasurementOf)
	materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty @hasInverse(field: recordsMeasurementOf)
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
}

type OperationsEventClass @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsEventClass)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion] @hasInverse(field: operationsEventClass)
	activeVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isAssembledFrom(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass] @hasInverse(field: isComponentOf)
	isComponentOf(filter: OperationsEventClassFilter): OperationsEventClass @hasInverse(field: isAssembledFrom)
	includesPropertiesOf(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass] @hasInverse(field: isIncludedIn)
	isIncludedIn(filter: OperationsEventClassFilter): OperationsEventClass @hasInverse(field: includesPropertiesOf)
	operationsEventDefinitionVersions(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion] @hasInverse(field: operationsEventClasses)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: OperationsEventClassVersionFilter): OperationsEventClassVersionAggregateResult
	isAssembledFromAggregate(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
	includesPropertiesOfAggregate(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
	operationsEventDefinitionVersionsAggregate(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult
}

type OperationsEventClassVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsEventClassVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	version: String! @search(by: [fulltext,exact])
	operationsEventClass(filter: OperationsEventClassFilter): OperationsEventClass! @hasInverse(field: versions)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: OperationsEventClassFilter): OperationsEventClass @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	properties(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty] @hasInverse(field: operationsEventClassVersion)
	recordSpecifications(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification] @hasInverse(field: operationsEventClassVersion)
	description: String
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	propertiesAggregate(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult
	recordSpecificationsAggregate(filter: OperationsEventClassRecordSpecificationFilter): OperationsEventClassRecordSpecificationAggregateResult
}

type OperationsEventClassRecordSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @search(by: [fulltext,exact,regexp])
	operationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion! @hasInverse(field: recordSpecifications)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity(filter: MultiplicityFilter): Multiplicity
	action: [Action]
	actionMultiplicity(filter: MultiplicityFilter): Multiplicity
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type Multiplicity {
	Min: Int
	Max: Int
}

enum Action {
	Added
	Deleted
	Changed
	Observed
}

type OperationsEventClassProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @id @search(by: [fulltext,exact,regexp])
	operationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion! @hasInverse(field: properties)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	parent(filter: OperationsEventClassPropertyFilter): OperationsEventClassProperty @hasInverse(field: children)
	children(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty] @hasInverse(field: parent)
	propertyType: Isa95PropertyType
	value: String @search(by: [fulltext,exact,regexp])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult
}

type OperationsEventDefinition @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsEventDefinition)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion] @hasInverse(field: operationsEventDefinition)
	activeVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	isAssembledFrom(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition] @hasInverse(field: isComponentOf)
	isComponentOf(filter: OperationsEventDefinitionFilter): OperationsEventDefinition @hasInverse(field: isAssembledFrom)
	includesPropertiesOf(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition] @hasInverse(field: isIncludedIn)
	isIncludedIn(filter: OperationsEventDefinitionFilter): OperationsEventDefinition @hasInverse(field: includesPropertiesOf)
	operationsEvents(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent] @hasInverse(field: operationsEventDefinition)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult
	isAssembledFromAggregate(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult
	includesPropertiesOfAggregate(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult
	operationsEventsAggregate(filter: OperationsEventFilter): OperationsEventAggregateResult
}

type OperationsEventDefinitionVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsEventDefinitionVersion)
	operationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinition! @hasInverse(field: versions)
	id: String! @search(by: [fulltext,exact,regexp])
	version: String! @search(by: [fulltext,exact])
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	isActiveVersionOf(filter: OperationsEventDefinitionFilter): OperationsEventDefinition @hasInverse(field: activeVersion)
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	operationsEventClasses(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass] @hasInverse(field: operationsEventDefinitionVersions)
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	priority: [String]
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty] @hasInverse(field: operationsEventDefinitionVersion)
	recordSpecifications(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification] @hasInverse(field: operationsEventDefinitionVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	operationsEventClassesAggregate(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
	propertiesAggregate(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult
	recordSpecificationsAggregate(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecificationAggregateResult
}

enum OperationsEventTypeEnum {
	Alarm
	Alert
	Event
}

enum OperationsEventLevelEnum {
	Level_2
	Level_3
	Level_4
	Other
}

enum MOMFunctionEnum {
	Resource_Management
	Definition_Management
	Detailed_Scheduling
	Dispatching
	Execution_Management
	Data_Collection
	Performance_Analysis
	Tracking
}

enum EnterpriseFunctionEnum {
	Order_Processing
	Operations_Scheduling
	Production_Control
	Material_And_Energy_Control
	Product_Cost_Accounting
	Product_Shipping_Administration
	Maintenance_Management
	Marketing_And_Sales
	Research_And_Development
	Engineering
}

type OperationsEventDefinitionRecordSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @search(by: [fulltext,exact,regexp])
	operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion! @hasInverse(field: recordSpecifications)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity(filter: MultiplicityFilter): Multiplicity
	action: [Action]
	actionMultiplicity(filter: MultiplicityFilter): Multiplicity
	operationsEventRecords(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord] @hasInverse(field: operationsEventDefinitionRecordSpecification)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	operationsEventRecordsAggregate(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
}

type OperationsEventDefinitionProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @search(by: [fulltext,exact,regexp])
	operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion! @hasInverse(field: properties)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	value: String @search(by: [fulltext,exact,regexp])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	operationsEventClassProperty(filter: OperationsEventClassPropertyFilter): OperationsEventClassProperty
	parent(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionProperty @hasInverse(field: children)
	children(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty] @hasInverse(field: parent)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult
}

type OperationsEvent @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsEvent)
	id: String! @id @search(by: [fulltext,exact,regexp])
	operationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinition! @hasInverse(field: operationsEvents)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	recordTimestamp: DateTime! @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	priority: String
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty] @hasInverse(field: operationsEvent)
	records(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord] @hasInverse(field: operationsEvent)
	parent(filter: OperationsEventFilter): OperationsEvent @hasInverse(field: children)
	children(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent] @hasInverse(field: parent)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	propertiesAggregate(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult
	recordsAggregate(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
	childrenAggregate(filter: OperationsEventFilter): OperationsEventAggregateResult
}

type OperationsEventProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @id @search(by: [fulltext,exact,regexp])
	operationsEvent(filter: OperationsEventFilter): OperationsEvent! @hasInverse(field: properties)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	value: String @search(by: [fulltext,exact,regexp])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionProperty
	parent(filter: OperationsEventPropertyFilter): OperationsEventProperty @hasInverse(field: children)
	children(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty] @hasInverse(field: parent)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult
}

type OperationsEventRecord @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @id @search(by: [fulltext,exact,regexp])
	operationsEvent(filter: OperationsEventFilter): OperationsEvent! @hasInverse(field: records)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	action: Action
	recordTimestamp: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecification @hasInverse(field: operationsEventRecords)
	recordEntries(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry] @hasInverse(field: operationsEventRecord)
	parent(filter: OperationsEventRecordFilter): OperationsEventRecord @hasInverse(field: children)
	children(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord] @hasInverse(field: parent)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult
	childrenAggregate(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
}

type OperationsEventRecordEntry @withSubscription @primaryKey(fields: ["id","recordId"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @search(by: [fulltext,exact,regexp])
	recordId: String! @search(by: [fulltext,exact,regexp])
	operationsEventRecord(filter: OperationsEventRecordFilter): OperationsEventRecord! @hasInverse(field: recordEntries)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	description: String @search(by: [fulltext,exact,regexp])
	recordTimestamp: DateTime! @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	data: String
	informationObject(filter: InformationObjectFilter): InformationObject @hasInverse(field: operationsEventRecordEntry)
	parent(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntry @hasInverse(field: children)
	children(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry] @hasInverse(field: parent)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult
}

type OperationsDefinition @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsDefinition)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion] @hasInverse(field: operationsDefinition)
	activeVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	parent(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: children)
	children(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @hasInverse(field: parent)
	workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @hasInverse(field: operationsDefinition)
	operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @hasInverse(field: operationsDefinition)
	operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse] @hasInverse(field: operationsDefinition)
	segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @hasInverse(field: operationsDefinition)
	segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @hasInverse(field: operationsDefinitions)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersionAggregateResult
	childrenAggregate(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
	workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
	operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
	segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
}

type OperationsDefinitionVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsDefinitionVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition! @hasInverse(field: versions)
	isActiveVersionOf(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: activeVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	billOfMaterial: String @search(by: [fulltext,exact])
	billOfResources: String @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	operationsType: WorkType! @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	definitionType: DefinitionType
	segments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: operationsDefinitionVersion)
	materialsBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill] @hasInverse(field: operationsDefinitionVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	segmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	materialsBillAggregate(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult
}

type OperationsMaterialBill @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	useType: MaterialUse @search
	billOfMaterial: String @search(by: [fulltext,exact])
	operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion @hasInverse(field: materialsBill)
	operationsSegments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: materialsBill)
	materialBillItems(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: materialsBill)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	operationsSegmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	materialBillItemsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
}

type OperationsSegment @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsSegment)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	duration: Float
	durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	operationsType: WorkType @search
	definitionType: DefinitionType @search
	billOfMaterial: String @search(by: [fulltext,exact])
	billOfResources: String @search(by: [fulltext,exact])
	positionX: Int
	positionY: Int
	operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion! @hasInverse(field: segments)
	parent(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: children)
	children(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: parent)
	processSegment(filter: ProcessSegmentFilter): ProcessSegment @hasInverse(field: operationsSegments)
	workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @hasInverse(field: operationsSegment)
	makesUp(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: isMadeUpOf)
	isMadeUpOf(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: makesUp)
	inflows(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency] @hasInverse(field: to)
	outflows(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency] @hasInverse(field: from)
	materialsBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill] @hasInverse(field: operationsSegments)
	parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: operationsSegment)
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: operationsSegment)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: operationsSegment)
	physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @hasInverse(field: operationsSegment)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: operationsSegment)
	rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @hasInverse(field: operationsSegment)
	segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @hasInverse(field: operationsSegment)
	operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @hasInverse(field: operationsSegment)
	operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse] @hasInverse(field: operationsSegment)
	segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @hasInverse(field: operationsSegments)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childrenAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
	isMadeUpOfAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	inflowsAggregate(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult
	outflowsAggregate(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult
	materialsBillAggregate(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult
	parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	rulesAggregate(filter: RuleFilter): RuleAggregateResult
	segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
	segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
}

type OperationsSegmentDependency @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	condition: String
	from(filter: OperationsSegmentFilter): OperationsSegment! @hasInverse(field: outflows)
	to(filter: OperationsSegmentFilter): OperationsSegment! @hasInverse(field: inflows)
	rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @hasInverse(field: operationsSegmentDependency)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	rulesAggregate(filter: RuleFilter): RuleAggregateResult
}

type ParameterSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: parameterSpecifications)
	children(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: parent)
	parent(filter: ParameterSpecificationFilter): ParameterSpecification @hasInverse(field: children)
	segmentParameters(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter] @hasInverse(field: parameterSpecification)
	jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter] @hasInverse(field: parameterSpecification)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: parameterSpecifications)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: parameterSpecifications)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	segmentParametersAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
	jobOrderParameterAggregate(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
}

type PersonnelSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	personnelUse: String @search(by: [exact,fulltext])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: personnelSpecifications)
	processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion @hasInverse(field: personnelSpecifications)
	children(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: parent)
	parent(filter: PersonnelSpecificationFilter): PersonnelSpecification @hasInverse(field: children)
	properties(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @hasInverse(field: personnelSpecification)
	personnelClass(filter: PersonnelClassFilter): PersonnelClass @hasInverse(field: personnelSpecifications)
	person(filter: PersonFilter): Person @hasInverse(field: personnelSpecifications)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: personnelSpecifications)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: personnelSpecifications)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByPersonnelSpecification)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsPersonnelSpecifications)
	testResults(filter: TestResultFilter): TestResult @hasInverse(field: personnelSpecification)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	propertiesAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
}

type PersonnelSpecificationProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	children(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty] @hasInverse(field: parent)
	parent(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationProperty @hasInverse(field: children)
	personnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecification! @hasInverse(field: properties)
	personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @hasInverse(field: personnelSpecificationProperties)
	personProperty(filter: PersonPropertyFilter): PersonProperty @hasInverse(field: personnelSpecificationProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
}

type EquipmentSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	equipmentUse: String @search(by: [exact,fulltext])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: equipmentSpecifications)
	processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion @hasInverse(field: equipmentSpecifications)
	children(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: parent)
	parent(filter: EquipmentSpecificationFilter): EquipmentSpecification @hasInverse(field: children)
	properties(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @hasInverse(field: equipmentSpecification)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: equipmentSpecifications)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: equipmentSpecifications)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: equipmentSpecifications)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: equipmentSpecifications)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByEquipmentSpecification)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsEquipmentSpecifications)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: equipmentSpecification)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	propertiesAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type EquipmentSpecificationProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	children(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty] @hasInverse(field: parent)
	parent(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationProperty @hasInverse(field: children)
	equipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecification! @hasInverse(field: properties)
	equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @hasInverse(field: equipmentSpecificationProperties)
	equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty @hasInverse(field: equipmentSpecificationProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
}

type PhysicalAssetSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	physicalLocation(filter: OperationalLocationFilter): OperationalLocation
	physicalAssetUse: String @search(by: [exact,fulltext])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: physicalAssetSpecifications)
	processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion @hasInverse(field: physicalAssetSpecifications)
	children(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @hasInverse(field: parent)
	parent(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecification @hasInverse(field: children)
	properties(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @hasInverse(field: physicalAssetSpecification)
	physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass @hasInverse(field: physicalAssetSpecifications)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: physicalAssetSpecifications)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: physicalAssetSpecifications)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: physicalAssetSpecifications)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	propertiesAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
}

type PhysicalAssetSpecificationProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	children(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty] @hasInverse(field: parent)
	parent(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationProperty @hasInverse(field: children)
	physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecification! @hasInverse(field: properties)
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @hasInverse(field: physicalAssetSpecificationProperties)
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @hasInverse(field: physicalAssetSpecificationProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
}

type MaterialSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	storageLocation(filter: OperationalLocationFilter): OperationalLocation
	materialUse: MaterialUse! @search(by: [hash])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: materialSpecifications)
	processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion @hasInverse(field: materialSpecifications)
	children(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: parent)
	parent(filter: MaterialSpecificationFilter): MaterialSpecification @hasInverse(field: children)
	properties(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @hasInverse(field: materialSpecification)
	materialsBill(filter: OperationsMaterialBillFilter): OperationsMaterialBill @hasInverse(field: materialBillItems)
	materialClass(filter: MaterialClassFilter): MaterialClass @hasInverse(field: materialSpecifications)
	material(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: materialSpecifications)
	materialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: materialSpecifications)
	materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: materialSpecifications)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: materialSpecifications)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: materialSpecifications)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByMaterialSpecification)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsMaterialSpecifications)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: materialSpecification)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	propertiesAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
}

type MaterialSpecificationProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	children(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty] @hasInverse(field: parent)
	parent(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationProperty @hasInverse(field: children)
	materialSpecification(filter: MaterialSpecificationFilter): MaterialSpecification! @hasInverse(field: properties)
	materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty @hasInverse(field: materialSpecificationProperties)
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @hasInverse(field: materialSpecificationProperties)
	materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty @hasInverse(field: materialSpecificationProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
}

enum WorkType {
	PRODUCTION
	MAINTENANCE
	QUALITY
	INVENTORY
	MIXED
}

enum DependencyType {
	""" Start B at A start. """
	AT_START
	""" Start B after A start. """
	AFTER_START
	""" Start B after A end. """
	AFTER_END
	""" B cannot follow A. """
	NOT_FOLLOW
	""" B may run in parallel to A. """
	POSSIBLE_PARALLEL
	""" B may not run in parallel to A. """
	NOT_IN_PARALLEL
	""" Start B no later than dependency factor after A start. """
	NO_LATER_AFTER_START
	""" Start B no earlier than dependency factor after A start. """
	NO_EARLIER_AFTER_START
	""" Start B no later than dependency factor after A end. """
	NO_LATER_AFTER_END
	""" B no earlier than dependency factor after A end. """
	NO_EARLIER_AFTER_END
}

type OperationsSchedule @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsSchedule)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	operationsType: WorkType! @search
	scheduledStartDate: DateTime @search
	scheduledEndDate: DateTime @search
	publishedDate: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	scheduleState: ScheduleState @search
	operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest!]! @hasInverse(field: operationsSchedule)
	operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance] @hasInverse(field: operationsSchedule)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	operationsPerformanceAggregate(filter: OperationsPerformanceFilter): OperationsPerformanceAggregateResult
}

type OperationsRequest @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsRequest)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	operationsType: WorkType! @search
	scheduledStartDate: DateTime @search
	scheduledEndDate: DateTime @search
	priority: String
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	requestState: ScheduleState!
	notes: String
	operationsSchedule(filter: OperationsScheduleFilter): OperationsSchedule! @hasInverse(field: operationsRequests)
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: operationsRequests)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: operationsRequests)
	segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement!]! @hasInverse(field: operationsRequest)
	workRequests(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest] @hasInverse(field: operationsRequest)
	operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse] @hasInverse(field: operationsRequest)
	segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @hasInverse(field: operationsRequests)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	workRequestsAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
	operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
	segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
}

type SegmentRequirement @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	operationsType: WorkType! @search
	earliestStartDate: DateTime @search
	latestEndDate: DateTime @search
	duration: Float
	durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	segmentState: ScheduleState!
	notes: String
	operationsRequest(filter: OperationsRequestFilter): OperationsRequest! @hasInverse(field: segmentRequirements)
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: segmentRequirements)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: segmentRequirements)
	processSegment(filter: ProcessSegmentFilter): ProcessSegment @hasInverse(field: segmentRequirements)
	children(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @hasInverse(field: parent)
	parent(filter: SegmentRequirementFilter): SegmentRequirement @hasInverse(field: children)
	workRequests(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest] @hasInverse(field: segmentRequirement)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: segmentRequirement)
	operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse] @hasInverse(field: segmentRequirements)
	segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @hasInverse(field: segmentRequirements)
	parameters(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter] @hasInverse(field: segmentRequirement)
	personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @hasInverse(field: segmentRequirement)
	equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @hasInverse(field: segmentRequirement)
	physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @hasInverse(field: segmentRequirement)
	materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: segmentRequirement)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	workRequestsAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
	segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
	parametersAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
	personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
}

type SegmentParameter @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	value: String
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement! @hasInverse(field: parameters)
	children(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter] @hasInverse(field: parent)
	parent(filter: SegmentParameterFilter): SegmentParameter @hasInverse(field: children)
	parameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecification @hasInverse(field: segmentParameters)
	processSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameter @hasInverse(field: segmentParameters)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: segmentParameter)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: SegmentParameterFilter): SegmentParameterAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PersonnelRequirement @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement @hasInverse(field: personnelRequirements)
	children(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @hasInverse(field: parent)
	parent(filter: PersonnelRequirementFilter): PersonnelRequirement @hasInverse(field: children)
	properties(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @hasInverse(field: personnelRequirement)
	personnelClass(filter: PersonnelClassFilter): PersonnelClass @hasInverse(field: personnelRequirements)
	person(filter: PersonFilter): Person @hasInverse(field: personnelRequirements)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: personnelRequirements)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByPersonnelRequirement)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsPersonnelRequirements)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: personnelRequirement)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: personnelRequirement)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: personnelRequirement)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	propertiesAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PersonnelRequirementProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement! @hasInverse(field: properties)
	children(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty] @hasInverse(field: parent)
	parent(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementProperty @hasInverse(field: children)
	personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @hasInverse(field: personnelRequirementProperties)
	personProperty(filter: PersonPropertyFilter): PersonProperty @hasInverse(field: personnelRequirementProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
}

type EquipmentRequirement @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	equipmentLevel: EquipmentElementLevel
	segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement @hasInverse(field: equipmentRequirements)
	children(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @hasInverse(field: parent)
	parent(filter: EquipmentRequirementFilter): EquipmentRequirement @hasInverse(field: children)
	properties(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @hasInverse(field: equipmentRequirement)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: equipmentRequirements)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: equipmentRequirements)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: equipmentRequirements)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByEquipmentRequirement)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsEquipmentRequirements)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: equipmentRequirement)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: equipmentRequirement)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: equipmentRequirement)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	propertiesAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type EquipmentRequirementProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement! @hasInverse(field: properties)
	children(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty] @hasInverse(field: parent)
	parent(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementProperty @hasInverse(field: children)
	equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @hasInverse(field: equipmentRequirementProperties)
	equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty @hasInverse(field: equipmentRequirementProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
}

type PhysicalAssetRequirement @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	physicalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	equipmentLevel: EquipmentElementLevel
	segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement @hasInverse(field: physicalAssetRequirements)
	children(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @hasInverse(field: parent)
	parent(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement @hasInverse(field: children)
	properties(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @hasInverse(field: physicalAssetRequirement)
	physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass @hasInverse(field: physicalAssetRequirements)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: physicalAssetRequirements)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: physicalAssetRequirements)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByPhysicalAssetRequirement)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsPhysicalAssetRequirements)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: physicalAssetRequirement)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: physicalAssetRequirement)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: physicalAssetRequirement)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	propertiesAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PhysicalAssetRequirementProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement! @hasInverse(field: properties)
	children(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty] @hasInverse(field: parent)
	parent(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementProperty @hasInverse(field: children)
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @hasInverse(field: physicalAssetRequirementProperties)
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @hasInverse(field: physicalAssetRequirementProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
}

type MaterialRequirement @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	storageLocation(filter: OperationalLocationFilter): OperationalLocation
	materialUse: MaterialUse! @search
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	assemblyType: AssemblyType @search(by: [exact])
	assemblyRelationship: AssemblyRelationship @search(by: [exact])
	segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement @hasInverse(field: materialRequirements)
	children(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: parent)
	parent(filter: MaterialRequirementFilter): MaterialRequirement @hasInverse(field: children)
	properties(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @hasInverse(field: materialRequirement)
	materialClass(filter: MaterialClassFilter): MaterialClass @hasInverse(field: materialRequirements)
	material(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: materialRequirements)
	materialLots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: materialRequirements)
	materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: materialRequirements)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: materialRequirements)
	testedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: requiredByMaterialRequirement)
	specifiesTests(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @hasInverse(field: testsMaterialRequirements)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: materialRequirement)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: materialRequirement)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: materialRequirement)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	propertiesAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
	materialLotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	testedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	specifiesTestsAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type MaterialRequirementProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement! @hasInverse(field: properties)
	children(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty] @hasInverse(field: parent)
	parent(filter: MaterialRequirementPropertyFilter): MaterialRequirementProperty @hasInverse(field: children)
	materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty @hasInverse(field: materialRequirementProperties)
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @hasInverse(field: materialRequirementProperties)
	materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty @hasInverse(field: materialRequirementProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
}

enum ScheduleState {
	""" The requirements have not been released for planning. """
	FORECAST
	""" The requirements have been released for execution. """
	RELEASED
	""" A scheduling decision has been taken to cancel the requirements prior to commencement of execution. """
	CANCELLED
	""" Necessary preconditions have not been met and the job orders or activities are not ready to run. """
	WAITING
	""" Necessary preconditions have been met and the job orders or activities are ready to run. """
	READY
	""" Job orders or activities are in execution. """
	RUNNING
	""" Job orders or activities have been completed and are no longer in execution. """
	COMPLETED
	""" An execution decision has been taken to terminate the job orders or activities that may, or may not, 
   have been previously commenced. """
	ABORTED
	""" Job orders or activities have been temporarily stopped due to a constraint of some form. """
	HELD
	""" Job orders or activities have been temporarily stopped due to a deliberate decision within execution. """
	SUSPENDED
	""" Job orders or activities have been completed and fully reconciled. No further changes, or restatement 
   of actuals is expected. """
	CLOSED
}

type OperationsPerformance @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsPerformance)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	operationsType: WorkType! @search
	startDateTime: DateTime @search
	endDateTime: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	performanceState: JobState
	publishedDate: DateTime @search
	operationsResponses(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse!]! @hasInverse(field: operationsPerformance)
	operationsSchedule(filter: OperationsScheduleFilter): OperationsSchedule @hasInverse(field: operationsPerformance)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	operationsResponsesAggregate(filter: OperationsResponseFilter): OperationsResponseAggregateResult
}

type OperationsResponse @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: operationsResponse)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	operationsType: WorkType! @search
	startDateTime: DateTime! @search
	endDateTime: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	responseState: JobState @search
	operationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformance! @hasInverse(field: operationsResponses)
	operationsRequest(filter: OperationsRequestFilter): OperationsRequest @hasInverse(field: operationsResponses)
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: operationsResponses)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: operationsResponses)
	segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @hasInverse(field: operationsResponses)
	segmentResponses(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse!]! @hasInverse(field: operationsResponse)
	isActive: Boolean @search
	properties(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty] @hasInverse(field: operationsResponse)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	segmentResponsesAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
	propertiesAggregate(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult
}

type SegmentResponse @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	operationsType: WorkType! @search
	actualStartDateTime: DateTime @search
	actualEndDateTime: DateTime @search
	postingDateTime: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	segmentState: JobState @search
	operationsDefinitions(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @hasInverse(field: segmentResponses)
	operationsSegments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: segmentResponses)
	processSegment(filter: ProcessSegmentFilter): ProcessSegment @hasInverse(field: segmentResponses)
	operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @hasInverse(field: segmentResponses)
	segmentRequirements(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement] @hasInverse(field: segmentResponses)
	workResponses(filter: WorkResponseFilter): WorkResponse @hasInverse(field: segmentResponse)
	jobResponses(filter: JobResponseFilter): JobResponse @hasInverse(field: segmentResponse)
	children(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse] @hasInverse(field: parent)
	parent(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: children)
	operationsResponse(filter: OperationsResponseFilter): OperationsResponse! @hasInverse(field: segmentResponses)
	segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData] @hasInverse(field: segmentResponse)
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: segmentResponse)
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: segmentResponse)
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @hasInverse(field: segmentResponse)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: segmentResponse)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	operationsDefinitionsAggregate(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
	operationsSegmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	segmentRequirementsAggregate(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	childrenAggregate(filter: SegmentResponseFilter): SegmentResponseAggregateResult
	segmentDataAggregate(filter: SegmentDataFilter): SegmentDataAggregateResult
	personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
}

type SegmentData @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	segmentResponse(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: segmentData)
	children(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData] @hasInverse(field: parent)
	parent(filter: SegmentDataFilter): SegmentData @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: SegmentDataFilter): SegmentDataAggregateResult
}

type PersonnelActual @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	personnelUse: String @search(by: [fulltext,exact])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	segmentResponse(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: personnelActual)
	children(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: parent)
	parent(filter: PersonnelActualFilter): PersonnelActual @hasInverse(field: children)
	properties(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @hasInverse(field: personnelActual)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: personnelActual)
	personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @hasInverse(field: personnelActual)
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person] @hasInverse(field: personnelActual)
	personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion] @hasInverse(field: personnelActual)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: personnelActual)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: personnelActual)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: personnelActual)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	propertiesAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	personnelClassAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	personAggregate(filter: PersonFilter): PersonAggregateResult
	personVersionAggregate(filter: PersonVersionFilter): PersonVersionAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PersonnelActualProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	personnelActual(filter: PersonnelActualFilter): PersonnelActual! @hasInverse(field: properties)
	children(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty] @hasInverse(field: parent)
	parent(filter: PersonnelActualPropertyFilter): PersonnelActualProperty @hasInverse(field: children)
	personnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassProperty @hasInverse(field: personnelActualProperties)
	personProperty(filter: PersonPropertyFilter): PersonProperty @hasInverse(field: personnelActualProperties)
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
}

type EquipmentActual @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	equipmentUse: String @search(by: [fulltext,exact])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	segmentResponse(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: equipmentActual)
	children(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: parent)
	parent(filter: EquipmentActualFilter): EquipmentActual @hasInverse(field: children)
	properties(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @hasInverse(field: equipmentActual)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: equipmentActual)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: equipmentActual)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: equipmentActual)
	equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion @hasInverse(field: equipmentActual)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: equipmentActual)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: equipmentActual)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: equipmentActual)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	propertiesAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type EquipmentActualProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	equipmentActual(filter: EquipmentActualFilter): EquipmentActual! @hasInverse(field: properties)
	children(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty] @hasInverse(field: parent)
	parent(filter: EquipmentActualPropertyFilter): EquipmentActualProperty @hasInverse(field: children)
	equipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassProperty @hasInverse(field: equipmentActualProperties)
	equipmentProperty(filter: EquipmentPropertyFilter): EquipmentProperty @hasInverse(field: equipmentActualProperties)
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
}

type PhysicalAssetActual @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	physicalLocation(filter: OperationalLocationFilter): OperationalLocation
	physicalAssetUse: String @search(by: [fulltext,exact])
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	segmentResponse(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: physicalAssetActual)
	children(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @hasInverse(field: parent)
	parent(filter: PhysicalAssetActualFilter): PhysicalAssetActual @hasInverse(field: children)
	properties(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @hasInverse(field: physicalAssetActual)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: physicalAssetActual)
	physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass @hasInverse(field: physicalAssetActual)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: physicalAssetActual)
	physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion @hasInverse(field: physicalAssetActual)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: physicalAssetActual)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: physicalAssetActual)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: physicalAssetActual)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	propertiesAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type PhysicalAssetActualProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual! @hasInverse(field: properties)
	children(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty] @hasInverse(field: parent)
	parent(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualProperty @hasInverse(field: children)
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassProperty @hasInverse(field: physicalAssetActualProperties)
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetProperty @hasInverse(field: physicalAssetActualProperties)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
}

type MaterialActual @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	storageLocation(filter: OperationalLocationFilter): OperationalLocation
	materialUse: MaterialUse @search
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	assemblyType: AssemblyType @search(by: [exact])
	assemblyRelationship: AssemblyRelationship @search(by: [exact])
	segmentResponse(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: materialActual)
	children(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: parent)
	parent(filter: MaterialActualFilter): MaterialActual @hasInverse(field: children)
	properties(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @hasInverse(field: materialActual)
	testResults(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @hasInverse(field: materialActual)
	materialClass(filter: MaterialClassFilter): MaterialClass @hasInverse(field: materialActual)
	materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: materialActual)
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion @hasInverse(field: materialActual)
	materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: materialActual)
	materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: materialActual)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: materialActual)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: materialActual)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: materialActual)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	propertiesAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
	testResultsAggregate(filter: TestResultFilter): TestResultAggregateResult
	materialLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	materialSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type MaterialActualProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	materialActual(filter: MaterialActualFilter): MaterialActual! @hasInverse(field: properties)
	children(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty] @hasInverse(field: parent)
	parent(filter: MaterialActualPropertyFilter): MaterialActualProperty @hasInverse(field: children)
	materialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassProperty @hasInverse(field: materialActualProperties)
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionProperty @hasInverse(field: materialActualProperties)
	materialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotProperty @hasInverse(field: materialActualProperties)
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
}

type OperationsResponseProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	operationsResponse(filter: OperationsResponseFilter): OperationsResponse! @hasInverse(field: properties)
	children(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty] @hasInverse(field: parent)
	parent(filter: OperationsResponsePropertyFilter): OperationsResponseProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult
}

type WorkMaster @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workMaster)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	version: String! @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	workType: WorkType
	duration: Float
	durationUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	publishedDate: DateTime @search
	definitionType: DefinitionType! @search
	parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: workMaster)
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: workMaster)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: workMaster)
	physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @hasInverse(field: workMaster)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: workMaster)
	evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty] @hasInverse(field: workMaster)
	propertyMeasurements(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: workMaster)
	parent(filter: WorkMasterFilter): WorkMaster @hasInverse(field: children)
	children(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @hasInverse(field: parent)
	workDirectives(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @hasInverse(field: workMaster)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: workMaster)
	defines(filter: WorkMasterFilter): WorkMaster @hasInverse(field: definedBy)
	definedBy(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @hasInverse(field: defines)
	processSegment(filter: ProcessSegmentFilter): ProcessSegment @hasInverse(field: workMasters)
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: workMasters)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: workMasters)
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: workMasters)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: workMaster)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: workMaster)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: workMaster)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
	propertyMeasurementsAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	childrenAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
	workDirectivesAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	definedByAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type WorkDirective @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workDirective)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @search(by: [fulltext,exact,regexp])
	version: String! @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	workType: WorkType
	duration: Float
	durationUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	publishedDate: DateTime @search
	state: WorkDirectiveState
	parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: workDirective)
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: workDirective)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: workDirective)
	physicalAssetSpecifications(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification] @hasInverse(field: workDirective)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: workDirective)
	evaluatedProperties(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty] @hasInverse(field: workDirective)
	propertyMeasurements(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement] @hasInverse(field: workDirective)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: workDirectives)
	children(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @hasInverse(field: parent)
	parent(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: children)
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: workDirectives)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: workDirective)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: workDirective)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: workDirective)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: workDirective)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	physicalAssetSpecificationsAggregate(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	evaluatedPropertiesAggregate(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
	propertyMeasurementsAggregate(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	childrenAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

enum WorkDirectiveState {
	WAITING
	READY
	RUNNING
	COMPLETED
	ABORTED
	HELD
	SUSPENDED
	CLOSED
}

type WorkflowSpecification @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workflowSpecification)
	versions(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion] @hasInverse(field: workflowSpecification)
	activeVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	_createdBy: String
	_createdDateTime: DateTime @default(add: {value:"$now"}) @search
	_modifiedBy: String
	_modifiedDateTime: DateTime @default(add: {value:"$now"}, update: {value:"$now"}) @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	includedIn(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion] @hasInverse(field: includePropertiesOf)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: workflowSpecification)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: workflowSpecification)
	workMasters(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @hasInverse(field: workflowSpecification)
	workDirectives(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @hasInverse(field: workflowSpecification)
	stateModelActions(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction] @hasInverse(field: workflowSpecification)
	rules(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule] @hasInverse(field: workflowSpecification)
	calledByNodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @hasInverse(field: containsWorkflowSpecification)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult
	includedInAggregate(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	workMastersAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult
	workDirectivesAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult
	stateModelActionsAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult
	rulesAggregate(filter: RuleFilter): RuleAggregateResult
	calledByNodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
}

type WorkflowSpecificationVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workflowSpecificationVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	version: String! @search(by: [fulltext,exact])
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @hasInverse(field: versions)
	isActiveVersionOf(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: activeVersion)
	versionStatus: VersionState! @search
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	description: String
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	definitionType: DefinitionType! @default(add: {value:"INSTANCE"})
	bpmnXMLEncoded: String
	schemaDefinition: String
	isExecutable: Boolean
	_createdBy: String
	_createdDateTime: DateTime @default(add: {value:"$now"}) @search
	_modifiedBy: String
	_modifiedDateTime: DateTime @default(add: {value:"$now"}, update: {value:"$now"}) @search
	includePropertiesOf(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification] @hasInverse(field: includedIn)
	messages(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage] @hasInverse(field: workflowSpecificationVersion)
	timers(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer] @hasInverse(field: workflowSpecificationVersion)
	errors(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError] @hasInverse(field: workflowSpecificationVersion)
	nodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @hasInverse(field: workflowSpecificationVersion)
	connections(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection] @hasInverse(field: workflowSpecificationVersion)
	properties(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty] @hasInverse(field: workflowSpecificationVersion)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: workflowSpecificationVersion)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: workflowSpecificationVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	includePropertiesOfAggregate(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult
	messagesAggregate(filter: WorkflowMessageFilter): WorkflowMessageAggregateResult
	timersAggregate(filter: WorkflowTimerFilter): WorkflowTimerAggregateResult
	errorsAggregate(filter: WorkflowErrorFilter): WorkflowErrorAggregateResult
	nodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
	connectionsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
	propertiesAggregate(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
}

enum DefinitionType {
	PATTERN
	INSTANCE
}

type WorkflowSpecificationProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion! @hasInverse(field: properties)
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String! @search(by: [fulltext,exact])
	dataType: DataType
	definitionType: DefinitionType! @default(add: {value:"INSTANCE"})
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	children(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty] @hasInverse(field: parent)
	parent(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult
}

type WorkflowTimer @key(fields: "iid") {
	iid: ID!
	id: String! @id
	reference: String @search(by: [fulltext,exact])
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @hasInverse(field: timers)
	node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode @hasInverse(field: timer)
	enabled: Boolean
}

type WorkflowMessage @key(fields: "iid") {
	iid: ID!
	id: String! @id
	reference: String @search(by: [fulltext,exact])
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @hasInverse(field: messages)
	node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode @hasInverse(field: message)
	enabled: Boolean!
}

type WorkflowError @key(fields: "iid") {
	iid: ID!
	id: String! @id
	reference: String @search(by: [fulltext,exact])
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @hasInverse(field: errors)
	node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode @hasInverse(field: error)
	code: String
}

type WorkflowSpecificationNode @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion! @hasInverse(field: nodes)
	properties(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty] @hasInverse(field: node)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: workflowSpecificationNode)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: workflowSpecificationNode)
	outflows(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection] @hasInverse(field: from)
	inflows(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection] @hasInverse(field: to)
	containsWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: calledByNodes)
	_createdBy: String @search(by: [fulltext,exact])
	_createdDateTime: DateTime @default(add: {value:"$now"}) @search
	_modifiedBy: String @search(by: [fulltext,exact])
	_modifiedDateTime: DateTime @default(add: {value:"$now"}, update: {value:"$now"}) @search
	form(filter: FormFilter): Form @hasInverse(field: workflowSpecificationNodes)
	inputs(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
	outputs(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
	message(filter: WorkflowMessageFilter): WorkflowMessage @hasInverse(field: node)
	error(filter: WorkflowErrorFilter): WorkflowError @hasInverse(field: node)
	timer(filter: WorkflowTimerFilter): WorkflowTimer @hasInverse(field: node)
	nodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeType! @hasInverse(field: nodes)
	role: String @search(by: [fulltext,exact])
	shape(filter: WorkflowShapeFilter): WorkflowShape @hasInverse(field: node)
	uiComponent: String @search(by: [fulltext,exact])
	testCases(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase] @hasInverse(field: node)
	boundaryEvents(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @hasInverse(field: attachedTo)
	attachedTo(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode @hasInverse(field: boundaryEvents)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	propertiesAggregate(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	outflowsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
	inflowsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
	inputsAggregate(filter: WorkflowSpecificationNodeVariableFilter): WorkflowSpecificationNodeVariableAggregateResult
	outputsAggregate(filter: WorkflowSpecificationNodeVariableFilter): WorkflowSpecificationNodeVariableAggregateResult
	testCasesAggregate(filter: WorkflowSpecificationNodeTestCaseFilter): WorkflowSpecificationNodeTestCaseAggregateResult
	boundaryEventsAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
}

type WorkflowSpecificationNodeTestCase @key(fields: "iid") {
	iid: ID!
	node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode! @hasInverse(field: testCases)
	id: String! @id @search(by: [fulltext,exact,regexp])
	inputJson: String!
	expectedResult: String!
}

type WorkflowShape @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @id @search(by: [fulltext,exact,regexp])
	node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode! @hasInverse(field: shape)
	x: String!
	y: String!
	width: String!
	height: String!
	icon: String
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type WorkflowSpecificationNodeVariable @key(fields: "iid") {
	iid: ID!
	source: String!
	target: String!
}

type WorkflowSpecificationNodeProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	node(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode! @hasInverse(field: properties)
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String! @search(by: [fulltext,exact])
	dataType: DataType
	definitionType: DefinitionType! @default(add: {value:"INSTANCE"})
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	children(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty] @hasInverse(field: parent)
	parent(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodeProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult
}

type WorkflowSpecificationNodeType @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workflowSpecificationNodeType)
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String @search(by: [fulltext,exact])
	description: String
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	properties(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty] @hasInverse(field: nodeType)
	nodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @hasInverse(field: nodeType)
	_createdBy: String
	_createdDateTime: DateTime @default(add: {value:"$now"}) @search
	_modifiedBy: String
	_modifiedDateTime: DateTime @default(add: {value:"$now"}, update: {value:"$now"}) @search
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	propertiesAggregate(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult
	nodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
}

type WorkflowSpecificationNodeTypeProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	nodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeType! @hasInverse(field: properties)
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String! @search(by: [fulltext,exact])
	dataType: DataType
	definitionType: DefinitionType! @default(add: {value:"INSTANCE"})
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	children(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty] @hasInverse(field: parent)
	parent(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypeProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult
}

type WorkflowSpecificationConnection @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	condition: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String @search(by: [fulltext,exact])
	waypoints(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint] @hasInverse(field: connection)
	description: String @search(by: [hash])
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion! @hasInverse(field: connections)
	connectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionType! @hasInverse(field: connections)
	properties(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty] @hasInverse(field: connection)
	to(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode! @hasInverse(field: inflows)
	from(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode! @hasInverse(field: outflows)
	_createdBy: String
	_createdDateTime: DateTime @default(add: {value:"$now"}) @search
	_modifiedBy: String
	_modifiedDateTime: DateTime @default(add: {value:"$now"}, update: {value:"$now"}) @search
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	waypointsAggregate(filter: WorkflowWaypointFilter): WorkflowWaypointAggregateResult
	propertiesAggregate(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult
}

type WorkflowWaypoint @withSubscription @key(fields: "iid") {
	iid: ID!
	connection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnection! @hasInverse(field: waypoints)
	x: String!
	y: String!
}

type WorkflowSpecificationConnectionProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	connection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnection! @hasInverse(field: properties)
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String! @search(by: [fulltext,exact])
	dataType: DataType
	definitionType: DefinitionType! @default(add: {value:"INSTANCE"})
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	children(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty] @hasInverse(field: parent)
	parent(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult
}

type WorkflowSpecificationConnectionType @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workflowSpecificationConnectionType)
	id: String! @id @search(by: [hash])
	description: String
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	connections(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection] @hasInverse(field: connectionType)
	properties(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty] @hasInverse(field: connectionType)
	_createdBy: String
	_createdDateTime: DateTime @default(add: {value:"$now"}) @search
	_modifiedBy: String
	_modifiedDateTime: DateTime @default(add: {value:"$now"}, update: {value:"$now"}) @search
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	connectionsAggregate(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
	propertiesAggregate(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult
}

type WorkflowSpecificationConnectionTypeProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	connectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionType! @hasInverse(field: properties)
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String! @search(by: [fulltext,exact])
	dataType: DataType
	definitionType: DefinitionType! @default(add: {value:"INSTANCE"})
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	children(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty] @hasInverse(field: parent)
	parent(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypeProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult
}

type Form @withSubscription @key(fields: "iid") {
	iid: ID!
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String @search(by: [fulltext,exact])
	workflowSpecificationNodes(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode] @hasInverse(field: form)
	jsonSchema: String
	uiSchema: String
	workflowSpecificationNodesAggregate(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
}

type WorkSchedule @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workSchedule)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	workType: WorkType @search
	description: String @search(by: [fulltext,exact])
	scheduledStartDate: DateTime @search
	scheduledEndDate: DateTime @search
	publishedDate: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	scheduleState: ScheduleState @search
	workRequests(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest] @hasInverse(field: workSchedule)
	children(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule] @hasInverse(field: parent)
	parent(filter: WorkScheduleFilter): WorkSchedule @hasInverse(field: children)
	workPerformances(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance] @hasInverse(field: workSchedule)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	workRequestsAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
	childrenAggregate(filter: WorkScheduleFilter): WorkScheduleAggregateResult
	workPerformancesAggregate(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult
}

type WorkRequest @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workRequest)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	workType: WorkType! @search
	description: String @search(by: [fulltext,exact])
	plannedStartDateTime: DateTime @search
	plannedEndDateTime: DateTime @search
	priority: String
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	requestState: ScheduleState!
	children(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest] @hasInverse(field: parent)
	parent(filter: WorkRequestFilter): WorkRequest @hasInverse(field: children)
	workSchedule(filter: WorkScheduleFilter): WorkSchedule! @hasInverse(field: workRequests)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder!]! @hasInverse(field: workRequest)
	operationsRequest(filter: OperationsRequestFilter): OperationsRequest @hasInverse(field: workRequests)
	segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement @hasInverse(field: workRequests)
	workResponses(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse] @hasInverse(field: workRequest)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: workRequest)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: workRequest)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childrenAggregate(filter: WorkRequestFilter): WorkRequestAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	workResponsesAggregate(filter: WorkResponseFilter): WorkResponseAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type JobList @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: jobList)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	workType: WorkType! @search
	description: String @search(by: [fulltext,exact])
	plannedStartDateTime: DateTime @search
	plannedEndDateTime: DateTime @search
	publishedDate: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder!]! @hasInverse(field: jobList)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
}

type JobOrder @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: jobOrder)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	publishedDate: DateTime @search
	workType: WorkType @search
	scheduledStartDateTime: DateTime @search
	scheduledEndDateTime: DateTime @search
	priority: Int
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	command: String @search(by: [fulltext,exact])
	dispatchStatus: DispatchStatus @search
	commandRule: String @search(by: [fulltext,exact])
	label: String @search(by: [fulltext,exact,regexp])
	workRequest(filter: WorkRequestFilter): WorkRequest @hasInverse(field: jobOrders)
	jobList(filter: JobListFilter): JobList @hasInverse(field: jobOrders)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: jobOrders)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: jobOrder)
	segmentRequirement(filter: SegmentRequirementFilter): SegmentRequirement @hasInverse(field: jobOrders)
	parameters(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter] @hasInverse(field: jobOrder)
	personnelRequirements(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement] @hasInverse(field: jobOrder)
	equipmentRequirements(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement] @hasInverse(field: jobOrder)
	physicalAssetRequirements(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement] @hasInverse(field: jobOrder)
	materialRequirements(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement] @hasInverse(field: jobOrder)
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: jobOrders)
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @hasInverse(field: jobOrders)
	workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode @hasInverse(field: jobOrders)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: jobOrders)
	previous(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: next)
	next(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: previous)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: jobOrder)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: jobOrder)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	parametersAggregate(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
	personnelRequirementsAggregate(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	equipmentRequirementsAggregate(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	physicalAssetRequirementsAggregate(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	materialRequirementsAggregate(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	previousAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	nextAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type JobOrderParameter @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	label: String @search(by: [fulltext,exact])
	jobOrder(filter: JobOrderFilter): JobOrder! @hasInverse(field: parameters)
	children(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter] @hasInverse(field: parent)
	parent(filter: JobOrderParameterFilter): JobOrderParameter @hasInverse(field: children)
	parameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecification @hasInverse(field: jobOrderParameter)
	processSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameter @hasInverse(field: jobOrderParameter)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
}

enum DispatchStatus {
	CREATED
	RELEASED
	PENDING
	ACTIVE
	PARKED
	COMPLETE
	CLOSED
	CANCELED
}

type WorkPerformance @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workPerformance)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	workType: WorkType @search
	startDateTime: DateTime @search
	endDateTime: DateTime @search
	publishedDate: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	workState: JobState
	workResponses(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse!]! @hasInverse(field: workPerformance)
	children(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance] @hasInverse(field: parent)
	parent(filter: WorkPerformanceFilter): WorkPerformance @hasInverse(field: children)
	workSchedule(filter: WorkScheduleFilter): WorkSchedule @hasInverse(field: workPerformances)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	workResponsesAggregate(filter: WorkResponseFilter): WorkResponseAggregateResult
	childrenAggregate(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult
}

type WorkResponse @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workResponse)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	workType: WorkType @search
	startDateTime: DateTime @search
	endDateTime: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	responseState: JobState @search
	workPerformance(filter: WorkPerformanceFilter): WorkPerformance! @hasInverse(field: workResponses)
	children(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse] @hasInverse(field: parent)
	parent(filter: WorkResponseFilter): WorkResponse @hasInverse(field: children)
	workRequest(filter: WorkRequestFilter): WorkRequest @hasInverse(field: workResponses)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse!]! @hasInverse(field: workResponse)
	segmentResponse(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: workResponses)
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: workResponse)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: workResponse)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: workResponse)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childrenAggregate(filter: WorkResponseFilter): WorkResponseAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type JobResponseList @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: jobResponseList)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	version: String! @search(by: [fulltext,exact])
	description: String @search(by: [fulltext,exact])
	workType: WorkType @search
	startDateTime: DateTime @search
	endDateTime: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse!]! @hasInverse(field: jobResponseList)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
}

type JobResponse @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: jobResponse)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	publishedDate: DateTime @search
	workType: WorkType @search
	startDateTime: DateTime @search
	endDateTime: DateTime @search
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	jobState: JobState
	dataJSON: String @search(by: [fulltext,exact,regexp])
	productionDate: String @search(by: [fulltext,exact])
	workResponse(filter: WorkResponseFilter): WorkResponse @hasInverse(field: jobResponses)
	segmentResponse(filter: SegmentResponseFilter): SegmentResponse @hasInverse(field: jobResponses)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: jobResponses)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: jobResponses)
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: jobResponses)
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @hasInverse(field: jobResponses)
	workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNode @hasInverse(field: jobResponses)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: jobResponses)
	jobResponseList(filter: JobResponseListFilter): JobResponseList @hasInverse(field: jobResponses)
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: jobResponse)
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: jobResponse)
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual] @hasInverse(field: jobResponse)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: jobResponse)
	data(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData] @hasInverse(field: jobResponse)
	children(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: parent)
	parent(filter: JobResponseFilter): JobResponse @hasInverse(field: children)
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: jobResponse)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: jobResponse)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: jobResponse)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	physicalAssetActualAggregate(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	dataAggregate(filter: JobResponseDataFilter): JobResponseDataAggregateResult
	childrenAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type JobResponseData @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	label: String @search(by: [fulltext,exact,regexp])
	jobResponse(filter: JobResponseFilter): JobResponse! @hasInverse(field: data)
	children(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData] @hasInverse(field: parent)
	parent(filter: JobResponseDataFilter): JobResponseData @hasInverse(field: children)
	events(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event] @hasInverse(field: jobResponseData)
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: jobResponseData)
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: jobResponseData)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: JobResponseDataFilter): JobResponseDataAggregateResult
	eventsAggregate(filter: EventFilter): EventAggregateResult
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
}

enum JobState {
	""" Necessary preconditions have not been met and the job orders or activities are not ready to run. """
	WAITING
	""" Necessary preconditions have been met and the job order or activities are ready to run. """
	READY
	""" Job order or activities are in execution. """
	RUNNING
	""" Job order or activities have been completed and are no longer in execution. """
	COMPLETED
	""" An execution decision has been taken to terminate the job order or activities that may, or may not, 
   have been previously commenced. """
	ABORTED
	""" Job order or activities have been temporarily stopped due to a constraint of some form. """
	HELD
	""" Job order or activities have been temporarily stopped due to a deliberate decision within execution. """
	SUSPENDED
	""" Job order or activities have been completed and fully reconciled. No further changes, or restatement 
   of actuals is expected. """
	CLOSED
	""" Job order or activity doesn't correspond to the other states or is stored else-where. """
	OTHER
}

type WorkCalendarDefinitionEntry @withSubscription @key(fields: "iid") {
	iid: ID!
	isActive: Boolean @search
	description: String
	hierarchyScope(filter: EquipmentFilter): Equipment
	freq: Frequency!
	startDateTime: DateTime!
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType!
	properties(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty] @hasInverse(field: workCalendarDefinitionEntry)
	calendarEntries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @hasInverse(field: definition)
	workCalendar(filter: WorkCalendarFilter): WorkCalendar @hasInverse(field: definition)
	propertiesAggregate(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult
	calendarEntriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
}

type WorkCalendarDefinitionEntryProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntry! @hasInverse(field: properties)
	children(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty] @hasInverse(field: parent)
	parent(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult
}

enum Frequency {
	YEARLY
	MONTHLY
	WEEKLY
	DAILY
	HOURLY
	MINUTELY
	SECONDLY
}

enum Weekday {
	MO
	TU
	WE
	TH
	FR
	SA
	SU
}

type WorkCalendarEntry @withSubscription @key(fields: "iid") {
	iid: ID!
	isActive: Boolean @search
	description: String
	definition(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntry @hasInverse(field: calendarEntries)
	hierarchyScope(filter: EquipmentFilter): Equipment
	startDateTime: DateTime! @search
	finishDateTime: DateTime! @search
	entryType: WorkCalendarEntryType! @search
	properties(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty] @hasInverse(field: workCalendarEntry)
	workCalendar(filter: WorkCalendarFilter): WorkCalendar @hasInverse(field: entries)
	propertiesAggregate(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult
}

type WorkCalendarEntryProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation
	use: String @search(by: [fulltext,exact])
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	workCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntry! @hasInverse(field: properties)
	children(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty] @hasInverse(field: parent)
	parent(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult
}

type WorkCalendar @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: workCalendar)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	name: String! @id
	description: String
	definition(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry] @hasInverse(field: workCalendar)
	entries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @hasInverse(field: workCalendar)
	equipmentVersions(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion] @hasInverse(field: workCalendar)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	definitionAggregate(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult
	entriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
	equipmentVersionsAggregate(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
}

enum WorkCalendarEntryType {
	PlannedBusyTime
	PlannedDowntime
	PlannedShutdown
}

enum InformationObjectTypeEnum {
	Change
	Comment
	DataSet
	DataSource
	DataSourceVersion
	Equipment
	EquipmentClass
	EquipmentClassVersion
	EquipmentVersion
	Event
	HierarchyScope
	JobList
	JobOrder
	JobResponse
	JobResponseList
	MaterialClass
	MaterialClassVersion
	MaterialDefinition
	MaterialDefinitionVersion
	MaterialLot
	MaterialSubLot
	OperationalLocation
	OperationalLocationClass
	OperationalLocationClassVersion
	OperationalLocationVersion
	OperationsCapability
	OperationsDefinition
	OperationsDefinitionVersion
	OperationsEvent
	OperationsEventClass
	OperationsEventClassVersion
	OperationsEventDefinition
	OperationsEventDefinitionVersion
	OperationsPerformance
	OperationsRequest
	OperationsResponse
	OperationsSchedule
	OperationsSegment
	Other
	Person
	PersonVersion
	PersonnelClass
	PersonnelClassVersion
	PhysicalAsset
	PhysicalAssetClass
	PhysicalAssetClassVersion
	PhysicalAssetVersion
	ProcessSegment
	ProcessSegmentVersion
	PropertyMeasurement
	ResourceNetworkConnectionType
	ResourceRelationshipNetwork
	Sample
	SpatialDefinition
	TestResult
	TestSpecification
	TestSpecificationVersion
	UnitOfMeasure
	WorkAlert
	WorkAlertDefinition
	WorkCalendar
	WorkCalendarDefinition
	WorkCapability
	WorkDirective
	WorkMaster
	WorkMasterCapability
	WorkMasterVersion
	WorkPerformance
	WorkRecord
	WorkRecordSpecification
	WorkRequest
	WorkResponse
	WorkSchedule
	WorkflowSpecification
	WorkflowSpecificationConnectionType
	WorkflowSpecificationNodeType
	WorkflowSpecificationVersion
}

type InformationObject @withSubscription @key(fields: "iid") {
	iid: ID!
	operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntry @hasInverse(field: informationObject)
	comment(filter: CommentFilter): Comment @hasInverse(field: recordEntries)
	event(filter: EventFilter): Event @hasInverse(field: recordEntries)
	dataSource(filter: DataSourceFilter): DataSource @hasInverse(field: recordEntries)
	dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion @hasInverse(field: recordEntries)
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope @hasInverse(field: recordEntries)
	unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @hasInverse(field: recordEntries)
	spatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinition @hasInverse(field: recordEntries)
	operationalLocation(filter: OperationalLocationFilter): OperationalLocation @hasInverse(field: recordEntries)
	operationalLocationVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersion @hasInverse(field: recordEntries)
	operationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClass @hasInverse(field: recordEntries)
	operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersion @hasInverse(field: recordEntries)
	personnelClass(filter: PersonnelClassFilter): PersonnelClass @hasInverse(field: recordEntries)
	personnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion @hasInverse(field: recordEntries)
	person(filter: PersonFilter): Person @hasInverse(field: recordEntries)
	personVersion(filter: PersonVersionFilter): PersonVersion @hasInverse(field: recordEntries)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: recordEntries)
	equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion @hasInverse(field: recordEntries)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: recordEntries)
	equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion @hasInverse(field: recordEntries)
	physicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClass @hasInverse(field: recordEntries)
	physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion @hasInverse(field: recordEntries)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: recordEntries)
	physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion @hasInverse(field: recordEntries)
	materialClass(filter: MaterialClassFilter): MaterialClass @hasInverse(field: recordEntries)
	materialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersion @hasInverse(field: recordEntries)
	materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: recordEntries)
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion @hasInverse(field: recordEntries)
	materialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: recordEntries)
	materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: recordEntries)
	processSegment(filter: ProcessSegmentFilter): ProcessSegment @hasInverse(field: recordEntries)
	processSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersion @hasInverse(field: recordEntries)
	testSpecification(filter: TestSpecificationFilter): TestSpecification @hasInverse(field: recordEntries)
	testResult(filter: TestResultFilter): TestResult @hasInverse(field: recordEntries)
	propertyMeasurement(filter: PropertyMeasurementFilter): PropertyMeasurement @hasInverse(field: recordEntries)
	operationsEventClass(filter: OperationsEventClassFilter): OperationsEventClass @hasInverse(field: recordEntries)
	operationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersion @hasInverse(field: recordEntries)
	operationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinition @hasInverse(field: recordEntries)
	operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersion @hasInverse(field: recordEntries)
	operationsEvent(filter: OperationsEventFilter): OperationsEvent @hasInverse(field: recordEntries)
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: recordEntries)
	operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersion @hasInverse(field: recordEntries)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: recordEntries)
	operationsSchedule(filter: OperationsScheduleFilter): OperationsSchedule @hasInverse(field: recordEntries)
	operationsRequest(filter: OperationsRequestFilter): OperationsRequest @hasInverse(field: recordEntries)
	operationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformance @hasInverse(field: recordEntries)
	operationsResponse(filter: OperationsResponseFilter): OperationsResponse @hasInverse(field: recordEntries)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: recordEntries)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: recordEntries)
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: recordEntries)
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersion @hasInverse(field: recordEntries)
	workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeType @hasInverse(field: recordEntries)
	workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionType @hasInverse(field: recordEntries)
	workSchedule(filter: WorkScheduleFilter): WorkSchedule @hasInverse(field: recordEntries)
	workRequest(filter: WorkRequestFilter): WorkRequest @hasInverse(field: recordEntries)
	jobList(filter: JobListFilter): JobList @hasInverse(field: recordEntries)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: recordEntries)
	workPerformance(filter: WorkPerformanceFilter): WorkPerformance @hasInverse(field: recordEntries)
	workResponse(filter: WorkResponseFilter): WorkResponse @hasInverse(field: recordEntries)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: recordEntries)
	jobResponseList(filter: JobResponseListFilter): JobResponseList @hasInverse(field: recordEntries)
	workCalendar(filter: WorkCalendarFilter): WorkCalendar @hasInverse(field: recordEntries)
	Other: String
}

type StateModelDefinition @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	states(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState] @hasInverse(field: stateModelDefinition)
	transitions(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition] @hasInverse(field: stateModelDefinition)
	events(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent] @hasInverse(field: stateModelDefinition)
	bpmnXMLEncoded: String!
	equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion @hasInverse(field: stateModels)
	equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion @hasInverse(field: stateModels)
	materialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersion @hasInverse(field: stateModels)
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersion @hasInverse(field: stateModels)
	personnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersion @hasInverse(field: stateModels)
	personVersion(filter: PersonVersionFilter): PersonVersion @hasInverse(field: stateModels)
	physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersion @hasInverse(field: stateModels)
	physicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersion @hasInverse(field: stateModels)
	instances(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance] @hasInverse(field: stateModelDefinition)
	properties(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty] @hasInverse(field: StateModel)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	statesAggregate(filter: StateModelStateFilter): StateModelStateAggregateResult
	transitionsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
	eventsAggregate(filter: StateModelEventFilter): StateModelEventAggregateResult
	instancesAggregate(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
	propertiesAggregate(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult
}

type StateModelState @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	parent(filter: StateModelStateFilter): StateModelState @hasInverse(field: children)
	children(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState] @hasInverse(field: parent)
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	isInitialState: Boolean @search
	isFinalState: Boolean @search
	stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition @hasInverse(field: states)
	inflows(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition] @hasInverse(field: to)
	outflows(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition] @hasInverse(field: from)
	onEntry(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction] @hasInverse(field: isEntryActionForState)
	onExit(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction] @hasInverse(field: isExitActionForState)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: StateModelStateFilter): StateModelStateAggregateResult
	inflowsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
	outflowsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
	onEntryAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult
	onExitAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult
}

type StateModelTransition @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition! @hasInverse(field: transitions)
	stateModelEvents(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent] @hasInverse(field: transitions)
	from(filter: StateModelStateFilter): StateModelState! @hasInverse(field: outflows)
	to(filter: StateModelStateFilter): StateModelState! @hasInverse(field: inflows)
	condition: String
	stateModelActions(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction] @hasInverse(field: transition)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	stateModelEventsAggregate(filter: StateModelEventFilter): StateModelEventAggregateResult
	stateModelActionsAggregate(filter: StateModelActionFilter): StateModelActionAggregateResult
}

type StateModelEvent @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition! @hasInverse(field: events)
	transitions(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition] @hasInverse(field: stateModelEvents)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	transitionsAggregate(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
}

enum StateModelActionType {
	ENTRY
	EXIT
}

type StateModelAction @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	actionType: StateModelActionType @search
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: stateModelActions)
	variables: String
	transition(filter: StateModelTransitionFilter): StateModelTransition @hasInverse(field: stateModelActions)
	isEntryActionForState(filter: StateModelStateFilter): StateModelState @hasInverse(field: onEntry)
	isExitActionForState(filter: StateModelStateFilter): StateModelState @hasInverse(field: onExit)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type StateModelInstance @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	stateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinition @hasInverse(field: instances)
	description: String @search(by: [fulltext,exact])
	hierarchyScope(filter: HierarchyScopeFilter): HierarchyScope
	state: String @search(by: [fulltext,exact,regexp])
	transitions(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance] @hasInverse(field: stateModelInstance)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: stateModelInstances)
	materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: stateModelInstances)
	materialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: stateModelInstances)
	materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: stateModelInstances)
	person(filter: PersonFilter): Person @hasInverse(field: stateModelInstances)
	physicalAsset(filter: PhysicalAssetFilter): PhysicalAsset @hasInverse(field: stateModelInstances)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	transitionsAggregate(filter: StateTransitionInstanceFilter): StateTransitionInstanceAggregateResult
}

type StateTransitionInstance @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	stateModelInstance(filter: StateModelInstanceFilter): StateModelInstance! @hasInverse(field: transitions)
	timestamp: DateTime! @search @default(add: {value:"$now"})
	fromState: String @search(by: [fulltext,exact,regexp])
	toState: String! @search(by: [fulltext,exact,regexp])
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type StateModelProperty @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	StateModel(filter: StateModelDefinitionFilter): StateModelDefinition! @hasInverse(field: properties)
	id: String! @id @search(by: [fulltext,exact,regexp])
	name: String! @search(by: [fulltext,exact])
	dataType: DataType
	definitionType: DefinitionType! @default(add: {value:"INSTANCE"})
	description: String @search(by: [fulltext,exact])
	value: String @search(by: [fulltext,exact])
	valueUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	children(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty] @hasInverse(field: parent)
	parent(filter: StateModelPropertyFilter): StateModelProperty @hasInverse(field: children)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult
}

type AccessPermission @key(fields: "iid") {
	iid: ID!
	label: String! @search(by: [fulltext,exact])
	permissionLevel: Int! @search
}

enum Isa95PropertyType {
	"""The property value is defined for the class as the default instance value, but individual instances of the class may redefine specific values."""
	DefaultType
	"""The property value is defined for the class and there is no value associated with an instance."""
	ClassType
	"""The property value of the class is undefined."""
	InstanceType
}

type LibreService @withSubscription @key(fields: "id") {
	id: ID!
	name: String! @id
	heartbeat: DateTime
}

type DataSubscription @withSubscription @key(fields: "id") {
	id: ID!
	name: String! @id
	topic: String!
	query: String!
	split: Boolean!
}

type Menu {
	iid: ID!
	label: String! @search(by: [hash])
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	parent(filter: MenuFilter): Menu @hasInverse(field: children)
	children(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu!] @hasInverse(field: parent)
	menuPage: String
	icon: String
	isSection: Boolean!
	isPage: Boolean!
	orderNumber: Int
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	childrenAggregate(filter: MenuFilter): MenuAggregateResult
}

enum PropertyBindingType {
	BOUND
	STATIC
	CALCULATED
}

type EquipmentPropertyOverride @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	id: String! @id @search(by: [fulltext,exact,regexp])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	equipmentVersions(filter: EquipmentVersionFilter): EquipmentVersion! @hasInverse(field: propertyOverrides)
	propertyLabel: String! @search(by: [fulltext,exact])
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean @search
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type EquipmentNameAlias @withSubscription {
	iid: ID!
	equipment(filter: EquipmentFilter): Equipment!
	alias: String! @search(by: [fulltext])
	system: String! @search(by: [fulltext])
}

type PropertyNameAlias @withSubscription {
	iid: ID!
	propertyLabel: String! @search(by: [fulltext,exact,regexp])
	expression: String
	equipmentVersion(filter: EquipmentVersionFilter): EquipmentVersion! @hasInverse(field: propertyNameAliases)
	dataSource(filter: DataSourceFilter): DataSource @hasInverse(field: propertyNameAliases)
	dataSourceTopic(filter: DataSourceTopicFilter): DataSourceTopic @hasInverse(field: propertyNameAliases) @deprecated(reason: "use dataSourceTopicLabel instead")
	dataSourceTopicLabel: String @search(by: [fulltext,exact,regexp])
}

type PropertyValueAlias @withSubscription {
	iid: ID!
	property(filter: EquipmentClassPropertyFilter): EquipmentClassProperty!
	value: String! @search(by: [fulltext])
	alias: String! @search(by: [fulltext])
	system: String! @search(by: [fulltext])
}

enum DataType {
	BOOL
	BYTE
	BYTE_STRING
	DATA_VALUE
	DATE_TIME
	FLOAT64
	EXPANDED_NODE_ID
	STRUCTURE
	FLOAT
	GUID
	INT16
	INT32
	INT64
	INT
	LOCALIZED_TEXT
	NODE_ID
	QUALIFIED_NAME
	S_BYTE
	STATUS_CODE
	STRING
	UINT16
	UINT32
	UInt64
	UINT
	XML_ELEMENT
	BOOL_ARRAY
	BYTE_ARRAY
	BYTE_STRING_ARRAY
	DATA_VALUE_ARRAY
	DATE_TIME_ARRAY
	FLOAT64_ARRAY
	EXPANDED_NODE_ID_ARRAY
	STRUCTURE_ARRAY
	FLOAT_ARRAY
	GUID_ARRAY
	INT16_ARRAY
	INT32_ARRAY
	INT64_ARRAY
	LOCALIZED_TEXT_ARRAY
	NODE_ID_ARRAY
	QUALIFIED_NAME_ARRAY
	S_BYTE_ARRAY
	STATUS_CODE_ARRAY
	STRING_ARRAY
	UINT16_ARRAY
	UINT32_ARRAY
	UInt64_ARRAY
	XML_ELEMENT_ARRAY
}

enum DataSourceProtocol {
	MQTT
	OPCUA
}

type DataSource @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: dataSource)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	versions(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion] @hasInverse(field: dataSource)
	activeVersion(filter: DataSourceVersionFilter): DataSourceVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	uiSortIndex: Int
	equipmentDataSources(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @hasInverse(field: dataSource)
	propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @hasInverse(field: dataSource)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	versionsAggregate(filter: DataSourceVersionFilter): DataSourceVersionAggregateResult
	equipmentDataSourcesAggregate(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult
	propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
}

type DataSourceVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: dataSourceVersion)
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime @search
	effectiveEnd: DateTime @search
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	dataSource(filter: DataSourceFilter): DataSource! @hasInverse(field: versions)
	isActiveVersionOf(filter: DataSourceFilter): DataSource @hasInverse(field: activeVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	protocol: DataSourceProtocol! @search(by: [exact])
	connectionString: String @search(by: [fulltext,exact])
	username: String
	password: String
	certificate: String
	topics(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic] @hasInverse(field: dataSourceVersion)
	equipmentDataSources(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource] @hasInverse(field: dataSourceVersion)
	physicalAssetDataSources(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource] @hasInverse(field: dataSourceVersion)
	methods(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod] @hasInverse(field: dataSourceVersion)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	topicsAggregate(filter: DataSourceTopicFilter): DataSourceTopicAggregateResult
	equipmentDataSourcesAggregate(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult
	physicalAssetDataSourcesAggregate(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult
	methodsAggregate(filter: DataSourceMethodFilter): DataSourceMethodAggregateResult
}

type DataSourceTopic @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	label: String! @search(by: [fulltext,exact,regexp])
	dataType: DataType @search
	messageKeyDeterminedBy: MessageKey! @search
	dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion! @hasInverse(field: topics)
	propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @hasInverse(field: dataSourceTopic) @deprecated(reason: "the dataSourceTopic Label is now maintained on the propertyNameAlias as a string rather than as a relationship")
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
}

type DataSourceMethod @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	method: String! @search(by: [fulltext,exact,regexp])
	object: String
	error: String
	statusCode: Int
	dataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersion! @hasInverse(field: methods)
	arguments(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument] @hasInverse(field: dataSourceMethod)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	argumentsAggregate(filter: DataSourceMethodArgumentFilter): DataSourceMethodArgumentAggregateResult
}

type DataSourceMethodArgument @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	position: Int!
	dataType: DataType @search
	direction: MethodArgumentDirection!
	value: String
	dataSourceMethod(filter: DataSourceMethodFilter): DataSourceMethod! @hasInverse(field: arguments)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

enum MethodArgumentDirection {
	DirectionIn
	DirectionOut
}

enum MessageKey {
	MessageValue
	SourceTimestamp
	ServerTimestamp
}

type Rule @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	id: String! @id @search(by: [fulltext,exact,regexp])
	label: String! @search(by: [fulltext,exact,regexp])
	description: String @search(by: [fulltext,exact])
	processLocation: ProcessLocation @search
	triggerExpression: String!
	delayOption: Boolean
	delayTime: Int
	payloadFields(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @hasInverse(field: rules)
	triggerProperties(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty] @hasInverse(field: triggersRules)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: rules)
	operationsSegmentDependency(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependency @hasInverse(field: rules)
	processSegmentDependency(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependency @hasInverse(field: rules)
	equipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersion @hasInverse(field: rules)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	payloadFieldsAggregate(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult
	triggerPropertiesAggregate(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult
}

enum ProcessLocation {
	Edge
	Core
}

type PayloadFieldDefinition @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	name: String!
	expression: String!
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type EnvironmentalVariable @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	versions(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion] @hasInverse(field: environmentalVariable)
	activeVersion(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	versionsAggregate(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersionAggregateResult
}

type EnvironmentalVariableVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	environmentalVariable(filter: EnvironmentalVariableFilter): EnvironmentalVariable! @hasInverse(field: versions)
	isActiveVersionOf(filter: EnvironmentalVariableFilter): EnvironmentalVariable @hasInverse(field: activeVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	value: String!
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type Secret @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	versions(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion] @hasInverse(field: secret)
	activeVersion(filter: SecretVersionFilter): SecretVersion @hasInverse(field: isActiveVersionOf)
	nextVersion: String
	id: String! @id @search(by: [fulltext,exact,regexp])
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	versionsAggregate(filter: SecretVersionFilter): SecretVersionAggregateResult
}

type SecretVersion @withSubscription @primaryKey(fields: ["id","version"]) @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	effectiveStart: DateTime! @search
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	version: String! @search(by: [fulltext,exact])
	versionStatus: VersionState! @search
	secret(filter: SecretFilter): Secret! @hasInverse(field: versions)
	isActiveVersionOf(filter: SecretFilter): Secret @hasInverse(field: activeVersion)
	id: String! @search(by: [fulltext,exact,regexp])
	value: String!
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type Signature @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	timestamp: DateTime! @default(add: {value:"$now"})
	changeIndication: String!
	signatureReason(filter: SignatureReasonFilter): SignatureReason! @hasInverse(field: signatures)
	personVersion(filter: PersonVersionFilter): PersonVersion! @hasInverse(field: signaturesMade)
	comment(filter: CommentFilter): Comment @hasInverse(field: onSignature)
	signatureForAComment(filter: CommentFilter): Comment @hasInverse(field: signOff)
	event(filter: EventFilter): Event @hasInverse(field: signatures)
	alarmEvent(filter: AlarmEventFilter): AlarmEvent @hasInverse(field: signatures)
	workResponse(filter: WorkResponseFilter): WorkResponse @hasInverse(field: signatures)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: signatures)
	jobResponseData(filter: JobResponseDataFilter): JobResponseData @hasInverse(field: signatures)
	materialActual(filter: MaterialActualFilter): MaterialActual @hasInverse(field: signatures)
	equipmentActual(filter: EquipmentActualFilter): EquipmentActual @hasInverse(field: signatures)
	physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual @hasInverse(field: signatures)
	personnelActual(filter: PersonnelActualFilter): PersonnelActual @hasInverse(field: signatures)
	workRequest(filter: WorkRequestFilter): WorkRequest @hasInverse(field: signatures)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: signatures)
	materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement @hasInverse(field: signatures)
	equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement @hasInverse(field: signatures)
	physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement @hasInverse(field: signatures)
	personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement @hasInverse(field: signatures)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: signatures)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: signatures)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
}

type SignatureReason @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	signatures(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature] @hasInverse(field: signatureReason)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	signaturesAggregate(filter: SignatureFilter): SignatureAggregateResult
}

type Comment @withSubscription @key(fields: "iid") {
	iid: ID!
	acl(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	recordEntries(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject] @hasInverse(field: comment)
	effectiveStart: DateTime! @search @default(add: {value:"$now"})
	effectiveEnd: DateTime @search
	_createdOn: DateTime! @default(add: {value:"$now"})
	_modifiedOn: DateTime @default(add: {value:"$now"}, update: {value:"$now"})
	_createdBy: String @search(by: [fulltext,exact])
	_modifiedBy: String @search(by: [fulltext,exact])
	id: String! @id @search(by: [fulltext,exact,regexp])
	text: String! @search(by: [fulltext,exact])
	timestamp: DateTime! @default(add: {value:"$now"})
	personVersion(filter: PersonVersionFilter): PersonVersion! @hasInverse(field: comments)
	onSignature(filter: SignatureFilter): Signature @hasInverse(field: comment)
	signOff(filter: SignatureFilter): Signature @hasInverse(field: signatureForAComment)
	event(filter: EventFilter): Event @hasInverse(field: comments)
	alarmEvent(filter: AlarmEventFilter): AlarmEvent @hasInverse(field: comments)
	workResponse(filter: WorkResponseFilter): WorkResponse @hasInverse(field: comments)
	jobResponse(filter: JobResponseFilter): JobResponse @hasInverse(field: comments)
	jobResponseData(filter: JobResponseDataFilter): JobResponseData @hasInverse(field: comments)
	materialActual(filter: MaterialActualFilter): MaterialActual @hasInverse(field: comments)
	equipmentActual(filter: EquipmentActualFilter): EquipmentActual @hasInverse(field: comments)
	physicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActual @hasInverse(field: comments)
	personnelActual(filter: PersonnelActualFilter): PersonnelActual @hasInverse(field: comments)
	segmentParameter(filter: SegmentParameterFilter): SegmentParameter @hasInverse(field: comments)
	workRequest(filter: WorkRequestFilter): WorkRequest @hasInverse(field: comments)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: comments)
	materialRequirement(filter: MaterialRequirementFilter): MaterialRequirement @hasInverse(field: comments)
	equipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirement @hasInverse(field: comments)
	physicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirement @hasInverse(field: comments)
	personnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirement @hasInverse(field: comments)
	workMaster(filter: WorkMasterFilter): WorkMaster @hasInverse(field: comments)
	workDirective(filter: WorkDirectiveFilter): WorkDirective @hasInverse(field: comments)
	child(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment] @hasInverse(field: parent)
	parent(filter: CommentFilter): Comment @hasInverse(field: child)
	aclAggregate(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	recordEntriesAggregate(filter: InformationObjectFilter): InformationObjectAggregateResult
	childAggregate(filter: CommentFilter): CommentAggregateResult
}

enum VersionState {
	DRAFT
	FOR_REVIEW
	APPROVED
	ACTIVE
	DEPRECATED
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

input DgraphDefault {
	value: String
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id(interface: Boolean) on FIELD_DEFINITION
directive @primaryKey(fields: [String]) on OBJECT
directive @default(add: DgraphDefault, update: DgraphDefault) on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AccessPermissionAggregateResult {
	count: Int
	labelMin: String
	labelMax: String
	permissionLevelMin: Int
	permissionLevelMax: Int
	permissionLevelSum: Int
	permissionLevelAvg: Float
}

type AddAccessPermissionPayload {
	accessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	numUids: Int
}

type AddAlarmEventPayload {
	alarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
	numUids: Int
}

type AddCommentPayload {
	comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	numUids: Int
}

type AddDataSourceMethodArgumentPayload {
	dataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
	numUids: Int
}

type AddDataSourceMethodPayload {
	dataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
	numUids: Int
}

type AddDataSourcePayload {
	dataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
	numUids: Int
}

type AddDataSourceTopicPayload {
	dataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
	numUids: Int
}

type AddDataSourceVersionPayload {
	dataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
	numUids: Int
}

type AddDataSubscriptionPayload {
	dataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
	numUids: Int
}

type AddEnvironmentalVariablePayload {
	environmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
	numUids: Int
}

type AddEnvironmentalVariableVersionPayload {
	environmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
	numUids: Int
}

type AddEquipmentActualPayload {
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	numUids: Int
}

type AddEquipmentActualPropertyPayload {
	equipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
	numUids: Int
}

type AddEquipmentAssetMappingPayload {
	equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
	numUids: Int
}

type AddEquipmentClassPayload {
	equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	numUids: Int
}

type AddEquipmentClassPropertyPayload {
	equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
	numUids: Int
}

type AddEquipmentClassVersionPayload {
	equipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
	numUids: Int
}

type AddEquipmentDataSourcePayload {
	equipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
	numUids: Int
}

type AddEquipmentNameAliasPayload {
	equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	numUids: Int
}

type AddEquipmentPayload {
	equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	numUids: Int
}

type AddEquipmentPropertyOverridePayload {
	equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	numUids: Int
}

type AddEquipmentPropertyPayload {
	equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
	numUids: Int
}

type AddEquipmentRequirementPayload {
	equipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
	numUids: Int
}

type AddEquipmentRequirementPropertyPayload {
	equipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
	numUids: Int
}

type AddEquipmentSpecificationPayload {
	equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	numUids: Int
}

type AddEquipmentSpecificationPropertyPayload {
	equipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
	numUids: Int
}

type AddEquipmentVersionPayload {
	equipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
	numUids: Int
}

type AddEvaluatedPropertyPayload {
	evaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
	numUids: Int
}

type AddEventAssociationPayload {
	eventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
	numUids: Int
}

type AddEventPayload {
	event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
	numUids: Int
}

type AddEventPropertyPayload {
	eventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
	numUids: Int
}

type AddEventSubtypePayload {
	eventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
	numUids: Int
}

type AddEventTypePayload {
	eventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
	numUids: Int
}

type AddFormPayload {
	form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	numUids: Int
}

type AddHierarchyScopePayload {
	hierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
	numUids: Int
}

type AddInformationObjectPayload {
	informationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
	numUids: Int
}

type AddJobListPayload {
	jobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
	numUids: Int
}

type AddJobOrderParameterPayload {
	jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
	numUids: Int
}

type AddJobOrderPayload {
	jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	numUids: Int
}

type AddJobResponseDataPayload {
	jobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
	numUids: Int
}

type AddJobResponseListPayload {
	jobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
	numUids: Int
}

type AddJobResponsePayload {
	jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	numUids: Int
}

type AddLibreServicePayload {
	libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	numUids: Int
}

type AddMaterialActualPayload {
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	numUids: Int
}

type AddMaterialActualPropertyPayload {
	materialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
	numUids: Int
}

type AddMaterialAlternatePayload {
	materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	numUids: Int
}

type AddMaterialClassPayload {
	materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	numUids: Int
}

type AddMaterialClassPropertyPayload {
	materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
	numUids: Int
}

type AddMaterialClassVersionPayload {
	materialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
	numUids: Int
}

type AddMaterialDefinitionPayload {
	materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	numUids: Int
}

type AddMaterialDefinitionPropertyPayload {
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
	numUids: Int
}

type AddMaterialDefinitionVersionPayload {
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
	numUids: Int
}

type AddMaterialLotPayload {
	materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	numUids: Int
}

type AddMaterialLotPropertyPayload {
	materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
	numUids: Int
}

type AddMaterialRequirementPayload {
	materialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
	numUids: Int
}

type AddMaterialRequirementPropertyPayload {
	materialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
	numUids: Int
}

type AddMaterialSpecificationPayload {
	materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	numUids: Int
}

type AddMaterialSpecificationPropertyPayload {
	materialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
	numUids: Int
}

type AddMaterialSubLotPayload {
	materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	numUids: Int
}

type AddMenuPayload {
	menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	numUids: Int
}

type AddMultiplicityPayload {
	multiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity]
	numUids: Int
}

type AddOperationalLocationClassPayload {
	operationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
	numUids: Int
}

type AddOperationalLocationClassPropertyPayload {
	operationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
	numUids: Int
}

type AddOperationalLocationClassVersionPayload {
	operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
	numUids: Int
}

type AddOperationalLocationPayload {
	operationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
	numUids: Int
}

type AddOperationalLocationPropertyPayload {
	operationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
	numUids: Int
}

type AddOperationalLocationVersionPayload {
	operationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion]
	numUids: Int
}

type AddOperationsDefinitionPayload {
	operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	numUids: Int
}

type AddOperationsDefinitionVersionPayload {
	operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
	numUids: Int
}

type AddOperationsEventClassPayload {
	operationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
	numUids: Int
}

type AddOperationsEventClassPropertyPayload {
	operationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
	numUids: Int
}

type AddOperationsEventClassRecordSpecificationPayload {
	operationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
	numUids: Int
}

type AddOperationsEventClassVersionPayload {
	operationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
	numUids: Int
}

type AddOperationsEventDefinitionPayload {
	operationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
	numUids: Int
}

type AddOperationsEventDefinitionPropertyPayload {
	operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
	numUids: Int
}

type AddOperationsEventDefinitionRecordSpecificationPayload {
	operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
	numUids: Int
}

type AddOperationsEventDefinitionVersionPayload {
	operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
	numUids: Int
}

type AddOperationsEventPayload {
	operationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
	numUids: Int
}

type AddOperationsEventPropertyPayload {
	operationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
	numUids: Int
}

type AddOperationsEventRecordEntryPayload {
	operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
	numUids: Int
}

type AddOperationsEventRecordPayload {
	operationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
	numUids: Int
}

type AddOperationsMaterialBillPayload {
	operationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
	numUids: Int
}

type AddOperationsPerformancePayload {
	operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
	numUids: Int
}

type AddOperationsRequestPayload {
	operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	numUids: Int
}

type AddOperationsResponsePayload {
	operationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
	numUids: Int
}

type AddOperationsResponsePropertyPayload {
	operationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
	numUids: Int
}

type AddOperationsSchedulePayload {
	operationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
	numUids: Int
}

type AddOperationsSegmentDependencyPayload {
	operationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
	numUids: Int
}

type AddOperationsSegmentPayload {
	operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	numUids: Int
}

type AddParameterSpecificationPayload {
	parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	numUids: Int
}

type AddPayloadFieldDefinitionPayload {
	payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	numUids: Int
}

type AddPersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	numUids: Int
}

type AddPersonPropertyPayload {
	personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
	numUids: Int
}

type AddPersonVersionPayload {
	personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
	numUids: Int
}

type AddPersonnelActualPayload {
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	numUids: Int
}

type AddPersonnelActualPropertyPayload {
	personnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
	numUids: Int
}

type AddPersonnelClassPayload {
	personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	numUids: Int
}

type AddPersonnelClassPropertyPayload {
	personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
	numUids: Int
}

type AddPersonnelClassVersionPayload {
	personnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
	numUids: Int
}

type AddPersonnelRequirementPayload {
	personnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
	numUids: Int
}

type AddPersonnelRequirementPropertyPayload {
	personnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
	numUids: Int
}

type AddPersonnelSpecificationPayload {
	personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	numUids: Int
}

type AddPersonnelSpecificationPropertyPayload {
	personnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
	numUids: Int
}

type AddPhysicalAssetActualPayload {
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
	numUids: Int
}

type AddPhysicalAssetActualPropertyPayload {
	physicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
	numUids: Int
}

type AddPhysicalAssetClassPayload {
	physicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
	numUids: Int
}

type AddPhysicalAssetClassPropertyPayload {
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
	numUids: Int
}

type AddPhysicalAssetClassVersionPayload {
	physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
	numUids: Int
}

type AddPhysicalAssetDataSourcePayload {
	physicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
	numUids: Int
}

type AddPhysicalAssetPayload {
	physicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
	numUids: Int
}

type AddPhysicalAssetPropertyPayload {
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
	numUids: Int
}

type AddPhysicalAssetRequirementPayload {
	physicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
	numUids: Int
}

type AddPhysicalAssetRequirementPropertyPayload {
	physicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
	numUids: Int
}

type AddPhysicalAssetSpecificationPayload {
	physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
	numUids: Int
}

type AddPhysicalAssetSpecificationPropertyPayload {
	physicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
	numUids: Int
}

type AddPhysicalAssetVersionPayload {
	physicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
	numUids: Int
}

type AddProcessSegmentDependencyPayload {
	processSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
	numUids: Int
}

type AddProcessSegmentParameterPayload {
	processSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
	numUids: Int
}

type AddProcessSegmentPayload {
	processSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
	numUids: Int
}

type AddProcessSegmentVersionPayload {
	processSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
	numUids: Int
}

type AddPropertyMeasurementPayload {
	propertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
	numUids: Int
}

type AddPropertyNameAliasPayload {
	propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	numUids: Int
}

type AddPropertyValueAliasPayload {
	propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	numUids: Int
}

type AddRulePayload {
	rule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
	numUids: Int
}

type AddSecretPayload {
	secret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
	numUids: Int
}

type AddSecretVersionPayload {
	secretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
	numUids: Int
}

type AddSegmentDataPayload {
	segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
	numUids: Int
}

type AddSegmentParameterPayload {
	segmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
	numUids: Int
}

type AddSegmentRequirementPayload {
	segmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
	numUids: Int
}

type AddSegmentResponsePayload {
	segmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
	numUids: Int
}

type AddSignaturePayload {
	signature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
	numUids: Int
}

type AddSignatureReasonPayload {
	signatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
	numUids: Int
}

type AddSpatialDefinitionPayload {
	spatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
	numUids: Int
}

type AddStateModelActionPayload {
	stateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
	numUids: Int
}

type AddStateModelDefinitionPayload {
	stateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition]
	numUids: Int
}

type AddStateModelEventPayload {
	stateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
	numUids: Int
}

type AddStateModelInstancePayload {
	stateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
	numUids: Int
}

type AddStateModelPropertyPayload {
	stateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
	numUids: Int
}

type AddStateModelStatePayload {
	stateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
	numUids: Int
}

type AddStateModelTransitionPayload {
	stateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
	numUids: Int
}

type AddStateTransitionInstancePayload {
	stateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
	numUids: Int
}

type AddTestResultPayload {
	testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	numUids: Int
}

type AddTestSpecificationCriteriaPayload {
	testSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
	numUids: Int
}

type AddTestSpecificationPayload {
	testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	numUids: Int
}

type AddTestSpecificationPropertyPayload {
	testSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
	numUids: Int
}

type AddUnitOfMeasureConversionPayload {
	unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	numUids: Int
}

type AddUnitOfMeasurePayload {
	unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	numUids: Int
}

type AddWorkCalendarDefinitionEntryPayload {
	workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	numUids: Int
}

type AddWorkCalendarDefinitionEntryPropertyPayload {
	workCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
	numUids: Int
}

type AddWorkCalendarEntryPayload {
	workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	numUids: Int
}

type AddWorkCalendarEntryPropertyPayload {
	workCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
	numUids: Int
}

type AddWorkCalendarPayload {
	workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	numUids: Int
}

type AddWorkDirectivePayload {
	workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
	numUids: Int
}

type AddWorkMasterPayload {
	workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
	numUids: Int
}

type AddWorkPerformancePayload {
	workPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
	numUids: Int
}

type AddWorkRequestPayload {
	workRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
	numUids: Int
}

type AddWorkResponsePayload {
	workResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
	numUids: Int
}

type AddWorkSchedulePayload {
	workSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
	numUids: Int
}

type AddWorkflowErrorPayload {
	workflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError]
	numUids: Int
}

type AddWorkflowMessagePayload {
	workflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage]
	numUids: Int
}

type AddWorkflowShapePayload {
	workflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape]
	numUids: Int
}

type AddWorkflowSpecificationConnectionPayload {
	workflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
	numUids: Int
}

type AddWorkflowSpecificationConnectionPropertyPayload {
	workflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
	numUids: Int
}

type AddWorkflowSpecificationConnectionTypePayload {
	workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType]
	numUids: Int
}

type AddWorkflowSpecificationConnectionTypePropertyPayload {
	workflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
	numUids: Int
}

type AddWorkflowSpecificationNodePayload {
	workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
	numUids: Int
}

type AddWorkflowSpecificationNodePropertyPayload {
	workflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
	numUids: Int
}

type AddWorkflowSpecificationNodeTestCasePayload {
	workflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
	numUids: Int
}

type AddWorkflowSpecificationNodeTypePayload {
	workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType]
	numUids: Int
}

type AddWorkflowSpecificationNodeTypePropertyPayload {
	workflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
	numUids: Int
}

type AddWorkflowSpecificationNodeVariablePayload {
	workflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
	numUids: Int
}

type AddWorkflowSpecificationPayload {
	workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	numUids: Int
}

type AddWorkflowSpecificationPropertyPayload {
	workflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
	numUids: Int
}

type AddWorkflowSpecificationVersionPayload {
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
	numUids: Int
}

type AddWorkflowTimerPayload {
	workflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer]
	numUids: Int
}

type AddWorkflowWaypointPayload {
	workflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
	numUids: Int
}

type AlarmEventAggregateResult {
	count: Int
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	alarmEventMin: String
	alarmEventMax: String
	alarmLimitMin: String
	alarmLimitMax: String
	alarmTypeMin: String
	alarmTypeMax: String
	priorityMin: String
	priorityMax: String
	effectiveDateTimeMin: DateTime
	effectiveDateTimeMax: DateTime
	recordedDateTimeMin: DateTime
	recordedDateTimeMax: DateTime
}

type CommentAggregateResult {
	count: Int
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	textMin: String
	textMax: String
	timestampMin: DateTime
	timestampMax: DateTime
}

type DataSourceAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	uiSortIndexMin: Int
	uiSortIndexMax: Int
	uiSortIndexSum: Int
	uiSortIndexAvg: Float
}

type DataSourceMethodAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	methodMin: String
	methodMax: String
	objectMin: String
	objectMax: String
	errorMin: String
	errorMax: String
	statusCodeMin: Int
	statusCodeMax: Int
	statusCodeSum: Int
	statusCodeAvg: Float
}

type DataSourceMethodArgumentAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	positionMin: Int
	positionMax: Int
	positionSum: Int
	positionAvg: Float
	valueMin: String
	valueMax: String
}

type DataSourceTopicAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	labelMin: String
	labelMax: String
}

type DataSourceVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	connectionStringMin: String
	connectionStringMax: String
	usernameMin: String
	usernameMax: String
	passwordMin: String
	passwordMax: String
	certificateMin: String
	certificateMax: String
}

type DataSubscriptionAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	topicMin: String
	topicMax: String
	queryMin: String
	queryMax: String
}

type DeleteAccessPermissionPayload {
	accessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	msg: String
	numUids: Int
}

type DeleteAlarmEventPayload {
	alarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
	msg: String
	numUids: Int
}

type DeleteCommentPayload {
	comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	msg: String
	numUids: Int
}

type DeleteDataSourceMethodArgumentPayload {
	dataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
	msg: String
	numUids: Int
}

type DeleteDataSourceMethodPayload {
	dataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
	msg: String
	numUids: Int
}

type DeleteDataSourcePayload {
	dataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
	msg: String
	numUids: Int
}

type DeleteDataSourceTopicPayload {
	dataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
	msg: String
	numUids: Int
}

type DeleteDataSourceVersionPayload {
	dataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
	msg: String
	numUids: Int
}

type DeleteDataSubscriptionPayload {
	dataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
	msg: String
	numUids: Int
}

type DeleteEnvironmentalVariablePayload {
	environmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
	msg: String
	numUids: Int
}

type DeleteEnvironmentalVariableVersionPayload {
	environmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
	msg: String
	numUids: Int
}

type DeleteEquipmentActualPayload {
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	msg: String
	numUids: Int
}

type DeleteEquipmentActualPropertyPayload {
	equipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
	msg: String
	numUids: Int
}

type DeleteEquipmentAssetMappingPayload {
	equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
	msg: String
	numUids: Int
}

type DeleteEquipmentClassPayload {
	equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	msg: String
	numUids: Int
}

type DeleteEquipmentClassPropertyPayload {
	equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
	msg: String
	numUids: Int
}

type DeleteEquipmentClassVersionPayload {
	equipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
	msg: String
	numUids: Int
}

type DeleteEquipmentDataSourcePayload {
	equipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
	msg: String
	numUids: Int
}

type DeleteEquipmentNameAliasPayload {
	equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	msg: String
	numUids: Int
}

type DeleteEquipmentPayload {
	equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	msg: String
	numUids: Int
}

type DeleteEquipmentPropertyOverridePayload {
	equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	msg: String
	numUids: Int
}

type DeleteEquipmentPropertyPayload {
	equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
	msg: String
	numUids: Int
}

type DeleteEquipmentRequirementPayload {
	equipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
	msg: String
	numUids: Int
}

type DeleteEquipmentRequirementPropertyPayload {
	equipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
	msg: String
	numUids: Int
}

type DeleteEquipmentSpecificationPayload {
	equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	msg: String
	numUids: Int
}

type DeleteEquipmentSpecificationPropertyPayload {
	equipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
	msg: String
	numUids: Int
}

type DeleteEquipmentVersionPayload {
	equipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
	msg: String
	numUids: Int
}

type DeleteEvaluatedPropertyPayload {
	evaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
	msg: String
	numUids: Int
}

type DeleteEventAssociationPayload {
	eventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
	msg: String
	numUids: Int
}

type DeleteEventPayload {
	event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
	msg: String
	numUids: Int
}

type DeleteEventPropertyPayload {
	eventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
	msg: String
	numUids: Int
}

type DeleteEventSubtypePayload {
	eventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
	msg: String
	numUids: Int
}

type DeleteEventTypePayload {
	eventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
	msg: String
	numUids: Int
}

type DeleteFormPayload {
	form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	msg: String
	numUids: Int
}

type DeleteHierarchyScopePayload {
	hierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
	msg: String
	numUids: Int
}

type DeleteInformationObjectPayload {
	informationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
	msg: String
	numUids: Int
}

type DeleteJobListPayload {
	jobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
	msg: String
	numUids: Int
}

type DeleteJobOrderParameterPayload {
	jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
	msg: String
	numUids: Int
}

type DeleteJobOrderPayload {
	jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	msg: String
	numUids: Int
}

type DeleteJobResponseDataPayload {
	jobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
	msg: String
	numUids: Int
}

type DeleteJobResponseListPayload {
	jobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
	msg: String
	numUids: Int
}

type DeleteJobResponsePayload {
	jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	msg: String
	numUids: Int
}

type DeleteLibreServicePayload {
	libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	msg: String
	numUids: Int
}

type DeleteMaterialActualPayload {
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	msg: String
	numUids: Int
}

type DeleteMaterialActualPropertyPayload {
	materialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
	msg: String
	numUids: Int
}

type DeleteMaterialAlternatePayload {
	materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	msg: String
	numUids: Int
}

type DeleteMaterialClassPayload {
	materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	msg: String
	numUids: Int
}

type DeleteMaterialClassPropertyPayload {
	materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
	msg: String
	numUids: Int
}

type DeleteMaterialClassVersionPayload {
	materialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
	msg: String
	numUids: Int
}

type DeleteMaterialDefinitionPayload {
	materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	msg: String
	numUids: Int
}

type DeleteMaterialDefinitionPropertyPayload {
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
	msg: String
	numUids: Int
}

type DeleteMaterialDefinitionVersionPayload {
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
	msg: String
	numUids: Int
}

type DeleteMaterialLotPayload {
	materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	msg: String
	numUids: Int
}

type DeleteMaterialLotPropertyPayload {
	materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
	msg: String
	numUids: Int
}

type DeleteMaterialRequirementPayload {
	materialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
	msg: String
	numUids: Int
}

type DeleteMaterialRequirementPropertyPayload {
	materialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
	msg: String
	numUids: Int
}

type DeleteMaterialSpecificationPayload {
	materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	msg: String
	numUids: Int
}

type DeleteMaterialSpecificationPropertyPayload {
	materialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
	msg: String
	numUids: Int
}

type DeleteMaterialSubLotPayload {
	materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	msg: String
	numUids: Int
}

type DeleteMenuPayload {
	menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	msg: String
	numUids: Int
}

type DeleteMultiplicityPayload {
	multiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity]
	msg: String
	numUids: Int
}

type DeleteOperationalLocationClassPayload {
	operationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
	msg: String
	numUids: Int
}

type DeleteOperationalLocationClassPropertyPayload {
	operationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
	msg: String
	numUids: Int
}

type DeleteOperationalLocationClassVersionPayload {
	operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
	msg: String
	numUids: Int
}

type DeleteOperationalLocationPayload {
	operationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
	msg: String
	numUids: Int
}

type DeleteOperationalLocationPropertyPayload {
	operationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
	msg: String
	numUids: Int
}

type DeleteOperationalLocationVersionPayload {
	operationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion]
	msg: String
	numUids: Int
}

type DeleteOperationsDefinitionPayload {
	operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	msg: String
	numUids: Int
}

type DeleteOperationsDefinitionVersionPayload {
	operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
	msg: String
	numUids: Int
}

type DeleteOperationsEventClassPayload {
	operationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
	msg: String
	numUids: Int
}

type DeleteOperationsEventClassPropertyPayload {
	operationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
	msg: String
	numUids: Int
}

type DeleteOperationsEventClassRecordSpecificationPayload {
	operationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
	msg: String
	numUids: Int
}

type DeleteOperationsEventClassVersionPayload {
	operationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
	msg: String
	numUids: Int
}

type DeleteOperationsEventDefinitionPayload {
	operationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
	msg: String
	numUids: Int
}

type DeleteOperationsEventDefinitionPropertyPayload {
	operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
	msg: String
	numUids: Int
}

type DeleteOperationsEventDefinitionRecordSpecificationPayload {
	operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
	msg: String
	numUids: Int
}

type DeleteOperationsEventDefinitionVersionPayload {
	operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
	msg: String
	numUids: Int
}

type DeleteOperationsEventPayload {
	operationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
	msg: String
	numUids: Int
}

type DeleteOperationsEventPropertyPayload {
	operationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
	msg: String
	numUids: Int
}

type DeleteOperationsEventRecordEntryPayload {
	operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
	msg: String
	numUids: Int
}

type DeleteOperationsEventRecordPayload {
	operationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
	msg: String
	numUids: Int
}

type DeleteOperationsMaterialBillPayload {
	operationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
	msg: String
	numUids: Int
}

type DeleteOperationsPerformancePayload {
	operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
	msg: String
	numUids: Int
}

type DeleteOperationsRequestPayload {
	operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	msg: String
	numUids: Int
}

type DeleteOperationsResponsePayload {
	operationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
	msg: String
	numUids: Int
}

type DeleteOperationsResponsePropertyPayload {
	operationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
	msg: String
	numUids: Int
}

type DeleteOperationsSchedulePayload {
	operationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
	msg: String
	numUids: Int
}

type DeleteOperationsSegmentDependencyPayload {
	operationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
	msg: String
	numUids: Int
}

type DeleteOperationsSegmentPayload {
	operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	msg: String
	numUids: Int
}

type DeleteParameterSpecificationPayload {
	parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	msg: String
	numUids: Int
}

type DeletePayloadFieldDefinitionPayload {
	payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	msg: String
	numUids: Int
}

type DeletePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	msg: String
	numUids: Int
}

type DeletePersonPropertyPayload {
	personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
	msg: String
	numUids: Int
}

type DeletePersonVersionPayload {
	personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
	msg: String
	numUids: Int
}

type DeletePersonnelActualPayload {
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	msg: String
	numUids: Int
}

type DeletePersonnelActualPropertyPayload {
	personnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
	msg: String
	numUids: Int
}

type DeletePersonnelClassPayload {
	personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	msg: String
	numUids: Int
}

type DeletePersonnelClassPropertyPayload {
	personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
	msg: String
	numUids: Int
}

type DeletePersonnelClassVersionPayload {
	personnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
	msg: String
	numUids: Int
}

type DeletePersonnelRequirementPayload {
	personnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
	msg: String
	numUids: Int
}

type DeletePersonnelRequirementPropertyPayload {
	personnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
	msg: String
	numUids: Int
}

type DeletePersonnelSpecificationPayload {
	personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	msg: String
	numUids: Int
}

type DeletePersonnelSpecificationPropertyPayload {
	personnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetActualPayload {
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetActualPropertyPayload {
	physicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetClassPayload {
	physicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetClassPropertyPayload {
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetClassVersionPayload {
	physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetDataSourcePayload {
	physicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetPayload {
	physicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetPropertyPayload {
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetRequirementPayload {
	physicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetRequirementPropertyPayload {
	physicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetSpecificationPayload {
	physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetSpecificationPropertyPayload {
	physicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
	msg: String
	numUids: Int
}

type DeletePhysicalAssetVersionPayload {
	physicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
	msg: String
	numUids: Int
}

type DeleteProcessSegmentDependencyPayload {
	processSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
	msg: String
	numUids: Int
}

type DeleteProcessSegmentParameterPayload {
	processSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
	msg: String
	numUids: Int
}

type DeleteProcessSegmentPayload {
	processSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
	msg: String
	numUids: Int
}

type DeleteProcessSegmentVersionPayload {
	processSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
	msg: String
	numUids: Int
}

type DeletePropertyMeasurementPayload {
	propertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
	msg: String
	numUids: Int
}

type DeletePropertyNameAliasPayload {
	propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	msg: String
	numUids: Int
}

type DeletePropertyValueAliasPayload {
	propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	msg: String
	numUids: Int
}

type DeleteRulePayload {
	rule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
	msg: String
	numUids: Int
}

type DeleteSecretPayload {
	secret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
	msg: String
	numUids: Int
}

type DeleteSecretVersionPayload {
	secretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
	msg: String
	numUids: Int
}

type DeleteSegmentDataPayload {
	segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
	msg: String
	numUids: Int
}

type DeleteSegmentParameterPayload {
	segmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
	msg: String
	numUids: Int
}

type DeleteSegmentRequirementPayload {
	segmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
	msg: String
	numUids: Int
}

type DeleteSegmentResponsePayload {
	segmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
	msg: String
	numUids: Int
}

type DeleteSignaturePayload {
	signature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
	msg: String
	numUids: Int
}

type DeleteSignatureReasonPayload {
	signatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
	msg: String
	numUids: Int
}

type DeleteSpatialDefinitionPayload {
	spatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
	msg: String
	numUids: Int
}

type DeleteStateModelActionPayload {
	stateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
	msg: String
	numUids: Int
}

type DeleteStateModelDefinitionPayload {
	stateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition]
	msg: String
	numUids: Int
}

type DeleteStateModelEventPayload {
	stateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
	msg: String
	numUids: Int
}

type DeleteStateModelInstancePayload {
	stateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
	msg: String
	numUids: Int
}

type DeleteStateModelPropertyPayload {
	stateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
	msg: String
	numUids: Int
}

type DeleteStateModelStatePayload {
	stateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
	msg: String
	numUids: Int
}

type DeleteStateModelTransitionPayload {
	stateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
	msg: String
	numUids: Int
}

type DeleteStateTransitionInstancePayload {
	stateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
	msg: String
	numUids: Int
}

type DeleteTestResultPayload {
	testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	msg: String
	numUids: Int
}

type DeleteTestSpecificationCriteriaPayload {
	testSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
	msg: String
	numUids: Int
}

type DeleteTestSpecificationPayload {
	testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	msg: String
	numUids: Int
}

type DeleteTestSpecificationPropertyPayload {
	testSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
	msg: String
	numUids: Int
}

type DeleteUnitOfMeasureConversionPayload {
	unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	msg: String
	numUids: Int
}

type DeleteUnitOfMeasurePayload {
	unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarDefinitionEntryPayload {
	workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarDefinitionEntryPropertyPayload {
	workCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarEntryPayload {
	workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarEntryPropertyPayload {
	workCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarPayload {
	workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	msg: String
	numUids: Int
}

type DeleteWorkDirectivePayload {
	workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
	msg: String
	numUids: Int
}

type DeleteWorkMasterPayload {
	workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
	msg: String
	numUids: Int
}

type DeleteWorkPerformancePayload {
	workPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
	msg: String
	numUids: Int
}

type DeleteWorkRequestPayload {
	workRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
	msg: String
	numUids: Int
}

type DeleteWorkResponsePayload {
	workResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
	msg: String
	numUids: Int
}

type DeleteWorkSchedulePayload {
	workSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
	msg: String
	numUids: Int
}

type DeleteWorkflowErrorPayload {
	workflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError]
	msg: String
	numUids: Int
}

type DeleteWorkflowMessagePayload {
	workflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage]
	msg: String
	numUids: Int
}

type DeleteWorkflowShapePayload {
	workflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationConnectionPayload {
	workflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationConnectionPropertyPayload {
	workflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationConnectionTypePayload {
	workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationConnectionTypePropertyPayload {
	workflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationNodePayload {
	workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationNodePropertyPayload {
	workflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationNodeTestCasePayload {
	workflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationNodeTypePayload {
	workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationNodeTypePropertyPayload {
	workflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationNodeVariablePayload {
	workflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationPayload {
	workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationPropertyPayload {
	workflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationVersionPayload {
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
	msg: String
	numUids: Int
}

type DeleteWorkflowTimerPayload {
	workflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer]
	msg: String
	numUids: Int
}

type DeleteWorkflowWaypointPayload {
	workflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
	msg: String
	numUids: Int
}

type EnvironmentalVariableAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
}

type EnvironmentalVariableVersionAggregateResult {
	count: Int
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	idMin: String
	idMax: String
	valueMin: String
	valueMax: String
}

type EquipmentActualAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	equipmentUseMin: String
	equipmentUseMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type EquipmentActualPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
	useMin: String
	useMax: String
}

type EquipmentAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	uiSortIndexMin: Int
	uiSortIndexMax: Int
	uiSortIndexSum: Int
	uiSortIndexAvg: Float
}

type EquipmentAssetMappingAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	startTimeMin: DateTime
	startTimeMax: DateTime
	endTimeMin: DateTime
	endTimeMax: DateTime
}

type EquipmentClassAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	uiSortIndexMin: Int
	uiSortIndexMax: Int
	uiSortIndexSum: Int
	uiSortIndexAvg: Float
}

type EquipmentClassPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type EquipmentClassVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	imageMin: String
	imageMax: String
	displayNameMin: String
	displayNameMax: String
	uiMonochromeIconMin: String
	uiMonochromeIconMax: String
	uiMonochromeIconColourMin: String
	uiMonochromeIconColourMax: String
}

type EquipmentDataSourceAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	topicTemplateMin: String
	topicTemplateMax: String
}

type EquipmentNameAliasAggregateResult {
	count: Int
	aliasMin: String
	aliasMax: String
	systemMin: String
	systemMax: String
}

type EquipmentPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	valueSetPointMin: String
	valueSetPointMax: String
	valueUpperSpecLimitMin: Float
	valueUpperSpecLimitMax: Float
	valueUpperSpecLimitSum: Float
	valueUpperSpecLimitAvg: Float
	valueLowerSpecLimitMin: Float
	valueLowerSpecLimitMax: Float
	valueLowerSpecLimitSum: Float
	valueLowerSpecLimitAvg: Float
	valueUpperControlLimitMin: Float
	valueUpperControlLimitMax: Float
	valueUpperControlLimitSum: Float
	valueUpperControlLimitAvg: Float
	valueLowerControlLimitMin: Float
	valueLowerControlLimitMax: Float
	valueLowerControlLimitSum: Float
	valueLowerControlLimitAvg: Float
}

type EquipmentPropertyOverrideAggregateResult {
	count: Int
	idMin: String
	idMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	propertyLabelMin: String
	propertyLabelMax: String
	addressMin: String
	addressMax: String
	expressionMin: String
	expressionMax: String
	valueMin: String
	valueMax: String
}

type EquipmentRequirementAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	useMin: String
	useMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type EquipmentRequirementPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type EquipmentSpecificationAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	equipmentUseMin: String
	equipmentUseMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type EquipmentSpecificationPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type EquipmentVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	displayNameMin: String
	displayNameMax: String
	timeZoneNameMin: String
	timeZoneNameMax: String
}

type EvaluatedPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
}

type EventAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	valueMin: String
	valueMax: String
	previousValueMin: String
	previousValueMax: String
	messageTextMin: String
	messageTextMax: String
	personIDMin: String
	personIDMax: String
	computerIDMin: String
	computerIDMax: String
	proceduralElementReferenceMin: String
	proceduralElementReferenceMax: String
	categoryMin: String
	categoryMax: String
	effectiveDateTimeMin: DateTime
	effectiveDateTimeMax: DateTime
	recordedDateTimeMin: DateTime
	recordedDateTimeMax: DateTime
	attributeMin: String
	attributeMax: String
}

type EventAssociationAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
}

type EventPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
	labelMin: String
	labelMax: String
	valueMin: String
	valueMax: String
}

type EventSubtypeAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	labelMin: String
	labelMax: String
}

type EventTypeAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	labelMin: String
	labelMax: String
}

type FormAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	jsonSchemaMin: String
	jsonSchemaMax: String
	uiSchemaMin: String
	uiSchemaMax: String
}

type HierarchyScopeAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
}

type InformationObjectAggregateResult {
	count: Int
	OtherMin: String
	OtherMax: String
}

type JobListAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	plannedStartDateTimeMin: DateTime
	plannedStartDateTimeMax: DateTime
	plannedEndDateTimeMin: DateTime
	plannedEndDateTimeMax: DateTime
	publishedDateMin: DateTime
	publishedDateMax: DateTime
}

type JobOrderAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	publishedDateMin: DateTime
	publishedDateMax: DateTime
	scheduledStartDateTimeMin: DateTime
	scheduledStartDateTimeMax: DateTime
	scheduledEndDateTimeMin: DateTime
	scheduledEndDateTimeMax: DateTime
	priorityMin: Int
	priorityMax: Int
	prioritySum: Int
	priorityAvg: Float
	commandMin: String
	commandMax: String
	commandRuleMin: String
	commandRuleMax: String
	labelMin: String
	labelMax: String
}

type JobOrderParameterAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	labelMin: String
	labelMax: String
}

type JobResponseAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	publishedDateMin: DateTime
	publishedDateMax: DateTime
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
	dataJSONMin: String
	dataJSONMax: String
	productionDateMin: String
	productionDateMax: String
}

type JobResponseDataAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	labelMin: String
	labelMax: String
}

type JobResponseListAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
}

type LibreServiceAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	heartbeatMin: DateTime
	heartbeatMax: DateTime
}

type MaterialActualAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialActualPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
	useMin: String
	useMax: String
}

type MaterialAlternateAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	effectiveDateTimeMin: DateTime
	effectiveDateTimeMax: DateTime
	priorityOrderMin: Int
	priorityOrderMax: Int
	priorityOrderSum: Int
	priorityOrderAvg: Float
}

type MaterialClassAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type MaterialClassPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type MaterialClassVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
}

type MaterialDefinitionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type MaterialDefinitionPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	valueSetPointMin: String
	valueSetPointMax: String
	valueUpperSpecLimitMin: Float
	valueUpperSpecLimitMax: Float
	valueUpperSpecLimitSum: Float
	valueUpperSpecLimitAvg: Float
	valueLowerSpecLimitMin: Float
	valueLowerSpecLimitMax: Float
	valueLowerSpecLimitSum: Float
	valueLowerSpecLimitAvg: Float
	valueUpperControlLimitMin: Float
	valueUpperControlLimitMax: Float
	valueUpperControlLimitSum: Float
	valueUpperControlLimitAvg: Float
	valueLowerControlLimitMin: Float
	valueLowerControlLimitMax: Float
	valueLowerControlLimitSum: Float
	valueLowerControlLimitAvg: Float
}

type MaterialDefinitionVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
}

type MaterialLotAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	storageLocationDescriptionMin: String
	storageLocationDescriptionMax: String
	statusMin: String
	statusMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialLotPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type MaterialRequirementAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialRequirementPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialSpecificationAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialSpecificationPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialSubLotAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	storageLocationDescriptionMin: String
	storageLocationDescriptionMax: String
	statusMin: String
	statusMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MenuAggregateResult {
	count: Int
	labelMin: String
	labelMax: String
	menuPageMin: String
	menuPageMax: String
	iconMin: String
	iconMax: String
	orderNumberMin: Int
	orderNumberMax: Int
	orderNumberSum: Int
	orderNumberAvg: Float
}

type MultiplicityAggregateResult {
	count: Int
	MinMin: Int
	MinMax: Int
	MinSum: Int
	MinAvg: Float
	MaxMin: Int
	MaxMax: Int
	MaxSum: Int
	MaxAvg: Float
}

type OperationalLocationAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
}

type OperationalLocationClassAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type OperationalLocationClassPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type OperationalLocationClassVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type OperationalLocationPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type OperationalLocationVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nameMin: String
	nameMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
}

type OperationsDefinitionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type OperationsDefinitionVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	idMin: String
	idMax: String
	billOfMaterialMin: String
	billOfMaterialMax: String
	billOfResourcesMin: String
	billOfResourcesMax: String
	descriptionMin: String
	descriptionMax: String
}

type OperationsEventAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
	recordTimestampMin: DateTime
	recordTimestampMax: DateTime
	priorityMin: String
	priorityMax: String
	categoryMin: String
	categoryMax: String
	sourceMin: String
	sourceMax: String
}

type OperationsEventClassAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type OperationsEventClassPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	valueMin: String
	valueMax: String
}

type OperationsEventClassRecordSpecificationAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
}

type OperationsEventClassVersionAggregateResult {
	count: Int
	idMin: String
	idMax: String
	versionMin: String
	versionMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
}

type OperationsEventDefinitionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type OperationsEventDefinitionPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type OperationsEventDefinitionRecordSpecificationAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
}

type OperationsEventDefinitionVersionAggregateResult {
	count: Int
	idMin: String
	idMax: String
	versionMin: String
	versionMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
	categoryMin: String
	categoryMax: String
	sourceMin: String
	sourceMax: String
}

type OperationsEventPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type OperationsEventRecordAggregateResult {
	count: Int
	idMin: String
	idMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
	recordTimestampMin: DateTime
	recordTimestampMax: DateTime
}

type OperationsEventRecordEntryAggregateResult {
	count: Int
	idMin: String
	idMax: String
	recordIdMin: String
	recordIdMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
	recordTimestampMin: DateTime
	recordTimestampMax: DateTime
	dataMin: String
	dataMax: String
}

type OperationsMaterialBillAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	billOfMaterialMin: String
	billOfMaterialMax: String
}

type OperationsPerformanceAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
	publishedDateMin: DateTime
	publishedDateMax: DateTime
}

type OperationsRequestAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	scheduledStartDateMin: DateTime
	scheduledStartDateMax: DateTime
	scheduledEndDateMin: DateTime
	scheduledEndDateMax: DateTime
	priorityMin: String
	priorityMax: String
	notesMin: String
	notesMax: String
}

type OperationsResponseAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
}

type OperationsResponsePropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	useMin: String
	useMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type OperationsScheduleAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	scheduledStartDateMin: DateTime
	scheduledStartDateMax: DateTime
	scheduledEndDateMin: DateTime
	scheduledEndDateMax: DateTime
	publishedDateMin: DateTime
	publishedDateMax: DateTime
}

type OperationsSegmentAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
	billOfMaterialMin: String
	billOfMaterialMax: String
	billOfResourcesMin: String
	billOfResourcesMax: String
	positionXMin: Int
	positionXMax: Int
	positionXSum: Int
	positionXAvg: Float
	positionYMin: Int
	positionYMax: Int
	positionYSum: Int
	positionYAvg: Float
}

type OperationsSegmentDependencyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	dependencyFactorMin: Float
	dependencyFactorMax: Float
	dependencyFactorSum: Float
	dependencyFactorAvg: Float
	conditionMin: String
	conditionMax: String
}

type ParameterSpecificationAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	valueSetPointMin: String
	valueSetPointMax: String
	valueUpperSpecLimitMin: Float
	valueUpperSpecLimitMax: Float
	valueUpperSpecLimitSum: Float
	valueUpperSpecLimitAvg: Float
	valueLowerSpecLimitMin: Float
	valueLowerSpecLimitMax: Float
	valueLowerSpecLimitSum: Float
	valueLowerSpecLimitAvg: Float
	valueUpperControlLimitMin: Float
	valueUpperControlLimitMax: Float
	valueUpperControlLimitSum: Float
	valueUpperControlLimitAvg: Float
	valueLowerControlLimitMin: Float
	valueLowerControlLimitMax: Float
	valueLowerControlLimitSum: Float
	valueLowerControlLimitAvg: Float
}

type PayloadFieldDefinitionAggregateResult {
	count: Int
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	nameMin: String
	nameMax: String
	expressionMin: String
	expressionMax: String
}

type PersonAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type PersonPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	valueSetPointMin: String
	valueSetPointMax: String
	valueUpperSpecLimitMin: Float
	valueUpperSpecLimitMax: Float
	valueUpperSpecLimitSum: Float
	valueUpperSpecLimitAvg: Float
	valueLowerSpecLimitMin: Float
	valueLowerSpecLimitMax: Float
	valueLowerSpecLimitSum: Float
	valueLowerSpecLimitAvg: Float
	valueUpperControlLimitMin: Float
	valueUpperControlLimitMax: Float
	valueUpperControlLimitSum: Float
	valueUpperControlLimitAvg: Float
	valueLowerControlLimitMin: Float
	valueLowerControlLimitMax: Float
	valueLowerControlLimitSum: Float
	valueLowerControlLimitAvg: Float
}

type PersonVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	nameMin: String
	nameMax: String
}

type PersonnelActualAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	personnelUseMin: String
	personnelUseMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PersonnelActualPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
	useMin: String
	useMax: String
}

type PersonnelClassAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type PersonnelClassPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type PersonnelClassVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
}

type PersonnelRequirementAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	useMin: String
	useMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PersonnelRequirementPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PersonnelSpecificationAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	personnelUseMin: String
	personnelUseMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PersonnelSpecificationPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PhysicalAssetActualAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	physicalAssetUseMin: String
	physicalAssetUseMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PhysicalAssetActualPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PhysicalAssetAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	uiSortIndexMin: Int
	uiSortIndexMax: Int
	uiSortIndexSum: Int
	uiSortIndexAvg: Float
}

type PhysicalAssetClassAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	uiSortIndexMin: Int
	uiSortIndexMax: Int
	uiSortIndexSum: Int
	uiSortIndexAvg: Float
}

type PhysicalAssetClassPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type PhysicalAssetClassVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	manufacturerMin: String
	manufacturerMax: String
}

type PhysicalAssetDataSourceAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	topicTemplateMin: String
	topicTemplateMax: String
}

type PhysicalAssetPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	valueSetPointMin: String
	valueSetPointMax: String
	valueUpperSpecLimitMin: Float
	valueUpperSpecLimitMax: Float
	valueUpperSpecLimitSum: Float
	valueUpperSpecLimitAvg: Float
	valueLowerSpecLimitMin: Float
	valueLowerSpecLimitMax: Float
	valueLowerSpecLimitSum: Float
	valueLowerSpecLimitAvg: Float
	valueUpperControlLimitMin: Float
	valueUpperControlLimitMax: Float
	valueUpperControlLimitSum: Float
	valueUpperControlLimitAvg: Float
	valueLowerControlLimitMin: Float
	valueLowerControlLimitMax: Float
	valueLowerControlLimitSum: Float
	valueLowerControlLimitAvg: Float
}

type PhysicalAssetRequirementAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	useMin: String
	useMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PhysicalAssetRequirementPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PhysicalAssetSpecificationAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	physicalAssetUseMin: String
	physicalAssetUseMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PhysicalAssetSpecificationPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PhysicalAssetVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	fixedAssetIDMin: String
	fixedAssetIDMax: String
	vendorIDMin: String
	vendorIDMax: String
	physicalLocationDescriptionMin: String
	physicalLocationDescriptionMax: String
}

type ProcessSegmentAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type ProcessSegmentDependencyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	dependencyFactorMin: Float
	dependencyFactorMax: Float
	dependencyFactorSum: Float
	dependencyFactorAvg: Float
	conditionMin: String
	conditionMax: String
}

type ProcessSegmentParameterAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type ProcessSegmentVersionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	versionMin: String
	versionMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
}

type PropertyMeasurementAggregateResult {
	count: Int
	idMin: String
	idMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
	measurementDateMin: DateTime
	measurementDateMax: DateTime
	valueMin: String
	valueMax: String
	expirationMin: DateTime
	expirationMax: DateTime
}

type PropertyNameAliasAggregateResult {
	count: Int
	propertyLabelMin: String
	propertyLabelMax: String
	expressionMin: String
	expressionMax: String
	dataSourceTopicLabelMin: String
	dataSourceTopicLabelMax: String
}

type PropertyValueAliasAggregateResult {
	count: Int
	valueMin: String
	valueMax: String
	aliasMin: String
	aliasMax: String
	systemMin: String
	systemMax: String
}

type RuleAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	triggerExpressionMin: String
	triggerExpressionMax: String
	delayTimeMin: Int
	delayTimeMax: Int
	delayTimeSum: Int
	delayTimeAvg: Float
}

type SecretAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	nextVersionMin: String
	nextVersionMax: String
	idMin: String
	idMax: String
}

type SecretVersionAggregateResult {
	count: Int
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	versionMin: String
	versionMax: String
	idMin: String
	idMax: String
	valueMin: String
	valueMax: String
}

type SegmentDataAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type SegmentParameterAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type SegmentRequirementAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	earliestStartDateMin: DateTime
	earliestStartDateMax: DateTime
	latestEndDateMin: DateTime
	latestEndDateMax: DateTime
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
	notesMin: String
	notesMax: String
}

type SegmentResponseAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	actualStartDateTimeMin: DateTime
	actualStartDateTimeMax: DateTime
	actualEndDateTimeMin: DateTime
	actualEndDateTimeMax: DateTime
	postingDateTimeMin: DateTime
	postingDateTimeMax: DateTime
}

type SignatureAggregateResult {
	count: Int
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	timestampMin: DateTime
	timestampMax: DateTime
	changeIndicationMin: String
	changeIndicationMax: String
}

type SignatureReasonAggregateResult {
	count: Int
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
}

type SpatialDefinitionAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	sridMin: String
	sridMax: String
	sridAuthorityMin: String
	sridAuthorityMax: String
}

type StateModelActionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	variablesMin: String
	variablesMax: String
}

type StateModelDefinitionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	bpmnXMLEncodedMin: String
	bpmnXMLEncodedMax: String
}

type StateModelEventAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type StateModelInstanceAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	descriptionMin: String
	descriptionMax: String
	stateMin: String
	stateMax: String
}

type StateModelPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
}

type StateModelStateAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
}

type StateModelTransitionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	conditionMin: String
	conditionMax: String
}

type StateTransitionInstanceAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	timestampMin: DateTime
	timestampMax: DateTime
	fromStateMin: String
	fromStateMax: String
	toStateMin: String
	toStateMax: String
}

type TestResultAggregateResult {
	count: Int
	idMin: String
	idMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
	evaluationDateMin: DateTime
	evaluationDateMax: DateTime
	evaluationCriterionResultMin: String
	evaluationCriterionResultMax: String
	expirationMin: DateTime
	expirationMax: DateTime
}

type TestSpecificationAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	versionMin: String
	versionMax: String
	keyMin: String
	keyMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
	publishedDateMin: DateTime
	publishedDateMax: DateTime
	testSampleSizeMin: String
	testSampleSizeMax: String
	recurrenceQuantityMin: String
	recurrenceQuantityMax: String
	recurrenceTimeIntervalMin: String
	recurrenceTimeIntervalMax: String
}

type TestSpecificationCriteriaAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
	sequenceMin: Int
	sequenceMax: Int
	sequenceSum: Int
	sequenceAvg: Float
	expressionMin: String
	expressionMax: String
	resultMin: String
	resultMax: String
}

type TestSpecificationPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	labelMin: String
	labelMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type UnitOfMeasureAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
}

type UnitOfMeasureConversionAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	numeratorMin: Float
	numeratorMax: Float
	numeratorSum: Float
	numeratorAvg: Float
	denominatorMin: Float
	denominatorMax: Float
	denominatorSum: Float
	denominatorAvg: Float
}

type UpdateAccessPermissionPayload {
	accessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	numUids: Int
}

type UpdateAlarmEventPayload {
	alarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
	numUids: Int
}

type UpdateCommentPayload {
	comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	numUids: Int
}

type UpdateDataSourceMethodArgumentPayload {
	dataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
	numUids: Int
}

type UpdateDataSourceMethodPayload {
	dataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
	numUids: Int
}

type UpdateDataSourcePayload {
	dataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
	numUids: Int
}

type UpdateDataSourceTopicPayload {
	dataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
	numUids: Int
}

type UpdateDataSourceVersionPayload {
	dataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
	numUids: Int
}

type UpdateDataSubscriptionPayload {
	dataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
	numUids: Int
}

type UpdateEnvironmentalVariablePayload {
	environmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
	numUids: Int
}

type UpdateEnvironmentalVariableVersionPayload {
	environmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
	numUids: Int
}

type UpdateEquipmentActualPayload {
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	numUids: Int
}

type UpdateEquipmentActualPropertyPayload {
	equipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
	numUids: Int
}

type UpdateEquipmentAssetMappingPayload {
	equipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
	numUids: Int
}

type UpdateEquipmentClassPayload {
	equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	numUids: Int
}

type UpdateEquipmentClassPropertyPayload {
	equipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
	numUids: Int
}

type UpdateEquipmentClassVersionPayload {
	equipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
	numUids: Int
}

type UpdateEquipmentDataSourcePayload {
	equipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
	numUids: Int
}

type UpdateEquipmentNameAliasPayload {
	equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	numUids: Int
}

type UpdateEquipmentPayload {
	equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	numUids: Int
}

type UpdateEquipmentPropertyOverridePayload {
	equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	numUids: Int
}

type UpdateEquipmentPropertyPayload {
	equipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
	numUids: Int
}

type UpdateEquipmentRequirementPayload {
	equipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
	numUids: Int
}

type UpdateEquipmentRequirementPropertyPayload {
	equipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
	numUids: Int
}

type UpdateEquipmentSpecificationPayload {
	equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	numUids: Int
}

type UpdateEquipmentSpecificationPropertyPayload {
	equipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
	numUids: Int
}

type UpdateEquipmentVersionPayload {
	equipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
	numUids: Int
}

type UpdateEvaluatedPropertyPayload {
	evaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
	numUids: Int
}

type UpdateEventAssociationPayload {
	eventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
	numUids: Int
}

type UpdateEventPayload {
	event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
	numUids: Int
}

type UpdateEventPropertyPayload {
	eventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
	numUids: Int
}

type UpdateEventSubtypePayload {
	eventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
	numUids: Int
}

type UpdateEventTypePayload {
	eventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
	numUids: Int
}

type UpdateFormPayload {
	form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	numUids: Int
}

type UpdateHierarchyScopePayload {
	hierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
	numUids: Int
}

type UpdateInformationObjectPayload {
	informationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
	numUids: Int
}

type UpdateJobListPayload {
	jobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
	numUids: Int
}

type UpdateJobOrderParameterPayload {
	jobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
	numUids: Int
}

type UpdateJobOrderPayload {
	jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	numUids: Int
}

type UpdateJobResponseDataPayload {
	jobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
	numUids: Int
}

type UpdateJobResponseListPayload {
	jobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
	numUids: Int
}

type UpdateJobResponsePayload {
	jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	numUids: Int
}

type UpdateLibreServicePayload {
	libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	numUids: Int
}

type UpdateMaterialActualPayload {
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	numUids: Int
}

type UpdateMaterialActualPropertyPayload {
	materialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
	numUids: Int
}

type UpdateMaterialAlternatePayload {
	materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	numUids: Int
}

type UpdateMaterialClassPayload {
	materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	numUids: Int
}

type UpdateMaterialClassPropertyPayload {
	materialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
	numUids: Int
}

type UpdateMaterialClassVersionPayload {
	materialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
	numUids: Int
}

type UpdateMaterialDefinitionPayload {
	materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	numUids: Int
}

type UpdateMaterialDefinitionPropertyPayload {
	materialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
	numUids: Int
}

type UpdateMaterialDefinitionVersionPayload {
	materialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
	numUids: Int
}

type UpdateMaterialLotPayload {
	materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	numUids: Int
}

type UpdateMaterialLotPropertyPayload {
	materialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
	numUids: Int
}

type UpdateMaterialRequirementPayload {
	materialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
	numUids: Int
}

type UpdateMaterialRequirementPropertyPayload {
	materialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
	numUids: Int
}

type UpdateMaterialSpecificationPayload {
	materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	numUids: Int
}

type UpdateMaterialSpecificationPropertyPayload {
	materialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
	numUids: Int
}

type UpdateMaterialSubLotPayload {
	materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	numUids: Int
}

type UpdateMenuPayload {
	menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	numUids: Int
}

type UpdateMultiplicityPayload {
	multiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity]
	numUids: Int
}

type UpdateOperationalLocationClassPayload {
	operationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
	numUids: Int
}

type UpdateOperationalLocationClassPropertyPayload {
	operationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
	numUids: Int
}

type UpdateOperationalLocationClassVersionPayload {
	operationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
	numUids: Int
}

type UpdateOperationalLocationPayload {
	operationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
	numUids: Int
}

type UpdateOperationalLocationPropertyPayload {
	operationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
	numUids: Int
}

type UpdateOperationalLocationVersionPayload {
	operationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion]
	numUids: Int
}

type UpdateOperationsDefinitionPayload {
	operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	numUids: Int
}

type UpdateOperationsDefinitionVersionPayload {
	operationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
	numUids: Int
}

type UpdateOperationsEventClassPayload {
	operationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
	numUids: Int
}

type UpdateOperationsEventClassPropertyPayload {
	operationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
	numUids: Int
}

type UpdateOperationsEventClassRecordSpecificationPayload {
	operationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
	numUids: Int
}

type UpdateOperationsEventClassVersionPayload {
	operationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
	numUids: Int
}

type UpdateOperationsEventDefinitionPayload {
	operationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
	numUids: Int
}

type UpdateOperationsEventDefinitionPropertyPayload {
	operationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
	numUids: Int
}

type UpdateOperationsEventDefinitionRecordSpecificationPayload {
	operationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
	numUids: Int
}

type UpdateOperationsEventDefinitionVersionPayload {
	operationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
	numUids: Int
}

type UpdateOperationsEventPayload {
	operationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
	numUids: Int
}

type UpdateOperationsEventPropertyPayload {
	operationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
	numUids: Int
}

type UpdateOperationsEventRecordEntryPayload {
	operationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
	numUids: Int
}

type UpdateOperationsEventRecordPayload {
	operationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
	numUids: Int
}

type UpdateOperationsMaterialBillPayload {
	operationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
	numUids: Int
}

type UpdateOperationsPerformancePayload {
	operationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
	numUids: Int
}

type UpdateOperationsRequestPayload {
	operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	numUids: Int
}

type UpdateOperationsResponsePayload {
	operationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
	numUids: Int
}

type UpdateOperationsResponsePropertyPayload {
	operationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
	numUids: Int
}

type UpdateOperationsSchedulePayload {
	operationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
	numUids: Int
}

type UpdateOperationsSegmentDependencyPayload {
	operationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
	numUids: Int
}

type UpdateOperationsSegmentPayload {
	operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	numUids: Int
}

type UpdateParameterSpecificationPayload {
	parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	numUids: Int
}

type UpdatePayloadFieldDefinitionPayload {
	payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	numUids: Int
}

type UpdatePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	numUids: Int
}

type UpdatePersonPropertyPayload {
	personProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
	numUids: Int
}

type UpdatePersonVersionPayload {
	personVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
	numUids: Int
}

type UpdatePersonnelActualPayload {
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	numUids: Int
}

type UpdatePersonnelActualPropertyPayload {
	personnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
	numUids: Int
}

type UpdatePersonnelClassPayload {
	personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	numUids: Int
}

type UpdatePersonnelClassPropertyPayload {
	personnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
	numUids: Int
}

type UpdatePersonnelClassVersionPayload {
	personnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
	numUids: Int
}

type UpdatePersonnelRequirementPayload {
	personnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
	numUids: Int
}

type UpdatePersonnelRequirementPropertyPayload {
	personnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
	numUids: Int
}

type UpdatePersonnelSpecificationPayload {
	personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	numUids: Int
}

type UpdatePersonnelSpecificationPropertyPayload {
	personnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
	numUids: Int
}

type UpdatePhysicalAssetActualPayload {
	physicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
	numUids: Int
}

type UpdatePhysicalAssetActualPropertyPayload {
	physicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
	numUids: Int
}

type UpdatePhysicalAssetClassPayload {
	physicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
	numUids: Int
}

type UpdatePhysicalAssetClassPropertyPayload {
	physicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
	numUids: Int
}

type UpdatePhysicalAssetClassVersionPayload {
	physicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
	numUids: Int
}

type UpdatePhysicalAssetDataSourcePayload {
	physicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
	numUids: Int
}

type UpdatePhysicalAssetPayload {
	physicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
	numUids: Int
}

type UpdatePhysicalAssetPropertyPayload {
	physicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
	numUids: Int
}

type UpdatePhysicalAssetRequirementPayload {
	physicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
	numUids: Int
}

type UpdatePhysicalAssetRequirementPropertyPayload {
	physicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
	numUids: Int
}

type UpdatePhysicalAssetSpecificationPayload {
	physicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
	numUids: Int
}

type UpdatePhysicalAssetSpecificationPropertyPayload {
	physicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
	numUids: Int
}

type UpdatePhysicalAssetVersionPayload {
	physicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
	numUids: Int
}

type UpdateProcessSegmentDependencyPayload {
	processSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
	numUids: Int
}

type UpdateProcessSegmentParameterPayload {
	processSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
	numUids: Int
}

type UpdateProcessSegmentPayload {
	processSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
	numUids: Int
}

type UpdateProcessSegmentVersionPayload {
	processSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
	numUids: Int
}

type UpdatePropertyMeasurementPayload {
	propertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
	numUids: Int
}

type UpdatePropertyNameAliasPayload {
	propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	numUids: Int
}

type UpdatePropertyValueAliasPayload {
	propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	numUids: Int
}

type UpdateRulePayload {
	rule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
	numUids: Int
}

type UpdateSecretPayload {
	secret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
	numUids: Int
}

type UpdateSecretVersionPayload {
	secretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
	numUids: Int
}

type UpdateSegmentDataPayload {
	segmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
	numUids: Int
}

type UpdateSegmentParameterPayload {
	segmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
	numUids: Int
}

type UpdateSegmentRequirementPayload {
	segmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
	numUids: Int
}

type UpdateSegmentResponsePayload {
	segmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
	numUids: Int
}

type UpdateSignaturePayload {
	signature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
	numUids: Int
}

type UpdateSignatureReasonPayload {
	signatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
	numUids: Int
}

type UpdateSpatialDefinitionPayload {
	spatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
	numUids: Int
}

type UpdateStateModelActionPayload {
	stateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
	numUids: Int
}

type UpdateStateModelDefinitionPayload {
	stateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition]
	numUids: Int
}

type UpdateStateModelEventPayload {
	stateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
	numUids: Int
}

type UpdateStateModelInstancePayload {
	stateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
	numUids: Int
}

type UpdateStateModelPropertyPayload {
	stateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
	numUids: Int
}

type UpdateStateModelStatePayload {
	stateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
	numUids: Int
}

type UpdateStateModelTransitionPayload {
	stateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
	numUids: Int
}

type UpdateStateTransitionInstancePayload {
	stateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
	numUids: Int
}

type UpdateTestResultPayload {
	testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	numUids: Int
}

type UpdateTestSpecificationCriteriaPayload {
	testSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
	numUids: Int
}

type UpdateTestSpecificationPayload {
	testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	numUids: Int
}

type UpdateTestSpecificationPropertyPayload {
	testSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
	numUids: Int
}

type UpdateUnitOfMeasureConversionPayload {
	unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	numUids: Int
}

type UpdateUnitOfMeasurePayload {
	unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	numUids: Int
}

type UpdateWorkCalendarDefinitionEntryPayload {
	workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	numUids: Int
}

type UpdateWorkCalendarDefinitionEntryPropertyPayload {
	workCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
	numUids: Int
}

type UpdateWorkCalendarEntryPayload {
	workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	numUids: Int
}

type UpdateWorkCalendarEntryPropertyPayload {
	workCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
	numUids: Int
}

type UpdateWorkCalendarPayload {
	workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	numUids: Int
}

type UpdateWorkDirectivePayload {
	workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
	numUids: Int
}

type UpdateWorkMasterPayload {
	workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
	numUids: Int
}

type UpdateWorkPerformancePayload {
	workPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
	numUids: Int
}

type UpdateWorkRequestPayload {
	workRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
	numUids: Int
}

type UpdateWorkResponsePayload {
	workResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
	numUids: Int
}

type UpdateWorkSchedulePayload {
	workSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
	numUids: Int
}

type UpdateWorkflowErrorPayload {
	workflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError]
	numUids: Int
}

type UpdateWorkflowMessagePayload {
	workflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage]
	numUids: Int
}

type UpdateWorkflowShapePayload {
	workflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape]
	numUids: Int
}

type UpdateWorkflowSpecificationConnectionPayload {
	workflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
	numUids: Int
}

type UpdateWorkflowSpecificationConnectionPropertyPayload {
	workflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
	numUids: Int
}

type UpdateWorkflowSpecificationConnectionTypePayload {
	workflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType]
	numUids: Int
}

type UpdateWorkflowSpecificationConnectionTypePropertyPayload {
	workflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
	numUids: Int
}

type UpdateWorkflowSpecificationNodePayload {
	workflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
	numUids: Int
}

type UpdateWorkflowSpecificationNodePropertyPayload {
	workflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
	numUids: Int
}

type UpdateWorkflowSpecificationNodeTestCasePayload {
	workflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
	numUids: Int
}

type UpdateWorkflowSpecificationNodeTypePayload {
	workflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType]
	numUids: Int
}

type UpdateWorkflowSpecificationNodeTypePropertyPayload {
	workflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
	numUids: Int
}

type UpdateWorkflowSpecificationNodeVariablePayload {
	workflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
	numUids: Int
}

type UpdateWorkflowSpecificationPayload {
	workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	numUids: Int
}

type UpdateWorkflowSpecificationPropertyPayload {
	workflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
	numUids: Int
}

type UpdateWorkflowSpecificationVersionPayload {
	workflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
	numUids: Int
}

type UpdateWorkflowTimerPayload {
	workflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer]
	numUids: Int
}

type UpdateWorkflowWaypointPayload {
	workflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
	numUids: Int
}

type WorkCalendarAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type WorkCalendarDefinitionEntryAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
	countMin: Int
	countMax: Int
	countSum: Int
	countAvg: Float
	intervalMin: Int
	intervalMax: Int
	intervalSum: Int
	intervalAvg: Float
	durationMin: String
	durationMax: String
}

type WorkCalendarDefinitionEntryPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	useMin: String
	useMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type WorkCalendarEntryAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	finishDateTimeMin: DateTime
	finishDateTimeMax: DateTime
}

type WorkCalendarEntryPropertyAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	useMin: String
	useMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type WorkDirectiveAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
	publishedDateMin: DateTime
	publishedDateMax: DateTime
}

type WorkMasterAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
	publishedDateMin: DateTime
	publishedDateMax: DateTime
}

type WorkPerformanceAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
	publishedDateMin: DateTime
	publishedDateMax: DateTime
}

type WorkRequestAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	plannedStartDateTimeMin: DateTime
	plannedStartDateTimeMax: DateTime
	plannedEndDateTimeMin: DateTime
	plannedEndDateTimeMax: DateTime
	priorityMin: String
	priorityMax: String
}

type WorkResponseAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
}

type WorkScheduleAggregateResult {
	count: Int
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	scheduledStartDateMin: DateTime
	scheduledStartDateMax: DateTime
	scheduledEndDateMin: DateTime
	scheduledEndDateMax: DateTime
	publishedDateMin: DateTime
	publishedDateMax: DateTime
}

type WorkflowErrorAggregateResult {
	count: Int
	idMin: String
	idMax: String
	referenceMin: String
	referenceMax: String
	codeMin: String
	codeMax: String
}

type WorkflowMessageAggregateResult {
	count: Int
	idMin: String
	idMax: String
	referenceMin: String
	referenceMax: String
}

type WorkflowShapeAggregateResult {
	count: Int
	idMin: String
	idMax: String
	xMin: String
	xMax: String
	yMin: String
	yMax: String
	widthMin: String
	widthMax: String
	heightMin: String
	heightMax: String
	iconMin: String
	iconMax: String
}

type WorkflowSpecificationAggregateResult {
	count: Int
	nextVersionMin: String
	nextVersionMax: String
	_createdByMin: String
	_createdByMax: String
	_createdDateTimeMin: DateTime
	_createdDateTimeMax: DateTime
	_modifiedByMin: String
	_modifiedByMax: String
	_modifiedDateTimeMin: DateTime
	_modifiedDateTimeMax: DateTime
	idMin: String
	idMax: String
}

type WorkflowSpecificationConnectionAggregateResult {
	count: Int
	conditionMin: String
	conditionMax: String
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	_createdByMin: String
	_createdByMax: String
	_createdDateTimeMin: DateTime
	_createdDateTimeMax: DateTime
	_modifiedByMin: String
	_modifiedByMax: String
	_modifiedDateTimeMin: DateTime
	_modifiedDateTimeMax: DateTime
}

type WorkflowSpecificationConnectionPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
}

type WorkflowSpecificationConnectionTypeAggregateResult {
	count: Int
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	_createdByMin: String
	_createdByMax: String
	_createdDateTimeMin: DateTime
	_createdDateTimeMax: DateTime
	_modifiedByMin: String
	_modifiedByMax: String
	_modifiedDateTimeMin: DateTime
	_modifiedDateTimeMax: DateTime
}

type WorkflowSpecificationConnectionTypePropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
}

type WorkflowSpecificationNodeAggregateResult {
	count: Int
	idMin: String
	idMax: String
	descriptionMin: String
	descriptionMax: String
	_createdByMin: String
	_createdByMax: String
	_createdDateTimeMin: DateTime
	_createdDateTimeMax: DateTime
	_modifiedByMin: String
	_modifiedByMax: String
	_modifiedDateTimeMin: DateTime
	_modifiedDateTimeMax: DateTime
	roleMin: String
	roleMax: String
	uiComponentMin: String
	uiComponentMax: String
}

type WorkflowSpecificationNodePropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
}

type WorkflowSpecificationNodeTestCaseAggregateResult {
	count: Int
	idMin: String
	idMax: String
	inputJsonMin: String
	inputJsonMax: String
	expectedResultMin: String
	expectedResultMax: String
}

type WorkflowSpecificationNodeTypeAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	_createdByMin: String
	_createdByMax: String
	_createdDateTimeMin: DateTime
	_createdDateTimeMax: DateTime
	_modifiedByMin: String
	_modifiedByMax: String
	_modifiedDateTimeMin: DateTime
	_modifiedDateTimeMax: DateTime
}

type WorkflowSpecificationNodeTypePropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
}

type WorkflowSpecificationNodeVariableAggregateResult {
	count: Int
	sourceMin: String
	sourceMax: String
	targetMin: String
	targetMax: String
}

type WorkflowSpecificationPropertyAggregateResult {
	count: Int
	idMin: String
	idMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
	_createdOnMin: DateTime
	_createdOnMax: DateTime
	_modifiedOnMin: DateTime
	_modifiedOnMax: DateTime
	_createdByMin: String
	_createdByMax: String
	_modifiedByMin: String
	_modifiedByMax: String
}

type WorkflowSpecificationVersionAggregateResult {
	count: Int
	idMin: String
	idMax: String
	versionMin: String
	versionMax: String
	effectiveStartMin: DateTime
	effectiveStartMax: DateTime
	effectiveEndMin: DateTime
	effectiveEndMax: DateTime
	descriptionMin: String
	descriptionMax: String
	bpmnXMLEncodedMin: String
	bpmnXMLEncodedMax: String
	schemaDefinitionMin: String
	schemaDefinitionMax: String
	_createdByMin: String
	_createdByMax: String
	_createdDateTimeMin: DateTime
	_createdDateTimeMax: DateTime
	_modifiedByMin: String
	_modifiedByMax: String
	_modifiedDateTimeMin: DateTime
	_modifiedDateTimeMax: DateTime
}

type WorkflowTimerAggregateResult {
	count: Int
	idMin: String
	idMax: String
	referenceMin: String
	referenceMax: String
}

type WorkflowWaypointAggregateResult {
	count: Int
	xMin: String
	xMax: String
	yMin: String
	yMax: String
}

#######################
# Generated Enums
#######################

enum AccessPermissionHasFilter {
	label
	permissionLevel
}

enum AccessPermissionOrderable {
	label
	permissionLevel
}

enum AlarmEventHasFilter {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	alarmEvent
	alarmLimit
	alarmType
	priority
	event
	effectiveDateTime
	recordedDateTime
	signatures
	comments
}

enum AlarmEventOrderable {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	alarmEvent
	alarmLimit
	alarmType
	priority
	effectiveDateTime
	recordedDateTime
}

enum CommentHasFilter {
	acl
	recordEntries
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	text
	timestamp
	personVersion
	onSignature
	signOff
	event
	alarmEvent
	workResponse
	jobResponse
	jobResponseData
	materialActual
	equipmentActual
	physicalAssetActual
	personnelActual
	segmentParameter
	workRequest
	jobOrder
	materialRequirement
	equipmentRequirement
	physicalAssetRequirement
	personnelRequirement
	workMaster
	workDirective
	child
	parent
}

enum CommentOrderable {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	text
	timestamp
}

enum DataSourceHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	uiSortIndex
	equipmentDataSources
	propertyNameAliases
}

enum DataSourceMethodArgumentHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	position
	dataType
	direction
	value
	dataSourceMethod
}

enum DataSourceMethodArgumentOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	position
	value
}

enum DataSourceMethodHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	method
	object
	error
	statusCode
	dataSourceVersion
	arguments
}

enum DataSourceMethodOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	method
	object
	error
	statusCode
}

enum DataSourceOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
	uiSortIndex
}

enum DataSourceTopicHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	label
	dataType
	messageKeyDeterminedBy
	dataSourceVersion
	propertyNameAliases
}

enum DataSourceTopicOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	label
}

enum DataSourceVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	versionStatus
	dataSource
	isActiveVersionOf
	id
	description
	protocol
	connectionString
	username
	password
	certificate
	topics
	equipmentDataSources
	physicalAssetDataSources
	methods
}

enum DataSourceVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	id
	description
	connectionString
	username
	password
	certificate
}

enum DataSubscriptionHasFilter {
	name
	topic
	query
	split
}

enum DataSubscriptionOrderable {
	name
	topic
	query
}

enum EnvironmentalVariableHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	versions
	activeVersion
	nextVersion
	id
}

enum EnvironmentalVariableOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	nextVersion
	id
}

enum EnvironmentalVariableVersionHasFilter {
	acl
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	environmentalVariable
	isActiveVersionOf
	id
	value
}

enum EnvironmentalVariableVersionOrderable {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	id
	value
}

enum EquipmentActualHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	equipmentUse
	quantity
	quantityUoM
	segmentResponse
	children
	parent
	properties
	testResults
	equipmentClass
	equipment
	equipmentVersion
	jobResponse
	signatures
	comments
}

enum EquipmentActualOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	equipmentUse
	quantity
}

enum EquipmentActualPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	equipmentActual
	children
	parent
	equipmentClassProperty
	equipmentProperty
	hierarchyScope
	spatialDefinition
	operationalLocation
	use
}

enum EquipmentActualPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
	use
}

enum EquipmentAssetMappingHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	startTime
	endTime
	equipment
	physicalAsset
}

enum EquipmentAssetMappingOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	startTime
	endTime
}

enum EquipmentClassHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isIncludedIn
	isMadeUpOf
	isPartOf
	equipmentVersions
	equipmentSpecifications
	equipmentRequirements
	equipmentActual
	testedBy
	specifiesTests
	testResults
	uiSortIndex
}

enum EquipmentClassOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
	uiSortIndex
}

enum EquipmentClassPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	propertyType
	value
	valueUnitOfMeasure
	bindingType
	equipmentClassVersion
	children
	parent
	equipmentProperty
	correspondsTo
	recordsMeasurementOf
	equipmentRequirementProperties
	equipmentSpecificationProperties
	equipmentActualProperties
	triggersRules
}

enum EquipmentClassPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
}

enum EquipmentClassVersionHasFilter {
	acl
	equipmentClass
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	equipmentLevel
	properties
	rules
	includesPropertiesOf
	equipmentVersions
	stateModels
	image
	displayName
	uiMonochromeIcon
	uiMonochromeIconColour
}

enum EquipmentClassVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	description
	image
	displayName
	uiMonochromeIcon
	uiMonochromeIconColour
}

enum EquipmentDataSourceHasFilter {
	acl
	equipmentVersion
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	topicTemplate
	dataSourceVersion
	dataSource
}

enum EquipmentDataSourceOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	topicTemplate
}

enum EquipmentHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isMadeUpOf
	isPartOf
	equipmentAssetMapping
	physicalAsset
	equipmentSpecifications
	equipmentRequirements
	equipmentActual
	testedBy
	specifiesTests
	testResults
	stateModelInstances
	materialSubLots
	materialLots
	uiSortIndex
	events
}

enum EquipmentNameAliasHasFilter {
	equipment
	alias
	system
}

enum EquipmentNameAliasOrderable {
	alias
	system
}

enum EquipmentOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
	uiSortIndex
}

enum EquipmentPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	bindingType
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
	equipmentVersion
	children
	parent
	equipmentClassProperty
	correspondsTo
	recordsMeasurementOf
	equipmentSpecificationProperties
	equipmentRequirementProperties
	equipmentActualProperties
}

enum EquipmentPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
}

enum EquipmentPropertyOverrideHasFilter {
	acl
	id
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	equipmentVersions
	propertyLabel
	address
	expression
	value
	storeHistory
	ignore
}

enum EquipmentPropertyOverrideOrderable {
	id
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	propertyLabel
	address
	expression
	value
}

enum EquipmentRequirementHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	hierarchyScope
	operationalLocation
	use
	quantity
	quantityUoM
	equipmentLevel
	segmentRequirement
	children
	parent
	properties
	equipmentClass
	equipment
	jobOrder
	testedBy
	specifiesTests
	testResults
	signatures
	comments
}

enum EquipmentRequirementOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	use
	quantity
}

enum EquipmentRequirementPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	equipmentRequirement
	children
	parent
	equipmentClassProperty
	equipmentProperty
}

enum EquipmentRequirementPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	quantity
}

enum EquipmentSpecificationHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	equipmentUse
	quantity
	quantityUoM
	operationsSegment
	processSegmentVersion
	children
	parent
	properties
	equipmentClass
	equipment
	workMaster
	workDirective
	testedBy
	specifiesTests
	testResults
}

enum EquipmentSpecificationOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	equipmentUse
	quantity
}

enum EquipmentSpecificationPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	children
	parent
	equipmentSpecification
	equipmentClassProperty
	equipmentProperty
}

enum EquipmentSpecificationPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
}

enum EquipmentVersionHasFilter {
	acl
	equipment
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	equipmentLevel
	displayName
	timeZoneName
	equipmentClasses
	equipmentClassVersions
	properties
	equipmentActual
	propertyOverrides
	propertyNameAliases
	workCalendar
	dataSources
	stateModels
}

enum EquipmentVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	description
	displayName
	timeZoneName
}

enum EvaluatedPropertyHasFilter {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	workMaster
	workDirective
	testSpecification
	criteria
	personnelClassProperty
	personProperty
	equipmentClassProperty
	equipmentProperty
	physicalAssetClassProperty
	physicalAssetProperty
	materialClassProperty
	materialDefinitionProperty
	materialLotProperty
}

enum EvaluatedPropertyOrderable {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
}

enum EventAssociationHasFilter {
	id
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	description
	from
	to
}

enum EventAssociationOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	description
}

enum EventHasFilter {
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	value
	previousValue
	messageText
	personID
	computerID
	proceduralElementReference
	category
	effectiveDateTime
	recordedDateTime
	attribute
	eventProperties
	eventType
	equipment
	person
	materialLot
	materialSubLot
	physicalAsset
	workResponse
	jobResponse
	jobResponseData
	alarmEvents
	eventAssociationsFrom
	eventAssociationsTo
	signatures
	comments
}

enum EventOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	value
	previousValue
	messageText
	personID
	computerID
	proceduralElementReference
	category
	effectiveDateTime
	recordedDateTime
	attribute
}

enum EventPropertyHasFilter {
	id
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	description
	label
	value
	valueUnitOfMeasure
	parent
	children
	event
}

enum EventPropertyOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	description
	label
	value
}

enum EventSubtypeHasFilter {
	id
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	label
	eventTypes
	parent
	children
}

enum EventSubtypeOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	label
}

enum EventTypeHasFilter {
	id
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	label
	events
	parent
	children
	eventSubtypes
}

enum EventTypeOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	label
}

enum FormHasFilter {
	id
	name
	workflowSpecificationNodes
	jsonSchema
	uiSchema
}

enum FormOrderable {
	id
	name
	jsonSchema
	uiSchema
}

enum HierarchyScopeHasFilter {
	recordEntries
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	equipmentLevel
	children
	parent
	equipmentVersions
	materialClassVersions
	materialDefinitionVersions
	materialLots
	materialSubLots
}

enum HierarchyScopeOrderable {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
}

enum InformationObjectHasFilter {
	operationsEventRecordEntry
	comment
	event
	dataSource
	dataSourceVersion
	hierarchyScope
	unitOfMeasure
	spatialDefinition
	operationalLocation
	operationalLocationVersion
	operationalLocationClass
	operationalLocationClassVersion
	personnelClass
	personnelClassVersion
	person
	personVersion
	equipmentClass
	equipmentClassVersion
	equipment
	equipmentVersion
	physicalAssetClass
	physicalAssetClassVersion
	physicalAsset
	physicalAssetVersion
	materialClass
	materialClassVersion
	materialDefinition
	materialDefinitionVersion
	materialLot
	materialSubLot
	processSegment
	processSegmentVersion
	testSpecification
	testResult
	propertyMeasurement
	operationsEventClass
	operationsEventClassVersion
	operationsEventDefinition
	operationsEventDefinitionVersion
	operationsEvent
	operationsDefinition
	operationsDefinitionVersion
	operationsSegment
	operationsSchedule
	operationsRequest
	operationsPerformance
	operationsResponse
	workMaster
	workDirective
	workflowSpecification
	workflowSpecificationVersion
	workflowSpecificationNodeType
	workflowSpecificationConnectionType
	workSchedule
	workRequest
	jobList
	jobOrder
	workPerformance
	workResponse
	jobResponse
	jobResponseList
	workCalendar
	Other
}

enum InformationObjectOrderable {
	Other
}

enum JobListHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	workType
	description
	plannedStartDateTime
	plannedEndDateTime
	publishedDate
	hierarchyScope
	jobOrders
}

enum JobListOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	plannedStartDateTime
	plannedEndDateTime
	publishedDate
}

enum JobOrderHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	publishedDate
	workType
	scheduledStartDateTime
	scheduledEndDateTime
	priority
	hierarchyScope
	command
	dispatchStatus
	commandRule
	label
	workRequest
	jobList
	workMaster
	jobResponses
	segmentRequirement
	parameters
	personnelRequirements
	equipmentRequirements
	physicalAssetRequirements
	materialRequirements
	workflowSpecification
	workflowSpecificationVersion
	workflowSpecificationNode
	workDirective
	previous
	next
	signatures
	comments
}

enum JobOrderOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	publishedDate
	scheduledStartDateTime
	scheduledEndDateTime
	priority
	command
	commandRule
	label
}

enum JobOrderParameterHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	value
	valueUnitOfMeasure
	label
	jobOrder
	children
	parent
	parameterSpecification
	processSegmentParameter
}

enum JobOrderParameterOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	value
	label
}

enum JobResponseDataHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	value
	valueUnitOfMeasure
	label
	jobResponse
	children
	parent
	events
	comments
	signatures
}

enum JobResponseDataOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	value
	label
}

enum JobResponseHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	publishedDate
	workType
	startDateTime
	endDateTime
	hierarchyScope
	jobState
	dataJSON
	productionDate
	workResponse
	segmentResponse
	workMaster
	workDirective
	workflowSpecification
	workflowSpecificationVersion
	workflowSpecificationNode
	jobOrder
	jobResponseList
	personnelActual
	equipmentActual
	physicalAssetActual
	materialActual
	data
	children
	parent
	events
	signatures
	comments
}

enum JobResponseListHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	version
	description
	workType
	startDateTime
	endDateTime
	hierarchyScope
	jobResponses
}

enum JobResponseListOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	version
	description
	startDateTime
	endDateTime
}

enum JobResponseOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	publishedDate
	startDateTime
	endDateTime
	dataJSON
	productionDate
}

enum LibreServiceHasFilter {
	name
	heartbeat
}

enum LibreServiceOrderable {
	name
	heartbeat
}

enum MaterialActualHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	storageLocation
	materialUse
	quantity
	quantityUoM
	assemblyType
	assemblyRelationship
	segmentResponse
	children
	parent
	properties
	testResults
	materialClass
	materialDefinition
	materialDefinitionVersion
	materialLot
	materialSubLot
	jobResponse
	signatures
	comments
}

enum MaterialActualOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	quantity
}

enum MaterialActualPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	materialActual
	children
	parent
	materialClassProperty
	materialDefinitionProperty
	materialLotProperty
	hierarchyScope
	spatialDefinition
	operationalLocation
	use
}

enum MaterialActualPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
	use
}

enum MaterialAlternateHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	effectiveDateTime
	priorityOrder
	materialDefinitionVersion
	alternateMaterial
}

enum MaterialAlternateOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	effectiveDateTime
	priorityOrder
}

enum MaterialClassHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isIncludedIn
	isAssembledFrom
	isComponentOf
	materialDefinitionVersions
	materialSpecifications
	materialRequirements
	materialActual
	testedBy
	specifiesTests
	testResults
}

enum MaterialClassOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum MaterialClassPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	propertyType
	value
	valueUnitOfMeasure
	materialClassVersion
	children
	parent
	materialDefinitionProperty
	correspondsTo
	recordsMeasurementOf
	materialSpecificationProperties
	materialRequirementProperties
	materialActualProperties
}

enum MaterialClassPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
}

enum MaterialClassVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	materialClass
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	assemblyType
	assemblyRelationship
	properties
	includesPropertiesOf
	stateModels
}

enum MaterialClassVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	description
}

enum MaterialDefinitionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	materialSpecifications
	materialRequirements
	materialActual
	testedBy
	specifiesTests
	testResults
	stateModelInstances
	isAlternateFor
	materialLots
}

enum MaterialDefinitionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum MaterialDefinitionPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
	materialDefinitionVersion
	children
	parent
	materialClassProperty
	materialLotProperty
	correspondsTo
	recordsMeasurementOf
	materialSpecificationProperties
	materialRequirementProperties
	materialActualProperties
}

enum MaterialDefinitionPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
}

enum MaterialDefinitionVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	versionStatus
	materialDefinition
	isActiveVersionOf
	id
	description
	hierarchyScope
	spatialDefinition
	assemblyType
	assemblyRelationship
	baseUnitOfMeasure
	materialClasses
	properties
	materialActual
	alternates
	isAssembledFrom
	isComponentOf
	uomConversions
	materialLots
	stateModels
}

enum MaterialDefinitionVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	id
	description
}

enum MaterialLotHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	storageLocationOperationalLocation
	storageLocationEquipment
	storageLocationPhysicalAsset
	storageLocationDescription
	assemblyType
	assemblyRelationship
	status
	disposition
	quantity
	quantityUnitOfMeasure
	isAssembledFromMaterialLot
	isComponentOfMaterialLot
	properties
	materialDefinition
	materialDefinitionVersion
	childSubLot
	isAssembledFromMaterialSubLot
	isComponentOfMaterialSubLot
	materialSpecifications
	materialRequirements
	materialActual
	events
	testedBy
	specifiesTests
	testResults
	stateModelInstances
}

enum MaterialLotOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	storageLocationDescription
	status
	quantity
}

enum MaterialLotPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	materialLot
	materialSubLot
	children
	parent
	materialDefinitionProperty
	correspondsTo
	recordsMeasurementOf
	materialSpecificationProperties
	materialRequirementProperties
	materialActualProperties
}

enum MaterialLotPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
}

enum MaterialRequirementHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	hierarchyScope
	storageLocation
	materialUse
	quantity
	quantityUoM
	assemblyType
	assemblyRelationship
	segmentRequirement
	children
	parent
	properties
	materialClass
	material
	materialLots
	materialSubLots
	jobOrder
	testedBy
	specifiesTests
	testResults
	signatures
	comments
}

enum MaterialRequirementOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	quantity
}

enum MaterialRequirementPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	materialRequirement
	children
	parent
	materialClassProperty
	materialDefinitionProperty
	materialLotProperty
}

enum MaterialRequirementPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	quantity
}

enum MaterialSpecificationHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	spatialDefinition
	storageLocation
	materialUse
	quantity
	quantityUoM
	assemblyType
	assemblyRelationship
	operationsSegment
	processSegmentVersion
	children
	parent
	properties
	materialsBill
	materialClass
	material
	materialLot
	materialSubLot
	workMaster
	workDirective
	testedBy
	specifiesTests
	testResults
}

enum MaterialSpecificationOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	quantity
}

enum MaterialSpecificationPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	children
	parent
	materialSpecification
	materialClassProperty
	materialDefinitionProperty
	materialLotProperty
}

enum MaterialSpecificationPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
}

enum MaterialSubLotHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	storageLocationOperationalLocation
	storageLocationEquipment
	storageLocationPhysicalAsset
	storageLocationDescription
	assemblyType
	assemblyRelationship
	status
	disposition
	quantity
	quantityUnitOfMeasure
	children
	parent
	properties
	isAssembledFromMaterialSubLot
	isComponentOfMaterialSubLot
	isComponentOfMaterialLot
	isAssembledFromMaterialLot
	parentMaterialLot
	materialSpecifications
	materialRequirements
	materialActual
	events
	stateModelInstances
	testedBy
	specifiesTests
	testResults
}

enum MaterialSubLotOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	storageLocationDescription
	status
	quantity
}

enum MenuHasFilter {
	label
	acl
	parent
	children
	menuPage
	icon
	isSection
	isPage
	orderNumber
}

enum MenuOrderable {
	label
	menuPage
	icon
	orderNumber
}

enum MultiplicityHasFilter {
	Min
	Max
}

enum MultiplicityOrderable {
	Min
	Max
}

enum OperationalLocationClassHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	includedIn
	isPartOf
	isMadeUpOf
	operationalLocationVersions
}

enum OperationalLocationClassOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum OperationalLocationClassPropertyHasFilter {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	value
	valueUnitOfMeasure
	propertyType
	isPartOf
	isMadeUpOf
	operationalLocationClassVersion
	mapsTo
}

enum OperationalLocationClassPropertyOrderable {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	value
}

enum OperationalLocationClassVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	label
	name
	description
	hierarchyScope
	operationalLocationClass
	includesPropertiesOf
	isPartOf
	isMadeUpOf
	properties
}

enum OperationalLocationClassVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	label
	name
	description
}

enum OperationalLocationHasFilter {
	acl
	recordEntries
	id
	label
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	isPartOf
	isMadeUpOf
}

enum OperationalLocationOrderable {
	id
	label
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
}

enum OperationalLocationPropertyHasFilter {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	value
	valueUnitOfMeasure
	isPartOf
	isMadeUpOf
	operationalLocationVersion
	mapsTo
}

enum OperationalLocationPropertyOrderable {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	value
}

enum OperationalLocationVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	name
	id
	description
	hierarchyScope
	operationalLocation
	spatialDefinition
	operationalLocationClasses
	properties
	isPartOf
	isMadeUpOf
}

enum OperationalLocationVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	name
	id
	description
}

enum OperationsDefinitionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	parent
	children
	workMasters
	operationsRequests
	operationsResponses
	segmentRequirements
	segmentResponses
}

enum OperationsDefinitionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum OperationsDefinitionVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	versionStatus
	operationsDefinition
	isActiveVersionOf
	id
	billOfMaterial
	billOfResources
	description
	operationsType
	hierarchyScope
	definitionType
	segments
	materialsBill
}

enum OperationsDefinitionVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	id
	billOfMaterial
	billOfResources
	description
}

enum OperationsEventClassHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isAssembledFrom
	isComponentOf
	includesPropertiesOf
	isIncludedIn
	operationsEventDefinitionVersions
}

enum OperationsEventClassOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum OperationsEventClassPropertyHasFilter {
	acl
	id
	operationsEventClassVersion
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	parent
	children
	propertyType
	value
	valueUnitOfMeasure
}

enum OperationsEventClassPropertyOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	value
}

enum OperationsEventClassRecordSpecificationHasFilter {
	acl
	id
	operationsEventClassVersion
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	hierarchyScope
	definitionType
	informationObjectType
	multiplicity
	action
	actionMultiplicity
}

enum OperationsEventClassRecordSpecificationOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
}

enum OperationsEventClassVersionHasFilter {
	acl
	recordEntries
	id
	version
	operationsEventClass
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	properties
	recordSpecifications
	description
}

enum OperationsEventClassVersionOrderable {
	id
	version
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
}

enum OperationsEventDefinitionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	hierarchyScope
	isAssembledFrom
	isComponentOf
	includesPropertiesOf
	isIncludedIn
	operationsEvents
}

enum OperationsEventDefinitionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum OperationsEventDefinitionPropertyHasFilter {
	acl
	id
	operationsEventDefinitionVersion
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	value
	valueUnitOfMeasure
	operationsEventClassProperty
	parent
	children
}

enum OperationsEventDefinitionPropertyOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	value
}

enum OperationsEventDefinitionRecordSpecificationHasFilter {
	acl
	id
	operationsEventDefinitionVersion
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	hierarchyScope
	definitionType
	informationObjectType
	multiplicity
	action
	actionMultiplicity
	operationsEventRecords
}

enum OperationsEventDefinitionRecordSpecificationOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
}

enum OperationsEventDefinitionVersionHasFilter {
	acl
	recordEntries
	operationsEventDefinition
	id
	version
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	description
	operationsEventClasses
	hierarchyScope
	priority
	operationsEventType
	operationsEventLevel
	operationsType
	momFunction
	enterpriseFunction
	category
	source
	properties
	recordSpecifications
}

enum OperationsEventDefinitionVersionOrderable {
	id
	version
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	category
	source
}

enum OperationsEventHasFilter {
	acl
	recordEntries
	id
	operationsEventDefinition
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	recordTimestamp
	hierarchyScope
	priority
	operationsEventType
	operationsEventLevel
	operationsType
	momFunction
	enterpriseFunction
	category
	source
	properties
	records
	parent
	children
}

enum OperationsEventOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	recordTimestamp
	priority
	category
	source
}

enum OperationsEventPropertyHasFilter {
	acl
	id
	operationsEvent
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	value
	valueUnitOfMeasure
	operationsEventDefinitionProperty
	parent
	children
}

enum OperationsEventPropertyOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	value
}

enum OperationsEventRecordEntryHasFilter {
	acl
	id
	recordId
	operationsEventRecord
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	recordTimestamp
	hierarchyScope
	data
	informationObject
	parent
	children
}

enum OperationsEventRecordEntryOrderable {
	id
	recordId
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	recordTimestamp
	data
}

enum OperationsEventRecordHasFilter {
	acl
	id
	operationsEvent
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	action
	recordTimestamp
	hierarchyScope
	operationsEventDefinitionRecordSpecification
	recordEntries
	parent
	children
}

enum OperationsEventRecordOrderable {
	id
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	description
	recordTimestamp
}

enum OperationsMaterialBillHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	useType
	billOfMaterial
	operationsDefinitionVersion
	operationsSegments
	materialBillItems
}

enum OperationsMaterialBillOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	billOfMaterial
}

enum OperationsPerformanceHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	operationsType
	startDateTime
	endDateTime
	hierarchyScope
	performanceState
	publishedDate
	operationsResponses
	operationsSchedule
}

enum OperationsPerformanceOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	startDateTime
	endDateTime
	publishedDate
}

enum OperationsRequestHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	operationsType
	scheduledStartDate
	scheduledEndDate
	priority
	hierarchyScope
	requestState
	notes
	operationsSchedule
	operationsDefinition
	operationsSegment
	segmentRequirements
	workRequests
	operationsResponses
	segmentResponses
}

enum OperationsRequestOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	scheduledStartDate
	scheduledEndDate
	priority
	notes
}

enum OperationsResponseHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	operationsType
	startDateTime
	endDateTime
	hierarchyScope
	responseState
	operationsPerformance
	operationsRequest
	operationsDefinition
	operationsSegment
	segmentRequirements
	segmentResponses
	isActive
	properties
}

enum OperationsResponseOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	startDateTime
	endDateTime
}

enum OperationsResponsePropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	use
	quantity
	quantityUoM
	operationsResponse
	children
	parent
}

enum OperationsResponsePropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	use
	quantity
}

enum OperationsScheduleHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	operationsType
	scheduledStartDate
	scheduledEndDate
	publishedDate
	hierarchyScope
	scheduleState
	operationsRequests
	operationsPerformance
}

enum OperationsScheduleOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	scheduledStartDate
	scheduledEndDate
	publishedDate
}

enum OperationsSegmentDependencyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	dependencyType
	dependencyFactor
	factorUoM
	condition
	from
	to
	rules
}

enum OperationsSegmentDependencyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	dependencyFactor
	condition
}

enum OperationsSegmentHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	duration
	durationUoM
	operationsType
	definitionType
	billOfMaterial
	billOfResources
	positionX
	positionY
	operationsDefinitionVersion
	parent
	children
	processSegment
	workMasters
	makesUp
	isMadeUpOf
	inflows
	outflows
	materialsBill
	parameterSpecifications
	personnelSpecifications
	equipmentSpecifications
	physicalAssetSpecifications
	materialSpecifications
	rules
	segmentRequirements
	operationsRequests
	operationsResponses
	segmentResponses
}

enum OperationsSegmentOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	duration
	billOfMaterial
	billOfResources
	positionX
	positionY
}

enum ParameterSpecificationHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	value
	valueUnitOfMeasure
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
	operationsSegment
	children
	parent
	segmentParameters
	jobOrderParameter
	workMaster
	workDirective
}

enum ParameterSpecificationOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
}

enum PayloadFieldDefinitionHasFilter {
	acl
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	name
	expression
}

enum PayloadFieldDefinitionOrderable {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	name
	expression
}

enum PersonHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	personnelSpecifications
	personnelRequirements
	personnelActual
	testedBy
	specifiesTests
	testResults
	events
	stateModelInstances
}

enum PersonOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum PersonPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
	personVersion
	children
	parent
	personnelClassProperty
	correspondsTo
	recordsMeasurementOf
	personnelSpecificationProperties
	personnelRequirementProperties
	personnelActualProperties
}

enum PersonPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
}

enum PersonVersionHasFilter {
	acl
	person
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	name
	personnelClasses
	properties
	personnelActual
	stateModels
	signaturesMade
	comments
}

enum PersonVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	description
	name
}

enum PersonnelActualHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	personnelUse
	quantity
	quantityUoM
	segmentResponse
	children
	parent
	properties
	testResults
	personnelClass
	person
	personVersion
	jobResponse
	signatures
	comments
}

enum PersonnelActualOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	personnelUse
	quantity
}

enum PersonnelActualPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	personnelActual
	children
	parent
	personnelClassProperty
	personProperty
	hierarchyScope
	spatialDefinition
	operationalLocation
	use
}

enum PersonnelActualPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
	use
}

enum PersonnelClassHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isIncludedIn
	personVersions
	personnelSpecifications
	personnelRequirements
	personnelActual
	testedBy
	specifiesTests
	testResults
}

enum PersonnelClassOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum PersonnelClassPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	propertyType
	value
	valueUnitOfMeasure
	personnelClassVersion
	children
	parent
	personProperty
	correspondsTo
	recordsMeasurementOf
	personnelRequirementProperties
	personnelSpecificationProperties
	personnelActualProperties
}

enum PersonnelClassPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
}

enum PersonnelClassVersionHasFilter {
	acl
	personnelClass
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	properties
	includesPropertiesOf
	stateModels
}

enum PersonnelClassVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	description
}

enum PersonnelRequirementHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	hierarchyScope
	operationalLocation
	use
	quantity
	quantityUoM
	segmentRequirement
	children
	parent
	properties
	personnelClass
	person
	jobOrder
	testedBy
	specifiesTests
	testResults
	signatures
	comments
}

enum PersonnelRequirementOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	use
	quantity
}

enum PersonnelRequirementPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	personnelRequirement
	children
	parent
	personnelClassProperty
	personProperty
}

enum PersonnelRequirementPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	quantity
}

enum PersonnelSpecificationHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	personnelUse
	quantity
	quantityUoM
	operationsSegment
	processSegmentVersion
	children
	parent
	properties
	personnelClass
	person
	workMaster
	workDirective
	testedBy
	specifiesTests
	testResults
}

enum PersonnelSpecificationOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	personnelUse
	quantity
}

enum PersonnelSpecificationPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	children
	parent
	personnelSpecification
	personnelClassProperty
	personProperty
}

enum PersonnelSpecificationPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
}

enum PhysicalAssetActualHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	physicalLocation
	physicalAssetUse
	quantity
	quantityUoM
	segmentResponse
	children
	parent
	properties
	testResults
	physicalAssetClass
	physicalAsset
	physicalAssetVersion
	jobResponse
	signatures
	comments
}

enum PhysicalAssetActualOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	physicalAssetUse
	quantity
}

enum PhysicalAssetActualPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	physicalAssetActual
	children
	parent
	physicalAssetClassProperty
	physicalAssetProperty
}

enum PhysicalAssetActualPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
}

enum PhysicalAssetClassHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isIncludedIn
	isMadeUpOf
	isPartOf
	physicalAssetVersions
	physicalAssetSpecifications
	physicalAssetRequirements
	physicalAssetActual
	testedBy
	specifiesTests
	testResults
	uiSortIndex
}

enum PhysicalAssetClassOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
	uiSortIndex
}

enum PhysicalAssetClassPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	propertyType
	value
	valueUnitOfMeasure
	physicalAssetClassVersion
	children
	parent
	physicalAssetProperty
	correspondsTo
	recordsMeasurementOf
	physicalAssetRequirementProperties
	physicalAssetSpecificationProperties
	physicalAssetActualProperties
}

enum PhysicalAssetClassPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
}

enum PhysicalAssetClassVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	physicalAssetClass
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	manufacturer
	properties
	includesPropertiesOf
	stateModels
}

enum PhysicalAssetClassVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	description
	manufacturer
}

enum PhysicalAssetDataSourceHasFilter {
	acl
	physicalAssetVersion
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	topicTemplate
	dataSourceVersion
}

enum PhysicalAssetDataSourceOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	topicTemplate
}

enum PhysicalAssetHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isMadeUpOf
	isPartOf
	equipmentAssetMapping
	equipment
	physicalAssetSpecifications
	physicalAssetRequirements
	physicalAssetActual
	testedBy
	specifiesTests
	testResults
	materialLots
	materialSubLots
	events
	stateModelInstances
	uiSortIndex
}

enum PhysicalAssetOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
	uiSortIndex
}

enum PhysicalAssetPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
	physicalAssetVersion
	children
	parent
	physicalAssetClassProperty
	correspondsTo
	recordsMeasurementOf
	physicalAssetSpecificationProperties
	physicalAssetRequirementProperties
	physicalAssetActualProperties
}

enum PhysicalAssetPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
}

enum PhysicalAssetRequirementHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	hierarchyScope
	physicalLocation
	use
	quantity
	quantityUoM
	equipmentLevel
	segmentRequirement
	children
	parent
	properties
	physicalAssetClass
	physicalAsset
	jobOrder
	testedBy
	specifiesTests
	testResults
	signatures
	comments
}

enum PhysicalAssetRequirementOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	use
	quantity
}

enum PhysicalAssetRequirementPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	physicalAssetRequirement
	children
	parent
	physicalAssetClassProperty
	physicalAssetProperty
}

enum PhysicalAssetRequirementPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
	quantity
}

enum PhysicalAssetSpecificationHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	spatialDefinition
	physicalLocation
	physicalAssetUse
	quantity
	quantityUoM
	operationsSegment
	processSegmentVersion
	children
	parent
	properties
	physicalAssetClass
	physicalAsset
	workMaster
	workDirective
}

enum PhysicalAssetSpecificationOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	physicalAssetUse
	quantity
}

enum PhysicalAssetSpecificationPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	valueUnitOfMeasure
	quantity
	quantityUoM
	children
	parent
	physicalAssetSpecification
	physicalAssetClassProperty
	physicalAssetProperty
}

enum PhysicalAssetSpecificationPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
	quantity
}

enum PhysicalAssetVersionHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	physicalAsset
	isActiveVersionOf
	effectiveStart
	effectiveEnd
	id
	description
	hierarchyScope
	spatialDefinition
	fixedAssetID
	vendorID
	physicalLocation
	physicalLocationDescription
	physicalAssetClasses
	properties
	dataSources
	physicalAssetActual
	stateModels
}

enum PhysicalAssetVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	effectiveStart
	effectiveEnd
	id
	description
	fixedAssetID
	vendorID
	physicalLocationDescription
}

enum ProcessSegmentDependencyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	dependencyType
	dependencyFactor
	factorUoM
	condition
	from
	to
	rules
}

enum ProcessSegmentDependencyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	dependencyFactor
	condition
}

enum ProcessSegmentHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	versions
	activeVersion
	nextVersion
	id
	label
	isMadeUpOf
	isPartOf
	workMasters
	inflows
	outflows
	operationsSegments
	segmentRequirements
	segmentResponses
}

enum ProcessSegmentOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	nextVersion
	id
	label
}

enum ProcessSegmentParameterHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	value
	valueUnitOfMeasure
	processSegmentVersion
	children
	parent
	segmentParameters
	jobOrderParameter
}

enum ProcessSegmentParameterOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
}

enum ProcessSegmentVersionHasFilter {
	acl
	recordEntries
	processSegment
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	versionStatus
	isActiveVersionOf
	id
	description
	operationsType
	hierarchyScope
	definitionType
	duration
	durationUoM
	processSegmentParameters
	personnelSpecifications
	equipmentSpecifications
	physicalAssetSpecifications
	materialSpecifications
}

enum ProcessSegmentVersionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	version
	id
	description
	duration
}

enum PropertyMeasurementHasFilter {
	id
	recordEntries
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	measurementDate
	value
	valueUnitOfMeasure
	expiration
	testResult
	workMaster
	workDirective
	personnelClassProperty
	personProperty
	equipmentClassProperty
	equipmentProperty
	physicalAssetClassProperty
	physicalAssetProperty
	materialClassProperty
	materialDefinitionProperty
	materialLotProperty
}

enum PropertyMeasurementOrderable {
	id
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	measurementDate
	value
	expiration
}

enum PropertyNameAliasHasFilter {
	propertyLabel
	expression
	equipmentVersion
	dataSource
	dataSourceTopic
	dataSourceTopicLabel
}

enum PropertyNameAliasOrderable {
	propertyLabel
	expression
	dataSourceTopicLabel
}

enum PropertyValueAliasHasFilter {
	property
	value
	alias
	system
}

enum PropertyValueAliasOrderable {
	value
	alias
	system
}

enum RuleHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	processLocation
	triggerExpression
	delayOption
	delayTime
	payloadFields
	workflowSpecification
	triggerProperties
	operationsSegment
	operationsSegmentDependency
	processSegmentDependency
	equipmentClassVersion
}

enum RuleOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	triggerExpression
	delayTime
}

enum SecretHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	versions
	activeVersion
	nextVersion
	id
}

enum SecretOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	nextVersion
	id
}

enum SecretVersionHasFilter {
	acl
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	versionStatus
	secret
	isActiveVersionOf
	id
	value
}

enum SecretVersionOrderable {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	version
	id
	value
}

enum SegmentDataHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	value
	valueUnitOfMeasure
	segmentResponse
	children
	parent
}

enum SegmentDataOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	value
}

enum SegmentParameterHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	hierarchyScope
	value
	valueUnitOfMeasure
	segmentRequirement
	children
	parent
	parameterSpecification
	processSegmentParameter
	comments
}

enum SegmentParameterOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	value
}

enum SegmentRequirementHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	operationsType
	earliestStartDate
	latestEndDate
	duration
	durationUoM
	hierarchyScope
	segmentState
	notes
	operationsRequest
	operationsDefinition
	operationsSegment
	processSegment
	children
	parent
	workRequests
	jobOrders
	operationsResponses
	segmentResponses
	parameters
	personnelRequirements
	equipmentRequirements
	physicalAssetRequirements
	materialRequirements
}

enum SegmentRequirementOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	earliestStartDate
	latestEndDate
	duration
	notes
}

enum SegmentResponseHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	operationsType
	actualStartDateTime
	actualEndDateTime
	postingDateTime
	hierarchyScope
	segmentState
	operationsDefinitions
	operationsSegments
	processSegment
	operationsRequests
	segmentRequirements
	workResponses
	jobResponses
	children
	parent
	operationsResponse
	segmentData
	personnelActual
	equipmentActual
	physicalAssetActual
	materialActual
}

enum SegmentResponseOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	actualStartDateTime
	actualEndDateTime
	postingDateTime
}

enum SignatureHasFilter {
	acl
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	timestamp
	changeIndication
	signatureReason
	personVersion
	comment
	signatureForAComment
	event
	alarmEvent
	workResponse
	jobResponse
	jobResponseData
	materialActual
	equipmentActual
	physicalAssetActual
	personnelActual
	workRequest
	jobOrder
	materialRequirement
	equipmentRequirement
	physicalAssetRequirement
	personnelRequirement
	workMaster
	workDirective
}

enum SignatureOrderable {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	timestamp
	changeIndication
}

enum SignatureReasonHasFilter {
	acl
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	signatures
}

enum SignatureReasonOrderable {
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
}

enum SpatialDefinitionHasFilter {
	recordEntries
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	pointValue
	polygonValue
	multiPolygonValue
	srid
	sridAuthority
}

enum SpatialDefinitionOrderable {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	srid
	sridAuthority
}

enum StateModelActionHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	actionType
	workflowSpecification
	variables
	transition
	isEntryActionForState
	isExitActionForState
}

enum StateModelActionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	variables
}

enum StateModelDefinitionHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	hierarchyScope
	states
	transitions
	events
	bpmnXMLEncoded
	equipmentClassVersion
	equipmentVersion
	materialClassVersion
	materialDefinitionVersion
	personnelClassVersion
	personVersion
	physicalAssetClassVersion
	physicalAssetVersion
	instances
	properties
}

enum StateModelDefinitionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	description
	bpmnXMLEncoded
}

enum StateModelEventHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	stateModelDefinition
	transitions
}

enum StateModelEventOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
}

enum StateModelInstanceHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	stateModelDefinition
	description
	hierarchyScope
	state
	transitions
	equipment
	materialDefinition
	materialLot
	materialSubLot
	person
	physicalAsset
}

enum StateModelInstanceOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	label
	description
	state
}

enum StateModelPropertyHasFilter {
	acl
	StateModel
	id
	name
	dataType
	definitionType
	description
	value
	valueUnitOfMeasure
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	children
	parent
}

enum StateModelPropertyOrderable {
	id
	name
	description
	value
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
}

enum StateModelStateHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	parent
	children
	id
	label
	isInitialState
	isFinalState
	stateModelDefinition
	inflows
	outflows
	onEntry
	onExit
}

enum StateModelStateOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
}

enum StateModelTransitionHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	stateModelDefinition
	stateModelEvents
	from
	to
	condition
	stateModelActions
}

enum StateModelTransitionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	label
	condition
}

enum StateTransitionInstanceHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	stateModelInstance
	timestamp
	fromState
	toState
}

enum StateTransitionInstanceOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	timestamp
	fromState
	toState
}

enum TestResultHasFilter {
	id
	recordEntries
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	hierarchyScope
	evaluationDate
	evaluationCriterionResult
	expiration
	parent
	children
	propertyMeasurements
	personnelRequirement
	equipmentRequirement
	physicalAssetRequirement
	materialRequirement
	personnelSpecification
	equipmentSpecification
	materialSpecification
	personnelClass
	person
	equipmentClass
	equipment
	physicalAssetClass
	physicalAsset
	materialClass
	materialDefinition
	materialLot
	materialSubLot
	personnelActual
	equipmentActual
	physicalAssetActual
	materialActual
}

enum TestResultOrderable {
	id
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	evaluationDate
	evaluationCriterionResult
	expiration
}

enum TestSpecificationCriteriaHasFilter {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	sequence
	expression
	result
	testSpecification
	evaluatedProperties
}

enum TestSpecificationCriteriaOrderable {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	sequence
	expression
	result
}

enum TestSpecificationHasFilter {
	id
	label
	version
	recordEntries
	key
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	publishedDate
	hierarchyScope
	testSampleSize
	physicalSample
	recurrenceQuantity
	recurrenceTimeInterval
	parent
	children
	properties
	criteria
	evaluatedProperties
	requiredByPersonnelRequirement
	requiredByEquipmentRequirement
	requiredByPhysicalAssetRequirement
	requiredByMaterialRequirement
	requiredByPersonnelSpecification
	requiredByEquipmentSpecification
	requiredByMaterialSpecification
	testsPersonnelRequirements
	testsEquipmentRequirements
	testsPhysicalAssetRequirements
	testsMaterialRequirements
	testsPersonnelSpecifications
	testsEquipmentSpecifications
	testsMaterialSpecifications
	requiredByPersonnelClass
	requiredByPerson
	requiredByEquipmentClass
	requiredByEquipment
	requiredByPhysicalAssetClass
	requiredByPhysicalAsset
	requiredByMaterialClass
	requiredByMaterialDefinition
	requiredByMaterialLot
	requiredByMaterialSubLot
	testsPersonnelClass
	testsPerson
	testsEquipmentClass
	testsEquipment
	testsPhysicalAssetClass
	testsPhysicalAsset
	testsMaterialClass
	testsMaterialDefinition
	testsMaterialLot
	testsMaterialSubLot
}

enum TestSpecificationOrderable {
	id
	label
	version
	key
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	publishedDate
	testSampleSize
	recurrenceQuantity
	recurrenceTimeInterval
}

enum TestSpecificationPropertyHasFilter {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	value
	valueUnitOfMeasure
	parent
	children
	testSpecification
}

enum TestSpecificationPropertyOrderable {
	id
	label
	effectiveStart
	effectiveEnd
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	description
	value
}

enum UnitOfMeasureConversionHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	fromUnitOfMeasure
	toUnitOfMeasure
	numerator
	denominator
	materialDefinitionVersion
}

enum UnitOfMeasureConversionOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	numerator
	denominator
}

enum UnitOfMeasureHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	dataType
}

enum UnitOfMeasureOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
}

enum WorkCalendarDefinitionEntryHasFilter {
	isActive
	description
	hierarchyScope
	freq
	startDateTime
	endDateTime
	count
	interval
	wkst
	byWeekDay
	byMonth
	bySetPos
	byMonthDay
	byYearDay
	byWeekNo
	byHour
	byMinute
	bySecond
	duration
	entryType
	properties
	calendarEntries
	workCalendar
}

enum WorkCalendarDefinitionEntryOrderable {
	description
	startDateTime
	endDateTime
	count
	interval
	duration
}

enum WorkCalendarDefinitionEntryPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	use
	quantity
	quantityUoM
	workCalendarDefinitionEntry
	children
	parent
}

enum WorkCalendarDefinitionEntryPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	use
	quantity
}

enum WorkCalendarEntryHasFilter {
	isActive
	description
	definition
	hierarchyScope
	startDateTime
	finishDateTime
	entryType
	properties
	workCalendar
}

enum WorkCalendarEntryOrderable {
	description
	startDateTime
	finishDateTime
}

enum WorkCalendarEntryPropertyHasFilter {
	acl
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	hierarchyScope
	spatialDefinition
	operationalLocation
	use
	quantity
	quantityUoM
	workCalendarEntry
	children
	parent
}

enum WorkCalendarEntryPropertyOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	id
	description
	use
	quantity
}

enum WorkCalendarHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	name
	description
	definition
	entries
	equipmentVersions
}

enum WorkCalendarOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	name
	description
}

enum WorkDirectiveHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	version
	description
	hierarchyScope
	workType
	duration
	durationUnitOfMeasure
	publishedDate
	state
	parameterSpecifications
	personnelSpecifications
	equipmentSpecifications
	physicalAssetSpecifications
	materialSpecifications
	evaluatedProperties
	propertyMeasurements
	workMaster
	children
	parent
	workflowSpecification
	jobOrders
	jobResponses
	signatures
	comments
}

enum WorkDirectiveOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	version
	description
	duration
	publishedDate
}

enum WorkMasterHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	version
	description
	hierarchyScope
	workType
	duration
	durationUnitOfMeasure
	publishedDate
	definitionType
	parameterSpecifications
	personnelSpecifications
	equipmentSpecifications
	physicalAssetSpecifications
	materialSpecifications
	evaluatedProperties
	propertyMeasurements
	parent
	children
	workDirectives
	jobOrders
	defines
	definedBy
	processSegment
	operationsDefinition
	operationsSegment
	workflowSpecification
	jobResponses
	signatures
	comments
}

enum WorkMasterOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	version
	description
	duration
	publishedDate
}

enum WorkPerformanceHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	workType
	startDateTime
	endDateTime
	publishedDate
	hierarchyScope
	workState
	workResponses
	children
	parent
	workSchedule
}

enum WorkPerformanceOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	startDateTime
	endDateTime
	publishedDate
}

enum WorkRequestHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	workType
	description
	plannedStartDateTime
	plannedEndDateTime
	priority
	hierarchyScope
	requestState
	children
	parent
	workSchedule
	jobOrders
	operationsRequest
	segmentRequirement
	workResponses
	signatures
	comments
}

enum WorkRequestOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	plannedStartDateTime
	plannedEndDateTime
	priority
}

enum WorkResponseHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	workType
	startDateTime
	endDateTime
	hierarchyScope
	responseState
	workPerformance
	children
	parent
	workRequest
	jobResponses
	segmentResponse
	events
	signatures
	comments
}

enum WorkResponseOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	startDateTime
	endDateTime
}

enum WorkScheduleHasFilter {
	acl
	recordEntries
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	workType
	description
	scheduledStartDate
	scheduledEndDate
	publishedDate
	hierarchyScope
	scheduleState
	workRequests
	children
	parent
	workPerformances
}

enum WorkScheduleOrderable {
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	effectiveStart
	effectiveEnd
	id
	description
	scheduledStartDate
	scheduledEndDate
	publishedDate
}

enum WorkflowErrorHasFilter {
	id
	reference
	workflowSpecificationVersion
	node
	code
}

enum WorkflowErrorOrderable {
	id
	reference
	code
}

enum WorkflowMessageHasFilter {
	id
	reference
	workflowSpecificationVersion
	node
	enabled
}

enum WorkflowMessageOrderable {
	id
	reference
}

enum WorkflowShapeHasFilter {
	acl
	id
	node
	x
	y
	width
	height
	icon
}

enum WorkflowShapeOrderable {
	id
	x
	y
	width
	height
	icon
}

enum WorkflowSpecificationConnectionHasFilter {
	acl
	condition
	id
	name
	waypoints
	description
	workflowSpecificationVersion
	connectionType
	properties
	to
	from
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
}

enum WorkflowSpecificationConnectionOrderable {
	condition
	id
	name
	description
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
}

enum WorkflowSpecificationConnectionPropertyHasFilter {
	acl
	connection
	id
	name
	dataType
	definitionType
	description
	value
	valueUnitOfMeasure
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	children
	parent
}

enum WorkflowSpecificationConnectionPropertyOrderable {
	id
	name
	description
	value
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
}

enum WorkflowSpecificationConnectionTypeHasFilter {
	acl
	recordEntries
	id
	description
	hierarchyScope
	connections
	properties
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
}

enum WorkflowSpecificationConnectionTypeOrderable {
	id
	description
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
}

enum WorkflowSpecificationConnectionTypePropertyHasFilter {
	acl
	connectionType
	id
	name
	dataType
	definitionType
	description
	value
	valueUnitOfMeasure
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	children
	parent
}

enum WorkflowSpecificationConnectionTypePropertyOrderable {
	id
	name
	description
	value
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
}

enum WorkflowSpecificationHasFilter {
	acl
	recordEntries
	versions
	activeVersion
	nextVersion
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
	id
	includedIn
	jobOrders
	jobResponses
	workMasters
	workDirectives
	stateModelActions
	rules
	calledByNodes
}

enum WorkflowSpecificationNodeHasFilter {
	acl
	id
	description
	hierarchyScope
	workflowSpecificationVersion
	properties
	jobOrders
	jobResponses
	outflows
	inflows
	containsWorkflowSpecification
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
	form
	inputs
	outputs
	message
	error
	timer
	nodeType
	role
	shape
	uiComponent
	testCases
	boundaryEvents
	attachedTo
}

enum WorkflowSpecificationNodeOrderable {
	id
	description
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
	role
	uiComponent
}

enum WorkflowSpecificationNodePropertyHasFilter {
	acl
	node
	id
	name
	dataType
	definitionType
	description
	value
	valueUnitOfMeasure
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	children
	parent
}

enum WorkflowSpecificationNodePropertyOrderable {
	id
	name
	description
	value
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
}

enum WorkflowSpecificationNodeTestCaseHasFilter {
	node
	id
	inputJson
	expectedResult
}

enum WorkflowSpecificationNodeTestCaseOrderable {
	id
	inputJson
	expectedResult
}

enum WorkflowSpecificationNodeTypeHasFilter {
	acl
	recordEntries
	id
	name
	description
	hierarchyScope
	properties
	nodes
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
}

enum WorkflowSpecificationNodeTypeOrderable {
	id
	name
	description
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
}

enum WorkflowSpecificationNodeTypePropertyHasFilter {
	acl
	nodeType
	id
	name
	dataType
	definitionType
	description
	value
	valueUnitOfMeasure
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	children
	parent
}

enum WorkflowSpecificationNodeTypePropertyOrderable {
	id
	name
	description
	value
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
}

enum WorkflowSpecificationNodeVariableHasFilter {
	source
	target
}

enum WorkflowSpecificationNodeVariableOrderable {
	source
	target
}

enum WorkflowSpecificationOrderable {
	nextVersion
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
	id
}

enum WorkflowSpecificationPropertyHasFilter {
	acl
	workflowSpecificationVersion
	id
	name
	dataType
	definitionType
	description
	value
	valueUnitOfMeasure
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
	children
	parent
}

enum WorkflowSpecificationPropertyOrderable {
	id
	name
	description
	value
	_createdOn
	_modifiedOn
	_createdBy
	_modifiedBy
}

enum WorkflowSpecificationVersionHasFilter {
	acl
	recordEntries
	id
	version
	workflowSpecification
	isActiveVersionOf
	versionStatus
	effectiveStart
	effectiveEnd
	description
	hierarchyScope
	definitionType
	bpmnXMLEncoded
	schemaDefinition
	isExecutable
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
	includePropertiesOf
	messages
	timers
	errors
	nodes
	connections
	properties
	jobOrders
	jobResponses
}

enum WorkflowSpecificationVersionOrderable {
	id
	version
	effectiveStart
	effectiveEnd
	description
	bpmnXMLEncoded
	schemaDefinition
	_createdBy
	_createdDateTime
	_modifiedBy
	_modifiedDateTime
}

enum WorkflowTimerHasFilter {
	id
	reference
	workflowSpecificationVersion
	node
	enabled
}

enum WorkflowTimerOrderable {
	id
	reference
}

enum WorkflowWaypointHasFilter {
	connection
	x
	y
}

enum WorkflowWaypointOrderable {
	x
	y
}

#######################
# Generated Inputs
#######################

input AccessPermissionFilter {
	iid: [ID!]
	label: StringExactFilter_StringFullTextFilter
	permissionLevel: IntFilter
	has: [AccessPermissionHasFilter]
	and: [AccessPermissionFilter]
	or: [AccessPermissionFilter]
	not: AccessPermissionFilter
}

input AccessPermissionOrder {
	asc: AccessPermissionOrderable
	desc: AccessPermissionOrderable
	then: AccessPermissionOrder
}

input AccessPermissionPatch {
	label: String
	permissionLevel: Int
}

input AccessPermissionRef {
	iid: ID
	label: String
	permissionLevel: Int
}

input AddAccessPermissionInput {
	label: String!
	permissionLevel: Int!
}

input AddAlarmEventInput {
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	alarmEvent: String!
	alarmLimit: String
	alarmType: String
	priority: String
	event: EventRef
	effectiveDateTime: DateTime
	recordedDateTime: DateTime
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddCommentInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	text: String!
	timestamp: DateTime
	personVersion: PersonVersionRef!
	onSignature: SignatureRef
	signOff: SignatureRef
	event: EventRef
	alarmEvent: AlarmEventRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	materialActual: MaterialActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	personnelActual: PersonnelActualRef
	segmentParameter: SegmentParameterRef
	workRequest: WorkRequestRef
	jobOrder: JobOrderRef
	materialRequirement: MaterialRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	personnelRequirement: PersonnelRequirementRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	child: [CommentRef]
	parent: CommentRef
}

input AddDataSourceInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [DataSourceVersionRef]
	activeVersion: DataSourceVersionRef
	nextVersion: String
	id: String!
	label: String!
	uiSortIndex: Int
	equipmentDataSources: [EquipmentDataSourceRef]
	propertyNameAliases: [PropertyNameAliasRef]
}

input AddDataSourceMethodArgumentInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	position: Int!
	dataType: DataType
	direction: MethodArgumentDirection!
	value: String
	dataSourceMethod: DataSourceMethodRef!
}

input AddDataSourceMethodInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	method: String!
	object: String
	error: String
	statusCode: Int
	dataSourceVersion: DataSourceVersionRef!
	arguments: [DataSourceMethodArgumentRef]
}

input AddDataSourceTopicInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	label: String!
	dataType: DataType
	messageKeyDeterminedBy: MessageKey!
	dataSourceVersion: DataSourceVersionRef!
	propertyNameAliases: [PropertyNameAliasRef]
}

input AddDataSourceVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String!
	versionStatus: VersionState!
	dataSource: DataSourceRef!
	isActiveVersionOf: DataSourceRef
	id: String!
	description: String
	protocol: DataSourceProtocol!
	connectionString: String
	username: String
	password: String
	certificate: String
	topics: [DataSourceTopicRef]
	equipmentDataSources: [EquipmentDataSourceRef]
	physicalAssetDataSources: [PhysicalAssetDataSourceRef]
	methods: [DataSourceMethodRef]
}

input AddDataSubscriptionInput {
	name: String!
	topic: String!
	query: String!
	split: Boolean!
}

input AddEnvironmentalVariableInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versions: [EnvironmentalVariableVersionRef]
	activeVersion: EnvironmentalVariableVersionRef
	nextVersion: String
	id: String!
}

input AddEnvironmentalVariableVersionInput {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	environmentalVariable: EnvironmentalVariableRef!
	isActiveVersionOf: EnvironmentalVariableRef
	id: String!
	value: String!
}

input AddEquipmentActualInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [EquipmentActualRef]
	parent: EquipmentActualRef
	properties: [EquipmentActualPropertyRef]
	testResults: [TestResultRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	equipmentVersion: EquipmentVersionRef
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddEquipmentActualPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	equipmentActual: EquipmentActualRef!
	children: [EquipmentActualPropertyRef]
	parent: EquipmentActualPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input AddEquipmentAssetMappingInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	startTime: DateTime
	endTime: DateTime
	equipment: EquipmentRef!
	physicalAsset: PhysicalAssetRef!
}

input AddEquipmentClassInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [EquipmentClassVersionRef]
	activeVersion: EquipmentClassVersionRef
	nextVersion: String
	id: String!
	label: String!
	isIncludedIn: [EquipmentClassVersionRef]
	isMadeUpOf: [EquipmentClassRef]
	isPartOf: [EquipmentClassRef]
	equipmentVersions: [EquipmentVersionRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	equipmentRequirements: [EquipmentRequirementRef]
	equipmentActual: [EquipmentActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	uiSortIndex: Int
}

input AddEquipmentClassPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	propertyType: Isa95PropertyType!
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	bindingType: PropertyBindingType
	equipmentClassVersion: EquipmentClassVersionRef!
	children: [EquipmentClassPropertyRef]
	parent: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
	equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
	equipmentActualProperties: [EquipmentActualPropertyRef]
	triggersRules: [RuleRef]
}

input AddEquipmentClassVersionInput {
	acl: [AccessPermissionRef]
	equipmentClass: EquipmentClassRef!
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	isActiveVersionOf: EquipmentClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	equipmentLevel: EquipmentElementLevel
	properties: [EquipmentClassPropertyRef]
	rules: [RuleRef]
	includesPropertiesOf: [EquipmentClassRef]
	equipmentVersions: [EquipmentVersionRef]
	stateModels: [StateModelDefinitionRef]
	image: String
	displayName: String
	uiMonochromeIcon: String
	uiMonochromeIconColour: String
}

input AddEquipmentDataSourceInput {
	acl: [AccessPermissionRef]
	equipmentVersion: EquipmentVersionRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	topicTemplate: String
	dataSourceVersion: DataSourceVersionRef
	dataSource: DataSourceRef
}

input AddEquipmentInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [EquipmentVersionRef]
	activeVersion: EquipmentVersionRef
	nextVersion: String
	id: String!
	label: String!
	isMadeUpOf: [EquipmentRef]
	isPartOf: [EquipmentRef]
	equipmentAssetMapping: [EquipmentAssetMappingRef]
	physicalAsset: PhysicalAssetRef
	equipmentSpecifications: [EquipmentSpecificationRef]
	equipmentRequirements: [EquipmentRequirementRef]
	equipmentActual: [EquipmentActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
	materialSubLots: [MaterialSubLotRef]
	materialLots: [MaterialLotRef]
	uiSortIndex: Int
	events: [EventRef]
}

input AddEquipmentNameAliasInput {
	equipment: EquipmentRef!
	alias: String!
	system: String!
}

input AddEquipmentPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	bindingType: PropertyBindingType
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	equipmentVersion: EquipmentVersionRef!
	children: [EquipmentPropertyRef]
	parent: EquipmentPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
	equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
	equipmentActualProperties: [EquipmentActualPropertyRef]
}

input AddEquipmentPropertyOverrideInput {
	acl: [AccessPermissionRef]
	id: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	equipmentVersions: EquipmentVersionRef!
	propertyLabel: String!
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean
}

input AddEquipmentRequirementInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentLevel: EquipmentElementLevel
	segmentRequirement: SegmentRequirementRef
	children: [EquipmentRequirementRef]
	parent: EquipmentRequirementRef
	properties: [EquipmentRequirementPropertyRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddEquipmentRequirementPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentRequirement: EquipmentRequirementRef!
	children: [EquipmentRequirementPropertyRef]
	parent: EquipmentRequirementPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
}

input AddEquipmentSpecificationInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [EquipmentSpecificationRef]
	parent: EquipmentSpecificationRef
	properties: [EquipmentSpecificationPropertyRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input AddEquipmentSpecificationPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [EquipmentSpecificationPropertyRef]
	parent: EquipmentSpecificationPropertyRef
	equipmentSpecification: EquipmentSpecificationRef!
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
}

input AddEquipmentVersionInput {
	acl: [AccessPermissionRef]
	equipment: EquipmentRef!
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	isActiveVersionOf: EquipmentRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentLevel: EquipmentElementLevel
	displayName: String
	timeZoneName: String
	equipmentClasses: [EquipmentClassRef]
	equipmentClassVersions: [EquipmentClassVersionRef]
	properties: [EquipmentPropertyRef]
	equipmentActual: [EquipmentActualRef]
	propertyOverrides: [EquipmentPropertyOverrideRef]
	propertyNameAliases: [PropertyNameAliasRef]
	workCalendar: WorkCalendarRef
	dataSources: [EquipmentDataSourceRef]
	stateModels: [StateModelDefinitionRef]
}

input AddEvaluatedPropertyInput {
	id: String!
	label: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testSpecification: TestSpecificationRef!
	criteria: [TestSpecificationCriteriaRef]
	personnelClassProperty: [PersonnelClassPropertyRef]
	personProperty: [PersonPropertyRef]
	equipmentClassProperty: [EquipmentClassPropertyRef]
	equipmentProperty: [EquipmentPropertyRef]
	physicalAssetClassProperty: [PhysicalAssetClassPropertyRef]
	physicalAssetProperty: [PhysicalAssetPropertyRef]
	materialClassProperty: [MaterialClassPropertyRef]
	materialDefinitionProperty: [MaterialDefinitionPropertyRef]
	materialLotProperty: [MaterialLotPropertyRef]
}

input AddEventAssociationInput {
	id: String!
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	description: String
	from: EventRef!
	to: EventRef!
}

input AddEventInput {
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	value: String
	previousValue: String
	messageText: String
	personID: String
	computerID: String
	proceduralElementReference: String
	category: String
	effectiveDateTime: DateTime
	recordedDateTime: DateTime
	attribute: String
	eventProperties: [EventPropertyRef]
	eventType: EventTypeRef
	equipment: EquipmentRef
	person: PersonRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	physicalAsset: PhysicalAssetRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	alarmEvents: [AlarmEventRef]
	eventAssociationsFrom: [EventAssociationRef]
	eventAssociationsTo: [EventAssociationRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddEventPropertyInput {
	id: String!
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	description: String
	label: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	parent: EventPropertyRef
	children: [EventPropertyRef]
	event: EventRef
}

input AddEventSubtypeInput {
	id: String!
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	label: String!
	eventTypes: [EventTypeRef!]
	parent: EventSubtypeRef
	children: [EventSubtypeRef]
}

input AddEventTypeInput {
	id: String!
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	label: String!
	events: [EventRef]
	parent: EventTypeRef
	children: [EventTypeRef]
	eventSubtypes: [EventSubtypeRef]
}

input AddFormInput {
	id: String!
	name: String
	workflowSpecificationNodes: [WorkflowSpecificationNodeRef]
	jsonSchema: String
	uiSchema: String
}

input AddHierarchyScopeInput {
	recordEntries: [InformationObjectRef]
	id: String!
	label: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	equipmentLevel: EquipmentElementLevel
	children: [HierarchyScopeRef]
	parent: HierarchyScopeRef
	equipmentVersions: [EquipmentVersionRef]
	materialClassVersions: [MaterialClassVersionRef]
	materialDefinitionVersions: [MaterialDefinitionVersionRef]
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
}

input AddInformationObjectInput {
	operationsEventRecordEntry: OperationsEventRecordEntryRef
	comment: CommentRef
	event: EventRef
	dataSource: DataSourceRef
	dataSourceVersion: DataSourceVersionRef
	hierarchyScope: HierarchyScopeRef
	unitOfMeasure: UnitOfMeasureRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	operationalLocationVersion: OperationalLocationVersionRef
	operationalLocationClass: OperationalLocationClassRef
	operationalLocationClassVersion: OperationalLocationClassVersionRef
	personnelClass: PersonnelClassRef
	personnelClassVersion: PersonnelClassVersionRef
	person: PersonRef
	personVersion: PersonVersionRef
	equipmentClass: EquipmentClassRef
	equipmentClassVersion: EquipmentClassVersionRef
	equipment: EquipmentRef
	equipmentVersion: EquipmentVersionRef
	physicalAssetClass: PhysicalAssetClassRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	physicalAsset: PhysicalAssetRef
	physicalAssetVersion: PhysicalAssetVersionRef
	materialClass: MaterialClassRef
	materialClassVersion: MaterialClassVersionRef
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	processSegment: ProcessSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	testSpecification: TestSpecificationRef
	testResult: TestResultRef
	propertyMeasurement: PropertyMeasurementRef
	operationsEventClass: OperationsEventClassRef
	operationsEventClassVersion: OperationsEventClassVersionRef
	operationsEventDefinition: OperationsEventDefinitionRef
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
	operationsEvent: OperationsEventRef
	operationsDefinition: OperationsDefinitionRef
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	operationsSegment: OperationsSegmentRef
	operationsSchedule: OperationsScheduleRef
	operationsRequest: OperationsRequestRef
	operationsPerformance: OperationsPerformanceRef
	operationsResponse: OperationsResponseRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNodeType: WorkflowSpecificationNodeTypeRef
	workflowSpecificationConnectionType: WorkflowSpecificationConnectionTypeRef
	workSchedule: WorkScheduleRef
	workRequest: WorkRequestRef
	jobList: JobListRef
	jobOrder: JobOrderRef
	workPerformance: WorkPerformanceRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseList: JobResponseListRef
	workCalendar: WorkCalendarRef
	Other: String
}

input AddJobListInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	workType: WorkType!
	description: String
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	jobOrders: [JobOrderRef!]!
}

input AddJobOrderInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	publishedDate: DateTime
	workType: WorkType
	scheduledStartDateTime: DateTime
	scheduledEndDateTime: DateTime
	priority: Int
	hierarchyScope: HierarchyScopeRef
	command: String
	dispatchStatus: DispatchStatus
	commandRule: String
	label: String
	workRequest: WorkRequestRef
	jobList: JobListRef
	workMaster: WorkMasterRef
	jobResponses: [JobResponseRef]
	segmentRequirement: SegmentRequirementRef
	parameters: [JobOrderParameterRef]
	personnelRequirements: [PersonnelRequirementRef]
	equipmentRequirements: [EquipmentRequirementRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	materialRequirements: [MaterialRequirementRef]
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNode: WorkflowSpecificationNodeRef
	workDirective: WorkDirectiveRef
	previous: [JobOrderRef]
	next: [JobOrderRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddJobOrderParameterInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	label: String
	jobOrder: JobOrderRef!
	children: [JobOrderParameterRef]
	parent: JobOrderParameterRef
	parameterSpecification: ParameterSpecificationRef
	processSegmentParameter: ProcessSegmentParameterRef
}

input AddJobResponseDataInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	label: String
	jobResponse: JobResponseRef!
	children: [JobResponseDataRef]
	parent: JobResponseDataRef
	events: [EventRef]
	comments: [CommentRef]
	signatures: [SignatureRef]
}

input AddJobResponseInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	publishedDate: DateTime
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	jobState: JobState
	dataJSON: String
	productionDate: String
	workResponse: WorkResponseRef
	segmentResponse: SegmentResponseRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNode: WorkflowSpecificationNodeRef
	jobOrder: JobOrderRef
	jobResponseList: JobResponseListRef
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	materialActual: [MaterialActualRef]
	data: [JobResponseDataRef]
	children: [JobResponseRef]
	parent: JobResponseRef
	events: [EventRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddJobResponseListInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	version: String!
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	jobResponses: [JobResponseRef!]!
}

input AddLibreServiceInput {
	name: String!
	heartbeat: DateTime
}

input AddMaterialActualInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	segmentResponse: SegmentResponseRef
	children: [MaterialActualRef]
	parent: MaterialActualRef
	properties: [MaterialActualPropertyRef]
	testResults: [TestResultRef]
	materialClass: MaterialClassRef
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	materialLot: [MaterialLotRef]
	materialSubLot: [MaterialSubLotRef]
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddMaterialActualPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	materialActual: MaterialActualRef!
	children: [MaterialActualPropertyRef]
	parent: MaterialActualPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input AddMaterialAlternateInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	effectiveDateTime: DateTime!
	priorityOrder: Int!
	materialDefinitionVersion: MaterialDefinitionVersionRef!
	alternateMaterial: MaterialDefinitionRef!
}

input AddMaterialClassInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [MaterialClassVersionRef]
	activeVersion: MaterialClassVersionRef
	nextVersion: String
	id: String!
	label: String!
	isIncludedIn: [MaterialClassVersionRef]
	isAssembledFrom: [MaterialClassRef]
	isComponentOf: MaterialClassRef
	materialDefinitionVersions: [MaterialDefinitionVersionRef]
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input AddMaterialClassPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	propertyType: Isa95PropertyType!
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	materialClassVersion: MaterialClassVersionRef!
	children: [MaterialClassPropertyRef]
	parent: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input AddMaterialClassVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	materialClass: MaterialClassRef!
	isActiveVersionOf: MaterialClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	properties: [MaterialClassPropertyRef]
	includesPropertiesOf: [MaterialClassRef]
	stateModels: [StateModelDefinitionRef]
}

input AddMaterialDefinitionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [MaterialDefinitionVersionRef]
	activeVersion: MaterialDefinitionVersionRef
	nextVersion: String
	id: String!
	label: String!
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
	isAlternateFor: [MaterialAlternateRef]
	materialLots: [MaterialLotRef]
}

input AddMaterialDefinitionPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	materialDefinitionVersion: MaterialDefinitionVersionRef!
	children: [MaterialDefinitionPropertyRef]
	parent: MaterialDefinitionPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialLotProperty: MaterialLotPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input AddMaterialDefinitionVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String!
	versionStatus: VersionState!
	materialDefinition: MaterialDefinitionRef!
	isActiveVersionOf: MaterialDefinitionRef
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	baseUnitOfMeasure: UnitOfMeasureRef
	materialClasses: [MaterialClassRef]
	properties: [MaterialDefinitionPropertyRef]
	materialActual: [MaterialActualRef]
	alternates: [MaterialAlternateRef]
	isAssembledFrom: [MaterialDefinitionVersionRef]
	isComponentOf: MaterialDefinitionVersionRef
	uomConversions: [UnitOfMeasureConversionRef]
	materialLots: [MaterialLotRef]
	stateModels: [StateModelDefinitionRef]
}

input AddMaterialLotInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocationOperationalLocation: OperationalLocationRef
	storageLocationEquipment: EquipmentRef
	storageLocationPhysicalAsset: PhysicalAssetRef
	storageLocationDescription: String
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	status: String
	disposition: Disposition
	quantity: Float
	quantityUnitOfMeasure: UnitOfMeasureRef
	isAssembledFromMaterialLot: [MaterialLotRef]
	isComponentOfMaterialLot: MaterialLotRef
	properties: [MaterialLotPropertyRef]
	materialDefinition: MaterialDefinitionRef!
	materialDefinitionVersion: MaterialDefinitionVersionRef!
	childSubLot: [MaterialSubLotRef]
	isAssembledFromMaterialSubLot: [MaterialSubLotRef]
	isComponentOfMaterialSubLot: MaterialSubLotRef
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	events: [EventRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
}

input AddMaterialLotPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	children: [MaterialLotPropertyRef]
	parent: MaterialLotPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input AddMaterialRequirementInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse!
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	segmentRequirement: SegmentRequirementRef
	children: [MaterialRequirementRef]
	parent: MaterialRequirementRef
	properties: [MaterialRequirementPropertyRef]
	materialClass: MaterialClassRef
	material: MaterialDefinitionRef
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddMaterialRequirementPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	materialRequirement: MaterialRequirementRef!
	children: [MaterialRequirementPropertyRef]
	parent: MaterialRequirementPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input AddMaterialSpecificationInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse!
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [MaterialSpecificationRef]
	parent: MaterialSpecificationRef
	properties: [MaterialSpecificationPropertyRef]
	materialsBill: OperationsMaterialBillRef
	materialClass: MaterialClassRef
	material: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input AddMaterialSpecificationPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [MaterialSpecificationPropertyRef]
	parent: MaterialSpecificationPropertyRef
	materialSpecification: MaterialSpecificationRef!
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input AddMaterialSubLotInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocationOperationalLocation: OperationalLocationRef
	storageLocationEquipment: EquipmentRef
	storageLocationPhysicalAsset: PhysicalAssetRef
	storageLocationDescription: String
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	status: String
	disposition: Disposition
	quantity: Float
	quantityUnitOfMeasure: UnitOfMeasureRef
	children: [MaterialSubLotRef]
	parent: MaterialSubLotRef
	properties: [MaterialLotPropertyRef]
	isAssembledFromMaterialSubLot: [MaterialSubLotRef]
	isComponentOfMaterialSubLot: MaterialSubLotRef
	isComponentOfMaterialLot: MaterialLotRef
	isAssembledFromMaterialLot: [MaterialLotRef]
	parentMaterialLot: MaterialLotRef
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input AddMenuInput {
	label: String!
	acl: [AccessPermissionRef]
	parent: MenuRef
	children: [MenuRef!]
	menuPage: String
	icon: String
	isSection: Boolean!
	isPage: Boolean!
	orderNumber: Int
}

input AddMultiplicityInput {
	Min: Int
	Max: Int
}

input AddOperationalLocationClassInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationalLocationClassVersionRef]
	activeVersion: OperationalLocationClassVersionRef
	nextVersion: String
	id: String!
	label: String!
	includedIn: [OperationalLocationClassVersionRef]
	isPartOf: [OperationalLocationClassRef]
	isMadeUpOf: OperationalLocationClassRef
	operationalLocationVersions: [OperationalLocationVersionRef]
}

input AddOperationalLocationClassPropertyInput {
	id: String!
	label: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	propertyType: Isa95PropertyType!
	isPartOf: [OperationalLocationClassPropertyRef]
	isMadeUpOf: OperationalLocationClassPropertyRef
	operationalLocationClassVersion: OperationalLocationClassVersionRef!
	mapsTo: [OperationalLocationPropertyRef]
}

input AddOperationalLocationClassVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	isActiveVersionOf: OperationalLocationClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	name: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocationClass: OperationalLocationClassRef!
	includesPropertiesOf: [OperationalLocationClassRef]
	isPartOf: [OperationalLocationClassVersionRef]
	isMadeUpOf: OperationalLocationClassVersionRef
	properties: [OperationalLocationClassPropertyRef]
}

input AddOperationalLocationInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String!
	label: String!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationalLocationVersionRef]
	activeVersion: OperationalLocationVersionRef
	nextVersion: String
	isPartOf: [OperationalLocationRef]
	isMadeUpOf: OperationalLocationRef
}

input AddOperationalLocationPropertyInput {
	id: String!
	label: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	isPartOf: [OperationalLocationPropertyRef]
	isMadeUpOf: OperationalLocationPropertyRef
	operationalLocationVersion: OperationalLocationVersionRef!
	mapsTo: OperationalLocationClassPropertyRef
}

input AddOperationalLocationVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	isActiveVersionOf: OperationalLocationRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	name: String
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef!
	spatialDefinition: SpatialDefinitionRef
	operationalLocationClasses: [OperationalLocationClassRef]
	properties: [OperationalLocationPropertyRef]
	isPartOf: [OperationalLocationVersionRef]
	isMadeUpOf: OperationalLocationVersionRef
}

input AddOperationsDefinitionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsDefinitionVersionRef]
	activeVersion: OperationsDefinitionVersionRef
	nextVersion: String
	id: String!
	label: String!
	parent: OperationsDefinitionRef
	children: [OperationsDefinitionRef]
	workMasters: [WorkMasterRef]
	operationsRequests: [OperationsRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef]
}

input AddOperationsDefinitionVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String!
	versionStatus: VersionState!
	operationsDefinition: OperationsDefinitionRef!
	isActiveVersionOf: OperationsDefinitionRef
	id: String!
	billOfMaterial: String
	billOfResources: String
	description: String
	operationsType: WorkType!
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	segments: [OperationsSegmentRef]
	materialsBill: [OperationsMaterialBillRef]
}

input AddOperationsEventClassInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsEventClassVersionRef]
	activeVersion: OperationsEventClassVersionRef
	nextVersion: String
	id: String!
	label: String!
	isAssembledFrom: [OperationsEventClassRef]
	isComponentOf: OperationsEventClassRef
	includesPropertiesOf: [OperationsEventClassRef]
	isIncludedIn: OperationsEventClassRef
	operationsEventDefinitionVersions: [OperationsEventDefinitionVersionRef]
}

input AddOperationsEventClassPropertyInput {
	acl: [AccessPermissionRef]
	id: String!
	operationsEventClassVersion: OperationsEventClassVersionRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	parent: OperationsEventClassPropertyRef
	children: [OperationsEventClassPropertyRef]
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
}

input AddOperationsEventClassRecordSpecificationInput {
	acl: [AccessPermissionRef]
	id: String!
	operationsEventClassVersion: OperationsEventClassVersionRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity: MultiplicityRef
	action: [Action]
	actionMultiplicity: MultiplicityRef
}

input AddOperationsEventClassVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String!
	version: String!
	operationsEventClass: OperationsEventClassRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versionStatus: VersionState!
	isActiveVersionOf: OperationsEventClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	properties: [OperationsEventClassPropertyRef]
	recordSpecifications: [OperationsEventClassRecordSpecificationRef]
	description: String
}

input AddOperationsEventDefinitionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsEventDefinitionVersionRef]
	activeVersion: OperationsEventDefinitionVersionRef
	nextVersion: String
	id: String!
	label: String!
	hierarchyScope: HierarchyScopeRef
	isAssembledFrom: [OperationsEventDefinitionRef]
	isComponentOf: OperationsEventDefinitionRef
	includesPropertiesOf: [OperationsEventDefinitionRef]
	isIncludedIn: OperationsEventDefinitionRef
	operationsEvents: [OperationsEventRef]
}

input AddOperationsEventDefinitionPropertyInput {
	acl: [AccessPermissionRef]
	id: String!
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	operationsEventClassProperty: OperationsEventClassPropertyRef
	parent: OperationsEventDefinitionPropertyRef
	children: [OperationsEventDefinitionPropertyRef]
}

input AddOperationsEventDefinitionRecordSpecificationInput {
	acl: [AccessPermissionRef]
	id: String!
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity: MultiplicityRef
	action: [Action]
	actionMultiplicity: MultiplicityRef
	operationsEventRecords: [OperationsEventRecordRef]
}

input AddOperationsEventDefinitionVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	operationsEventDefinition: OperationsEventDefinitionRef!
	id: String!
	version: String!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versionStatus: VersionState!
	isActiveVersionOf: OperationsEventDefinitionRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	operationsEventClasses: [OperationsEventClassRef]
	hierarchyScope: HierarchyScopeRef
	priority: [String]
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties: [OperationsEventDefinitionPropertyRef]
	recordSpecifications: [OperationsEventDefinitionRecordSpecificationRef]
}

input AddOperationsEventInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String!
	operationsEventDefinition: OperationsEventDefinitionRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	recordTimestamp: DateTime!
	hierarchyScope: HierarchyScopeRef
	priority: String
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties: [OperationsEventPropertyRef]
	records: [OperationsEventRecordRef]
	parent: OperationsEventRef
	children: [OperationsEventRef]
}

input AddOperationsEventPropertyInput {
	acl: [AccessPermissionRef]
	id: String!
	operationsEvent: OperationsEventRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	operationsEventDefinitionProperty: OperationsEventDefinitionPropertyRef
	parent: OperationsEventPropertyRef
	children: [OperationsEventPropertyRef]
}

input AddOperationsEventRecordEntryInput {
	acl: [AccessPermissionRef]
	id: String!
	recordId: String!
	operationsEventRecord: OperationsEventRecordRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	recordTimestamp: DateTime!
	hierarchyScope: HierarchyScopeRef
	data: String
	informationObject: InformationObjectRef
	parent: OperationsEventRecordEntryRef
	children: [OperationsEventRecordEntryRef]
}

input AddOperationsEventRecordInput {
	acl: [AccessPermissionRef]
	id: String!
	operationsEvent: OperationsEventRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	action: Action
	recordTimestamp: DateTime
	hierarchyScope: HierarchyScopeRef
	operationsEventDefinitionRecordSpecification: OperationsEventDefinitionRecordSpecificationRef
	recordEntries: [OperationsEventRecordEntryRef]
	parent: OperationsEventRecordRef
	children: [OperationsEventRecordRef]
}

input AddOperationsMaterialBillInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	useType: MaterialUse
	billOfMaterial: String
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	operationsSegments: [OperationsSegmentRef]
	materialBillItems: [MaterialSpecificationRef]
}

input AddOperationsPerformanceInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	operationsType: WorkType!
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	performanceState: JobState
	publishedDate: DateTime
	operationsResponses: [OperationsResponseRef!]!
	operationsSchedule: OperationsScheduleRef
}

input AddOperationsRequestInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	operationsType: WorkType!
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	priority: String
	hierarchyScope: HierarchyScopeRef
	requestState: ScheduleState!
	notes: String
	operationsSchedule: OperationsScheduleRef!
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	segmentRequirements: [SegmentRequirementRef!]!
	workRequests: [WorkRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
}

input AddOperationsResponseInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	operationsType: WorkType!
	startDateTime: DateTime!
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	responseState: JobState
	operationsPerformance: OperationsPerformanceRef!
	operationsRequest: OperationsRequestRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef!]!
	isActive: Boolean
	properties: [OperationsResponsePropertyRef]
}

input AddOperationsResponsePropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	operationsResponse: OperationsResponseRef!
	children: [OperationsResponsePropertyRef]
	parent: OperationsResponsePropertyRef
}

input AddOperationsScheduleInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	operationsType: WorkType!
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	scheduleState: ScheduleState
	operationsRequests: [OperationsRequestRef!]!
	operationsPerformance: [OperationsPerformanceRef]
}

input AddOperationsSegmentDependencyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	from: OperationsSegmentRef!
	to: OperationsSegmentRef!
	rules: [RuleRef]
}

input AddOperationsSegmentInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	duration: Float
	durationUoM: UnitOfMeasureRef
	operationsType: WorkType
	definitionType: DefinitionType
	billOfMaterial: String
	billOfResources: String
	positionX: Int
	positionY: Int
	operationsDefinitionVersion: OperationsDefinitionVersionRef!
	parent: OperationsSegmentRef
	children: [OperationsSegmentRef]
	processSegment: ProcessSegmentRef
	workMasters: [WorkMasterRef]
	makesUp: OperationsSegmentRef
	isMadeUpOf: [OperationsSegmentRef]
	inflows: [OperationsSegmentDependencyRef]
	outflows: [OperationsSegmentDependencyRef]
	materialsBill: [OperationsMaterialBillRef]
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	rules: [RuleRef]
	segmentRequirements: [SegmentRequirementRef]
	operationsRequests: [OperationsRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
}

input AddParameterSpecificationInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	operationsSegment: OperationsSegmentRef
	children: [ParameterSpecificationRef]
	parent: ParameterSpecificationRef
	segmentParameters: [SegmentParameterRef]
	jobOrderParameter: [JobOrderParameterRef]
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input AddPayloadFieldDefinitionInput {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	name: String!
	expression: String!
}

input AddPersonInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PersonVersionRef]
	activeVersion: PersonVersionRef
	nextVersion: String
	id: String!
	label: String!
	personnelSpecifications: [PersonnelSpecificationRef]
	personnelRequirements: [PersonnelRequirementRef]
	personnelActual: [PersonnelActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
}

input AddPersonPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	personVersion: PersonVersionRef!
	children: [PersonPropertyRef]
	parent: PersonPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
	personnelRequirementProperties: [PersonnelRequirementPropertyRef]
	personnelActualProperties: [PersonnelActualPropertyRef]
}

input AddPersonVersionInput {
	acl: [AccessPermissionRef]
	person: PersonRef!
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	isActiveVersionOf: PersonRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	name: String!
	personnelClasses: [PersonnelClassRef]
	properties: [PersonPropertyRef]
	personnelActual: [PersonnelActualRef]
	stateModels: [StateModelDefinitionRef]
	signaturesMade: [SignatureRef]
	comments: [CommentRef]
}

input AddPersonnelActualInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	personnelUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [PersonnelActualRef]
	parent: PersonnelActualRef
	properties: [PersonnelActualPropertyRef]
	testResults: [TestResultRef]
	personnelClass: [PersonnelClassRef]
	person: [PersonRef]
	personVersion: [PersonVersionRef]
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddPersonnelActualPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	personnelActual: PersonnelActualRef!
	children: [PersonnelActualPropertyRef]
	parent: PersonnelActualPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input AddPersonnelClassInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PersonnelClassVersionRef]
	activeVersion: PersonnelClassVersionRef
	nextVersion: String
	id: String!
	label: String!
	isIncludedIn: [PersonnelClassVersionRef]
	personVersions: [PersonVersionRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	personnelRequirements: [PersonnelRequirementRef]
	personnelActual: [PersonnelActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input AddPersonnelClassPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	propertyType: Isa95PropertyType!
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	personnelClassVersion: PersonnelClassVersionRef!
	children: [PersonnelClassPropertyRef]
	parent: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	personnelRequirementProperties: [PersonnelRequirementPropertyRef]
	personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
	personnelActualProperties: [PersonnelActualPropertyRef]
}

input AddPersonnelClassVersionInput {
	acl: [AccessPermissionRef]
	personnelClass: PersonnelClassRef!
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	isActiveVersionOf: PersonnelClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	properties: [PersonnelClassPropertyRef]
	includesPropertiesOf: [PersonnelClassRef]
	stateModels: [StateModelDefinitionRef]
}

input AddPersonnelRequirementInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	segmentRequirement: SegmentRequirementRef
	children: [PersonnelRequirementRef]
	parent: PersonnelRequirementRef
	properties: [PersonnelRequirementPropertyRef]
	personnelClass: PersonnelClassRef
	person: PersonRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddPersonnelRequirementPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	personnelRequirement: PersonnelRequirementRef!
	children: [PersonnelRequirementPropertyRef]
	parent: PersonnelRequirementPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
}

input AddPersonnelSpecificationInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	personnelUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [PersonnelSpecificationRef]
	parent: PersonnelSpecificationRef
	properties: [PersonnelSpecificationPropertyRef]
	personnelClass: PersonnelClassRef
	person: PersonRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: TestResultRef
}

input AddPersonnelSpecificationPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [PersonnelSpecificationPropertyRef]
	parent: PersonnelSpecificationPropertyRef
	personnelSpecification: PersonnelSpecificationRef!
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
}

input AddPhysicalAssetActualInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	physicalLocation: OperationalLocationRef
	physicalAssetUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [PhysicalAssetActualRef]
	parent: PhysicalAssetActualRef
	properties: [PhysicalAssetActualPropertyRef]
	testResults: [TestResultRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	physicalAssetVersion: PhysicalAssetVersionRef
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddPhysicalAssetActualPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	physicalAssetActual: PhysicalAssetActualRef!
	children: [PhysicalAssetActualPropertyRef]
	parent: PhysicalAssetActualPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input AddPhysicalAssetClassInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PhysicalAssetClassVersionRef]
	activeVersion: PhysicalAssetClassVersionRef
	nextVersion: String
	id: String!
	label: String!
	isIncludedIn: [PhysicalAssetClassVersionRef]
	isMadeUpOf: [PhysicalAssetClassRef]
	isPartOf: [PhysicalAssetClassRef]
	physicalAssetVersions: [PhysicalAssetVersionRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	uiSortIndex: Int
}

input AddPhysicalAssetClassPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	propertyType: Isa95PropertyType!
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef!
	children: [PhysicalAssetClassPropertyRef]
	parent: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input AddPhysicalAssetClassVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	physicalAssetClass: PhysicalAssetClassRef!
	isActiveVersionOf: PhysicalAssetClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	manufacturer: String
	properties: [PhysicalAssetClassPropertyRef]
	includesPropertiesOf: [PhysicalAssetClassRef]
	stateModels: [StateModelDefinitionRef]
}

input AddPhysicalAssetDataSourceInput {
	acl: [AccessPermissionRef]
	physicalAssetVersion: PhysicalAssetVersionRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	topicTemplate: String
	dataSourceVersion: DataSourceVersionRef
}

input AddPhysicalAssetInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PhysicalAssetVersionRef]
	activeVersion: PhysicalAssetVersionRef
	nextVersion: String
	id: String!
	label: String!
	isMadeUpOf: [PhysicalAssetRef]
	isPartOf: [PhysicalAssetRef]
	equipmentAssetMapping: [EquipmentAssetMappingRef]
	equipment: EquipmentRef
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
	uiSortIndex: Int
}

input AddPhysicalAssetPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	physicalAssetVersion: PhysicalAssetVersionRef!
	children: [PhysicalAssetPropertyRef]
	parent: PhysicalAssetPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input AddPhysicalAssetRequirementInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	physicalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentLevel: EquipmentElementLevel
	segmentRequirement: SegmentRequirementRef
	children: [PhysicalAssetRequirementRef]
	parent: PhysicalAssetRequirementRef
	properties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddPhysicalAssetRequirementPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	physicalAssetRequirement: PhysicalAssetRequirementRef!
	children: [PhysicalAssetRequirementPropertyRef]
	parent: PhysicalAssetRequirementPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input AddPhysicalAssetSpecificationInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	physicalLocation: OperationalLocationRef
	physicalAssetUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [PhysicalAssetSpecificationRef]
	parent: PhysicalAssetSpecificationRef
	properties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input AddPhysicalAssetSpecificationPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [PhysicalAssetSpecificationPropertyRef]
	parent: PhysicalAssetSpecificationPropertyRef
	physicalAssetSpecification: PhysicalAssetSpecificationRef!
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input AddPhysicalAssetVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	physicalAsset: PhysicalAssetRef!
	isActiveVersionOf: PhysicalAssetRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	fixedAssetID: String
	vendorID: String
	physicalLocation: OperationalLocationRef
	physicalLocationDescription: String
	physicalAssetClasses: [PhysicalAssetClassRef]
	properties: [PhysicalAssetPropertyRef]
	dataSources: [PhysicalAssetDataSourceRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	stateModels: [StateModelDefinitionRef]
}

input AddProcessSegmentDependencyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	from: ProcessSegmentRef!
	to: ProcessSegmentRef!
	rules: [RuleRef]
}

input AddProcessSegmentInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [ProcessSegmentVersionRef]
	activeVersion: ProcessSegmentVersionRef
	nextVersion: String
	id: String!
	label: String!
	isMadeUpOf: [ProcessSegmentRef]
	isPartOf: ProcessSegmentRef
	workMasters: [WorkMasterRef]
	inflows: [ProcessSegmentDependencyRef]
	outflows: [ProcessSegmentDependencyRef]
	operationsSegments: [OperationsSegmentRef]
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef]
}

input AddProcessSegmentParameterInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	processSegmentVersion: ProcessSegmentVersionRef!
	children: [ProcessSegmentParameterRef]
	parent: ProcessSegmentParameterRef
	segmentParameters: [SegmentParameterRef]
	jobOrderParameter: JobOrderParameterRef
}

input AddProcessSegmentVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	processSegment: ProcessSegmentRef!
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String!
	versionStatus: VersionState!
	isActiveVersionOf: ProcessSegmentRef
	id: String!
	description: String
	operationsType: WorkType!
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	duration: Float
	durationUoM: UnitOfMeasureRef
	processSegmentParameters: [ProcessSegmentParameterRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
}

input AddPropertyMeasurementInput {
	id: String!
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	measurementDate: DateTime
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	expiration: DateTime
	testResult: TestResultRef!
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input AddPropertyNameAliasInput {
	propertyLabel: String!
	expression: String
	equipmentVersion: EquipmentVersionRef!
	dataSource: DataSourceRef
	dataSourceTopic: DataSourceTopicRef
	dataSourceTopicLabel: String
}

input AddPropertyValueAliasInput {
	property: EquipmentClassPropertyRef!
	value: String!
	alias: String!
	system: String!
}

input AddRuleInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	processLocation: ProcessLocation
	triggerExpression: String!
	delayOption: Boolean
	delayTime: Int
	payloadFields: [PayloadFieldDefinitionRef]
	workflowSpecification: WorkflowSpecificationRef!
	triggerProperties: [EquipmentClassPropertyRef]
	operationsSegment: OperationsSegmentRef
	operationsSegmentDependency: OperationsSegmentDependencyRef
	processSegmentDependency: ProcessSegmentDependencyRef
	equipmentClassVersion: EquipmentClassVersionRef
}

input AddSecretInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versions: [SecretVersionRef]
	activeVersion: SecretVersionRef
	nextVersion: String
	id: String!
}

input AddSecretVersionInput {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String!
	versionStatus: VersionState!
	secret: SecretRef!
	isActiveVersionOf: SecretRef
	id: String!
	value: String!
}

input AddSegmentDataInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [SegmentDataRef]
	parent: SegmentDataRef
}

input AddSegmentParameterInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	segmentRequirement: SegmentRequirementRef!
	children: [SegmentParameterRef]
	parent: SegmentParameterRef
	parameterSpecification: ParameterSpecificationRef
	processSegmentParameter: ProcessSegmentParameterRef
	comments: [CommentRef]
}

input AddSegmentRequirementInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	operationsType: WorkType!
	earliestStartDate: DateTime
	latestEndDate: DateTime
	duration: Float
	durationUoM: UnitOfMeasureRef
	hierarchyScope: HierarchyScopeRef
	segmentState: ScheduleState!
	notes: String
	operationsRequest: OperationsRequestRef!
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	processSegment: ProcessSegmentRef
	children: [SegmentRequirementRef]
	parent: SegmentRequirementRef
	workRequests: [WorkRequestRef]
	jobOrders: [JobOrderRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
	parameters: [SegmentParameterRef]
	personnelRequirements: [PersonnelRequirementRef]
	equipmentRequirements: [EquipmentRequirementRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	materialRequirements: [MaterialRequirementRef]
}

input AddSegmentResponseInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	operationsType: WorkType!
	actualStartDateTime: DateTime
	actualEndDateTime: DateTime
	postingDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	segmentState: JobState
	operationsDefinitions: [OperationsDefinitionRef]
	operationsSegments: [OperationsSegmentRef]
	processSegment: ProcessSegmentRef
	operationsRequests: [OperationsRequestRef]
	segmentRequirements: [SegmentRequirementRef]
	workResponses: WorkResponseRef
	jobResponses: JobResponseRef
	children: [SegmentResponseRef]
	parent: SegmentResponseRef
	operationsResponse: OperationsResponseRef!
	segmentData: [SegmentDataRef]
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	materialActual: [MaterialActualRef]
}

input AddSignatureInput {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	timestamp: DateTime
	changeIndication: String!
	signatureReason: SignatureReasonRef!
	personVersion: PersonVersionRef!
	comment: CommentRef
	signatureForAComment: CommentRef
	event: EventRef
	alarmEvent: AlarmEventRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	materialActual: MaterialActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	personnelActual: PersonnelActualRef
	workRequest: WorkRequestRef
	jobOrder: JobOrderRef
	materialRequirement: MaterialRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	personnelRequirement: PersonnelRequirementRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input AddSignatureReasonInput {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	signatures: [SignatureRef]
}

input AddSpatialDefinitionInput {
	recordEntries: [InformationObjectRef]
	id: String!
	label: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	pointValue: PointRef
	polygonValue: PolygonRef
	multiPolygonValue: MultiPolygonRef
	srid: String
	sridAuthority: String
}

input AddStateModelActionInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	actionType: StateModelActionType
	workflowSpecification: WorkflowSpecificationRef
	variables: String
	transition: StateModelTransitionRef
	isEntryActionForState: StateModelStateRef
	isExitActionForState: StateModelStateRef
}

input AddStateModelDefinitionInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	states: [StateModelStateRef]
	transitions: [StateModelTransitionRef]
	events: [StateModelEventRef]
	bpmnXMLEncoded: String!
	equipmentClassVersion: EquipmentClassVersionRef
	equipmentVersion: EquipmentVersionRef
	materialClassVersion: MaterialClassVersionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	personnelClassVersion: PersonnelClassVersionRef
	personVersion: PersonVersionRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	physicalAssetVersion: PhysicalAssetVersionRef
	instances: [StateModelInstanceRef]
	properties: [StateModelPropertyRef]
}

input AddStateModelEventInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	stateModelDefinition: StateModelDefinitionRef!
	transitions: [StateModelTransitionRef]
}

input AddStateModelInstanceInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	label: String!
	stateModelDefinition: StateModelDefinitionRef
	description: String
	hierarchyScope: HierarchyScopeRef
	state: String
	transitions: [StateTransitionInstanceRef]
	equipment: EquipmentRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	person: PersonRef
	physicalAsset: PhysicalAssetRef
}

input AddStateModelPropertyInput {
	acl: [AccessPermissionRef]
	StateModel: StateModelDefinitionRef!
	id: String!
	name: String!
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [StateModelPropertyRef]
	parent: StateModelPropertyRef
}

input AddStateModelStateInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	parent: StateModelStateRef
	children: [StateModelStateRef]
	id: String!
	label: String!
	isInitialState: Boolean
	isFinalState: Boolean
	stateModelDefinition: StateModelDefinitionRef
	inflows: [StateModelTransitionRef]
	outflows: [StateModelTransitionRef]
	onEntry: [StateModelActionRef]
	onExit: [StateModelActionRef]
}

input AddStateModelTransitionInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	label: String!
	stateModelDefinition: StateModelDefinitionRef!
	stateModelEvents: [StateModelEventRef]
	from: StateModelStateRef!
	to: StateModelStateRef!
	condition: String
	stateModelActions: [StateModelActionRef]
}

input AddStateTransitionInstanceInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	stateModelInstance: StateModelInstanceRef!
	timestamp: DateTime
	fromState: String
	toState: String!
}

input AddTestResultInput {
	id: String!
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	hierarchyScope: HierarchyScopeRef
	evaluationDate: DateTime
	evaluationCriterionResult: String
	expiration: DateTime
	parent: TestResultRef
	children: [TestResultRef]
	propertyMeasurements: [PropertyMeasurementRef]
	personnelRequirement: PersonnelRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	materialRequirement: MaterialRequirementRef
	personnelSpecification: PersonnelSpecificationRef
	equipmentSpecification: EquipmentSpecificationRef
	materialSpecification: MaterialSpecificationRef
	personnelClass: PersonnelClassRef
	person: PersonRef
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	materialClass: MaterialClassRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	personnelActual: PersonnelActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	materialActual: MaterialActualRef
}

input AddTestSpecificationCriteriaInput {
	id: String!
	label: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	sequence: Int
	expression: String
	result: String
	testSpecification: TestSpecificationRef!
	evaluatedProperties: [EvaluatedPropertyRef]
}

input AddTestSpecificationInput {
	id: String!
	label: String!
	version: String!
	recordEntries: [InformationObjectRef]
	key: String!
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	testSampleSize: String
	physicalSample: Boolean
	recurrenceQuantity: String
	recurrenceTimeInterval: String
	parent: TestSpecificationRef
	children: [TestSpecificationRef]
	properties: [TestSpecificationPropertyRef]
	criteria: [TestSpecificationCriteriaRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	requiredByPersonnelRequirement: PersonnelRequirementRef
	requiredByEquipmentRequirement: EquipmentRequirementRef
	requiredByPhysicalAssetRequirement: PhysicalAssetRequirementRef
	requiredByMaterialRequirement: MaterialRequirementRef
	requiredByPersonnelSpecification: PersonnelSpecificationRef
	requiredByEquipmentSpecification: EquipmentSpecificationRef
	requiredByMaterialSpecification: MaterialSpecificationRef
	testsPersonnelRequirements: [PersonnelRequirementRef]
	testsEquipmentRequirements: [EquipmentRequirementRef]
	testsPhysicalAssetRequirements: [PhysicalAssetRequirementRef]
	testsMaterialRequirements: [MaterialRequirementRef]
	testsPersonnelSpecifications: [PersonnelSpecificationRef]
	testsEquipmentSpecifications: [EquipmentSpecificationRef]
	testsMaterialSpecifications: [MaterialSpecificationRef]
	requiredByPersonnelClass: PersonnelClassRef
	requiredByPerson: PersonRef
	requiredByEquipmentClass: EquipmentClassRef
	requiredByEquipment: EquipmentRef
	requiredByPhysicalAssetClass: PhysicalAssetClassRef
	requiredByPhysicalAsset: PhysicalAssetRef
	requiredByMaterialClass: MaterialClassRef
	requiredByMaterialDefinition: MaterialDefinitionRef
	requiredByMaterialLot: MaterialLotRef
	requiredByMaterialSubLot: MaterialSubLotRef
	testsPersonnelClass: [PersonnelClassRef]
	testsPerson: [PersonRef]
	testsEquipmentClass: [EquipmentClassRef]
	testsEquipment: [EquipmentRef]
	testsPhysicalAssetClass: [PhysicalAssetClassRef]
	testsPhysicalAsset: [PhysicalAssetRef]
	testsMaterialClass: [MaterialClassRef]
	testsMaterialDefinition: [MaterialDefinitionRef]
	testsMaterialLot: [MaterialLotRef]
	testsMaterialSubLot: [MaterialSubLotRef]
}

input AddTestSpecificationPropertyInput {
	id: String!
	label: String!
	effectiveStart: DateTime!
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	parent: TestSpecificationPropertyRef
	children: [TestSpecificationPropertyRef]
	testSpecification: TestSpecificationRef!
}

input AddUnitOfMeasureConversionInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	fromUnitOfMeasure: UnitOfMeasureRef!
	toUnitOfMeasure: UnitOfMeasureRef!
	numerator: Float!
	denominator: Float!
	materialDefinitionVersion: MaterialDefinitionVersionRef!
}

input AddUnitOfMeasureInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	dataType: DataType
}

input AddWorkCalendarDefinitionEntryInput {
	isActive: Boolean
	description: String
	hierarchyScope: EquipmentRef
	freq: Frequency!
	startDateTime: DateTime!
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType!
	properties: [WorkCalendarDefinitionEntryPropertyRef]
	calendarEntries: [WorkCalendarEntryRef]
	workCalendar: WorkCalendarRef
}

input AddWorkCalendarDefinitionEntryPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	workCalendarDefinitionEntry: WorkCalendarDefinitionEntryRef!
	children: [WorkCalendarDefinitionEntryPropertyRef]
	parent: WorkCalendarDefinitionEntryPropertyRef
}

input AddWorkCalendarEntryInput {
	isActive: Boolean
	description: String
	definition: WorkCalendarDefinitionEntryRef
	hierarchyScope: EquipmentRef
	startDateTime: DateTime!
	finishDateTime: DateTime!
	entryType: WorkCalendarEntryType!
	properties: [WorkCalendarEntryPropertyRef]
	workCalendar: WorkCalendarRef
}

input AddWorkCalendarEntryPropertyInput {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float!
	quantityUoM: UnitOfMeasureRef
	workCalendarEntry: WorkCalendarEntryRef!
	children: [WorkCalendarEntryPropertyRef]
	parent: WorkCalendarEntryPropertyRef
}

input AddWorkCalendarInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	name: String!
	description: String
	definition: [WorkCalendarDefinitionEntryRef]
	entries: [WorkCalendarEntryRef]
	equipmentVersions: [EquipmentVersionRef]
}

input AddWorkDirectiveInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	version: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	workType: WorkType
	duration: Float
	durationUnitOfMeasure: UnitOfMeasureRef
	publishedDate: DateTime
	state: WorkDirectiveState
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	propertyMeasurements: [PropertyMeasurementRef]
	workMaster: WorkMasterRef
	children: [WorkDirectiveRef]
	parent: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddWorkMasterInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	version: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	workType: WorkType
	duration: Float
	durationUnitOfMeasure: UnitOfMeasureRef
	publishedDate: DateTime
	definitionType: DefinitionType!
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	propertyMeasurements: [PropertyMeasurementRef]
	parent: WorkMasterRef
	children: [WorkMasterRef]
	workDirectives: [WorkDirectiveRef]
	jobOrders: [JobOrderRef]
	defines: WorkMasterRef
	definedBy: [WorkMasterRef]
	processSegment: ProcessSegmentRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	workflowSpecification: WorkflowSpecificationRef
	jobResponses: [JobResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddWorkPerformanceInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	workState: JobState
	workResponses: [WorkResponseRef!]!
	children: [WorkPerformanceRef]
	parent: WorkPerformanceRef
	workSchedule: WorkScheduleRef
}

input AddWorkRequestInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	workType: WorkType!
	description: String
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	priority: String
	hierarchyScope: HierarchyScopeRef
	requestState: ScheduleState!
	children: [WorkRequestRef]
	parent: WorkRequestRef
	workSchedule: WorkScheduleRef!
	jobOrders: [JobOrderRef!]!
	operationsRequest: OperationsRequestRef
	segmentRequirement: SegmentRequirementRef
	workResponses: [WorkResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddWorkResponseInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	responseState: JobState
	workPerformance: WorkPerformanceRef!
	children: [WorkResponseRef]
	parent: WorkResponseRef
	workRequest: WorkRequestRef
	jobResponses: [JobResponseRef!]!
	segmentResponse: SegmentResponseRef
	events: [EventRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AddWorkScheduleInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String!
	workType: WorkType
	description: String
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	scheduleState: ScheduleState
	workRequests: [WorkRequestRef]
	children: [WorkScheduleRef]
	parent: WorkScheduleRef
	workPerformances: [WorkPerformanceRef]
}

input AddWorkflowErrorInput {
	id: String!
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	code: String
}

input AddWorkflowMessageInput {
	id: String!
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	enabled: Boolean!
}

input AddWorkflowShapeInput {
	acl: [AccessPermissionRef]
	id: String!
	node: WorkflowSpecificationNodeRef!
	x: String!
	y: String!
	width: String!
	height: String!
	icon: String
}

input AddWorkflowSpecificationConnectionInput {
	acl: [AccessPermissionRef]
	condition: String
	id: String!
	name: String
	waypoints: [WorkflowWaypointRef]
	description: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef!
	connectionType: WorkflowSpecificationConnectionTypeRef!
	properties: [WorkflowSpecificationConnectionPropertyRef]
	to: WorkflowSpecificationNodeRef!
	from: WorkflowSpecificationNodeRef!
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input AddWorkflowSpecificationConnectionPropertyInput {
	acl: [AccessPermissionRef]
	connection: WorkflowSpecificationConnectionRef!
	id: String!
	name: String!
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationConnectionPropertyRef]
	parent: WorkflowSpecificationConnectionPropertyRef
}

input AddWorkflowSpecificationConnectionTypeInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	connections: [WorkflowSpecificationConnectionRef]
	properties: [WorkflowSpecificationConnectionTypePropertyRef]
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input AddWorkflowSpecificationConnectionTypePropertyInput {
	acl: [AccessPermissionRef]
	connectionType: WorkflowSpecificationConnectionTypeRef!
	id: String!
	name: String!
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationConnectionTypePropertyRef]
	parent: WorkflowSpecificationConnectionTypePropertyRef
}

input AddWorkflowSpecificationInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	versions: [WorkflowSpecificationVersionRef]
	activeVersion: WorkflowSpecificationVersionRef
	nextVersion: String
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	id: String!
	includedIn: [WorkflowSpecificationVersionRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	workMasters: [WorkMasterRef]
	workDirectives: [WorkDirectiveRef]
	stateModelActions: [StateModelActionRef]
	rules: [RuleRef]
	calledByNodes: [WorkflowSpecificationNodeRef]
}

input AddWorkflowSpecificationNodeInput {
	acl: [AccessPermissionRef]
	id: String!
	description: String
	hierarchyScope: HierarchyScopeRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef!
	properties: [WorkflowSpecificationNodePropertyRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	outflows: [WorkflowSpecificationConnectionRef]
	inflows: [WorkflowSpecificationConnectionRef]
	containsWorkflowSpecification: WorkflowSpecificationRef
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	form: FormRef
	inputs: [WorkflowSpecificationNodeVariableRef]
	outputs: [WorkflowSpecificationNodeVariableRef]
	message: WorkflowMessageRef
	error: WorkflowErrorRef
	timer: WorkflowTimerRef
	nodeType: WorkflowSpecificationNodeTypeRef!
	role: String
	shape: WorkflowShapeRef
	uiComponent: String
	testCases: [WorkflowSpecificationNodeTestCaseRef]
	boundaryEvents: [WorkflowSpecificationNodeRef]
	attachedTo: WorkflowSpecificationNodeRef
}

input AddWorkflowSpecificationNodePropertyInput {
	acl: [AccessPermissionRef]
	node: WorkflowSpecificationNodeRef!
	id: String!
	name: String!
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationNodePropertyRef]
	parent: WorkflowSpecificationNodePropertyRef
}

input AddWorkflowSpecificationNodeTestCaseInput {
	node: WorkflowSpecificationNodeRef!
	id: String!
	inputJson: String!
	expectedResult: String!
}

input AddWorkflowSpecificationNodeTypeInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String!
	name: String
	description: String
	hierarchyScope: HierarchyScopeRef
	properties: [WorkflowSpecificationNodeTypePropertyRef]
	nodes: [WorkflowSpecificationNodeRef]
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input AddWorkflowSpecificationNodeTypePropertyInput {
	acl: [AccessPermissionRef]
	nodeType: WorkflowSpecificationNodeTypeRef!
	id: String!
	name: String!
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationNodeTypePropertyRef]
	parent: WorkflowSpecificationNodeTypePropertyRef
}

input AddWorkflowSpecificationNodeVariableInput {
	source: String!
	target: String!
}

input AddWorkflowSpecificationPropertyInput {
	acl: [AccessPermissionRef]
	workflowSpecificationVersion: WorkflowSpecificationVersionRef!
	id: String!
	name: String!
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationPropertyRef]
	parent: WorkflowSpecificationPropertyRef
}

input AddWorkflowSpecificationVersionInput {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String!
	version: String!
	workflowSpecification: WorkflowSpecificationRef!
	isActiveVersionOf: WorkflowSpecificationRef
	versionStatus: VersionState!
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	bpmnXMLEncoded: String
	schemaDefinition: String
	isExecutable: Boolean
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	includePropertiesOf: [WorkflowSpecificationRef]
	messages: [WorkflowMessageRef]
	timers: [WorkflowTimerRef]
	errors: [WorkflowErrorRef]
	nodes: [WorkflowSpecificationNodeRef]
	connections: [WorkflowSpecificationConnectionRef]
	properties: [WorkflowSpecificationPropertyRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
}

input AddWorkflowTimerInput {
	id: String!
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	enabled: Boolean
}

input AddWorkflowWaypointInput {
	connection: WorkflowSpecificationConnectionRef!
	x: String!
	y: String!
}

input AlarmEventFilter {
	iid: [ID!]
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	alarmEvent: StringHashFilter
	alarmLimit: StringHashFilter
	alarmType: StringHashFilter
	priority: StringHashFilter
	effectiveDateTime: DateTimeFilter
	recordedDateTime: DateTimeFilter
	has: [AlarmEventHasFilter]
	and: [AlarmEventFilter]
	or: [AlarmEventFilter]
	not: AlarmEventFilter
}

input AlarmEventOrder {
	asc: AlarmEventOrderable
	desc: AlarmEventOrderable
	then: AlarmEventOrder
}

input AlarmEventPatch {
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	alarmEvent: String
	alarmLimit: String
	alarmType: String
	priority: String
	event: EventRef
	effectiveDateTime: DateTime
	recordedDateTime: DateTime
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AlarmEventRef {
	iid: ID
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	alarmEvent: String
	alarmLimit: String
	alarmType: String
	priority: String
	event: EventRef
	effectiveDateTime: DateTime
	recordedDateTime: DateTime
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input AssemblyRelationship_exact {
	eq: AssemblyRelationship
	in: [AssemblyRelationship]
	le: AssemblyRelationship
	lt: AssemblyRelationship
	ge: AssemblyRelationship
	gt: AssemblyRelationship
	between: AssemblyRelationship
}

input AssemblyType_exact {
	eq: AssemblyType
	in: [AssemblyType]
	le: AssemblyType
	lt: AssemblyType
	ge: AssemblyType
	gt: AssemblyType
	between: AssemblyType
}

input CommentFilter {
	iid: [ID!]
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	text: StringExactFilter_StringFullTextFilter
	has: [CommentHasFilter]
	and: [CommentFilter]
	or: [CommentFilter]
	not: CommentFilter
}

input CommentOrder {
	asc: CommentOrderable
	desc: CommentOrderable
	then: CommentOrder
}

input CommentPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	text: String
	timestamp: DateTime
	personVersion: PersonVersionRef
	onSignature: SignatureRef
	signOff: SignatureRef
	event: EventRef
	alarmEvent: AlarmEventRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	materialActual: MaterialActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	personnelActual: PersonnelActualRef
	segmentParameter: SegmentParameterRef
	workRequest: WorkRequestRef
	jobOrder: JobOrderRef
	materialRequirement: MaterialRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	personnelRequirement: PersonnelRequirementRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	child: [CommentRef]
	parent: CommentRef
}

input CommentRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	text: String
	timestamp: DateTime
	personVersion: PersonVersionRef
	onSignature: SignatureRef
	signOff: SignatureRef
	event: EventRef
	alarmEvent: AlarmEventRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	materialActual: MaterialActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	personnelActual: PersonnelActualRef
	segmentParameter: SegmentParameterRef
	workRequest: WorkRequestRef
	jobOrder: JobOrderRef
	materialRequirement: MaterialRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	personnelRequirement: PersonnelRequirementRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	child: [CommentRef]
	parent: CommentRef
}

input DataSourceFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [DataSourceHasFilter]
	and: [DataSourceFilter]
	or: [DataSourceFilter]
	not: DataSourceFilter
}

input DataSourceMethodArgumentFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	dataType: DataType_hash
	has: [DataSourceMethodArgumentHasFilter]
	and: [DataSourceMethodArgumentFilter]
	or: [DataSourceMethodArgumentFilter]
	not: DataSourceMethodArgumentFilter
}

input DataSourceMethodArgumentOrder {
	asc: DataSourceMethodArgumentOrderable
	desc: DataSourceMethodArgumentOrderable
	then: DataSourceMethodArgumentOrder
}

input DataSourceMethodArgumentPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	position: Int
	dataType: DataType
	direction: MethodArgumentDirection
	value: String
	dataSourceMethod: DataSourceMethodRef
}

input DataSourceMethodArgumentRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	position: Int
	dataType: DataType
	direction: MethodArgumentDirection
	value: String
	dataSourceMethod: DataSourceMethodRef
}

input DataSourceMethodFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	method: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [DataSourceMethodHasFilter]
	and: [DataSourceMethodFilter]
	or: [DataSourceMethodFilter]
	not: DataSourceMethodFilter
}

input DataSourceMethodOrder {
	asc: DataSourceMethodOrderable
	desc: DataSourceMethodOrderable
	then: DataSourceMethodOrder
}

input DataSourceMethodPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	method: String
	object: String
	error: String
	statusCode: Int
	dataSourceVersion: DataSourceVersionRef
	arguments: [DataSourceMethodArgumentRef]
}

input DataSourceMethodRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	method: String
	object: String
	error: String
	statusCode: Int
	dataSourceVersion: DataSourceVersionRef
	arguments: [DataSourceMethodArgumentRef]
}

input DataSourceOrder {
	asc: DataSourceOrderable
	desc: DataSourceOrderable
	then: DataSourceOrder
}

input DataSourcePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [DataSourceVersionRef]
	activeVersion: DataSourceVersionRef
	nextVersion: String
	id: String
	label: String
	uiSortIndex: Int
	equipmentDataSources: [EquipmentDataSourceRef]
	propertyNameAliases: [PropertyNameAliasRef]
}

input DataSourceProtocol_exact {
	eq: DataSourceProtocol
	in: [DataSourceProtocol]
	le: DataSourceProtocol
	lt: DataSourceProtocol
	ge: DataSourceProtocol
	gt: DataSourceProtocol
	between: DataSourceProtocol
}

input DataSourceRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [DataSourceVersionRef]
	activeVersion: DataSourceVersionRef
	nextVersion: String
	id: String
	label: String
	uiSortIndex: Int
	equipmentDataSources: [EquipmentDataSourceRef]
	propertyNameAliases: [PropertyNameAliasRef]
}

input DataSourceTopicFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	dataType: DataType_hash
	messageKeyDeterminedBy: MessageKey_hash
	has: [DataSourceTopicHasFilter]
	and: [DataSourceTopicFilter]
	or: [DataSourceTopicFilter]
	not: DataSourceTopicFilter
}

input DataSourceTopicOrder {
	asc: DataSourceTopicOrderable
	desc: DataSourceTopicOrderable
	then: DataSourceTopicOrder
}

input DataSourceTopicPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	label: String
	dataType: DataType
	messageKeyDeterminedBy: MessageKey
	dataSourceVersion: DataSourceVersionRef
	propertyNameAliases: [PropertyNameAliasRef]
}

input DataSourceTopicRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	label: String
	dataType: DataType
	messageKeyDeterminedBy: MessageKey
	dataSourceVersion: DataSourceVersionRef
	propertyNameAliases: [PropertyNameAliasRef]
}

input DataSourceVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	protocol: DataSourceProtocol_exact
	connectionString: StringExactFilter_StringFullTextFilter
	has: [DataSourceVersionHasFilter]
	and: [DataSourceVersionFilter]
	or: [DataSourceVersionFilter]
	not: DataSourceVersionFilter
}

input DataSourceVersionOrder {
	asc: DataSourceVersionOrderable
	desc: DataSourceVersionOrderable
	then: DataSourceVersionOrder
}

input DataSourceVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	dataSource: DataSourceRef
	isActiveVersionOf: DataSourceRef
	id: String
	description: String
	protocol: DataSourceProtocol
	connectionString: String
	username: String
	password: String
	certificate: String
	topics: [DataSourceTopicRef]
	equipmentDataSources: [EquipmentDataSourceRef]
	physicalAssetDataSources: [PhysicalAssetDataSourceRef]
	methods: [DataSourceMethodRef]
}

input DataSourceVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	dataSource: DataSourceRef
	isActiveVersionOf: DataSourceRef
	id: String
	description: String
	protocol: DataSourceProtocol
	connectionString: String
	username: String
	password: String
	certificate: String
	topics: [DataSourceTopicRef]
	equipmentDataSources: [EquipmentDataSourceRef]
	physicalAssetDataSources: [PhysicalAssetDataSourceRef]
	methods: [DataSourceMethodRef]
}

input DataSubscriptionFilter {
	id: [ID!]
	name: StringHashFilter
	has: [DataSubscriptionHasFilter]
	and: [DataSubscriptionFilter]
	or: [DataSubscriptionFilter]
	not: DataSubscriptionFilter
}

input DataSubscriptionOrder {
	asc: DataSubscriptionOrderable
	desc: DataSubscriptionOrderable
	then: DataSubscriptionOrder
}

input DataSubscriptionPatch {
	name: String
	topic: String
	query: String
	split: Boolean
}

input DataSubscriptionRef {
	id: ID
	name: String
	topic: String
	query: String
	split: Boolean
}

input DataType_hash {
	eq: DataType
	in: [DataType]
}

input DefinitionType_hash {
	eq: DefinitionType
	in: [DefinitionType]
}

input DispatchStatus_hash {
	eq: DispatchStatus
	in: [DispatchStatus]
}

input Disposition_exact {
	eq: Disposition
	in: [Disposition]
	le: Disposition
	lt: Disposition
	ge: Disposition
	gt: Disposition
	between: Disposition
}

input EnvironmentalVariableFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [EnvironmentalVariableHasFilter]
	and: [EnvironmentalVariableFilter]
	or: [EnvironmentalVariableFilter]
	not: EnvironmentalVariableFilter
}

input EnvironmentalVariableOrder {
	asc: EnvironmentalVariableOrderable
	desc: EnvironmentalVariableOrderable
	then: EnvironmentalVariableOrder
}

input EnvironmentalVariablePatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versions: [EnvironmentalVariableVersionRef]
	activeVersion: EnvironmentalVariableVersionRef
	nextVersion: String
	id: String
}

input EnvironmentalVariableRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versions: [EnvironmentalVariableVersionRef]
	activeVersion: EnvironmentalVariableVersionRef
	nextVersion: String
	id: String
}

input EnvironmentalVariableVersionFilter {
	iid: [ID!]
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [EnvironmentalVariableVersionHasFilter]
	and: [EnvironmentalVariableVersionFilter]
	or: [EnvironmentalVariableVersionFilter]
	not: EnvironmentalVariableVersionFilter
}

input EnvironmentalVariableVersionOrder {
	asc: EnvironmentalVariableVersionOrderable
	desc: EnvironmentalVariableVersionOrderable
	then: EnvironmentalVariableVersionOrder
}

input EnvironmentalVariableVersionPatch {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	environmentalVariable: EnvironmentalVariableRef
	isActiveVersionOf: EnvironmentalVariableRef
	id: String
	value: String
}

input EnvironmentalVariableVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	environmentalVariable: EnvironmentalVariableRef
	isActiveVersionOf: EnvironmentalVariableRef
	id: String
	value: String
}

input EquipmentActualFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	equipmentUse: StringExactFilter_StringFullTextFilter
	has: [EquipmentActualHasFilter]
	and: [EquipmentActualFilter]
	or: [EquipmentActualFilter]
	not: EquipmentActualFilter
}

input EquipmentActualOrder {
	asc: EquipmentActualOrderable
	desc: EquipmentActualOrderable
	then: EquipmentActualOrder
}

input EquipmentActualPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [EquipmentActualRef]
	parent: EquipmentActualRef
	properties: [EquipmentActualPropertyRef]
	testResults: [TestResultRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	equipmentVersion: EquipmentVersionRef
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input EquipmentActualPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [EquipmentActualPropertyHasFilter]
	and: [EquipmentActualPropertyFilter]
	or: [EquipmentActualPropertyFilter]
	not: EquipmentActualPropertyFilter
}

input EquipmentActualPropertyOrder {
	asc: EquipmentActualPropertyOrderable
	desc: EquipmentActualPropertyOrderable
	then: EquipmentActualPropertyOrder
}

input EquipmentActualPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentActual: EquipmentActualRef
	children: [EquipmentActualPropertyRef]
	parent: EquipmentActualPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input EquipmentActualPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentActual: EquipmentActualRef
	children: [EquipmentActualPropertyRef]
	parent: EquipmentActualPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input EquipmentActualRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [EquipmentActualRef]
	parent: EquipmentActualRef
	properties: [EquipmentActualPropertyRef]
	testResults: [TestResultRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	equipmentVersion: EquipmentVersionRef
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input EquipmentAssetMappingFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [EquipmentAssetMappingHasFilter]
	and: [EquipmentAssetMappingFilter]
	or: [EquipmentAssetMappingFilter]
	not: EquipmentAssetMappingFilter
}

input EquipmentAssetMappingOrder {
	asc: EquipmentAssetMappingOrderable
	desc: EquipmentAssetMappingOrderable
	then: EquipmentAssetMappingOrder
}

input EquipmentAssetMappingPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	startTime: DateTime
	endTime: DateTime
	equipment: EquipmentRef
	physicalAsset: PhysicalAssetRef
}

input EquipmentAssetMappingRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	startTime: DateTime
	endTime: DateTime
	equipment: EquipmentRef
	physicalAsset: PhysicalAssetRef
}

input EquipmentClassFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [EquipmentClassHasFilter]
	and: [EquipmentClassFilter]
	or: [EquipmentClassFilter]
	not: EquipmentClassFilter
}

input EquipmentClassOrder {
	asc: EquipmentClassOrderable
	desc: EquipmentClassOrderable
	then: EquipmentClassOrder
}

input EquipmentClassPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [EquipmentClassVersionRef]
	activeVersion: EquipmentClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [EquipmentClassVersionRef]
	isMadeUpOf: [EquipmentClassRef]
	isPartOf: [EquipmentClassRef]
	equipmentVersions: [EquipmentVersionRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	equipmentRequirements: [EquipmentRequirementRef]
	equipmentActual: [EquipmentActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	uiSortIndex: Int
}

input EquipmentClassPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	bindingType: PropertyBindingType_hash
	has: [EquipmentClassPropertyHasFilter]
	and: [EquipmentClassPropertyFilter]
	or: [EquipmentClassPropertyFilter]
	not: EquipmentClassPropertyFilter
}

input EquipmentClassPropertyOrder {
	asc: EquipmentClassPropertyOrderable
	desc: EquipmentClassPropertyOrderable
	then: EquipmentClassPropertyOrder
}

input EquipmentClassPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	bindingType: PropertyBindingType
	equipmentClassVersion: EquipmentClassVersionRef
	children: [EquipmentClassPropertyRef]
	parent: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
	equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
	equipmentActualProperties: [EquipmentActualPropertyRef]
	triggersRules: [RuleRef]
}

input EquipmentClassPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	bindingType: PropertyBindingType
	equipmentClassVersion: EquipmentClassVersionRef
	children: [EquipmentClassPropertyRef]
	parent: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
	equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
	equipmentActualProperties: [EquipmentActualPropertyRef]
	triggersRules: [RuleRef]
}

input EquipmentClassRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [EquipmentClassVersionRef]
	activeVersion: EquipmentClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [EquipmentClassVersionRef]
	isMadeUpOf: [EquipmentClassRef]
	isPartOf: [EquipmentClassRef]
	equipmentVersions: [EquipmentVersionRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	equipmentRequirements: [EquipmentRequirementRef]
	equipmentActual: [EquipmentActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	uiSortIndex: Int
}

input EquipmentClassVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	displayName: StringHashFilter
	has: [EquipmentClassVersionHasFilter]
	and: [EquipmentClassVersionFilter]
	or: [EquipmentClassVersionFilter]
	not: EquipmentClassVersionFilter
}

input EquipmentClassVersionOrder {
	asc: EquipmentClassVersionOrderable
	desc: EquipmentClassVersionOrderable
	then: EquipmentClassVersionOrder
}

input EquipmentClassVersionPatch {
	acl: [AccessPermissionRef]
	equipmentClass: EquipmentClassRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: EquipmentClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	equipmentLevel: EquipmentElementLevel
	properties: [EquipmentClassPropertyRef]
	rules: [RuleRef]
	includesPropertiesOf: [EquipmentClassRef]
	equipmentVersions: [EquipmentVersionRef]
	stateModels: [StateModelDefinitionRef]
	image: String
	displayName: String
	uiMonochromeIcon: String
	uiMonochromeIconColour: String
}

input EquipmentClassVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	equipmentClass: EquipmentClassRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: EquipmentClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	equipmentLevel: EquipmentElementLevel
	properties: [EquipmentClassPropertyRef]
	rules: [RuleRef]
	includesPropertiesOf: [EquipmentClassRef]
	equipmentVersions: [EquipmentVersionRef]
	stateModels: [StateModelDefinitionRef]
	image: String
	displayName: String
	uiMonochromeIcon: String
	uiMonochromeIconColour: String
}

input EquipmentDataSourceFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	has: [EquipmentDataSourceHasFilter]
	and: [EquipmentDataSourceFilter]
	or: [EquipmentDataSourceFilter]
	not: EquipmentDataSourceFilter
}

input EquipmentDataSourceOrder {
	asc: EquipmentDataSourceOrderable
	desc: EquipmentDataSourceOrderable
	then: EquipmentDataSourceOrder
}

input EquipmentDataSourcePatch {
	acl: [AccessPermissionRef]
	equipmentVersion: EquipmentVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	topicTemplate: String
	dataSourceVersion: DataSourceVersionRef
	dataSource: DataSourceRef
}

input EquipmentDataSourceRef {
	iid: ID
	acl: [AccessPermissionRef]
	equipmentVersion: EquipmentVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	topicTemplate: String
	dataSourceVersion: DataSourceVersionRef
	dataSource: DataSourceRef
}

input EquipmentFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [EquipmentHasFilter]
	and: [EquipmentFilter]
	or: [EquipmentFilter]
	not: EquipmentFilter
}

input EquipmentNameAliasFilter {
	iid: [ID!]
	alias: StringFullTextFilter
	system: StringFullTextFilter
	has: [EquipmentNameAliasHasFilter]
	and: [EquipmentNameAliasFilter]
	or: [EquipmentNameAliasFilter]
	not: EquipmentNameAliasFilter
}

input EquipmentNameAliasOrder {
	asc: EquipmentNameAliasOrderable
	desc: EquipmentNameAliasOrderable
	then: EquipmentNameAliasOrder
}

input EquipmentNameAliasPatch {
	equipment: EquipmentRef
	alias: String
	system: String
}

input EquipmentNameAliasRef {
	iid: ID
	equipment: EquipmentRef
	alias: String
	system: String
}

input EquipmentOrder {
	asc: EquipmentOrderable
	desc: EquipmentOrderable
	then: EquipmentOrder
}

input EquipmentPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [EquipmentVersionRef]
	activeVersion: EquipmentVersionRef
	nextVersion: String
	id: String
	label: String
	isMadeUpOf: [EquipmentRef]
	isPartOf: [EquipmentRef]
	equipmentAssetMapping: [EquipmentAssetMappingRef]
	physicalAsset: PhysicalAssetRef
	equipmentSpecifications: [EquipmentSpecificationRef]
	equipmentRequirements: [EquipmentRequirementRef]
	equipmentActual: [EquipmentActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
	materialSubLots: [MaterialSubLotRef]
	materialLots: [MaterialLotRef]
	uiSortIndex: Int
	events: [EventRef]
}

input EquipmentPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	bindingType: PropertyBindingType_hash
	has: [EquipmentPropertyHasFilter]
	and: [EquipmentPropertyFilter]
	or: [EquipmentPropertyFilter]
	not: EquipmentPropertyFilter
}

input EquipmentPropertyOrder {
	asc: EquipmentPropertyOrderable
	desc: EquipmentPropertyOrderable
	then: EquipmentPropertyOrder
}

input EquipmentPropertyOverrideFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	propertyLabel: StringExactFilter_StringFullTextFilter
	ignore: Boolean
	has: [EquipmentPropertyOverrideHasFilter]
	and: [EquipmentPropertyOverrideFilter]
	or: [EquipmentPropertyOverrideFilter]
	not: EquipmentPropertyOverrideFilter
}

input EquipmentPropertyOverrideOrder {
	asc: EquipmentPropertyOverrideOrderable
	desc: EquipmentPropertyOverrideOrderable
	then: EquipmentPropertyOverrideOrder
}

input EquipmentPropertyOverridePatch {
	acl: [AccessPermissionRef]
	id: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	equipmentVersions: EquipmentVersionRef
	propertyLabel: String
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean
}

input EquipmentPropertyOverrideRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	equipmentVersions: EquipmentVersionRef
	propertyLabel: String
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean
}

input EquipmentPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	bindingType: PropertyBindingType
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	equipmentVersion: EquipmentVersionRef
	children: [EquipmentPropertyRef]
	parent: EquipmentPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
	equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
	equipmentActualProperties: [EquipmentActualPropertyRef]
}

input EquipmentPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	bindingType: PropertyBindingType
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	equipmentVersion: EquipmentVersionRef
	children: [EquipmentPropertyRef]
	parent: EquipmentPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	equipmentSpecificationProperties: [EquipmentSpecificationPropertyRef]
	equipmentRequirementProperties: [EquipmentRequirementPropertyRef]
	equipmentActualProperties: [EquipmentActualPropertyRef]
}

input EquipmentRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [EquipmentVersionRef]
	activeVersion: EquipmentVersionRef
	nextVersion: String
	id: String
	label: String
	isMadeUpOf: [EquipmentRef]
	isPartOf: [EquipmentRef]
	equipmentAssetMapping: [EquipmentAssetMappingRef]
	physicalAsset: PhysicalAssetRef
	equipmentSpecifications: [EquipmentSpecificationRef]
	equipmentRequirements: [EquipmentRequirementRef]
	equipmentActual: [EquipmentActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
	materialSubLots: [MaterialSubLotRef]
	materialLots: [MaterialLotRef]
	uiSortIndex: Int
	events: [EventRef]
}

input EquipmentRequirementFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [EquipmentRequirementHasFilter]
	and: [EquipmentRequirementFilter]
	or: [EquipmentRequirementFilter]
	not: EquipmentRequirementFilter
}

input EquipmentRequirementOrder {
	asc: EquipmentRequirementOrderable
	desc: EquipmentRequirementOrderable
	then: EquipmentRequirementOrder
}

input EquipmentRequirementPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentLevel: EquipmentElementLevel
	segmentRequirement: SegmentRequirementRef
	children: [EquipmentRequirementRef]
	parent: EquipmentRequirementRef
	properties: [EquipmentRequirementPropertyRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input EquipmentRequirementPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [EquipmentRequirementPropertyHasFilter]
	and: [EquipmentRequirementPropertyFilter]
	or: [EquipmentRequirementPropertyFilter]
	not: EquipmentRequirementPropertyFilter
}

input EquipmentRequirementPropertyOrder {
	asc: EquipmentRequirementPropertyOrderable
	desc: EquipmentRequirementPropertyOrderable
	then: EquipmentRequirementPropertyOrder
}

input EquipmentRequirementPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentRequirement: EquipmentRequirementRef
	children: [EquipmentRequirementPropertyRef]
	parent: EquipmentRequirementPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
}

input EquipmentRequirementPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentRequirement: EquipmentRequirementRef
	children: [EquipmentRequirementPropertyRef]
	parent: EquipmentRequirementPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
}

input EquipmentRequirementRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentLevel: EquipmentElementLevel
	segmentRequirement: SegmentRequirementRef
	children: [EquipmentRequirementRef]
	parent: EquipmentRequirementRef
	properties: [EquipmentRequirementPropertyRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input EquipmentSpecificationFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	equipmentUse: StringExactFilter_StringFullTextFilter
	has: [EquipmentSpecificationHasFilter]
	and: [EquipmentSpecificationFilter]
	or: [EquipmentSpecificationFilter]
	not: EquipmentSpecificationFilter
}

input EquipmentSpecificationOrder {
	asc: EquipmentSpecificationOrderable
	desc: EquipmentSpecificationOrderable
	then: EquipmentSpecificationOrder
}

input EquipmentSpecificationPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [EquipmentSpecificationRef]
	parent: EquipmentSpecificationRef
	properties: [EquipmentSpecificationPropertyRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input EquipmentSpecificationPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [EquipmentSpecificationPropertyHasFilter]
	and: [EquipmentSpecificationPropertyFilter]
	or: [EquipmentSpecificationPropertyFilter]
	not: EquipmentSpecificationPropertyFilter
}

input EquipmentSpecificationPropertyOrder {
	asc: EquipmentSpecificationPropertyOrderable
	desc: EquipmentSpecificationPropertyOrderable
	then: EquipmentSpecificationPropertyOrder
}

input EquipmentSpecificationPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [EquipmentSpecificationPropertyRef]
	parent: EquipmentSpecificationPropertyRef
	equipmentSpecification: EquipmentSpecificationRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
}

input EquipmentSpecificationPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [EquipmentSpecificationPropertyRef]
	parent: EquipmentSpecificationPropertyRef
	equipmentSpecification: EquipmentSpecificationRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
}

input EquipmentSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [EquipmentSpecificationRef]
	parent: EquipmentSpecificationRef
	properties: [EquipmentSpecificationPropertyRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input EquipmentVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	displayName: StringHashFilter
	has: [EquipmentVersionHasFilter]
	and: [EquipmentVersionFilter]
	or: [EquipmentVersionFilter]
	not: EquipmentVersionFilter
}

input EquipmentVersionOrder {
	asc: EquipmentVersionOrderable
	desc: EquipmentVersionOrderable
	then: EquipmentVersionOrder
}

input EquipmentVersionPatch {
	acl: [AccessPermissionRef]
	equipment: EquipmentRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: EquipmentRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentLevel: EquipmentElementLevel
	displayName: String
	timeZoneName: String
	equipmentClasses: [EquipmentClassRef]
	equipmentClassVersions: [EquipmentClassVersionRef]
	properties: [EquipmentPropertyRef]
	equipmentActual: [EquipmentActualRef]
	propertyOverrides: [EquipmentPropertyOverrideRef]
	propertyNameAliases: [PropertyNameAliasRef]
	workCalendar: WorkCalendarRef
	dataSources: [EquipmentDataSourceRef]
	stateModels: [StateModelDefinitionRef]
}

input EquipmentVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	equipment: EquipmentRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: EquipmentRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	equipmentLevel: EquipmentElementLevel
	displayName: String
	timeZoneName: String
	equipmentClasses: [EquipmentClassRef]
	equipmentClassVersions: [EquipmentClassVersionRef]
	properties: [EquipmentPropertyRef]
	equipmentActual: [EquipmentActualRef]
	propertyOverrides: [EquipmentPropertyOverrideRef]
	propertyNameAliases: [PropertyNameAliasRef]
	workCalendar: WorkCalendarRef
	dataSources: [EquipmentDataSourceRef]
	stateModels: [StateModelDefinitionRef]
}

input EvaluatedPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	has: [EvaluatedPropertyHasFilter]
	and: [EvaluatedPropertyFilter]
	or: [EvaluatedPropertyFilter]
	not: EvaluatedPropertyFilter
}

input EvaluatedPropertyOrder {
	asc: EvaluatedPropertyOrderable
	desc: EvaluatedPropertyOrderable
	then: EvaluatedPropertyOrder
}

input EvaluatedPropertyPatch {
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testSpecification: TestSpecificationRef
	criteria: [TestSpecificationCriteriaRef]
	personnelClassProperty: [PersonnelClassPropertyRef]
	personProperty: [PersonPropertyRef]
	equipmentClassProperty: [EquipmentClassPropertyRef]
	equipmentProperty: [EquipmentPropertyRef]
	physicalAssetClassProperty: [PhysicalAssetClassPropertyRef]
	physicalAssetProperty: [PhysicalAssetPropertyRef]
	materialClassProperty: [MaterialClassPropertyRef]
	materialDefinitionProperty: [MaterialDefinitionPropertyRef]
	materialLotProperty: [MaterialLotPropertyRef]
}

input EvaluatedPropertyRef {
	iid: ID
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testSpecification: TestSpecificationRef
	criteria: [TestSpecificationCriteriaRef]
	personnelClassProperty: [PersonnelClassPropertyRef]
	personProperty: [PersonPropertyRef]
	equipmentClassProperty: [EquipmentClassPropertyRef]
	equipmentProperty: [EquipmentPropertyRef]
	physicalAssetClassProperty: [PhysicalAssetClassPropertyRef]
	physicalAssetProperty: [PhysicalAssetPropertyRef]
	materialClassProperty: [MaterialClassPropertyRef]
	materialDefinitionProperty: [MaterialDefinitionPropertyRef]
	materialLotProperty: [MaterialLotPropertyRef]
}

input EventAssociationFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [EventAssociationHasFilter]
	and: [EventAssociationFilter]
	or: [EventAssociationFilter]
	not: EventAssociationFilter
}

input EventAssociationOrder {
	asc: EventAssociationOrderable
	desc: EventAssociationOrderable
	then: EventAssociationOrder
}

input EventAssociationPatch {
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	description: String
	from: EventRef
	to: EventRef
}

input EventAssociationRef {
	iid: ID
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	description: String
	from: EventRef
	to: EventRef
}

input EventFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	messageText: StringHashFilter
	personID: StringHashFilter
	computerID: StringHashFilter
	proceduralElementReference: StringHashFilter
	category: StringHashFilter
	effectiveDateTime: DateTimeFilter
	recordedDateTime: DateTimeFilter
	attribute: StringHashFilter
	has: [EventHasFilter]
	and: [EventFilter]
	or: [EventFilter]
	not: EventFilter
}

input EventOrder {
	asc: EventOrderable
	desc: EventOrderable
	then: EventOrder
}

input EventPatch {
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	value: String
	previousValue: String
	messageText: String
	personID: String
	computerID: String
	proceduralElementReference: String
	category: String
	effectiveDateTime: DateTime
	recordedDateTime: DateTime
	attribute: String
	eventProperties: [EventPropertyRef]
	eventType: EventTypeRef
	equipment: EquipmentRef
	person: PersonRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	physicalAsset: PhysicalAssetRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	alarmEvents: [AlarmEventRef]
	eventAssociationsFrom: [EventAssociationRef]
	eventAssociationsTo: [EventAssociationRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input EventPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	value: StringExactFilter_StringFullTextFilter
	has: [EventPropertyHasFilter]
	and: [EventPropertyFilter]
	or: [EventPropertyFilter]
	not: EventPropertyFilter
}

input EventPropertyOrder {
	asc: EventPropertyOrderable
	desc: EventPropertyOrderable
	then: EventPropertyOrder
}

input EventPropertyPatch {
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	description: String
	label: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	parent: EventPropertyRef
	children: [EventPropertyRef]
	event: EventRef
}

input EventPropertyRef {
	iid: ID
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	description: String
	label: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	parent: EventPropertyRef
	children: [EventPropertyRef]
	event: EventRef
}

input EventRef {
	iid: ID
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	value: String
	previousValue: String
	messageText: String
	personID: String
	computerID: String
	proceduralElementReference: String
	category: String
	effectiveDateTime: DateTime
	recordedDateTime: DateTime
	attribute: String
	eventProperties: [EventPropertyRef]
	eventType: EventTypeRef
	equipment: EquipmentRef
	person: PersonRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	physicalAsset: PhysicalAssetRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	alarmEvents: [AlarmEventRef]
	eventAssociationsFrom: [EventAssociationRef]
	eventAssociationsTo: [EventAssociationRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input EventSubtypeFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [EventSubtypeHasFilter]
	and: [EventSubtypeFilter]
	or: [EventSubtypeFilter]
	not: EventSubtypeFilter
}

input EventSubtypeOrder {
	asc: EventSubtypeOrderable
	desc: EventSubtypeOrderable
	then: EventSubtypeOrder
}

input EventSubtypePatch {
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	label: String
	eventTypes: [EventTypeRef!]
	parent: EventSubtypeRef
	children: [EventSubtypeRef]
}

input EventSubtypeRef {
	iid: ID
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	label: String
	eventTypes: [EventTypeRef!]
	parent: EventSubtypeRef
	children: [EventSubtypeRef]
}

input EventTypeFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [EventTypeHasFilter]
	and: [EventTypeFilter]
	or: [EventTypeFilter]
	not: EventTypeFilter
}

input EventTypeOrder {
	asc: EventTypeOrderable
	desc: EventTypeOrderable
	then: EventTypeOrder
}

input EventTypePatch {
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	label: String
	events: [EventRef]
	parent: EventTypeRef
	children: [EventTypeRef]
	eventSubtypes: [EventSubtypeRef]
}

input EventTypeRef {
	iid: ID
	id: String
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	label: String
	events: [EventRef]
	parent: EventTypeRef
	children: [EventTypeRef]
	eventSubtypes: [EventSubtypeRef]
}

input FormFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	has: [FormHasFilter]
	and: [FormFilter]
	or: [FormFilter]
	not: FormFilter
}

input FormOrder {
	asc: FormOrderable
	desc: FormOrderable
	then: FormOrder
}

input FormPatch {
	id: String
	name: String
	workflowSpecificationNodes: [WorkflowSpecificationNodeRef]
	jsonSchema: String
	uiSchema: String
}

input FormRef {
	iid: ID
	id: String
	name: String
	workflowSpecificationNodes: [WorkflowSpecificationNodeRef]
	jsonSchema: String
	uiSchema: String
}

input HierarchyScopeFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [HierarchyScopeHasFilter]
	and: [HierarchyScopeFilter]
	or: [HierarchyScopeFilter]
	not: HierarchyScopeFilter
}

input HierarchyScopeOrder {
	asc: HierarchyScopeOrderable
	desc: HierarchyScopeOrderable
	then: HierarchyScopeOrder
}

input HierarchyScopePatch {
	recordEntries: [InformationObjectRef]
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	equipmentLevel: EquipmentElementLevel
	children: [HierarchyScopeRef]
	parent: HierarchyScopeRef
	equipmentVersions: [EquipmentVersionRef]
	materialClassVersions: [MaterialClassVersionRef]
	materialDefinitionVersions: [MaterialDefinitionVersionRef]
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
}

input HierarchyScopeRef {
	iid: ID
	recordEntries: [InformationObjectRef]
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	equipmentLevel: EquipmentElementLevel
	children: [HierarchyScopeRef]
	parent: HierarchyScopeRef
	equipmentVersions: [EquipmentVersionRef]
	materialClassVersions: [MaterialClassVersionRef]
	materialDefinitionVersions: [MaterialDefinitionVersionRef]
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
}

input InformationObjectFilter {
	iid: [ID!]
	has: [InformationObjectHasFilter]
	and: [InformationObjectFilter]
	or: [InformationObjectFilter]
	not: InformationObjectFilter
}

input InformationObjectOrder {
	asc: InformationObjectOrderable
	desc: InformationObjectOrderable
	then: InformationObjectOrder
}

input InformationObjectPatch {
	operationsEventRecordEntry: OperationsEventRecordEntryRef
	comment: CommentRef
	event: EventRef
	dataSource: DataSourceRef
	dataSourceVersion: DataSourceVersionRef
	hierarchyScope: HierarchyScopeRef
	unitOfMeasure: UnitOfMeasureRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	operationalLocationVersion: OperationalLocationVersionRef
	operationalLocationClass: OperationalLocationClassRef
	operationalLocationClassVersion: OperationalLocationClassVersionRef
	personnelClass: PersonnelClassRef
	personnelClassVersion: PersonnelClassVersionRef
	person: PersonRef
	personVersion: PersonVersionRef
	equipmentClass: EquipmentClassRef
	equipmentClassVersion: EquipmentClassVersionRef
	equipment: EquipmentRef
	equipmentVersion: EquipmentVersionRef
	physicalAssetClass: PhysicalAssetClassRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	physicalAsset: PhysicalAssetRef
	physicalAssetVersion: PhysicalAssetVersionRef
	materialClass: MaterialClassRef
	materialClassVersion: MaterialClassVersionRef
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	processSegment: ProcessSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	testSpecification: TestSpecificationRef
	testResult: TestResultRef
	propertyMeasurement: PropertyMeasurementRef
	operationsEventClass: OperationsEventClassRef
	operationsEventClassVersion: OperationsEventClassVersionRef
	operationsEventDefinition: OperationsEventDefinitionRef
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
	operationsEvent: OperationsEventRef
	operationsDefinition: OperationsDefinitionRef
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	operationsSegment: OperationsSegmentRef
	operationsSchedule: OperationsScheduleRef
	operationsRequest: OperationsRequestRef
	operationsPerformance: OperationsPerformanceRef
	operationsResponse: OperationsResponseRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNodeType: WorkflowSpecificationNodeTypeRef
	workflowSpecificationConnectionType: WorkflowSpecificationConnectionTypeRef
	workSchedule: WorkScheduleRef
	workRequest: WorkRequestRef
	jobList: JobListRef
	jobOrder: JobOrderRef
	workPerformance: WorkPerformanceRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseList: JobResponseListRef
	workCalendar: WorkCalendarRef
	Other: String
}

input InformationObjectRef {
	iid: ID
	operationsEventRecordEntry: OperationsEventRecordEntryRef
	comment: CommentRef
	event: EventRef
	dataSource: DataSourceRef
	dataSourceVersion: DataSourceVersionRef
	hierarchyScope: HierarchyScopeRef
	unitOfMeasure: UnitOfMeasureRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	operationalLocationVersion: OperationalLocationVersionRef
	operationalLocationClass: OperationalLocationClassRef
	operationalLocationClassVersion: OperationalLocationClassVersionRef
	personnelClass: PersonnelClassRef
	personnelClassVersion: PersonnelClassVersionRef
	person: PersonRef
	personVersion: PersonVersionRef
	equipmentClass: EquipmentClassRef
	equipmentClassVersion: EquipmentClassVersionRef
	equipment: EquipmentRef
	equipmentVersion: EquipmentVersionRef
	physicalAssetClass: PhysicalAssetClassRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	physicalAsset: PhysicalAssetRef
	physicalAssetVersion: PhysicalAssetVersionRef
	materialClass: MaterialClassRef
	materialClassVersion: MaterialClassVersionRef
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	processSegment: ProcessSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	testSpecification: TestSpecificationRef
	testResult: TestResultRef
	propertyMeasurement: PropertyMeasurementRef
	operationsEventClass: OperationsEventClassRef
	operationsEventClassVersion: OperationsEventClassVersionRef
	operationsEventDefinition: OperationsEventDefinitionRef
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
	operationsEvent: OperationsEventRef
	operationsDefinition: OperationsDefinitionRef
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	operationsSegment: OperationsSegmentRef
	operationsSchedule: OperationsScheduleRef
	operationsRequest: OperationsRequestRef
	operationsPerformance: OperationsPerformanceRef
	operationsResponse: OperationsResponseRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNodeType: WorkflowSpecificationNodeTypeRef
	workflowSpecificationConnectionType: WorkflowSpecificationConnectionTypeRef
	workSchedule: WorkScheduleRef
	workRequest: WorkRequestRef
	jobList: JobListRef
	jobOrder: JobOrderRef
	workPerformance: WorkPerformanceRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseList: JobResponseListRef
	workCalendar: WorkCalendarRef
	Other: String
}

input JobListFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	workType: WorkType_hash
	description: StringExactFilter_StringFullTextFilter
	plannedStartDateTime: DateTimeFilter
	plannedEndDateTime: DateTimeFilter
	publishedDate: DateTimeFilter
	has: [JobListHasFilter]
	and: [JobListFilter]
	or: [JobListFilter]
	not: JobListFilter
}

input JobListOrder {
	asc: JobListOrderable
	desc: JobListOrderable
	then: JobListOrder
}

input JobListPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	workType: WorkType
	description: String
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	jobOrders: [JobOrderRef!]
}

input JobListRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	workType: WorkType
	description: String
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	jobOrders: [JobOrderRef!]
}

input JobOrderFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	publishedDate: DateTimeFilter
	workType: WorkType_hash
	scheduledStartDateTime: DateTimeFilter
	scheduledEndDateTime: DateTimeFilter
	command: StringExactFilter_StringFullTextFilter
	dispatchStatus: DispatchStatus_hash
	commandRule: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [JobOrderHasFilter]
	and: [JobOrderFilter]
	or: [JobOrderFilter]
	not: JobOrderFilter
}

input JobOrderOrder {
	asc: JobOrderOrderable
	desc: JobOrderOrderable
	then: JobOrderOrder
}

input JobOrderParameterFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter
	has: [JobOrderParameterHasFilter]
	and: [JobOrderParameterFilter]
	or: [JobOrderParameterFilter]
	not: JobOrderParameterFilter
}

input JobOrderParameterOrder {
	asc: JobOrderParameterOrderable
	desc: JobOrderParameterOrderable
	then: JobOrderParameterOrder
}

input JobOrderParameterPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	label: String
	jobOrder: JobOrderRef
	children: [JobOrderParameterRef]
	parent: JobOrderParameterRef
	parameterSpecification: ParameterSpecificationRef
	processSegmentParameter: ProcessSegmentParameterRef
}

input JobOrderParameterRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	label: String
	jobOrder: JobOrderRef
	children: [JobOrderParameterRef]
	parent: JobOrderParameterRef
	parameterSpecification: ParameterSpecificationRef
	processSegmentParameter: ProcessSegmentParameterRef
}

input JobOrderPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	publishedDate: DateTime
	workType: WorkType
	scheduledStartDateTime: DateTime
	scheduledEndDateTime: DateTime
	priority: Int
	hierarchyScope: HierarchyScopeRef
	command: String
	dispatchStatus: DispatchStatus
	commandRule: String
	label: String
	workRequest: WorkRequestRef
	jobList: JobListRef
	workMaster: WorkMasterRef
	jobResponses: [JobResponseRef]
	segmentRequirement: SegmentRequirementRef
	parameters: [JobOrderParameterRef]
	personnelRequirements: [PersonnelRequirementRef]
	equipmentRequirements: [EquipmentRequirementRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	materialRequirements: [MaterialRequirementRef]
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNode: WorkflowSpecificationNodeRef
	workDirective: WorkDirectiveRef
	previous: [JobOrderRef]
	next: [JobOrderRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input JobOrderRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	publishedDate: DateTime
	workType: WorkType
	scheduledStartDateTime: DateTime
	scheduledEndDateTime: DateTime
	priority: Int
	hierarchyScope: HierarchyScopeRef
	command: String
	dispatchStatus: DispatchStatus
	commandRule: String
	label: String
	workRequest: WorkRequestRef
	jobList: JobListRef
	workMaster: WorkMasterRef
	jobResponses: [JobResponseRef]
	segmentRequirement: SegmentRequirementRef
	parameters: [JobOrderParameterRef]
	personnelRequirements: [PersonnelRequirementRef]
	equipmentRequirements: [EquipmentRequirementRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	materialRequirements: [MaterialRequirementRef]
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNode: WorkflowSpecificationNodeRef
	workDirective: WorkDirectiveRef
	previous: [JobOrderRef]
	next: [JobOrderRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input JobResponseDataFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [JobResponseDataHasFilter]
	and: [JobResponseDataFilter]
	or: [JobResponseDataFilter]
	not: JobResponseDataFilter
}

input JobResponseDataOrder {
	asc: JobResponseDataOrderable
	desc: JobResponseDataOrderable
	then: JobResponseDataOrder
}

input JobResponseDataPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	label: String
	jobResponse: JobResponseRef
	children: [JobResponseDataRef]
	parent: JobResponseDataRef
	events: [EventRef]
	comments: [CommentRef]
	signatures: [SignatureRef]
}

input JobResponseDataRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	label: String
	jobResponse: JobResponseRef
	children: [JobResponseDataRef]
	parent: JobResponseDataRef
	events: [EventRef]
	comments: [CommentRef]
	signatures: [SignatureRef]
}

input JobResponseFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	publishedDate: DateTimeFilter
	workType: WorkType_hash
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	dataJSON: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	productionDate: StringExactFilter_StringFullTextFilter
	has: [JobResponseHasFilter]
	and: [JobResponseFilter]
	or: [JobResponseFilter]
	not: JobResponseFilter
}

input JobResponseListFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	version: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	workType: WorkType_hash
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	has: [JobResponseListHasFilter]
	and: [JobResponseListFilter]
	or: [JobResponseListFilter]
	not: JobResponseListFilter
}

input JobResponseListOrder {
	asc: JobResponseListOrderable
	desc: JobResponseListOrderable
	then: JobResponseListOrder
}

input JobResponseListPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	version: String
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	jobResponses: [JobResponseRef!]
}

input JobResponseListRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	version: String
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	jobResponses: [JobResponseRef!]
}

input JobResponseOrder {
	asc: JobResponseOrderable
	desc: JobResponseOrderable
	then: JobResponseOrder
}

input JobResponsePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	publishedDate: DateTime
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	jobState: JobState
	dataJSON: String
	productionDate: String
	workResponse: WorkResponseRef
	segmentResponse: SegmentResponseRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNode: WorkflowSpecificationNodeRef
	jobOrder: JobOrderRef
	jobResponseList: JobResponseListRef
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	materialActual: [MaterialActualRef]
	data: [JobResponseDataRef]
	children: [JobResponseRef]
	parent: JobResponseRef
	events: [EventRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input JobResponseRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	publishedDate: DateTime
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	jobState: JobState
	dataJSON: String
	productionDate: String
	workResponse: WorkResponseRef
	segmentResponse: SegmentResponseRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	workflowSpecificationNode: WorkflowSpecificationNodeRef
	jobOrder: JobOrderRef
	jobResponseList: JobResponseListRef
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	materialActual: [MaterialActualRef]
	data: [JobResponseDataRef]
	children: [JobResponseRef]
	parent: JobResponseRef
	events: [EventRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input JobState_hash {
	eq: JobState
	in: [JobState]
}

input LibreServiceFilter {
	id: [ID!]
	name: StringHashFilter
	has: [LibreServiceHasFilter]
	and: [LibreServiceFilter]
	or: [LibreServiceFilter]
	not: LibreServiceFilter
}

input LibreServiceOrder {
	asc: LibreServiceOrderable
	desc: LibreServiceOrderable
	then: LibreServiceOrder
}

input LibreServicePatch {
	name: String
	heartbeat: DateTime
}

input LibreServiceRef {
	id: ID
	name: String
	heartbeat: DateTime
}

input MaterialActualFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	materialUse: MaterialUse_hash
	assemblyType: AssemblyType_exact
	assemblyRelationship: AssemblyRelationship_exact
	has: [MaterialActualHasFilter]
	and: [MaterialActualFilter]
	or: [MaterialActualFilter]
	not: MaterialActualFilter
}

input MaterialActualOrder {
	asc: MaterialActualOrderable
	desc: MaterialActualOrderable
	then: MaterialActualOrder
}

input MaterialActualPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	segmentResponse: SegmentResponseRef
	children: [MaterialActualRef]
	parent: MaterialActualRef
	properties: [MaterialActualPropertyRef]
	testResults: [TestResultRef]
	materialClass: MaterialClassRef
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	materialLot: [MaterialLotRef]
	materialSubLot: [MaterialSubLotRef]
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input MaterialActualPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [MaterialActualPropertyHasFilter]
	and: [MaterialActualPropertyFilter]
	or: [MaterialActualPropertyFilter]
	not: MaterialActualPropertyFilter
}

input MaterialActualPropertyOrder {
	asc: MaterialActualPropertyOrderable
	desc: MaterialActualPropertyOrderable
	then: MaterialActualPropertyOrder
}

input MaterialActualPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	materialActual: MaterialActualRef
	children: [MaterialActualPropertyRef]
	parent: MaterialActualPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input MaterialActualPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	materialActual: MaterialActualRef
	children: [MaterialActualPropertyRef]
	parent: MaterialActualPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input MaterialActualRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	segmentResponse: SegmentResponseRef
	children: [MaterialActualRef]
	parent: MaterialActualRef
	properties: [MaterialActualPropertyRef]
	testResults: [TestResultRef]
	materialClass: MaterialClassRef
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	materialLot: [MaterialLotRef]
	materialSubLot: [MaterialSubLotRef]
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input MaterialAlternateFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	has: [MaterialAlternateHasFilter]
	and: [MaterialAlternateFilter]
	or: [MaterialAlternateFilter]
	not: MaterialAlternateFilter
}

input MaterialAlternateOrder {
	asc: MaterialAlternateOrderable
	desc: MaterialAlternateOrderable
	then: MaterialAlternateOrder
}

input MaterialAlternatePatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	effectiveDateTime: DateTime
	priorityOrder: Int
	materialDefinitionVersion: MaterialDefinitionVersionRef
	alternateMaterial: MaterialDefinitionRef
}

input MaterialAlternateRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	effectiveDateTime: DateTime
	priorityOrder: Int
	materialDefinitionVersion: MaterialDefinitionVersionRef
	alternateMaterial: MaterialDefinitionRef
}

input MaterialClassFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [MaterialClassHasFilter]
	and: [MaterialClassFilter]
	or: [MaterialClassFilter]
	not: MaterialClassFilter
}

input MaterialClassOrder {
	asc: MaterialClassOrderable
	desc: MaterialClassOrderable
	then: MaterialClassOrder
}

input MaterialClassPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [MaterialClassVersionRef]
	activeVersion: MaterialClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [MaterialClassVersionRef]
	isAssembledFrom: [MaterialClassRef]
	isComponentOf: MaterialClassRef
	materialDefinitionVersions: [MaterialDefinitionVersionRef]
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input MaterialClassPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [MaterialClassPropertyHasFilter]
	and: [MaterialClassPropertyFilter]
	or: [MaterialClassPropertyFilter]
	not: MaterialClassPropertyFilter
}

input MaterialClassPropertyOrder {
	asc: MaterialClassPropertyOrderable
	desc: MaterialClassPropertyOrderable
	then: MaterialClassPropertyOrder
}

input MaterialClassPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	materialClassVersion: MaterialClassVersionRef
	children: [MaterialClassPropertyRef]
	parent: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialClassPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	materialClassVersion: MaterialClassVersionRef
	children: [MaterialClassPropertyRef]
	parent: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialClassRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [MaterialClassVersionRef]
	activeVersion: MaterialClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [MaterialClassVersionRef]
	isAssembledFrom: [MaterialClassRef]
	isComponentOf: MaterialClassRef
	materialDefinitionVersions: [MaterialDefinitionVersionRef]
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input MaterialClassVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	assemblyType: AssemblyType_exact
	assemblyRelationship: AssemblyRelationship_exact
	has: [MaterialClassVersionHasFilter]
	and: [MaterialClassVersionFilter]
	or: [MaterialClassVersionFilter]
	not: MaterialClassVersionFilter
}

input MaterialClassVersionOrder {
	asc: MaterialClassVersionOrderable
	desc: MaterialClassVersionOrderable
	then: MaterialClassVersionOrder
}

input MaterialClassVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	materialClass: MaterialClassRef
	isActiveVersionOf: MaterialClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	properties: [MaterialClassPropertyRef]
	includesPropertiesOf: [MaterialClassRef]
	stateModels: [StateModelDefinitionRef]
}

input MaterialClassVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	materialClass: MaterialClassRef
	isActiveVersionOf: MaterialClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	properties: [MaterialClassPropertyRef]
	includesPropertiesOf: [MaterialClassRef]
	stateModels: [StateModelDefinitionRef]
}

input MaterialDefinitionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [MaterialDefinitionHasFilter]
	and: [MaterialDefinitionFilter]
	or: [MaterialDefinitionFilter]
	not: MaterialDefinitionFilter
}

input MaterialDefinitionOrder {
	asc: MaterialDefinitionOrderable
	desc: MaterialDefinitionOrderable
	then: MaterialDefinitionOrder
}

input MaterialDefinitionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [MaterialDefinitionVersionRef]
	activeVersion: MaterialDefinitionVersionRef
	nextVersion: String
	id: String
	label: String
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
	isAlternateFor: [MaterialAlternateRef]
	materialLots: [MaterialLotRef]
}

input MaterialDefinitionPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [MaterialDefinitionPropertyHasFilter]
	and: [MaterialDefinitionPropertyFilter]
	or: [MaterialDefinitionPropertyFilter]
	not: MaterialDefinitionPropertyFilter
}

input MaterialDefinitionPropertyOrder {
	asc: MaterialDefinitionPropertyOrderable
	desc: MaterialDefinitionPropertyOrderable
	then: MaterialDefinitionPropertyOrder
}

input MaterialDefinitionPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	materialDefinitionVersion: MaterialDefinitionVersionRef
	children: [MaterialDefinitionPropertyRef]
	parent: MaterialDefinitionPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialLotProperty: MaterialLotPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialDefinitionPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	materialDefinitionVersion: MaterialDefinitionVersionRef
	children: [MaterialDefinitionPropertyRef]
	parent: MaterialDefinitionPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialLotProperty: MaterialLotPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialDefinitionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [MaterialDefinitionVersionRef]
	activeVersion: MaterialDefinitionVersionRef
	nextVersion: String
	id: String
	label: String
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
	isAlternateFor: [MaterialAlternateRef]
	materialLots: [MaterialLotRef]
}

input MaterialDefinitionVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	assemblyType: AssemblyType_exact
	assemblyRelationship: AssemblyRelationship_exact
	has: [MaterialDefinitionVersionHasFilter]
	and: [MaterialDefinitionVersionFilter]
	or: [MaterialDefinitionVersionFilter]
	not: MaterialDefinitionVersionFilter
}

input MaterialDefinitionVersionOrder {
	asc: MaterialDefinitionVersionOrderable
	desc: MaterialDefinitionVersionOrderable
	then: MaterialDefinitionVersionOrder
}

input MaterialDefinitionVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	materialDefinition: MaterialDefinitionRef
	isActiveVersionOf: MaterialDefinitionRef
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	baseUnitOfMeasure: UnitOfMeasureRef
	materialClasses: [MaterialClassRef]
	properties: [MaterialDefinitionPropertyRef]
	materialActual: [MaterialActualRef]
	alternates: [MaterialAlternateRef]
	isAssembledFrom: [MaterialDefinitionVersionRef]
	isComponentOf: MaterialDefinitionVersionRef
	uomConversions: [UnitOfMeasureConversionRef]
	materialLots: [MaterialLotRef]
	stateModels: [StateModelDefinitionRef]
}

input MaterialDefinitionVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	materialDefinition: MaterialDefinitionRef
	isActiveVersionOf: MaterialDefinitionRef
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	baseUnitOfMeasure: UnitOfMeasureRef
	materialClasses: [MaterialClassRef]
	properties: [MaterialDefinitionPropertyRef]
	materialActual: [MaterialActualRef]
	alternates: [MaterialAlternateRef]
	isAssembledFrom: [MaterialDefinitionVersionRef]
	isComponentOf: MaterialDefinitionVersionRef
	uomConversions: [UnitOfMeasureConversionRef]
	materialLots: [MaterialLotRef]
	stateModels: [StateModelDefinitionRef]
}

input MaterialLotFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	storageLocationDescription: StringExactFilter_StringFullTextFilter
	assemblyType: AssemblyType_exact
	assemblyRelationship: AssemblyRelationship_exact
	status: StringExactFilter_StringFullTextFilter
	disposition: Disposition_exact
	has: [MaterialLotHasFilter]
	and: [MaterialLotFilter]
	or: [MaterialLotFilter]
	not: MaterialLotFilter
}

input MaterialLotOrder {
	asc: MaterialLotOrderable
	desc: MaterialLotOrderable
	then: MaterialLotOrder
}

input MaterialLotPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocationOperationalLocation: OperationalLocationRef
	storageLocationEquipment: EquipmentRef
	storageLocationPhysicalAsset: PhysicalAssetRef
	storageLocationDescription: String
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	status: String
	disposition: Disposition
	quantity: Float
	quantityUnitOfMeasure: UnitOfMeasureRef
	isAssembledFromMaterialLot: [MaterialLotRef]
	isComponentOfMaterialLot: MaterialLotRef
	properties: [MaterialLotPropertyRef]
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	childSubLot: [MaterialSubLotRef]
	isAssembledFromMaterialSubLot: [MaterialSubLotRef]
	isComponentOfMaterialSubLot: MaterialSubLotRef
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	events: [EventRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
}

input MaterialLotPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [MaterialLotPropertyHasFilter]
	and: [MaterialLotPropertyFilter]
	or: [MaterialLotPropertyFilter]
	not: MaterialLotPropertyFilter
}

input MaterialLotPropertyOrder {
	asc: MaterialLotPropertyOrderable
	desc: MaterialLotPropertyOrderable
	then: MaterialLotPropertyOrder
}

input MaterialLotPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	children: [MaterialLotPropertyRef]
	parent: MaterialLotPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialLotPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	children: [MaterialLotPropertyRef]
	parent: MaterialLotPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	materialSpecificationProperties: [MaterialSpecificationPropertyRef]
	materialRequirementProperties: [MaterialRequirementPropertyRef]
	materialActualProperties: [MaterialActualPropertyRef]
}

input MaterialLotRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocationOperationalLocation: OperationalLocationRef
	storageLocationEquipment: EquipmentRef
	storageLocationPhysicalAsset: PhysicalAssetRef
	storageLocationDescription: String
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	status: String
	disposition: Disposition
	quantity: Float
	quantityUnitOfMeasure: UnitOfMeasureRef
	isAssembledFromMaterialLot: [MaterialLotRef]
	isComponentOfMaterialLot: MaterialLotRef
	properties: [MaterialLotPropertyRef]
	materialDefinition: MaterialDefinitionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	childSubLot: [MaterialSubLotRef]
	isAssembledFromMaterialSubLot: [MaterialSubLotRef]
	isComponentOfMaterialSubLot: MaterialSubLotRef
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	events: [EventRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	stateModelInstances: [StateModelInstanceRef]
}

input MaterialRequirementFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	materialUse: MaterialUse_hash
	assemblyType: AssemblyType_exact
	assemblyRelationship: AssemblyRelationship_exact
	has: [MaterialRequirementHasFilter]
	and: [MaterialRequirementFilter]
	or: [MaterialRequirementFilter]
	not: MaterialRequirementFilter
}

input MaterialRequirementOrder {
	asc: MaterialRequirementOrderable
	desc: MaterialRequirementOrderable
	then: MaterialRequirementOrder
}

input MaterialRequirementPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	segmentRequirement: SegmentRequirementRef
	children: [MaterialRequirementRef]
	parent: MaterialRequirementRef
	properties: [MaterialRequirementPropertyRef]
	materialClass: MaterialClassRef
	material: MaterialDefinitionRef
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input MaterialRequirementPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [MaterialRequirementPropertyHasFilter]
	and: [MaterialRequirementPropertyFilter]
	or: [MaterialRequirementPropertyFilter]
	not: MaterialRequirementPropertyFilter
}

input MaterialRequirementPropertyOrder {
	asc: MaterialRequirementPropertyOrderable
	desc: MaterialRequirementPropertyOrderable
	then: MaterialRequirementPropertyOrder
}

input MaterialRequirementPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	materialRequirement: MaterialRequirementRef
	children: [MaterialRequirementPropertyRef]
	parent: MaterialRequirementPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input MaterialRequirementPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	materialRequirement: MaterialRequirementRef
	children: [MaterialRequirementPropertyRef]
	parent: MaterialRequirementPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input MaterialRequirementRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	segmentRequirement: SegmentRequirementRef
	children: [MaterialRequirementRef]
	parent: MaterialRequirementRef
	properties: [MaterialRequirementPropertyRef]
	materialClass: MaterialClassRef
	material: MaterialDefinitionRef
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input MaterialSpecificationFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	materialUse: MaterialUse_hash
	has: [MaterialSpecificationHasFilter]
	and: [MaterialSpecificationFilter]
	or: [MaterialSpecificationFilter]
	not: MaterialSpecificationFilter
}

input MaterialSpecificationOrder {
	asc: MaterialSpecificationOrderable
	desc: MaterialSpecificationOrderable
	then: MaterialSpecificationOrder
}

input MaterialSpecificationPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [MaterialSpecificationRef]
	parent: MaterialSpecificationRef
	properties: [MaterialSpecificationPropertyRef]
	materialsBill: OperationsMaterialBillRef
	materialClass: MaterialClassRef
	material: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input MaterialSpecificationPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [MaterialSpecificationPropertyHasFilter]
	and: [MaterialSpecificationPropertyFilter]
	or: [MaterialSpecificationPropertyFilter]
	not: MaterialSpecificationPropertyFilter
}

input MaterialSpecificationPropertyOrder {
	asc: MaterialSpecificationPropertyOrderable
	desc: MaterialSpecificationPropertyOrderable
	then: MaterialSpecificationPropertyOrder
}

input MaterialSpecificationPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [MaterialSpecificationPropertyRef]
	parent: MaterialSpecificationPropertyRef
	materialSpecification: MaterialSpecificationRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input MaterialSpecificationPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [MaterialSpecificationPropertyRef]
	parent: MaterialSpecificationPropertyRef
	materialSpecification: MaterialSpecificationRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input MaterialSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocation: OperationalLocationRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [MaterialSpecificationRef]
	parent: MaterialSpecificationRef
	properties: [MaterialSpecificationPropertyRef]
	materialsBill: OperationsMaterialBillRef
	materialClass: MaterialClassRef
	material: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input MaterialSubLotFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	storageLocationDescription: StringExactFilter_StringFullTextFilter
	assemblyType: AssemblyType_exact
	assemblyRelationship: AssemblyRelationship_exact
	status: StringExactFilter_StringFullTextFilter
	disposition: Disposition_exact
	has: [MaterialSubLotHasFilter]
	and: [MaterialSubLotFilter]
	or: [MaterialSubLotFilter]
	not: MaterialSubLotFilter
}

input MaterialSubLotOrder {
	asc: MaterialSubLotOrderable
	desc: MaterialSubLotOrderable
	then: MaterialSubLotOrder
}

input MaterialSubLotPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocationOperationalLocation: OperationalLocationRef
	storageLocationEquipment: EquipmentRef
	storageLocationPhysicalAsset: PhysicalAssetRef
	storageLocationDescription: String
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	status: String
	disposition: Disposition
	quantity: Float
	quantityUnitOfMeasure: UnitOfMeasureRef
	children: [MaterialSubLotRef]
	parent: MaterialSubLotRef
	properties: [MaterialLotPropertyRef]
	isAssembledFromMaterialSubLot: [MaterialSubLotRef]
	isComponentOfMaterialSubLot: MaterialSubLotRef
	isComponentOfMaterialLot: MaterialLotRef
	isAssembledFromMaterialLot: [MaterialLotRef]
	parentMaterialLot: MaterialLotRef
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input MaterialSubLotRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	storageLocationOperationalLocation: OperationalLocationRef
	storageLocationEquipment: EquipmentRef
	storageLocationPhysicalAsset: PhysicalAssetRef
	storageLocationDescription: String
	assemblyType: AssemblyType
	assemblyRelationship: AssemblyRelationship
	status: String
	disposition: Disposition
	quantity: Float
	quantityUnitOfMeasure: UnitOfMeasureRef
	children: [MaterialSubLotRef]
	parent: MaterialSubLotRef
	properties: [MaterialLotPropertyRef]
	isAssembledFromMaterialSubLot: [MaterialSubLotRef]
	isComponentOfMaterialSubLot: MaterialSubLotRef
	isComponentOfMaterialLot: MaterialLotRef
	isAssembledFromMaterialLot: [MaterialLotRef]
	parentMaterialLot: MaterialLotRef
	materialSpecifications: [MaterialSpecificationRef]
	materialRequirements: [MaterialRequirementRef]
	materialActual: [MaterialActualRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input MaterialUse_hash {
	eq: MaterialUse
	in: [MaterialUse]
}

input MenuFilter {
	iid: [ID!]
	label: StringHashFilter
	has: [MenuHasFilter]
	and: [MenuFilter]
	or: [MenuFilter]
	not: MenuFilter
}

input MenuOrder {
	asc: MenuOrderable
	desc: MenuOrderable
	then: MenuOrder
}

input MenuPatch {
	label: String
	acl: [AccessPermissionRef]
	parent: MenuRef
	children: [MenuRef!]
	menuPage: String
	icon: String
	isSection: Boolean
	isPage: Boolean
	orderNumber: Int
}

input MenuRef {
	iid: ID
	label: String
	acl: [AccessPermissionRef]
	parent: MenuRef
	children: [MenuRef!]
	menuPage: String
	icon: String
	isSection: Boolean
	isPage: Boolean
	orderNumber: Int
}

input MessageKey_hash {
	eq: MessageKey
	in: [MessageKey]
}

input MultiplicityFilter {
	has: [MultiplicityHasFilter]
	and: [MultiplicityFilter]
	or: [MultiplicityFilter]
	not: MultiplicityFilter
}

input MultiplicityOrder {
	asc: MultiplicityOrderable
	desc: MultiplicityOrderable
	then: MultiplicityOrder
}

input MultiplicityPatch {
	Min: Int
	Max: Int
}

input MultiplicityRef {
	Min: Int
	Max: Int
}

input OperationalLocationClassFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationalLocationClassHasFilter]
	and: [OperationalLocationClassFilter]
	or: [OperationalLocationClassFilter]
	not: OperationalLocationClassFilter
}

input OperationalLocationClassOrder {
	asc: OperationalLocationClassOrderable
	desc: OperationalLocationClassOrderable
	then: OperationalLocationClassOrder
}

input OperationalLocationClassPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationalLocationClassVersionRef]
	activeVersion: OperationalLocationClassVersionRef
	nextVersion: String
	id: String
	label: String
	includedIn: [OperationalLocationClassVersionRef]
	isPartOf: [OperationalLocationClassRef]
	isMadeUpOf: OperationalLocationClassRef
	operationalLocationVersions: [OperationalLocationVersionRef]
}

input OperationalLocationClassPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [OperationalLocationClassPropertyHasFilter]
	and: [OperationalLocationClassPropertyFilter]
	or: [OperationalLocationClassPropertyFilter]
	not: OperationalLocationClassPropertyFilter
}

input OperationalLocationClassPropertyOrder {
	asc: OperationalLocationClassPropertyOrderable
	desc: OperationalLocationClassPropertyOrderable
	then: OperationalLocationClassPropertyOrder
}

input OperationalLocationClassPropertyPatch {
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	propertyType: Isa95PropertyType
	isPartOf: [OperationalLocationClassPropertyRef]
	isMadeUpOf: OperationalLocationClassPropertyRef
	operationalLocationClassVersion: OperationalLocationClassVersionRef
	mapsTo: [OperationalLocationPropertyRef]
}

input OperationalLocationClassPropertyRef {
	iid: ID
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	propertyType: Isa95PropertyType
	isPartOf: [OperationalLocationClassPropertyRef]
	isMadeUpOf: OperationalLocationClassPropertyRef
	operationalLocationClassVersion: OperationalLocationClassVersionRef
	mapsTo: [OperationalLocationPropertyRef]
}

input OperationalLocationClassRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationalLocationClassVersionRef]
	activeVersion: OperationalLocationClassVersionRef
	nextVersion: String
	id: String
	label: String
	includedIn: [OperationalLocationClassVersionRef]
	isPartOf: [OperationalLocationClassRef]
	isMadeUpOf: OperationalLocationClassRef
	operationalLocationVersions: [OperationalLocationVersionRef]
}

input OperationalLocationClassVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	has: [OperationalLocationClassVersionHasFilter]
	and: [OperationalLocationClassVersionFilter]
	or: [OperationalLocationClassVersionFilter]
	not: OperationalLocationClassVersionFilter
}

input OperationalLocationClassVersionOrder {
	asc: OperationalLocationClassVersionOrderable
	desc: OperationalLocationClassVersionOrderable
	then: OperationalLocationClassVersionOrder
}

input OperationalLocationClassVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: OperationalLocationClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	name: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocationClass: OperationalLocationClassRef
	includesPropertiesOf: [OperationalLocationClassRef]
	isPartOf: [OperationalLocationClassVersionRef]
	isMadeUpOf: OperationalLocationClassVersionRef
	properties: [OperationalLocationClassPropertyRef]
}

input OperationalLocationClassVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: OperationalLocationClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	name: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocationClass: OperationalLocationClassRef
	includesPropertiesOf: [OperationalLocationClassRef]
	isPartOf: [OperationalLocationClassVersionRef]
	isMadeUpOf: OperationalLocationClassVersionRef
	properties: [OperationalLocationClassPropertyRef]
}

input OperationalLocationFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	has: [OperationalLocationHasFilter]
	and: [OperationalLocationFilter]
	or: [OperationalLocationFilter]
	not: OperationalLocationFilter
}

input OperationalLocationOrder {
	asc: OperationalLocationOrderable
	desc: OperationalLocationOrderable
	then: OperationalLocationOrder
}

input OperationalLocationPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	label: String
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationalLocationVersionRef]
	activeVersion: OperationalLocationVersionRef
	nextVersion: String
	isPartOf: [OperationalLocationRef]
	isMadeUpOf: OperationalLocationRef
}

input OperationalLocationPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [OperationalLocationPropertyHasFilter]
	and: [OperationalLocationPropertyFilter]
	or: [OperationalLocationPropertyFilter]
	not: OperationalLocationPropertyFilter
}

input OperationalLocationPropertyOrder {
	asc: OperationalLocationPropertyOrderable
	desc: OperationalLocationPropertyOrderable
	then: OperationalLocationPropertyOrder
}

input OperationalLocationPropertyPatch {
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	isPartOf: [OperationalLocationPropertyRef]
	isMadeUpOf: OperationalLocationPropertyRef
	operationalLocationVersion: OperationalLocationVersionRef
	mapsTo: OperationalLocationClassPropertyRef
}

input OperationalLocationPropertyRef {
	iid: ID
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	isPartOf: [OperationalLocationPropertyRef]
	isMadeUpOf: OperationalLocationPropertyRef
	operationalLocationVersion: OperationalLocationVersionRef
	mapsTo: OperationalLocationClassPropertyRef
}

input OperationalLocationRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	label: String
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationalLocationVersionRef]
	activeVersion: OperationalLocationVersionRef
	nextVersion: String
	isPartOf: [OperationalLocationRef]
	isMadeUpOf: OperationalLocationRef
}

input OperationalLocationVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	name: StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [OperationalLocationVersionHasFilter]
	and: [OperationalLocationVersionFilter]
	or: [OperationalLocationVersionFilter]
	not: OperationalLocationVersionFilter
}

input OperationalLocationVersionOrder {
	asc: OperationalLocationVersionOrderable
	desc: OperationalLocationVersionOrderable
	then: OperationalLocationVersionOrder
}

input OperationalLocationVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: OperationalLocationRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	name: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocationClasses: [OperationalLocationClassRef]
	properties: [OperationalLocationPropertyRef]
	isPartOf: [OperationalLocationVersionRef]
	isMadeUpOf: OperationalLocationVersionRef
}

input OperationalLocationVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: OperationalLocationRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	name: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocationClasses: [OperationalLocationClassRef]
	properties: [OperationalLocationPropertyRef]
	isPartOf: [OperationalLocationVersionRef]
	isMadeUpOf: OperationalLocationVersionRef
}

input OperationsDefinitionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsDefinitionHasFilter]
	and: [OperationsDefinitionFilter]
	or: [OperationsDefinitionFilter]
	not: OperationsDefinitionFilter
}

input OperationsDefinitionOrder {
	asc: OperationsDefinitionOrderable
	desc: OperationsDefinitionOrderable
	then: OperationsDefinitionOrder
}

input OperationsDefinitionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsDefinitionVersionRef]
	activeVersion: OperationsDefinitionVersionRef
	nextVersion: String
	id: String
	label: String
	parent: OperationsDefinitionRef
	children: [OperationsDefinitionRef]
	workMasters: [WorkMasterRef]
	operationsRequests: [OperationsRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef]
}

input OperationsDefinitionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsDefinitionVersionRef]
	activeVersion: OperationsDefinitionVersionRef
	nextVersion: String
	id: String
	label: String
	parent: OperationsDefinitionRef
	children: [OperationsDefinitionRef]
	workMasters: [WorkMasterRef]
	operationsRequests: [OperationsRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef]
}

input OperationsDefinitionVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	billOfMaterial: StringExactFilter_StringFullTextFilter
	billOfResources: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	has: [OperationsDefinitionVersionHasFilter]
	and: [OperationsDefinitionVersionFilter]
	or: [OperationsDefinitionVersionFilter]
	not: OperationsDefinitionVersionFilter
}

input OperationsDefinitionVersionOrder {
	asc: OperationsDefinitionVersionOrderable
	desc: OperationsDefinitionVersionOrderable
	then: OperationsDefinitionVersionOrder
}

input OperationsDefinitionVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	operationsDefinition: OperationsDefinitionRef
	isActiveVersionOf: OperationsDefinitionRef
	id: String
	billOfMaterial: String
	billOfResources: String
	description: String
	operationsType: WorkType
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	segments: [OperationsSegmentRef]
	materialsBill: [OperationsMaterialBillRef]
}

input OperationsDefinitionVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	operationsDefinition: OperationsDefinitionRef
	isActiveVersionOf: OperationsDefinitionRef
	id: String
	billOfMaterial: String
	billOfResources: String
	description: String
	operationsType: WorkType
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	segments: [OperationsSegmentRef]
	materialsBill: [OperationsMaterialBillRef]
}

input OperationsEventClassFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventClassHasFilter]
	and: [OperationsEventClassFilter]
	or: [OperationsEventClassFilter]
	not: OperationsEventClassFilter
}

input OperationsEventClassOrder {
	asc: OperationsEventClassOrderable
	desc: OperationsEventClassOrderable
	then: OperationsEventClassOrder
}

input OperationsEventClassPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsEventClassVersionRef]
	activeVersion: OperationsEventClassVersionRef
	nextVersion: String
	id: String
	label: String
	isAssembledFrom: [OperationsEventClassRef]
	isComponentOf: OperationsEventClassRef
	includesPropertiesOf: [OperationsEventClassRef]
	isIncludedIn: OperationsEventClassRef
	operationsEventDefinitionVersions: [OperationsEventDefinitionVersionRef]
}

input OperationsEventClassPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	value: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventClassPropertyHasFilter]
	and: [OperationsEventClassPropertyFilter]
	or: [OperationsEventClassPropertyFilter]
	not: OperationsEventClassPropertyFilter
}

input OperationsEventClassPropertyOrder {
	asc: OperationsEventClassPropertyOrderable
	desc: OperationsEventClassPropertyOrderable
	then: OperationsEventClassPropertyOrder
}

input OperationsEventClassPropertyPatch {
	acl: [AccessPermissionRef]
	id: String
	operationsEventClassVersion: OperationsEventClassVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	parent: OperationsEventClassPropertyRef
	children: [OperationsEventClassPropertyRef]
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
}

input OperationsEventClassPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	operationsEventClassVersion: OperationsEventClassVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	parent: OperationsEventClassPropertyRef
	children: [OperationsEventClassPropertyRef]
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
}

input OperationsEventClassRecordSpecificationFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventClassRecordSpecificationHasFilter]
	and: [OperationsEventClassRecordSpecificationFilter]
	or: [OperationsEventClassRecordSpecificationFilter]
	not: OperationsEventClassRecordSpecificationFilter
}

input OperationsEventClassRecordSpecificationOrder {
	asc: OperationsEventClassRecordSpecificationOrderable
	desc: OperationsEventClassRecordSpecificationOrderable
	then: OperationsEventClassRecordSpecificationOrder
}

input OperationsEventClassRecordSpecificationPatch {
	acl: [AccessPermissionRef]
	id: String
	operationsEventClassVersion: OperationsEventClassVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity: MultiplicityRef
	action: [Action]
	actionMultiplicity: MultiplicityRef
}

input OperationsEventClassRecordSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	operationsEventClassVersion: OperationsEventClassVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity: MultiplicityRef
	action: [Action]
	actionMultiplicity: MultiplicityRef
}

input OperationsEventClassRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsEventClassVersionRef]
	activeVersion: OperationsEventClassVersionRef
	nextVersion: String
	id: String
	label: String
	isAssembledFrom: [OperationsEventClassRef]
	isComponentOf: OperationsEventClassRef
	includesPropertiesOf: [OperationsEventClassRef]
	isIncludedIn: OperationsEventClassRef
	operationsEventDefinitionVersions: [OperationsEventDefinitionVersionRef]
}

input OperationsEventClassVersionFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	version: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	has: [OperationsEventClassVersionHasFilter]
	and: [OperationsEventClassVersionFilter]
	or: [OperationsEventClassVersionFilter]
	not: OperationsEventClassVersionFilter
}

input OperationsEventClassVersionOrder {
	asc: OperationsEventClassVersionOrderable
	desc: OperationsEventClassVersionOrderable
	then: OperationsEventClassVersionOrder
}

input OperationsEventClassVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	version: String
	operationsEventClass: OperationsEventClassRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versionStatus: VersionState
	isActiveVersionOf: OperationsEventClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	properties: [OperationsEventClassPropertyRef]
	recordSpecifications: [OperationsEventClassRecordSpecificationRef]
	description: String
}

input OperationsEventClassVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	version: String
	operationsEventClass: OperationsEventClassRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versionStatus: VersionState
	isActiveVersionOf: OperationsEventClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	properties: [OperationsEventClassPropertyRef]
	recordSpecifications: [OperationsEventClassRecordSpecificationRef]
	description: String
}

input OperationsEventDefinitionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventDefinitionHasFilter]
	and: [OperationsEventDefinitionFilter]
	or: [OperationsEventDefinitionFilter]
	not: OperationsEventDefinitionFilter
}

input OperationsEventDefinitionOrder {
	asc: OperationsEventDefinitionOrderable
	desc: OperationsEventDefinitionOrderable
	then: OperationsEventDefinitionOrder
}

input OperationsEventDefinitionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsEventDefinitionVersionRef]
	activeVersion: OperationsEventDefinitionVersionRef
	nextVersion: String
	id: String
	label: String
	hierarchyScope: HierarchyScopeRef
	isAssembledFrom: [OperationsEventDefinitionRef]
	isComponentOf: OperationsEventDefinitionRef
	includesPropertiesOf: [OperationsEventDefinitionRef]
	isIncludedIn: OperationsEventDefinitionRef
	operationsEvents: [OperationsEventRef]
}

input OperationsEventDefinitionPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	value: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventDefinitionPropertyHasFilter]
	and: [OperationsEventDefinitionPropertyFilter]
	or: [OperationsEventDefinitionPropertyFilter]
	not: OperationsEventDefinitionPropertyFilter
}

input OperationsEventDefinitionPropertyOrder {
	asc: OperationsEventDefinitionPropertyOrderable
	desc: OperationsEventDefinitionPropertyOrderable
	then: OperationsEventDefinitionPropertyOrder
}

input OperationsEventDefinitionPropertyPatch {
	acl: [AccessPermissionRef]
	id: String
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	operationsEventClassProperty: OperationsEventClassPropertyRef
	parent: OperationsEventDefinitionPropertyRef
	children: [OperationsEventDefinitionPropertyRef]
}

input OperationsEventDefinitionPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	operationsEventClassProperty: OperationsEventClassPropertyRef
	parent: OperationsEventDefinitionPropertyRef
	children: [OperationsEventDefinitionPropertyRef]
}

input OperationsEventDefinitionRecordSpecificationFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventDefinitionRecordSpecificationHasFilter]
	and: [OperationsEventDefinitionRecordSpecificationFilter]
	or: [OperationsEventDefinitionRecordSpecificationFilter]
	not: OperationsEventDefinitionRecordSpecificationFilter
}

input OperationsEventDefinitionRecordSpecificationOrder {
	asc: OperationsEventDefinitionRecordSpecificationOrderable
	desc: OperationsEventDefinitionRecordSpecificationOrderable
	then: OperationsEventDefinitionRecordSpecificationOrder
}

input OperationsEventDefinitionRecordSpecificationPatch {
	acl: [AccessPermissionRef]
	id: String
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity: MultiplicityRef
	action: [Action]
	actionMultiplicity: MultiplicityRef
	operationsEventRecords: [OperationsEventRecordRef]
}

input OperationsEventDefinitionRecordSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	operationsEventDefinitionVersion: OperationsEventDefinitionVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	informationObjectType: [InformationObjectTypeEnum]
	multiplicity: MultiplicityRef
	action: [Action]
	actionMultiplicity: MultiplicityRef
	operationsEventRecords: [OperationsEventRecordRef]
}

input OperationsEventDefinitionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [OperationsEventDefinitionVersionRef]
	activeVersion: OperationsEventDefinitionVersionRef
	nextVersion: String
	id: String
	label: String
	hierarchyScope: HierarchyScopeRef
	isAssembledFrom: [OperationsEventDefinitionRef]
	isComponentOf: OperationsEventDefinitionRef
	includesPropertiesOf: [OperationsEventDefinitionRef]
	isIncludedIn: OperationsEventDefinitionRef
	operationsEvents: [OperationsEventRef]
}

input OperationsEventDefinitionVersionFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	version: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventDefinitionVersionHasFilter]
	and: [OperationsEventDefinitionVersionFilter]
	or: [OperationsEventDefinitionVersionFilter]
	not: OperationsEventDefinitionVersionFilter
}

input OperationsEventDefinitionVersionOrder {
	asc: OperationsEventDefinitionVersionOrderable
	desc: OperationsEventDefinitionVersionOrderable
	then: OperationsEventDefinitionVersionOrder
}

input OperationsEventDefinitionVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	operationsEventDefinition: OperationsEventDefinitionRef
	id: String
	version: String
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versionStatus: VersionState
	isActiveVersionOf: OperationsEventDefinitionRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	operationsEventClasses: [OperationsEventClassRef]
	hierarchyScope: HierarchyScopeRef
	priority: [String]
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties: [OperationsEventDefinitionPropertyRef]
	recordSpecifications: [OperationsEventDefinitionRecordSpecificationRef]
}

input OperationsEventDefinitionVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	operationsEventDefinition: OperationsEventDefinitionRef
	id: String
	version: String
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versionStatus: VersionState
	isActiveVersionOf: OperationsEventDefinitionRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	operationsEventClasses: [OperationsEventClassRef]
	hierarchyScope: HierarchyScopeRef
	priority: [String]
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties: [OperationsEventDefinitionPropertyRef]
	recordSpecifications: [OperationsEventDefinitionRecordSpecificationRef]
}

input OperationsEventFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	recordTimestamp: DateTimeFilter
	has: [OperationsEventHasFilter]
	and: [OperationsEventFilter]
	or: [OperationsEventFilter]
	not: OperationsEventFilter
}

input OperationsEventOrder {
	asc: OperationsEventOrderable
	desc: OperationsEventOrderable
	then: OperationsEventOrder
}

input OperationsEventPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	operationsEventDefinition: OperationsEventDefinitionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	recordTimestamp: DateTime
	hierarchyScope: HierarchyScopeRef
	priority: String
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties: [OperationsEventPropertyRef]
	records: [OperationsEventRecordRef]
	parent: OperationsEventRef
	children: [OperationsEventRef]
}

input OperationsEventPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	value: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [OperationsEventPropertyHasFilter]
	and: [OperationsEventPropertyFilter]
	or: [OperationsEventPropertyFilter]
	not: OperationsEventPropertyFilter
}

input OperationsEventPropertyOrder {
	asc: OperationsEventPropertyOrderable
	desc: OperationsEventPropertyOrderable
	then: OperationsEventPropertyOrder
}

input OperationsEventPropertyPatch {
	acl: [AccessPermissionRef]
	id: String
	operationsEvent: OperationsEventRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	operationsEventDefinitionProperty: OperationsEventDefinitionPropertyRef
	parent: OperationsEventPropertyRef
	children: [OperationsEventPropertyRef]
}

input OperationsEventPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	operationsEvent: OperationsEventRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	operationsEventDefinitionProperty: OperationsEventDefinitionPropertyRef
	parent: OperationsEventPropertyRef
	children: [OperationsEventPropertyRef]
}

input OperationsEventRecordEntryFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	recordId: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	recordTimestamp: DateTimeFilter
	has: [OperationsEventRecordEntryHasFilter]
	and: [OperationsEventRecordEntryFilter]
	or: [OperationsEventRecordEntryFilter]
	not: OperationsEventRecordEntryFilter
}

input OperationsEventRecordEntryOrder {
	asc: OperationsEventRecordEntryOrderable
	desc: OperationsEventRecordEntryOrderable
	then: OperationsEventRecordEntryOrder
}

input OperationsEventRecordEntryPatch {
	acl: [AccessPermissionRef]
	id: String
	recordId: String
	operationsEventRecord: OperationsEventRecordRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	recordTimestamp: DateTime
	hierarchyScope: HierarchyScopeRef
	data: String
	informationObject: InformationObjectRef
	parent: OperationsEventRecordEntryRef
	children: [OperationsEventRecordEntryRef]
}

input OperationsEventRecordEntryRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	recordId: String
	operationsEventRecord: OperationsEventRecordRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	recordTimestamp: DateTime
	hierarchyScope: HierarchyScopeRef
	data: String
	informationObject: InformationObjectRef
	parent: OperationsEventRecordEntryRef
	children: [OperationsEventRecordEntryRef]
}

input OperationsEventRecordFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	recordTimestamp: DateTimeFilter
	has: [OperationsEventRecordHasFilter]
	and: [OperationsEventRecordFilter]
	or: [OperationsEventRecordFilter]
	not: OperationsEventRecordFilter
}

input OperationsEventRecordOrder {
	asc: OperationsEventRecordOrderable
	desc: OperationsEventRecordOrderable
	then: OperationsEventRecordOrder
}

input OperationsEventRecordPatch {
	acl: [AccessPermissionRef]
	id: String
	operationsEvent: OperationsEventRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	action: Action
	recordTimestamp: DateTime
	hierarchyScope: HierarchyScopeRef
	operationsEventDefinitionRecordSpecification: OperationsEventDefinitionRecordSpecificationRef
	recordEntries: [OperationsEventRecordEntryRef]
	parent: OperationsEventRecordRef
	children: [OperationsEventRecordRef]
}

input OperationsEventRecordRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	operationsEvent: OperationsEventRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	action: Action
	recordTimestamp: DateTime
	hierarchyScope: HierarchyScopeRef
	operationsEventDefinitionRecordSpecification: OperationsEventDefinitionRecordSpecificationRef
	recordEntries: [OperationsEventRecordEntryRef]
	parent: OperationsEventRecordRef
	children: [OperationsEventRecordRef]
}

input OperationsEventRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	operationsEventDefinition: OperationsEventDefinitionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	recordTimestamp: DateTime
	hierarchyScope: HierarchyScopeRef
	priority: String
	operationsEventType: OperationsEventTypeEnum
	operationsEventLevel: OperationsEventLevelEnum
	operationsType: WorkType
	momFunction: MOMFunctionEnum
	enterpriseFunction: EnterpriseFunctionEnum
	category: String
	source: String
	properties: [OperationsEventPropertyRef]
	records: [OperationsEventRecordRef]
	parent: OperationsEventRef
	children: [OperationsEventRef]
}

input OperationsMaterialBillFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	useType: MaterialUse_hash
	billOfMaterial: StringExactFilter_StringFullTextFilter
	has: [OperationsMaterialBillHasFilter]
	and: [OperationsMaterialBillFilter]
	or: [OperationsMaterialBillFilter]
	not: OperationsMaterialBillFilter
}

input OperationsMaterialBillOrder {
	asc: OperationsMaterialBillOrderable
	desc: OperationsMaterialBillOrderable
	then: OperationsMaterialBillOrder
}

input OperationsMaterialBillPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	useType: MaterialUse
	billOfMaterial: String
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	operationsSegments: [OperationsSegmentRef]
	materialBillItems: [MaterialSpecificationRef]
}

input OperationsMaterialBillRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	useType: MaterialUse
	billOfMaterial: String
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	operationsSegments: [OperationsSegmentRef]
	materialBillItems: [MaterialSpecificationRef]
}

input OperationsPerformanceFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	publishedDate: DateTimeFilter
	has: [OperationsPerformanceHasFilter]
	and: [OperationsPerformanceFilter]
	or: [OperationsPerformanceFilter]
	not: OperationsPerformanceFilter
}

input OperationsPerformanceOrder {
	asc: OperationsPerformanceOrderable
	desc: OperationsPerformanceOrderable
	then: OperationsPerformanceOrder
}

input OperationsPerformancePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	operationsType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	performanceState: JobState
	publishedDate: DateTime
	operationsResponses: [OperationsResponseRef!]
	operationsSchedule: OperationsScheduleRef
}

input OperationsPerformanceRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	operationsType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	performanceState: JobState
	publishedDate: DateTime
	operationsResponses: [OperationsResponseRef!]
	operationsSchedule: OperationsScheduleRef
}

input OperationsRequestFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	scheduledStartDate: DateTimeFilter
	scheduledEndDate: DateTimeFilter
	has: [OperationsRequestHasFilter]
	and: [OperationsRequestFilter]
	or: [OperationsRequestFilter]
	not: OperationsRequestFilter
}

input OperationsRequestOrder {
	asc: OperationsRequestOrderable
	desc: OperationsRequestOrderable
	then: OperationsRequestOrder
}

input OperationsRequestPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	operationsType: WorkType
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	priority: String
	hierarchyScope: HierarchyScopeRef
	requestState: ScheduleState
	notes: String
	operationsSchedule: OperationsScheduleRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	segmentRequirements: [SegmentRequirementRef!]
	workRequests: [WorkRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
}

input OperationsRequestRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	operationsType: WorkType
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	priority: String
	hierarchyScope: HierarchyScopeRef
	requestState: ScheduleState
	notes: String
	operationsSchedule: OperationsScheduleRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	segmentRequirements: [SegmentRequirementRef!]
	workRequests: [WorkRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
}

input OperationsResponseFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	responseState: JobState_hash
	isActive: Boolean
	has: [OperationsResponseHasFilter]
	and: [OperationsResponseFilter]
	or: [OperationsResponseFilter]
	not: OperationsResponseFilter
}

input OperationsResponseOrder {
	asc: OperationsResponseOrderable
	desc: OperationsResponseOrderable
	then: OperationsResponseOrder
}

input OperationsResponsePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	operationsType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	responseState: JobState
	operationsPerformance: OperationsPerformanceRef
	operationsRequest: OperationsRequestRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef!]
	isActive: Boolean
	properties: [OperationsResponsePropertyRef]
}

input OperationsResponsePropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [OperationsResponsePropertyHasFilter]
	and: [OperationsResponsePropertyFilter]
	or: [OperationsResponsePropertyFilter]
	not: OperationsResponsePropertyFilter
}

input OperationsResponsePropertyOrder {
	asc: OperationsResponsePropertyOrderable
	desc: OperationsResponsePropertyOrderable
	then: OperationsResponsePropertyOrder
}

input OperationsResponsePropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsResponse: OperationsResponseRef
	children: [OperationsResponsePropertyRef]
	parent: OperationsResponsePropertyRef
}

input OperationsResponsePropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsResponse: OperationsResponseRef
	children: [OperationsResponsePropertyRef]
	parent: OperationsResponsePropertyRef
}

input OperationsResponseRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	operationsType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	responseState: JobState
	operationsPerformance: OperationsPerformanceRef
	operationsRequest: OperationsRequestRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef!]
	isActive: Boolean
	properties: [OperationsResponsePropertyRef]
}

input OperationsScheduleFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	scheduledStartDate: DateTimeFilter
	scheduledEndDate: DateTimeFilter
	publishedDate: DateTimeFilter
	scheduleState: ScheduleState_hash
	has: [OperationsScheduleHasFilter]
	and: [OperationsScheduleFilter]
	or: [OperationsScheduleFilter]
	not: OperationsScheduleFilter
}

input OperationsScheduleOrder {
	asc: OperationsScheduleOrderable
	desc: OperationsScheduleOrderable
	then: OperationsScheduleOrder
}

input OperationsSchedulePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	operationsType: WorkType
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	scheduleState: ScheduleState
	operationsRequests: [OperationsRequestRef!]
	operationsPerformance: [OperationsPerformanceRef]
}

input OperationsScheduleRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	operationsType: WorkType
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	scheduleState: ScheduleState
	operationsRequests: [OperationsRequestRef!]
	operationsPerformance: [OperationsPerformanceRef]
}

input OperationsSegmentDependencyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [OperationsSegmentDependencyHasFilter]
	and: [OperationsSegmentDependencyFilter]
	or: [OperationsSegmentDependencyFilter]
	not: OperationsSegmentDependencyFilter
}

input OperationsSegmentDependencyOrder {
	asc: OperationsSegmentDependencyOrderable
	desc: OperationsSegmentDependencyOrderable
	then: OperationsSegmentDependencyOrder
}

input OperationsSegmentDependencyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	from: OperationsSegmentRef
	to: OperationsSegmentRef
	rules: [RuleRef]
}

input OperationsSegmentDependencyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	from: OperationsSegmentRef
	to: OperationsSegmentRef
	rules: [RuleRef]
}

input OperationsSegmentFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	definitionType: DefinitionType_hash
	billOfMaterial: StringExactFilter_StringFullTextFilter
	billOfResources: StringExactFilter_StringFullTextFilter
	has: [OperationsSegmentHasFilter]
	and: [OperationsSegmentFilter]
	or: [OperationsSegmentFilter]
	not: OperationsSegmentFilter
}

input OperationsSegmentOrder {
	asc: OperationsSegmentOrderable
	desc: OperationsSegmentOrderable
	then: OperationsSegmentOrder
}

input OperationsSegmentPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	duration: Float
	durationUoM: UnitOfMeasureRef
	operationsType: WorkType
	definitionType: DefinitionType
	billOfMaterial: String
	billOfResources: String
	positionX: Int
	positionY: Int
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	parent: OperationsSegmentRef
	children: [OperationsSegmentRef]
	processSegment: ProcessSegmentRef
	workMasters: [WorkMasterRef]
	makesUp: OperationsSegmentRef
	isMadeUpOf: [OperationsSegmentRef]
	inflows: [OperationsSegmentDependencyRef]
	outflows: [OperationsSegmentDependencyRef]
	materialsBill: [OperationsMaterialBillRef]
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	rules: [RuleRef]
	segmentRequirements: [SegmentRequirementRef]
	operationsRequests: [OperationsRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
}

input OperationsSegmentRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	duration: Float
	durationUoM: UnitOfMeasureRef
	operationsType: WorkType
	definitionType: DefinitionType
	billOfMaterial: String
	billOfResources: String
	positionX: Int
	positionY: Int
	operationsDefinitionVersion: OperationsDefinitionVersionRef
	parent: OperationsSegmentRef
	children: [OperationsSegmentRef]
	processSegment: ProcessSegmentRef
	workMasters: [WorkMasterRef]
	makesUp: OperationsSegmentRef
	isMadeUpOf: [OperationsSegmentRef]
	inflows: [OperationsSegmentDependencyRef]
	outflows: [OperationsSegmentDependencyRef]
	materialsBill: [OperationsMaterialBillRef]
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	rules: [RuleRef]
	segmentRequirements: [SegmentRequirementRef]
	operationsRequests: [OperationsRequestRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
}

input ParameterSpecificationFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [ParameterSpecificationHasFilter]
	and: [ParameterSpecificationFilter]
	or: [ParameterSpecificationFilter]
	not: ParameterSpecificationFilter
}

input ParameterSpecificationOrder {
	asc: ParameterSpecificationOrderable
	desc: ParameterSpecificationOrderable
	then: ParameterSpecificationOrder
}

input ParameterSpecificationPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	operationsSegment: OperationsSegmentRef
	children: [ParameterSpecificationRef]
	parent: ParameterSpecificationRef
	segmentParameters: [SegmentParameterRef]
	jobOrderParameter: [JobOrderParameterRef]
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input ParameterSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	operationsSegment: OperationsSegmentRef
	children: [ParameterSpecificationRef]
	parent: ParameterSpecificationRef
	segmentParameters: [SegmentParameterRef]
	jobOrderParameter: [JobOrderParameterRef]
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input PayloadFieldDefinitionFilter {
	iid: [ID!]
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [PayloadFieldDefinitionHasFilter]
	and: [PayloadFieldDefinitionFilter]
	or: [PayloadFieldDefinitionFilter]
	not: PayloadFieldDefinitionFilter
}

input PayloadFieldDefinitionOrder {
	asc: PayloadFieldDefinitionOrderable
	desc: PayloadFieldDefinitionOrderable
	then: PayloadFieldDefinitionOrder
}

input PayloadFieldDefinitionPatch {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	name: String
	expression: String
}

input PayloadFieldDefinitionRef {
	iid: ID
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	name: String
	expression: String
}

input PersonFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [PersonHasFilter]
	and: [PersonFilter]
	or: [PersonFilter]
	not: PersonFilter
}

input PersonOrder {
	asc: PersonOrderable
	desc: PersonOrderable
	then: PersonOrder
}

input PersonPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PersonVersionRef]
	activeVersion: PersonVersionRef
	nextVersion: String
	id: String
	label: String
	personnelSpecifications: [PersonnelSpecificationRef]
	personnelRequirements: [PersonnelRequirementRef]
	personnelActual: [PersonnelActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
}

input PersonPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [PersonPropertyHasFilter]
	and: [PersonPropertyFilter]
	or: [PersonPropertyFilter]
	not: PersonPropertyFilter
}

input PersonPropertyOrder {
	asc: PersonPropertyOrderable
	desc: PersonPropertyOrderable
	then: PersonPropertyOrder
}

input PersonPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	personVersion: PersonVersionRef
	children: [PersonPropertyRef]
	parent: PersonPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
	personnelRequirementProperties: [PersonnelRequirementPropertyRef]
	personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	personVersion: PersonVersionRef
	children: [PersonPropertyRef]
	parent: PersonPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
	personnelRequirementProperties: [PersonnelRequirementPropertyRef]
	personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PersonVersionRef]
	activeVersion: PersonVersionRef
	nextVersion: String
	id: String
	label: String
	personnelSpecifications: [PersonnelSpecificationRef]
	personnelRequirements: [PersonnelRequirementRef]
	personnelActual: [PersonnelActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
}

input PersonVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	name: StringExactFilter_StringFullTextFilter
	has: [PersonVersionHasFilter]
	and: [PersonVersionFilter]
	or: [PersonVersionFilter]
	not: PersonVersionFilter
}

input PersonVersionOrder {
	asc: PersonVersionOrderable
	desc: PersonVersionOrderable
	then: PersonVersionOrder
}

input PersonVersionPatch {
	acl: [AccessPermissionRef]
	person: PersonRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: PersonRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	name: String
	personnelClasses: [PersonnelClassRef]
	properties: [PersonPropertyRef]
	personnelActual: [PersonnelActualRef]
	stateModels: [StateModelDefinitionRef]
	signaturesMade: [SignatureRef]
	comments: [CommentRef]
}

input PersonVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	person: PersonRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: PersonRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	name: String
	personnelClasses: [PersonnelClassRef]
	properties: [PersonPropertyRef]
	personnelActual: [PersonnelActualRef]
	stateModels: [StateModelDefinitionRef]
	signaturesMade: [SignatureRef]
	comments: [CommentRef]
}

input PersonnelActualFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	personnelUse: StringExactFilter_StringFullTextFilter
	has: [PersonnelActualHasFilter]
	and: [PersonnelActualFilter]
	or: [PersonnelActualFilter]
	not: PersonnelActualFilter
}

input PersonnelActualOrder {
	asc: PersonnelActualOrderable
	desc: PersonnelActualOrderable
	then: PersonnelActualOrder
}

input PersonnelActualPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	personnelUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [PersonnelActualRef]
	parent: PersonnelActualRef
	properties: [PersonnelActualPropertyRef]
	testResults: [TestResultRef]
	personnelClass: [PersonnelClassRef]
	person: [PersonRef]
	personVersion: [PersonVersionRef]
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PersonnelActualPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [PersonnelActualPropertyHasFilter]
	and: [PersonnelActualPropertyFilter]
	or: [PersonnelActualPropertyFilter]
	not: PersonnelActualPropertyFilter
}

input PersonnelActualPropertyOrder {
	asc: PersonnelActualPropertyOrderable
	desc: PersonnelActualPropertyOrderable
	then: PersonnelActualPropertyOrder
}

input PersonnelActualPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	personnelActual: PersonnelActualRef
	children: [PersonnelActualPropertyRef]
	parent: PersonnelActualPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input PersonnelActualPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	personnelActual: PersonnelActualRef
	children: [PersonnelActualPropertyRef]
	parent: PersonnelActualPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
}

input PersonnelActualRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	personnelUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [PersonnelActualRef]
	parent: PersonnelActualRef
	properties: [PersonnelActualPropertyRef]
	testResults: [TestResultRef]
	personnelClass: [PersonnelClassRef]
	person: [PersonRef]
	personVersion: [PersonVersionRef]
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PersonnelClassFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [PersonnelClassHasFilter]
	and: [PersonnelClassFilter]
	or: [PersonnelClassFilter]
	not: PersonnelClassFilter
}

input PersonnelClassOrder {
	asc: PersonnelClassOrderable
	desc: PersonnelClassOrderable
	then: PersonnelClassOrder
}

input PersonnelClassPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PersonnelClassVersionRef]
	activeVersion: PersonnelClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [PersonnelClassVersionRef]
	personVersions: [PersonVersionRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	personnelRequirements: [PersonnelRequirementRef]
	personnelActual: [PersonnelActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input PersonnelClassPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PersonnelClassPropertyHasFilter]
	and: [PersonnelClassPropertyFilter]
	or: [PersonnelClassPropertyFilter]
	not: PersonnelClassPropertyFilter
}

input PersonnelClassPropertyOrder {
	asc: PersonnelClassPropertyOrderable
	desc: PersonnelClassPropertyOrderable
	then: PersonnelClassPropertyOrder
}

input PersonnelClassPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	personnelClassVersion: PersonnelClassVersionRef
	children: [PersonnelClassPropertyRef]
	parent: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	personnelRequirementProperties: [PersonnelRequirementPropertyRef]
	personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
	personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonnelClassPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	personnelClassVersion: PersonnelClassVersionRef
	children: [PersonnelClassPropertyRef]
	parent: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	personnelRequirementProperties: [PersonnelRequirementPropertyRef]
	personnelSpecificationProperties: [PersonnelSpecificationPropertyRef]
	personnelActualProperties: [PersonnelActualPropertyRef]
}

input PersonnelClassRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PersonnelClassVersionRef]
	activeVersion: PersonnelClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [PersonnelClassVersionRef]
	personVersions: [PersonVersionRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	personnelRequirements: [PersonnelRequirementRef]
	personnelActual: [PersonnelActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
}

input PersonnelClassVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [PersonnelClassVersionHasFilter]
	and: [PersonnelClassVersionFilter]
	or: [PersonnelClassVersionFilter]
	not: PersonnelClassVersionFilter
}

input PersonnelClassVersionOrder {
	asc: PersonnelClassVersionOrderable
	desc: PersonnelClassVersionOrderable
	then: PersonnelClassVersionOrder
}

input PersonnelClassVersionPatch {
	acl: [AccessPermissionRef]
	personnelClass: PersonnelClassRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: PersonnelClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	properties: [PersonnelClassPropertyRef]
	includesPropertiesOf: [PersonnelClassRef]
	stateModels: [StateModelDefinitionRef]
}

input PersonnelClassVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	personnelClass: PersonnelClassRef
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	isActiveVersionOf: PersonnelClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	properties: [PersonnelClassPropertyRef]
	includesPropertiesOf: [PersonnelClassRef]
	stateModels: [StateModelDefinitionRef]
}

input PersonnelRequirementFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [PersonnelRequirementHasFilter]
	and: [PersonnelRequirementFilter]
	or: [PersonnelRequirementFilter]
	not: PersonnelRequirementFilter
}

input PersonnelRequirementOrder {
	asc: PersonnelRequirementOrderable
	desc: PersonnelRequirementOrderable
	then: PersonnelRequirementOrder
}

input PersonnelRequirementPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentRequirement: SegmentRequirementRef
	children: [PersonnelRequirementRef]
	parent: PersonnelRequirementRef
	properties: [PersonnelRequirementPropertyRef]
	personnelClass: PersonnelClassRef
	person: PersonRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PersonnelRequirementPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PersonnelRequirementPropertyHasFilter]
	and: [PersonnelRequirementPropertyFilter]
	or: [PersonnelRequirementPropertyFilter]
	not: PersonnelRequirementPropertyFilter
}

input PersonnelRequirementPropertyOrder {
	asc: PersonnelRequirementPropertyOrderable
	desc: PersonnelRequirementPropertyOrderable
	then: PersonnelRequirementPropertyOrder
}

input PersonnelRequirementPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	personnelRequirement: PersonnelRequirementRef
	children: [PersonnelRequirementPropertyRef]
	parent: PersonnelRequirementPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
}

input PersonnelRequirementPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	personnelRequirement: PersonnelRequirementRef
	children: [PersonnelRequirementPropertyRef]
	parent: PersonnelRequirementPropertyRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
}

input PersonnelRequirementRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentRequirement: SegmentRequirementRef
	children: [PersonnelRequirementRef]
	parent: PersonnelRequirementRef
	properties: [PersonnelRequirementPropertyRef]
	personnelClass: PersonnelClassRef
	person: PersonRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PersonnelSpecificationFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	personnelUse: StringExactFilter_StringFullTextFilter
	has: [PersonnelSpecificationHasFilter]
	and: [PersonnelSpecificationFilter]
	or: [PersonnelSpecificationFilter]
	not: PersonnelSpecificationFilter
}

input PersonnelSpecificationOrder {
	asc: PersonnelSpecificationOrderable
	desc: PersonnelSpecificationOrderable
	then: PersonnelSpecificationOrder
}

input PersonnelSpecificationPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	personnelUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [PersonnelSpecificationRef]
	parent: PersonnelSpecificationRef
	properties: [PersonnelSpecificationPropertyRef]
	personnelClass: PersonnelClassRef
	person: PersonRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: TestResultRef
}

input PersonnelSpecificationPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PersonnelSpecificationPropertyHasFilter]
	and: [PersonnelSpecificationPropertyFilter]
	or: [PersonnelSpecificationPropertyFilter]
	not: PersonnelSpecificationPropertyFilter
}

input PersonnelSpecificationPropertyOrder {
	asc: PersonnelSpecificationPropertyOrderable
	desc: PersonnelSpecificationPropertyOrderable
	then: PersonnelSpecificationPropertyOrder
}

input PersonnelSpecificationPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [PersonnelSpecificationPropertyRef]
	parent: PersonnelSpecificationPropertyRef
	personnelSpecification: PersonnelSpecificationRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
}

input PersonnelSpecificationPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [PersonnelSpecificationPropertyRef]
	parent: PersonnelSpecificationPropertyRef
	personnelSpecification: PersonnelSpecificationRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
}

input PersonnelSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	personnelUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [PersonnelSpecificationRef]
	parent: PersonnelSpecificationRef
	properties: [PersonnelSpecificationPropertyRef]
	personnelClass: PersonnelClassRef
	person: PersonRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: TestResultRef
}

input PhysicalAssetActualFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	physicalAssetUse: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetActualHasFilter]
	and: [PhysicalAssetActualFilter]
	or: [PhysicalAssetActualFilter]
	not: PhysicalAssetActualFilter
}

input PhysicalAssetActualOrder {
	asc: PhysicalAssetActualOrderable
	desc: PhysicalAssetActualOrderable
	then: PhysicalAssetActualOrder
}

input PhysicalAssetActualPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	physicalLocation: OperationalLocationRef
	physicalAssetUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [PhysicalAssetActualRef]
	parent: PhysicalAssetActualRef
	properties: [PhysicalAssetActualPropertyRef]
	testResults: [TestResultRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	physicalAssetVersion: PhysicalAssetVersionRef
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PhysicalAssetActualPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetActualPropertyHasFilter]
	and: [PhysicalAssetActualPropertyFilter]
	or: [PhysicalAssetActualPropertyFilter]
	not: PhysicalAssetActualPropertyFilter
}

input PhysicalAssetActualPropertyOrder {
	asc: PhysicalAssetActualPropertyOrderable
	desc: PhysicalAssetActualPropertyOrderable
	then: PhysicalAssetActualPropertyOrder
}

input PhysicalAssetActualPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	physicalAssetActual: PhysicalAssetActualRef
	children: [PhysicalAssetActualPropertyRef]
	parent: PhysicalAssetActualPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetActualPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	physicalAssetActual: PhysicalAssetActualRef
	children: [PhysicalAssetActualPropertyRef]
	parent: PhysicalAssetActualPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetActualRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	physicalLocation: OperationalLocationRef
	physicalAssetUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [PhysicalAssetActualRef]
	parent: PhysicalAssetActualRef
	properties: [PhysicalAssetActualPropertyRef]
	testResults: [TestResultRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	physicalAssetVersion: PhysicalAssetVersionRef
	jobResponse: JobResponseRef
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PhysicalAssetClassFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [PhysicalAssetClassHasFilter]
	and: [PhysicalAssetClassFilter]
	or: [PhysicalAssetClassFilter]
	not: PhysicalAssetClassFilter
}

input PhysicalAssetClassOrder {
	asc: PhysicalAssetClassOrderable
	desc: PhysicalAssetClassOrderable
	then: PhysicalAssetClassOrder
}

input PhysicalAssetClassPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PhysicalAssetClassVersionRef]
	activeVersion: PhysicalAssetClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [PhysicalAssetClassVersionRef]
	isMadeUpOf: [PhysicalAssetClassRef]
	isPartOf: [PhysicalAssetClassRef]
	physicalAssetVersions: [PhysicalAssetVersionRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	uiSortIndex: Int
}

input PhysicalAssetClassPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetClassPropertyHasFilter]
	and: [PhysicalAssetClassPropertyFilter]
	or: [PhysicalAssetClassPropertyFilter]
	not: PhysicalAssetClassPropertyFilter
}

input PhysicalAssetClassPropertyOrder {
	asc: PhysicalAssetClassPropertyOrderable
	desc: PhysicalAssetClassPropertyOrderable
	then: PhysicalAssetClassPropertyOrder
}

input PhysicalAssetClassPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	children: [PhysicalAssetClassPropertyRef]
	parent: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetClassPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	propertyType: Isa95PropertyType
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	children: [PhysicalAssetClassPropertyRef]
	parent: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetClassRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PhysicalAssetClassVersionRef]
	activeVersion: PhysicalAssetClassVersionRef
	nextVersion: String
	id: String
	label: String
	isIncludedIn: [PhysicalAssetClassVersionRef]
	isMadeUpOf: [PhysicalAssetClassRef]
	isPartOf: [PhysicalAssetClassRef]
	physicalAssetVersions: [PhysicalAssetVersionRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	uiSortIndex: Int
}

input PhysicalAssetClassVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	manufacturer: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetClassVersionHasFilter]
	and: [PhysicalAssetClassVersionFilter]
	or: [PhysicalAssetClassVersionFilter]
	not: PhysicalAssetClassVersionFilter
}

input PhysicalAssetClassVersionOrder {
	asc: PhysicalAssetClassVersionOrderable
	desc: PhysicalAssetClassVersionOrderable
	then: PhysicalAssetClassVersionOrder
}

input PhysicalAssetClassVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	physicalAssetClass: PhysicalAssetClassRef
	isActiveVersionOf: PhysicalAssetClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	manufacturer: String
	properties: [PhysicalAssetClassPropertyRef]
	includesPropertiesOf: [PhysicalAssetClassRef]
	stateModels: [StateModelDefinitionRef]
}

input PhysicalAssetClassVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	physicalAssetClass: PhysicalAssetClassRef
	isActiveVersionOf: PhysicalAssetClassRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	manufacturer: String
	properties: [PhysicalAssetClassPropertyRef]
	includesPropertiesOf: [PhysicalAssetClassRef]
	stateModels: [StateModelDefinitionRef]
}

input PhysicalAssetDataSourceFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	has: [PhysicalAssetDataSourceHasFilter]
	and: [PhysicalAssetDataSourceFilter]
	or: [PhysicalAssetDataSourceFilter]
	not: PhysicalAssetDataSourceFilter
}

input PhysicalAssetDataSourceOrder {
	asc: PhysicalAssetDataSourceOrderable
	desc: PhysicalAssetDataSourceOrderable
	then: PhysicalAssetDataSourceOrder
}

input PhysicalAssetDataSourcePatch {
	acl: [AccessPermissionRef]
	physicalAssetVersion: PhysicalAssetVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	topicTemplate: String
	dataSourceVersion: DataSourceVersionRef
}

input PhysicalAssetDataSourceRef {
	iid: ID
	acl: [AccessPermissionRef]
	physicalAssetVersion: PhysicalAssetVersionRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	topicTemplate: String
	dataSourceVersion: DataSourceVersionRef
}

input PhysicalAssetFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [PhysicalAssetHasFilter]
	and: [PhysicalAssetFilter]
	or: [PhysicalAssetFilter]
	not: PhysicalAssetFilter
}

input PhysicalAssetOrder {
	asc: PhysicalAssetOrderable
	desc: PhysicalAssetOrderable
	then: PhysicalAssetOrder
}

input PhysicalAssetPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PhysicalAssetVersionRef]
	activeVersion: PhysicalAssetVersionRef
	nextVersion: String
	id: String
	label: String
	isMadeUpOf: [PhysicalAssetRef]
	isPartOf: [PhysicalAssetRef]
	equipmentAssetMapping: [EquipmentAssetMappingRef]
	equipment: EquipmentRef
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
	uiSortIndex: Int
}

input PhysicalAssetPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetPropertyHasFilter]
	and: [PhysicalAssetPropertyFilter]
	or: [PhysicalAssetPropertyFilter]
	not: PhysicalAssetPropertyFilter
}

input PhysicalAssetPropertyOrder {
	asc: PhysicalAssetPropertyOrderable
	desc: PhysicalAssetPropertyOrderable
	then: PhysicalAssetPropertyOrder
}

input PhysicalAssetPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	physicalAssetVersion: PhysicalAssetVersionRef
	children: [PhysicalAssetPropertyRef]
	parent: PhysicalAssetPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
	physicalAssetVersion: PhysicalAssetVersionRef
	children: [PhysicalAssetPropertyRef]
	parent: PhysicalAssetPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	correspondsTo: EvaluatedPropertyRef
	recordsMeasurementOf: [PropertyMeasurementRef]
	physicalAssetSpecificationProperties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetRequirementProperties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetActualProperties: [PhysicalAssetActualPropertyRef]
}

input PhysicalAssetRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [PhysicalAssetVersionRef]
	activeVersion: PhysicalAssetVersionRef
	nextVersion: String
	id: String
	label: String
	isMadeUpOf: [PhysicalAssetRef]
	isPartOf: [PhysicalAssetRef]
	equipmentAssetMapping: [EquipmentAssetMappingRef]
	equipment: EquipmentRef
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	materialLots: [MaterialLotRef]
	materialSubLots: [MaterialSubLotRef]
	events: [EventRef]
	stateModelInstances: [StateModelInstanceRef]
	uiSortIndex: Int
}

input PhysicalAssetRequirementFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetRequirementHasFilter]
	and: [PhysicalAssetRequirementFilter]
	or: [PhysicalAssetRequirementFilter]
	not: PhysicalAssetRequirementFilter
}

input PhysicalAssetRequirementOrder {
	asc: PhysicalAssetRequirementOrderable
	desc: PhysicalAssetRequirementOrderable
	then: PhysicalAssetRequirementOrder
}

input PhysicalAssetRequirementPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	physicalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentLevel: EquipmentElementLevel
	segmentRequirement: SegmentRequirementRef
	children: [PhysicalAssetRequirementRef]
	parent: PhysicalAssetRequirementRef
	properties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PhysicalAssetRequirementPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetRequirementPropertyHasFilter]
	and: [PhysicalAssetRequirementPropertyFilter]
	or: [PhysicalAssetRequirementPropertyFilter]
	not: PhysicalAssetRequirementPropertyFilter
}

input PhysicalAssetRequirementPropertyOrder {
	asc: PhysicalAssetRequirementPropertyOrderable
	desc: PhysicalAssetRequirementPropertyOrderable
	then: PhysicalAssetRequirementPropertyOrder
}

input PhysicalAssetRequirementPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	children: [PhysicalAssetRequirementPropertyRef]
	parent: PhysicalAssetRequirementPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetRequirementPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	children: [PhysicalAssetRequirementPropertyRef]
	parent: PhysicalAssetRequirementPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetRequirementRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	physicalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	equipmentLevel: EquipmentElementLevel
	segmentRequirement: SegmentRequirementRef
	children: [PhysicalAssetRequirementRef]
	parent: PhysicalAssetRequirementRef
	properties: [PhysicalAssetRequirementPropertyRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	jobOrder: JobOrderRef
	testedBy: [TestSpecificationRef]
	specifiesTests: [TestSpecificationRef]
	testResults: [TestResultRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input PhysicalAssetSpecificationFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	physicalAssetUse: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetSpecificationHasFilter]
	and: [PhysicalAssetSpecificationFilter]
	or: [PhysicalAssetSpecificationFilter]
	not: PhysicalAssetSpecificationFilter
}

input PhysicalAssetSpecificationOrder {
	asc: PhysicalAssetSpecificationOrderable
	desc: PhysicalAssetSpecificationOrderable
	then: PhysicalAssetSpecificationOrder
}

input PhysicalAssetSpecificationPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	physicalLocation: OperationalLocationRef
	physicalAssetUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [PhysicalAssetSpecificationRef]
	parent: PhysicalAssetSpecificationRef
	properties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input PhysicalAssetSpecificationPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetSpecificationPropertyHasFilter]
	and: [PhysicalAssetSpecificationPropertyFilter]
	or: [PhysicalAssetSpecificationPropertyFilter]
	not: PhysicalAssetSpecificationPropertyFilter
}

input PhysicalAssetSpecificationPropertyOrder {
	asc: PhysicalAssetSpecificationPropertyOrderable
	desc: PhysicalAssetSpecificationPropertyOrderable
	then: PhysicalAssetSpecificationPropertyOrder
}

input PhysicalAssetSpecificationPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [PhysicalAssetSpecificationPropertyRef]
	parent: PhysicalAssetSpecificationPropertyRef
	physicalAssetSpecification: PhysicalAssetSpecificationRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetSpecificationPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	children: [PhysicalAssetSpecificationPropertyRef]
	parent: PhysicalAssetSpecificationPropertyRef
	physicalAssetSpecification: PhysicalAssetSpecificationRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
}

input PhysicalAssetSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	physicalLocation: OperationalLocationRef
	physicalAssetUse: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	operationsSegment: OperationsSegmentRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [PhysicalAssetSpecificationRef]
	parent: PhysicalAssetSpecificationRef
	properties: [PhysicalAssetSpecificationPropertyRef]
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input PhysicalAssetVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	fixedAssetID: StringExactFilter_StringFullTextFilter
	vendorID: StringExactFilter_StringFullTextFilter
	physicalLocationDescription: StringExactFilter_StringFullTextFilter
	has: [PhysicalAssetVersionHasFilter]
	and: [PhysicalAssetVersionFilter]
	or: [PhysicalAssetVersionFilter]
	not: PhysicalAssetVersionFilter
}

input PhysicalAssetVersionOrder {
	asc: PhysicalAssetVersionOrderable
	desc: PhysicalAssetVersionOrderable
	then: PhysicalAssetVersionOrder
}

input PhysicalAssetVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	physicalAsset: PhysicalAssetRef
	isActiveVersionOf: PhysicalAssetRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	fixedAssetID: String
	vendorID: String
	physicalLocation: OperationalLocationRef
	physicalLocationDescription: String
	physicalAssetClasses: [PhysicalAssetClassRef]
	properties: [PhysicalAssetPropertyRef]
	dataSources: [PhysicalAssetDataSourceRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	stateModels: [StateModelDefinitionRef]
}

input PhysicalAssetVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	physicalAsset: PhysicalAssetRef
	isActiveVersionOf: PhysicalAssetRef
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	fixedAssetID: String
	vendorID: String
	physicalLocation: OperationalLocationRef
	physicalLocationDescription: String
	physicalAssetClasses: [PhysicalAssetClassRef]
	properties: [PhysicalAssetPropertyRef]
	dataSources: [PhysicalAssetDataSourceRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	stateModels: [StateModelDefinitionRef]
}

input ProcessLocation_hash {
	eq: ProcessLocation
	in: [ProcessLocation]
}

input ProcessSegmentDependencyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [ProcessSegmentDependencyHasFilter]
	and: [ProcessSegmentDependencyFilter]
	or: [ProcessSegmentDependencyFilter]
	not: ProcessSegmentDependencyFilter
}

input ProcessSegmentDependencyOrder {
	asc: ProcessSegmentDependencyOrderable
	desc: ProcessSegmentDependencyOrderable
	then: ProcessSegmentDependencyOrder
}

input ProcessSegmentDependencyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	from: ProcessSegmentRef
	to: ProcessSegmentRef
	rules: [RuleRef]
}

input ProcessSegmentDependencyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	from: ProcessSegmentRef
	to: ProcessSegmentRef
	rules: [RuleRef]
}

input ProcessSegmentFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [ProcessSegmentHasFilter]
	and: [ProcessSegmentFilter]
	or: [ProcessSegmentFilter]
	not: ProcessSegmentFilter
}

input ProcessSegmentOrder {
	asc: ProcessSegmentOrderable
	desc: ProcessSegmentOrderable
	then: ProcessSegmentOrder
}

input ProcessSegmentParameterFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [ProcessSegmentParameterHasFilter]
	and: [ProcessSegmentParameterFilter]
	or: [ProcessSegmentParameterFilter]
	not: ProcessSegmentParameterFilter
}

input ProcessSegmentParameterOrder {
	asc: ProcessSegmentParameterOrderable
	desc: ProcessSegmentParameterOrderable
	then: ProcessSegmentParameterOrder
}

input ProcessSegmentParameterPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [ProcessSegmentParameterRef]
	parent: ProcessSegmentParameterRef
	segmentParameters: [SegmentParameterRef]
	jobOrderParameter: JobOrderParameterRef
}

input ProcessSegmentParameterRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	processSegmentVersion: ProcessSegmentVersionRef
	children: [ProcessSegmentParameterRef]
	parent: ProcessSegmentParameterRef
	segmentParameters: [SegmentParameterRef]
	jobOrderParameter: JobOrderParameterRef
}

input ProcessSegmentPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [ProcessSegmentVersionRef]
	activeVersion: ProcessSegmentVersionRef
	nextVersion: String
	id: String
	label: String
	isMadeUpOf: [ProcessSegmentRef]
	isPartOf: ProcessSegmentRef
	workMasters: [WorkMasterRef]
	inflows: [ProcessSegmentDependencyRef]
	outflows: [ProcessSegmentDependencyRef]
	operationsSegments: [OperationsSegmentRef]
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef]
}

input ProcessSegmentRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	versions: [ProcessSegmentVersionRef]
	activeVersion: ProcessSegmentVersionRef
	nextVersion: String
	id: String
	label: String
	isMadeUpOf: [ProcessSegmentRef]
	isPartOf: ProcessSegmentRef
	workMasters: [WorkMasterRef]
	inflows: [ProcessSegmentDependencyRef]
	outflows: [ProcessSegmentDependencyRef]
	operationsSegments: [OperationsSegmentRef]
	segmentRequirements: [SegmentRequirementRef]
	segmentResponses: [SegmentResponseRef]
}

input ProcessSegmentVersionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	operationsType: WorkType_hash
	has: [ProcessSegmentVersionHasFilter]
	and: [ProcessSegmentVersionFilter]
	or: [ProcessSegmentVersionFilter]
	not: ProcessSegmentVersionFilter
}

input ProcessSegmentVersionOrder {
	asc: ProcessSegmentVersionOrderable
	desc: ProcessSegmentVersionOrderable
	then: ProcessSegmentVersionOrder
}

input ProcessSegmentVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	processSegment: ProcessSegmentRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	isActiveVersionOf: ProcessSegmentRef
	id: String
	description: String
	operationsType: WorkType
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	duration: Float
	durationUoM: UnitOfMeasureRef
	processSegmentParameters: [ProcessSegmentParameterRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
}

input ProcessSegmentVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	processSegment: ProcessSegmentRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	version: String
	versionStatus: VersionState
	isActiveVersionOf: ProcessSegmentRef
	id: String
	description: String
	operationsType: WorkType
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	duration: Float
	durationUoM: UnitOfMeasureRef
	processSegmentParameters: [ProcessSegmentParameterRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
}

input PropertyBindingType_hash {
	eq: PropertyBindingType
	in: [PropertyBindingType]
}

input PropertyMeasurementFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [PropertyMeasurementHasFilter]
	and: [PropertyMeasurementFilter]
	or: [PropertyMeasurementFilter]
	not: PropertyMeasurementFilter
}

input PropertyMeasurementOrder {
	asc: PropertyMeasurementOrderable
	desc: PropertyMeasurementOrderable
	then: PropertyMeasurementOrder
}

input PropertyMeasurementPatch {
	id: String
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	measurementDate: DateTime
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	expiration: DateTime
	testResult: TestResultRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input PropertyMeasurementRef {
	iid: ID
	id: String
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	measurementDate: DateTime
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	expiration: DateTime
	testResult: TestResultRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
	personnelClassProperty: PersonnelClassPropertyRef
	personProperty: PersonPropertyRef
	equipmentClassProperty: EquipmentClassPropertyRef
	equipmentProperty: EquipmentPropertyRef
	physicalAssetClassProperty: PhysicalAssetClassPropertyRef
	physicalAssetProperty: PhysicalAssetPropertyRef
	materialClassProperty: MaterialClassPropertyRef
	materialDefinitionProperty: MaterialDefinitionPropertyRef
	materialLotProperty: MaterialLotPropertyRef
}

input PropertyNameAliasFilter {
	iid: [ID!]
	propertyLabel: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	dataSourceTopicLabel: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [PropertyNameAliasHasFilter]
	and: [PropertyNameAliasFilter]
	or: [PropertyNameAliasFilter]
	not: PropertyNameAliasFilter
}

input PropertyNameAliasOrder {
	asc: PropertyNameAliasOrderable
	desc: PropertyNameAliasOrderable
	then: PropertyNameAliasOrder
}

input PropertyNameAliasPatch {
	propertyLabel: String
	expression: String
	equipmentVersion: EquipmentVersionRef
	dataSource: DataSourceRef
	dataSourceTopic: DataSourceTopicRef
	dataSourceTopicLabel: String
}

input PropertyNameAliasRef {
	iid: ID
	propertyLabel: String
	expression: String
	equipmentVersion: EquipmentVersionRef
	dataSource: DataSourceRef
	dataSourceTopic: DataSourceTopicRef
	dataSourceTopicLabel: String
}

input PropertyValueAliasFilter {
	iid: [ID!]
	value: StringFullTextFilter
	alias: StringFullTextFilter
	system: StringFullTextFilter
	has: [PropertyValueAliasHasFilter]
	and: [PropertyValueAliasFilter]
	or: [PropertyValueAliasFilter]
	not: PropertyValueAliasFilter
}

input PropertyValueAliasOrder {
	asc: PropertyValueAliasOrderable
	desc: PropertyValueAliasOrderable
	then: PropertyValueAliasOrder
}

input PropertyValueAliasPatch {
	property: EquipmentClassPropertyRef
	value: String
	alias: String
	system: String
}

input PropertyValueAliasRef {
	iid: ID
	property: EquipmentClassPropertyRef
	value: String
	alias: String
	system: String
}

input RuleFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	processLocation: ProcessLocation_hash
	has: [RuleHasFilter]
	and: [RuleFilter]
	or: [RuleFilter]
	not: RuleFilter
}

input RuleOrder {
	asc: RuleOrderable
	desc: RuleOrderable
	then: RuleOrder
}

input RulePatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	processLocation: ProcessLocation
	triggerExpression: String
	delayOption: Boolean
	delayTime: Int
	payloadFields: [PayloadFieldDefinitionRef]
	workflowSpecification: WorkflowSpecificationRef
	triggerProperties: [EquipmentClassPropertyRef]
	operationsSegment: OperationsSegmentRef
	operationsSegmentDependency: OperationsSegmentDependencyRef
	processSegmentDependency: ProcessSegmentDependencyRef
	equipmentClassVersion: EquipmentClassVersionRef
}

input RuleRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	processLocation: ProcessLocation
	triggerExpression: String
	delayOption: Boolean
	delayTime: Int
	payloadFields: [PayloadFieldDefinitionRef]
	workflowSpecification: WorkflowSpecificationRef
	triggerProperties: [EquipmentClassPropertyRef]
	operationsSegment: OperationsSegmentRef
	operationsSegmentDependency: OperationsSegmentDependencyRef
	processSegmentDependency: ProcessSegmentDependencyRef
	equipmentClassVersion: EquipmentClassVersionRef
}

input ScheduleState_hash {
	eq: ScheduleState
	in: [ScheduleState]
}

input SecretFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [SecretHasFilter]
	and: [SecretFilter]
	or: [SecretFilter]
	not: SecretFilter
}

input SecretOrder {
	asc: SecretOrderable
	desc: SecretOrderable
	then: SecretOrder
}

input SecretPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versions: [SecretVersionRef]
	activeVersion: SecretVersionRef
	nextVersion: String
	id: String
}

input SecretRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	versions: [SecretVersionRef]
	activeVersion: SecretVersionRef
	nextVersion: String
	id: String
}

input SecretVersionFilter {
	iid: [ID!]
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [SecretVersionHasFilter]
	and: [SecretVersionFilter]
	or: [SecretVersionFilter]
	not: SecretVersionFilter
}

input SecretVersionOrder {
	asc: SecretVersionOrderable
	desc: SecretVersionOrderable
	then: SecretVersionOrder
}

input SecretVersionPatch {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	secret: SecretRef
	isActiveVersionOf: SecretRef
	id: String
	value: String
}

input SecretVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	version: String
	versionStatus: VersionState
	secret: SecretRef
	isActiveVersionOf: SecretRef
	id: String
	value: String
}

input SegmentDataFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [SegmentDataHasFilter]
	and: [SegmentDataFilter]
	or: [SegmentDataFilter]
	not: SegmentDataFilter
}

input SegmentDataOrder {
	asc: SegmentDataOrderable
	desc: SegmentDataOrderable
	then: SegmentDataOrder
}

input SegmentDataPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [SegmentDataRef]
	parent: SegmentDataRef
}

input SegmentDataRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	segmentResponse: SegmentResponseRef
	children: [SegmentDataRef]
	parent: SegmentDataRef
}

input SegmentParameterFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [SegmentParameterHasFilter]
	and: [SegmentParameterFilter]
	or: [SegmentParameterFilter]
	not: SegmentParameterFilter
}

input SegmentParameterOrder {
	asc: SegmentParameterOrderable
	desc: SegmentParameterOrderable
	then: SegmentParameterOrder
}

input SegmentParameterPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	segmentRequirement: SegmentRequirementRef
	children: [SegmentParameterRef]
	parent: SegmentParameterRef
	parameterSpecification: ParameterSpecificationRef
	processSegmentParameter: ProcessSegmentParameterRef
	comments: [CommentRef]
}

input SegmentParameterRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	segmentRequirement: SegmentRequirementRef
	children: [SegmentParameterRef]
	parent: SegmentParameterRef
	parameterSpecification: ParameterSpecificationRef
	processSegmentParameter: ProcessSegmentParameterRef
	comments: [CommentRef]
}

input SegmentRequirementFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	earliestStartDate: DateTimeFilter
	latestEndDate: DateTimeFilter
	has: [SegmentRequirementHasFilter]
	and: [SegmentRequirementFilter]
	or: [SegmentRequirementFilter]
	not: SegmentRequirementFilter
}

input SegmentRequirementOrder {
	asc: SegmentRequirementOrderable
	desc: SegmentRequirementOrderable
	then: SegmentRequirementOrder
}

input SegmentRequirementPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	operationsType: WorkType
	earliestStartDate: DateTime
	latestEndDate: DateTime
	duration: Float
	durationUoM: UnitOfMeasureRef
	hierarchyScope: HierarchyScopeRef
	segmentState: ScheduleState
	notes: String
	operationsRequest: OperationsRequestRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	processSegment: ProcessSegmentRef
	children: [SegmentRequirementRef]
	parent: SegmentRequirementRef
	workRequests: [WorkRequestRef]
	jobOrders: [JobOrderRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
	parameters: [SegmentParameterRef]
	personnelRequirements: [PersonnelRequirementRef]
	equipmentRequirements: [EquipmentRequirementRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	materialRequirements: [MaterialRequirementRef]
}

input SegmentRequirementRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	operationsType: WorkType
	earliestStartDate: DateTime
	latestEndDate: DateTime
	duration: Float
	durationUoM: UnitOfMeasureRef
	hierarchyScope: HierarchyScopeRef
	segmentState: ScheduleState
	notes: String
	operationsRequest: OperationsRequestRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	processSegment: ProcessSegmentRef
	children: [SegmentRequirementRef]
	parent: SegmentRequirementRef
	workRequests: [WorkRequestRef]
	jobOrders: [JobOrderRef]
	operationsResponses: [OperationsResponseRef]
	segmentResponses: [SegmentResponseRef]
	parameters: [SegmentParameterRef]
	personnelRequirements: [PersonnelRequirementRef]
	equipmentRequirements: [EquipmentRequirementRef]
	physicalAssetRequirements: [PhysicalAssetRequirementRef]
	materialRequirements: [MaterialRequirementRef]
}

input SegmentResponseFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	operationsType: WorkType_hash
	actualStartDateTime: DateTimeFilter
	actualEndDateTime: DateTimeFilter
	postingDateTime: DateTimeFilter
	segmentState: JobState_hash
	has: [SegmentResponseHasFilter]
	and: [SegmentResponseFilter]
	or: [SegmentResponseFilter]
	not: SegmentResponseFilter
}

input SegmentResponseOrder {
	asc: SegmentResponseOrderable
	desc: SegmentResponseOrderable
	then: SegmentResponseOrder
}

input SegmentResponsePatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	operationsType: WorkType
	actualStartDateTime: DateTime
	actualEndDateTime: DateTime
	postingDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	segmentState: JobState
	operationsDefinitions: [OperationsDefinitionRef]
	operationsSegments: [OperationsSegmentRef]
	processSegment: ProcessSegmentRef
	operationsRequests: [OperationsRequestRef]
	segmentRequirements: [SegmentRequirementRef]
	workResponses: WorkResponseRef
	jobResponses: JobResponseRef
	children: [SegmentResponseRef]
	parent: SegmentResponseRef
	operationsResponse: OperationsResponseRef
	segmentData: [SegmentDataRef]
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	materialActual: [MaterialActualRef]
}

input SegmentResponseRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	operationsType: WorkType
	actualStartDateTime: DateTime
	actualEndDateTime: DateTime
	postingDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	segmentState: JobState
	operationsDefinitions: [OperationsDefinitionRef]
	operationsSegments: [OperationsSegmentRef]
	processSegment: ProcessSegmentRef
	operationsRequests: [OperationsRequestRef]
	segmentRequirements: [SegmentRequirementRef]
	workResponses: WorkResponseRef
	jobResponses: JobResponseRef
	children: [SegmentResponseRef]
	parent: SegmentResponseRef
	operationsResponse: OperationsResponseRef
	segmentData: [SegmentDataRef]
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	physicalAssetActual: [PhysicalAssetActualRef]
	materialActual: [MaterialActualRef]
}

input SignatureFilter {
	iid: [ID!]
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [SignatureHasFilter]
	and: [SignatureFilter]
	or: [SignatureFilter]
	not: SignatureFilter
}

input SignatureOrder {
	asc: SignatureOrderable
	desc: SignatureOrderable
	then: SignatureOrder
}

input SignaturePatch {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	timestamp: DateTime
	changeIndication: String
	signatureReason: SignatureReasonRef
	personVersion: PersonVersionRef
	comment: CommentRef
	signatureForAComment: CommentRef
	event: EventRef
	alarmEvent: AlarmEventRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	materialActual: MaterialActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	personnelActual: PersonnelActualRef
	workRequest: WorkRequestRef
	jobOrder: JobOrderRef
	materialRequirement: MaterialRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	personnelRequirement: PersonnelRequirementRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input SignatureReasonFilter {
	iid: [ID!]
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [SignatureReasonHasFilter]
	and: [SignatureReasonFilter]
	or: [SignatureReasonFilter]
	not: SignatureReasonFilter
}

input SignatureReasonOrder {
	asc: SignatureReasonOrderable
	desc: SignatureReasonOrderable
	then: SignatureReasonOrder
}

input SignatureReasonPatch {
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	signatures: [SignatureRef]
}

input SignatureReasonRef {
	iid: ID
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	signatures: [SignatureRef]
}

input SignatureRef {
	iid: ID
	acl: [AccessPermissionRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	timestamp: DateTime
	changeIndication: String
	signatureReason: SignatureReasonRef
	personVersion: PersonVersionRef
	comment: CommentRef
	signatureForAComment: CommentRef
	event: EventRef
	alarmEvent: AlarmEventRef
	workResponse: WorkResponseRef
	jobResponse: JobResponseRef
	jobResponseData: JobResponseDataRef
	materialActual: MaterialActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	personnelActual: PersonnelActualRef
	workRequest: WorkRequestRef
	jobOrder: JobOrderRef
	materialRequirement: MaterialRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	personnelRequirement: PersonnelRequirementRef
	workMaster: WorkMasterRef
	workDirective: WorkDirectiveRef
}

input SpatialDefinitionFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	srid: StringExactFilter_StringFullTextFilter
	sridAuthority: StringExactFilter_StringFullTextFilter
	has: [SpatialDefinitionHasFilter]
	and: [SpatialDefinitionFilter]
	or: [SpatialDefinitionFilter]
	not: SpatialDefinitionFilter
}

input SpatialDefinitionOrder {
	asc: SpatialDefinitionOrderable
	desc: SpatialDefinitionOrderable
	then: SpatialDefinitionOrder
}

input SpatialDefinitionPatch {
	recordEntries: [InformationObjectRef]
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	pointValue: PointRef
	polygonValue: PolygonRef
	multiPolygonValue: MultiPolygonRef
	srid: String
	sridAuthority: String
}

input SpatialDefinitionRef {
	iid: ID
	recordEntries: [InformationObjectRef]
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	pointValue: PointRef
	polygonValue: PolygonRef
	multiPolygonValue: MultiPolygonRef
	srid: String
	sridAuthority: String
}

input StateModelActionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	actionType: StateModelActionType_hash
	has: [StateModelActionHasFilter]
	and: [StateModelActionFilter]
	or: [StateModelActionFilter]
	not: StateModelActionFilter
}

input StateModelActionOrder {
	asc: StateModelActionOrderable
	desc: StateModelActionOrderable
	then: StateModelActionOrder
}

input StateModelActionPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	actionType: StateModelActionType
	workflowSpecification: WorkflowSpecificationRef
	variables: String
	transition: StateModelTransitionRef
	isEntryActionForState: StateModelStateRef
	isExitActionForState: StateModelStateRef
}

input StateModelActionRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	actionType: StateModelActionType
	workflowSpecification: WorkflowSpecificationRef
	variables: String
	transition: StateModelTransitionRef
	isEntryActionForState: StateModelStateRef
	isExitActionForState: StateModelStateRef
}

input StateModelActionType_hash {
	eq: StateModelActionType
	in: [StateModelActionType]
}

input StateModelDefinitionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	has: [StateModelDefinitionHasFilter]
	and: [StateModelDefinitionFilter]
	or: [StateModelDefinitionFilter]
	not: StateModelDefinitionFilter
}

input StateModelDefinitionOrder {
	asc: StateModelDefinitionOrderable
	desc: StateModelDefinitionOrderable
	then: StateModelDefinitionOrder
}

input StateModelDefinitionPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	states: [StateModelStateRef]
	transitions: [StateModelTransitionRef]
	events: [StateModelEventRef]
	bpmnXMLEncoded: String
	equipmentClassVersion: EquipmentClassVersionRef
	equipmentVersion: EquipmentVersionRef
	materialClassVersion: MaterialClassVersionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	personnelClassVersion: PersonnelClassVersionRef
	personVersion: PersonVersionRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	physicalAssetVersion: PhysicalAssetVersionRef
	instances: [StateModelInstanceRef]
	properties: [StateModelPropertyRef]
}

input StateModelDefinitionRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	description: String
	hierarchyScope: HierarchyScopeRef
	states: [StateModelStateRef]
	transitions: [StateModelTransitionRef]
	events: [StateModelEventRef]
	bpmnXMLEncoded: String
	equipmentClassVersion: EquipmentClassVersionRef
	equipmentVersion: EquipmentVersionRef
	materialClassVersion: MaterialClassVersionRef
	materialDefinitionVersion: MaterialDefinitionVersionRef
	personnelClassVersion: PersonnelClassVersionRef
	personVersion: PersonVersionRef
	physicalAssetClassVersion: PhysicalAssetClassVersionRef
	physicalAssetVersion: PhysicalAssetVersionRef
	instances: [StateModelInstanceRef]
	properties: [StateModelPropertyRef]
}

input StateModelEventFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [StateModelEventHasFilter]
	and: [StateModelEventFilter]
	or: [StateModelEventFilter]
	not: StateModelEventFilter
}

input StateModelEventOrder {
	asc: StateModelEventOrderable
	desc: StateModelEventOrderable
	then: StateModelEventOrder
}

input StateModelEventPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	stateModelDefinition: StateModelDefinitionRef
	transitions: [StateModelTransitionRef]
}

input StateModelEventRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	stateModelDefinition: StateModelDefinitionRef
	transitions: [StateModelTransitionRef]
}

input StateModelInstanceFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	state: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [StateModelInstanceHasFilter]
	and: [StateModelInstanceFilter]
	or: [StateModelInstanceFilter]
	not: StateModelInstanceFilter
}

input StateModelInstanceOrder {
	asc: StateModelInstanceOrderable
	desc: StateModelInstanceOrderable
	then: StateModelInstanceOrder
}

input StateModelInstancePatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	stateModelDefinition: StateModelDefinitionRef
	description: String
	hierarchyScope: HierarchyScopeRef
	state: String
	transitions: [StateTransitionInstanceRef]
	equipment: EquipmentRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	person: PersonRef
	physicalAsset: PhysicalAssetRef
}

input StateModelInstanceRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	label: String
	stateModelDefinition: StateModelDefinitionRef
	description: String
	hierarchyScope: HierarchyScopeRef
	state: String
	transitions: [StateTransitionInstanceRef]
	equipment: EquipmentRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	person: PersonRef
	physicalAsset: PhysicalAssetRef
}

input StateModelPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [StateModelPropertyHasFilter]
	and: [StateModelPropertyFilter]
	or: [StateModelPropertyFilter]
	not: StateModelPropertyFilter
}

input StateModelPropertyOrder {
	asc: StateModelPropertyOrderable
	desc: StateModelPropertyOrderable
	then: StateModelPropertyOrder
}

input StateModelPropertyPatch {
	acl: [AccessPermissionRef]
	StateModel: StateModelDefinitionRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [StateModelPropertyRef]
	parent: StateModelPropertyRef
}

input StateModelPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	StateModel: StateModelDefinitionRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [StateModelPropertyRef]
	parent: StateModelPropertyRef
}

input StateModelStateFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	isInitialState: Boolean
	isFinalState: Boolean
	has: [StateModelStateHasFilter]
	and: [StateModelStateFilter]
	or: [StateModelStateFilter]
	not: StateModelStateFilter
}

input StateModelStateOrder {
	asc: StateModelStateOrderable
	desc: StateModelStateOrderable
	then: StateModelStateOrder
}

input StateModelStatePatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	parent: StateModelStateRef
	children: [StateModelStateRef]
	id: String
	label: String
	isInitialState: Boolean
	isFinalState: Boolean
	stateModelDefinition: StateModelDefinitionRef
	inflows: [StateModelTransitionRef]
	outflows: [StateModelTransitionRef]
	onEntry: [StateModelActionRef]
	onExit: [StateModelActionRef]
}

input StateModelStateRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	parent: StateModelStateRef
	children: [StateModelStateRef]
	id: String
	label: String
	isInitialState: Boolean
	isFinalState: Boolean
	stateModelDefinition: StateModelDefinitionRef
	inflows: [StateModelTransitionRef]
	outflows: [StateModelTransitionRef]
	onEntry: [StateModelActionRef]
	onExit: [StateModelActionRef]
}

input StateModelTransitionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [StateModelTransitionHasFilter]
	and: [StateModelTransitionFilter]
	or: [StateModelTransitionFilter]
	not: StateModelTransitionFilter
}

input StateModelTransitionOrder {
	asc: StateModelTransitionOrderable
	desc: StateModelTransitionOrderable
	then: StateModelTransitionOrder
}

input StateModelTransitionPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	stateModelDefinition: StateModelDefinitionRef
	stateModelEvents: [StateModelEventRef]
	from: StateModelStateRef
	to: StateModelStateRef
	condition: String
	stateModelActions: [StateModelActionRef]
}

input StateModelTransitionRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	label: String
	stateModelDefinition: StateModelDefinitionRef
	stateModelEvents: [StateModelEventRef]
	from: StateModelStateRef
	to: StateModelStateRef
	condition: String
	stateModelActions: [StateModelActionRef]
}

input StateTransitionInstanceFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	timestamp: DateTimeFilter
	fromState: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	toState: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [StateTransitionInstanceHasFilter]
	and: [StateTransitionInstanceFilter]
	or: [StateTransitionInstanceFilter]
	not: StateTransitionInstanceFilter
}

input StateTransitionInstanceOrder {
	asc: StateTransitionInstanceOrderable
	desc: StateTransitionInstanceOrderable
	then: StateTransitionInstanceOrder
}

input StateTransitionInstancePatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	stateModelInstance: StateModelInstanceRef
	timestamp: DateTime
	fromState: String
	toState: String
}

input StateTransitionInstanceRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	stateModelInstance: StateModelInstanceRef
	timestamp: DateTime
	fromState: String
	toState: String
}

input StringExactFilter_StringFullTextFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
	alloftext: String
	anyoftext: String
}

input StringExactFilter_StringFullTextFilter_StringRegExpFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
	alloftext: String
	anyoftext: String
	regexp: String
}

input TestResultFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	has: [TestResultHasFilter]
	and: [TestResultFilter]
	or: [TestResultFilter]
	not: TestResultFilter
}

input TestResultOrder {
	asc: TestResultOrderable
	desc: TestResultOrderable
	then: TestResultOrder
}

input TestResultPatch {
	id: String
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	hierarchyScope: HierarchyScopeRef
	evaluationDate: DateTime
	evaluationCriterionResult: String
	expiration: DateTime
	parent: TestResultRef
	children: [TestResultRef]
	propertyMeasurements: [PropertyMeasurementRef]
	personnelRequirement: PersonnelRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	materialRequirement: MaterialRequirementRef
	personnelSpecification: PersonnelSpecificationRef
	equipmentSpecification: EquipmentSpecificationRef
	materialSpecification: MaterialSpecificationRef
	personnelClass: PersonnelClassRef
	person: PersonRef
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	materialClass: MaterialClassRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	personnelActual: PersonnelActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	materialActual: MaterialActualRef
}

input TestResultRef {
	iid: ID
	id: String
	recordEntries: [InformationObjectRef]
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	hierarchyScope: HierarchyScopeRef
	evaluationDate: DateTime
	evaluationCriterionResult: String
	expiration: DateTime
	parent: TestResultRef
	children: [TestResultRef]
	propertyMeasurements: [PropertyMeasurementRef]
	personnelRequirement: PersonnelRequirementRef
	equipmentRequirement: EquipmentRequirementRef
	physicalAssetRequirement: PhysicalAssetRequirementRef
	materialRequirement: MaterialRequirementRef
	personnelSpecification: PersonnelSpecificationRef
	equipmentSpecification: EquipmentSpecificationRef
	materialSpecification: MaterialSpecificationRef
	personnelClass: PersonnelClassRef
	person: PersonRef
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	physicalAssetClass: PhysicalAssetClassRef
	physicalAsset: PhysicalAssetRef
	materialClass: MaterialClassRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	personnelActual: PersonnelActualRef
	equipmentActual: EquipmentActualRef
	physicalAssetActual: PhysicalAssetActualRef
	materialActual: MaterialActualRef
}

input TestSpecificationCriteriaFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	expression: StringExactFilter_StringFullTextFilter
	result: StringExactFilter_StringFullTextFilter
	has: [TestSpecificationCriteriaHasFilter]
	and: [TestSpecificationCriteriaFilter]
	or: [TestSpecificationCriteriaFilter]
	not: TestSpecificationCriteriaFilter
}

input TestSpecificationCriteriaOrder {
	asc: TestSpecificationCriteriaOrderable
	desc: TestSpecificationCriteriaOrderable
	then: TestSpecificationCriteriaOrder
}

input TestSpecificationCriteriaPatch {
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	sequence: Int
	expression: String
	result: String
	testSpecification: TestSpecificationRef
	evaluatedProperties: [EvaluatedPropertyRef]
}

input TestSpecificationCriteriaRef {
	iid: ID
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	sequence: Int
	expression: String
	result: String
	testSpecification: TestSpecificationRef
	evaluatedProperties: [EvaluatedPropertyRef]
}

input TestSpecificationFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	version: StringExactFilter_StringFullTextFilter
	key: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	has: [TestSpecificationHasFilter]
	and: [TestSpecificationFilter]
	or: [TestSpecificationFilter]
	not: TestSpecificationFilter
}

input TestSpecificationOrder {
	asc: TestSpecificationOrderable
	desc: TestSpecificationOrderable
	then: TestSpecificationOrder
}

input TestSpecificationPatch {
	id: String
	label: String
	version: String
	recordEntries: [InformationObjectRef]
	key: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	testSampleSize: String
	physicalSample: Boolean
	recurrenceQuantity: String
	recurrenceTimeInterval: String
	parent: TestSpecificationRef
	children: [TestSpecificationRef]
	properties: [TestSpecificationPropertyRef]
	criteria: [TestSpecificationCriteriaRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	requiredByPersonnelRequirement: PersonnelRequirementRef
	requiredByEquipmentRequirement: EquipmentRequirementRef
	requiredByPhysicalAssetRequirement: PhysicalAssetRequirementRef
	requiredByMaterialRequirement: MaterialRequirementRef
	requiredByPersonnelSpecification: PersonnelSpecificationRef
	requiredByEquipmentSpecification: EquipmentSpecificationRef
	requiredByMaterialSpecification: MaterialSpecificationRef
	testsPersonnelRequirements: [PersonnelRequirementRef]
	testsEquipmentRequirements: [EquipmentRequirementRef]
	testsPhysicalAssetRequirements: [PhysicalAssetRequirementRef]
	testsMaterialRequirements: [MaterialRequirementRef]
	testsPersonnelSpecifications: [PersonnelSpecificationRef]
	testsEquipmentSpecifications: [EquipmentSpecificationRef]
	testsMaterialSpecifications: [MaterialSpecificationRef]
	requiredByPersonnelClass: PersonnelClassRef
	requiredByPerson: PersonRef
	requiredByEquipmentClass: EquipmentClassRef
	requiredByEquipment: EquipmentRef
	requiredByPhysicalAssetClass: PhysicalAssetClassRef
	requiredByPhysicalAsset: PhysicalAssetRef
	requiredByMaterialClass: MaterialClassRef
	requiredByMaterialDefinition: MaterialDefinitionRef
	requiredByMaterialLot: MaterialLotRef
	requiredByMaterialSubLot: MaterialSubLotRef
	testsPersonnelClass: [PersonnelClassRef]
	testsPerson: [PersonRef]
	testsEquipmentClass: [EquipmentClassRef]
	testsEquipment: [EquipmentRef]
	testsPhysicalAssetClass: [PhysicalAssetClassRef]
	testsPhysicalAsset: [PhysicalAssetRef]
	testsMaterialClass: [MaterialClassRef]
	testsMaterialDefinition: [MaterialDefinitionRef]
	testsMaterialLot: [MaterialLotRef]
	testsMaterialSubLot: [MaterialSubLotRef]
}

input TestSpecificationPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	label: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	has: [TestSpecificationPropertyHasFilter]
	and: [TestSpecificationPropertyFilter]
	or: [TestSpecificationPropertyFilter]
	not: TestSpecificationPropertyFilter
}

input TestSpecificationPropertyOrder {
	asc: TestSpecificationPropertyOrderable
	desc: TestSpecificationPropertyOrderable
	then: TestSpecificationPropertyOrder
}

input TestSpecificationPropertyPatch {
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	parent: TestSpecificationPropertyRef
	children: [TestSpecificationPropertyRef]
	testSpecification: TestSpecificationRef
}

input TestSpecificationPropertyRef {
	iid: ID
	id: String
	label: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	parent: TestSpecificationPropertyRef
	children: [TestSpecificationPropertyRef]
	testSpecification: TestSpecificationRef
}

input TestSpecificationRef {
	iid: ID
	id: String
	label: String
	version: String
	recordEntries: [InformationObjectRef]
	key: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	description: String
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	testSampleSize: String
	physicalSample: Boolean
	recurrenceQuantity: String
	recurrenceTimeInterval: String
	parent: TestSpecificationRef
	children: [TestSpecificationRef]
	properties: [TestSpecificationPropertyRef]
	criteria: [TestSpecificationCriteriaRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	requiredByPersonnelRequirement: PersonnelRequirementRef
	requiredByEquipmentRequirement: EquipmentRequirementRef
	requiredByPhysicalAssetRequirement: PhysicalAssetRequirementRef
	requiredByMaterialRequirement: MaterialRequirementRef
	requiredByPersonnelSpecification: PersonnelSpecificationRef
	requiredByEquipmentSpecification: EquipmentSpecificationRef
	requiredByMaterialSpecification: MaterialSpecificationRef
	testsPersonnelRequirements: [PersonnelRequirementRef]
	testsEquipmentRequirements: [EquipmentRequirementRef]
	testsPhysicalAssetRequirements: [PhysicalAssetRequirementRef]
	testsMaterialRequirements: [MaterialRequirementRef]
	testsPersonnelSpecifications: [PersonnelSpecificationRef]
	testsEquipmentSpecifications: [EquipmentSpecificationRef]
	testsMaterialSpecifications: [MaterialSpecificationRef]
	requiredByPersonnelClass: PersonnelClassRef
	requiredByPerson: PersonRef
	requiredByEquipmentClass: EquipmentClassRef
	requiredByEquipment: EquipmentRef
	requiredByPhysicalAssetClass: PhysicalAssetClassRef
	requiredByPhysicalAsset: PhysicalAssetRef
	requiredByMaterialClass: MaterialClassRef
	requiredByMaterialDefinition: MaterialDefinitionRef
	requiredByMaterialLot: MaterialLotRef
	requiredByMaterialSubLot: MaterialSubLotRef
	testsPersonnelClass: [PersonnelClassRef]
	testsPerson: [PersonRef]
	testsEquipmentClass: [EquipmentClassRef]
	testsEquipment: [EquipmentRef]
	testsPhysicalAssetClass: [PhysicalAssetClassRef]
	testsPhysicalAsset: [PhysicalAssetRef]
	testsMaterialClass: [MaterialClassRef]
	testsMaterialDefinition: [MaterialDefinitionRef]
	testsMaterialLot: [MaterialLotRef]
	testsMaterialSubLot: [MaterialSubLotRef]
}

input UnitOfMeasureConversionFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	has: [UnitOfMeasureConversionHasFilter]
	and: [UnitOfMeasureConversionFilter]
	or: [UnitOfMeasureConversionFilter]
	not: UnitOfMeasureConversionFilter
}

input UnitOfMeasureConversionOrder {
	asc: UnitOfMeasureConversionOrderable
	desc: UnitOfMeasureConversionOrderable
	then: UnitOfMeasureConversionOrder
}

input UnitOfMeasureConversionPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	fromUnitOfMeasure: UnitOfMeasureRef
	toUnitOfMeasure: UnitOfMeasureRef
	numerator: Float
	denominator: Float
	materialDefinitionVersion: MaterialDefinitionVersionRef
}

input UnitOfMeasureConversionRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	fromUnitOfMeasure: UnitOfMeasureRef
	toUnitOfMeasure: UnitOfMeasureRef
	numerator: Float
	denominator: Float
	materialDefinitionVersion: MaterialDefinitionVersionRef
}

input UnitOfMeasureFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [UnitOfMeasureHasFilter]
	and: [UnitOfMeasureFilter]
	or: [UnitOfMeasureFilter]
	not: UnitOfMeasureFilter
}

input UnitOfMeasureOrder {
	asc: UnitOfMeasureOrderable
	desc: UnitOfMeasureOrderable
	then: UnitOfMeasureOrder
}

input UnitOfMeasurePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	dataType: DataType
}

input UnitOfMeasureRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	dataType: DataType
}

input UpdateAccessPermissionInput {
	filter: AccessPermissionFilter!
	set: AccessPermissionPatch
	remove: AccessPermissionPatch
}

input UpdateAlarmEventInput {
	filter: AlarmEventFilter!
	set: AlarmEventPatch
	remove: AlarmEventPatch
}

input UpdateCommentInput {
	filter: CommentFilter!
	set: CommentPatch
	remove: CommentPatch
}

input UpdateDataSourceInput {
	filter: DataSourceFilter!
	set: DataSourcePatch
	remove: DataSourcePatch
}

input UpdateDataSourceMethodArgumentInput {
	filter: DataSourceMethodArgumentFilter!
	set: DataSourceMethodArgumentPatch
	remove: DataSourceMethodArgumentPatch
}

input UpdateDataSourceMethodInput {
	filter: DataSourceMethodFilter!
	set: DataSourceMethodPatch
	remove: DataSourceMethodPatch
}

input UpdateDataSourceTopicInput {
	filter: DataSourceTopicFilter!
	set: DataSourceTopicPatch
	remove: DataSourceTopicPatch
}

input UpdateDataSourceVersionInput {
	filter: DataSourceVersionFilter!
	set: DataSourceVersionPatch
	remove: DataSourceVersionPatch
}

input UpdateDataSubscriptionInput {
	filter: DataSubscriptionFilter!
	set: DataSubscriptionPatch
	remove: DataSubscriptionPatch
}

input UpdateEnvironmentalVariableInput {
	filter: EnvironmentalVariableFilter!
	set: EnvironmentalVariablePatch
	remove: EnvironmentalVariablePatch
}

input UpdateEnvironmentalVariableVersionInput {
	filter: EnvironmentalVariableVersionFilter!
	set: EnvironmentalVariableVersionPatch
	remove: EnvironmentalVariableVersionPatch
}

input UpdateEquipmentActualInput {
	filter: EquipmentActualFilter!
	set: EquipmentActualPatch
	remove: EquipmentActualPatch
}

input UpdateEquipmentActualPropertyInput {
	filter: EquipmentActualPropertyFilter!
	set: EquipmentActualPropertyPatch
	remove: EquipmentActualPropertyPatch
}

input UpdateEquipmentAssetMappingInput {
	filter: EquipmentAssetMappingFilter!
	set: EquipmentAssetMappingPatch
	remove: EquipmentAssetMappingPatch
}

input UpdateEquipmentClassInput {
	filter: EquipmentClassFilter!
	set: EquipmentClassPatch
	remove: EquipmentClassPatch
}

input UpdateEquipmentClassPropertyInput {
	filter: EquipmentClassPropertyFilter!
	set: EquipmentClassPropertyPatch
	remove: EquipmentClassPropertyPatch
}

input UpdateEquipmentClassVersionInput {
	filter: EquipmentClassVersionFilter!
	set: EquipmentClassVersionPatch
	remove: EquipmentClassVersionPatch
}

input UpdateEquipmentDataSourceInput {
	filter: EquipmentDataSourceFilter!
	set: EquipmentDataSourcePatch
	remove: EquipmentDataSourcePatch
}

input UpdateEquipmentInput {
	filter: EquipmentFilter!
	set: EquipmentPatch
	remove: EquipmentPatch
}

input UpdateEquipmentNameAliasInput {
	filter: EquipmentNameAliasFilter!
	set: EquipmentNameAliasPatch
	remove: EquipmentNameAliasPatch
}

input UpdateEquipmentPropertyInput {
	filter: EquipmentPropertyFilter!
	set: EquipmentPropertyPatch
	remove: EquipmentPropertyPatch
}

input UpdateEquipmentPropertyOverrideInput {
	filter: EquipmentPropertyOverrideFilter!
	set: EquipmentPropertyOverridePatch
	remove: EquipmentPropertyOverridePatch
}

input UpdateEquipmentRequirementInput {
	filter: EquipmentRequirementFilter!
	set: EquipmentRequirementPatch
	remove: EquipmentRequirementPatch
}

input UpdateEquipmentRequirementPropertyInput {
	filter: EquipmentRequirementPropertyFilter!
	set: EquipmentRequirementPropertyPatch
	remove: EquipmentRequirementPropertyPatch
}

input UpdateEquipmentSpecificationInput {
	filter: EquipmentSpecificationFilter!
	set: EquipmentSpecificationPatch
	remove: EquipmentSpecificationPatch
}

input UpdateEquipmentSpecificationPropertyInput {
	filter: EquipmentSpecificationPropertyFilter!
	set: EquipmentSpecificationPropertyPatch
	remove: EquipmentSpecificationPropertyPatch
}

input UpdateEquipmentVersionInput {
	filter: EquipmentVersionFilter!
	set: EquipmentVersionPatch
	remove: EquipmentVersionPatch
}

input UpdateEvaluatedPropertyInput {
	filter: EvaluatedPropertyFilter!
	set: EvaluatedPropertyPatch
	remove: EvaluatedPropertyPatch
}

input UpdateEventAssociationInput {
	filter: EventAssociationFilter!
	set: EventAssociationPatch
	remove: EventAssociationPatch
}

input UpdateEventInput {
	filter: EventFilter!
	set: EventPatch
	remove: EventPatch
}

input UpdateEventPropertyInput {
	filter: EventPropertyFilter!
	set: EventPropertyPatch
	remove: EventPropertyPatch
}

input UpdateEventSubtypeInput {
	filter: EventSubtypeFilter!
	set: EventSubtypePatch
	remove: EventSubtypePatch
}

input UpdateEventTypeInput {
	filter: EventTypeFilter!
	set: EventTypePatch
	remove: EventTypePatch
}

input UpdateFormInput {
	filter: FormFilter!
	set: FormPatch
	remove: FormPatch
}

input UpdateHierarchyScopeInput {
	filter: HierarchyScopeFilter!
	set: HierarchyScopePatch
	remove: HierarchyScopePatch
}

input UpdateInformationObjectInput {
	filter: InformationObjectFilter!
	set: InformationObjectPatch
	remove: InformationObjectPatch
}

input UpdateJobListInput {
	filter: JobListFilter!
	set: JobListPatch
	remove: JobListPatch
}

input UpdateJobOrderInput {
	filter: JobOrderFilter!
	set: JobOrderPatch
	remove: JobOrderPatch
}

input UpdateJobOrderParameterInput {
	filter: JobOrderParameterFilter!
	set: JobOrderParameterPatch
	remove: JobOrderParameterPatch
}

input UpdateJobResponseDataInput {
	filter: JobResponseDataFilter!
	set: JobResponseDataPatch
	remove: JobResponseDataPatch
}

input UpdateJobResponseInput {
	filter: JobResponseFilter!
	set: JobResponsePatch
	remove: JobResponsePatch
}

input UpdateJobResponseListInput {
	filter: JobResponseListFilter!
	set: JobResponseListPatch
	remove: JobResponseListPatch
}

input UpdateLibreServiceInput {
	filter: LibreServiceFilter!
	set: LibreServicePatch
	remove: LibreServicePatch
}

input UpdateMaterialActualInput {
	filter: MaterialActualFilter!
	set: MaterialActualPatch
	remove: MaterialActualPatch
}

input UpdateMaterialActualPropertyInput {
	filter: MaterialActualPropertyFilter!
	set: MaterialActualPropertyPatch
	remove: MaterialActualPropertyPatch
}

input UpdateMaterialAlternateInput {
	filter: MaterialAlternateFilter!
	set: MaterialAlternatePatch
	remove: MaterialAlternatePatch
}

input UpdateMaterialClassInput {
	filter: MaterialClassFilter!
	set: MaterialClassPatch
	remove: MaterialClassPatch
}

input UpdateMaterialClassPropertyInput {
	filter: MaterialClassPropertyFilter!
	set: MaterialClassPropertyPatch
	remove: MaterialClassPropertyPatch
}

input UpdateMaterialClassVersionInput {
	filter: MaterialClassVersionFilter!
	set: MaterialClassVersionPatch
	remove: MaterialClassVersionPatch
}

input UpdateMaterialDefinitionInput {
	filter: MaterialDefinitionFilter!
	set: MaterialDefinitionPatch
	remove: MaterialDefinitionPatch
}

input UpdateMaterialDefinitionPropertyInput {
	filter: MaterialDefinitionPropertyFilter!
	set: MaterialDefinitionPropertyPatch
	remove: MaterialDefinitionPropertyPatch
}

input UpdateMaterialDefinitionVersionInput {
	filter: MaterialDefinitionVersionFilter!
	set: MaterialDefinitionVersionPatch
	remove: MaterialDefinitionVersionPatch
}

input UpdateMaterialLotInput {
	filter: MaterialLotFilter!
	set: MaterialLotPatch
	remove: MaterialLotPatch
}

input UpdateMaterialLotPropertyInput {
	filter: MaterialLotPropertyFilter!
	set: MaterialLotPropertyPatch
	remove: MaterialLotPropertyPatch
}

input UpdateMaterialRequirementInput {
	filter: MaterialRequirementFilter!
	set: MaterialRequirementPatch
	remove: MaterialRequirementPatch
}

input UpdateMaterialRequirementPropertyInput {
	filter: MaterialRequirementPropertyFilter!
	set: MaterialRequirementPropertyPatch
	remove: MaterialRequirementPropertyPatch
}

input UpdateMaterialSpecificationInput {
	filter: MaterialSpecificationFilter!
	set: MaterialSpecificationPatch
	remove: MaterialSpecificationPatch
}

input UpdateMaterialSpecificationPropertyInput {
	filter: MaterialSpecificationPropertyFilter!
	set: MaterialSpecificationPropertyPatch
	remove: MaterialSpecificationPropertyPatch
}

input UpdateMaterialSubLotInput {
	filter: MaterialSubLotFilter!
	set: MaterialSubLotPatch
	remove: MaterialSubLotPatch
}

input UpdateMenuInput {
	filter: MenuFilter!
	set: MenuPatch
	remove: MenuPatch
}

input UpdateMultiplicityInput {
	filter: MultiplicityFilter!
	set: MultiplicityPatch
	remove: MultiplicityPatch
}

input UpdateOperationalLocationClassInput {
	filter: OperationalLocationClassFilter!
	set: OperationalLocationClassPatch
	remove: OperationalLocationClassPatch
}

input UpdateOperationalLocationClassPropertyInput {
	filter: OperationalLocationClassPropertyFilter!
	set: OperationalLocationClassPropertyPatch
	remove: OperationalLocationClassPropertyPatch
}

input UpdateOperationalLocationClassVersionInput {
	filter: OperationalLocationClassVersionFilter!
	set: OperationalLocationClassVersionPatch
	remove: OperationalLocationClassVersionPatch
}

input UpdateOperationalLocationInput {
	filter: OperationalLocationFilter!
	set: OperationalLocationPatch
	remove: OperationalLocationPatch
}

input UpdateOperationalLocationPropertyInput {
	filter: OperationalLocationPropertyFilter!
	set: OperationalLocationPropertyPatch
	remove: OperationalLocationPropertyPatch
}

input UpdateOperationalLocationVersionInput {
	filter: OperationalLocationVersionFilter!
	set: OperationalLocationVersionPatch
	remove: OperationalLocationVersionPatch
}

input UpdateOperationsDefinitionInput {
	filter: OperationsDefinitionFilter!
	set: OperationsDefinitionPatch
	remove: OperationsDefinitionPatch
}

input UpdateOperationsDefinitionVersionInput {
	filter: OperationsDefinitionVersionFilter!
	set: OperationsDefinitionVersionPatch
	remove: OperationsDefinitionVersionPatch
}

input UpdateOperationsEventClassInput {
	filter: OperationsEventClassFilter!
	set: OperationsEventClassPatch
	remove: OperationsEventClassPatch
}

input UpdateOperationsEventClassPropertyInput {
	filter: OperationsEventClassPropertyFilter!
	set: OperationsEventClassPropertyPatch
	remove: OperationsEventClassPropertyPatch
}

input UpdateOperationsEventClassRecordSpecificationInput {
	filter: OperationsEventClassRecordSpecificationFilter!
	set: OperationsEventClassRecordSpecificationPatch
	remove: OperationsEventClassRecordSpecificationPatch
}

input UpdateOperationsEventClassVersionInput {
	filter: OperationsEventClassVersionFilter!
	set: OperationsEventClassVersionPatch
	remove: OperationsEventClassVersionPatch
}

input UpdateOperationsEventDefinitionInput {
	filter: OperationsEventDefinitionFilter!
	set: OperationsEventDefinitionPatch
	remove: OperationsEventDefinitionPatch
}

input UpdateOperationsEventDefinitionPropertyInput {
	filter: OperationsEventDefinitionPropertyFilter!
	set: OperationsEventDefinitionPropertyPatch
	remove: OperationsEventDefinitionPropertyPatch
}

input UpdateOperationsEventDefinitionRecordSpecificationInput {
	filter: OperationsEventDefinitionRecordSpecificationFilter!
	set: OperationsEventDefinitionRecordSpecificationPatch
	remove: OperationsEventDefinitionRecordSpecificationPatch
}

input UpdateOperationsEventDefinitionVersionInput {
	filter: OperationsEventDefinitionVersionFilter!
	set: OperationsEventDefinitionVersionPatch
	remove: OperationsEventDefinitionVersionPatch
}

input UpdateOperationsEventInput {
	filter: OperationsEventFilter!
	set: OperationsEventPatch
	remove: OperationsEventPatch
}

input UpdateOperationsEventPropertyInput {
	filter: OperationsEventPropertyFilter!
	set: OperationsEventPropertyPatch
	remove: OperationsEventPropertyPatch
}

input UpdateOperationsEventRecordEntryInput {
	filter: OperationsEventRecordEntryFilter!
	set: OperationsEventRecordEntryPatch
	remove: OperationsEventRecordEntryPatch
}

input UpdateOperationsEventRecordInput {
	filter: OperationsEventRecordFilter!
	set: OperationsEventRecordPatch
	remove: OperationsEventRecordPatch
}

input UpdateOperationsMaterialBillInput {
	filter: OperationsMaterialBillFilter!
	set: OperationsMaterialBillPatch
	remove: OperationsMaterialBillPatch
}

input UpdateOperationsPerformanceInput {
	filter: OperationsPerformanceFilter!
	set: OperationsPerformancePatch
	remove: OperationsPerformancePatch
}

input UpdateOperationsRequestInput {
	filter: OperationsRequestFilter!
	set: OperationsRequestPatch
	remove: OperationsRequestPatch
}

input UpdateOperationsResponseInput {
	filter: OperationsResponseFilter!
	set: OperationsResponsePatch
	remove: OperationsResponsePatch
}

input UpdateOperationsResponsePropertyInput {
	filter: OperationsResponsePropertyFilter!
	set: OperationsResponsePropertyPatch
	remove: OperationsResponsePropertyPatch
}

input UpdateOperationsScheduleInput {
	filter: OperationsScheduleFilter!
	set: OperationsSchedulePatch
	remove: OperationsSchedulePatch
}

input UpdateOperationsSegmentDependencyInput {
	filter: OperationsSegmentDependencyFilter!
	set: OperationsSegmentDependencyPatch
	remove: OperationsSegmentDependencyPatch
}

input UpdateOperationsSegmentInput {
	filter: OperationsSegmentFilter!
	set: OperationsSegmentPatch
	remove: OperationsSegmentPatch
}

input UpdateParameterSpecificationInput {
	filter: ParameterSpecificationFilter!
	set: ParameterSpecificationPatch
	remove: ParameterSpecificationPatch
}

input UpdatePayloadFieldDefinitionInput {
	filter: PayloadFieldDefinitionFilter!
	set: PayloadFieldDefinitionPatch
	remove: PayloadFieldDefinitionPatch
}

input UpdatePersonInput {
	filter: PersonFilter!
	set: PersonPatch
	remove: PersonPatch
}

input UpdatePersonPropertyInput {
	filter: PersonPropertyFilter!
	set: PersonPropertyPatch
	remove: PersonPropertyPatch
}

input UpdatePersonVersionInput {
	filter: PersonVersionFilter!
	set: PersonVersionPatch
	remove: PersonVersionPatch
}

input UpdatePersonnelActualInput {
	filter: PersonnelActualFilter!
	set: PersonnelActualPatch
	remove: PersonnelActualPatch
}

input UpdatePersonnelActualPropertyInput {
	filter: PersonnelActualPropertyFilter!
	set: PersonnelActualPropertyPatch
	remove: PersonnelActualPropertyPatch
}

input UpdatePersonnelClassInput {
	filter: PersonnelClassFilter!
	set: PersonnelClassPatch
	remove: PersonnelClassPatch
}

input UpdatePersonnelClassPropertyInput {
	filter: PersonnelClassPropertyFilter!
	set: PersonnelClassPropertyPatch
	remove: PersonnelClassPropertyPatch
}

input UpdatePersonnelClassVersionInput {
	filter: PersonnelClassVersionFilter!
	set: PersonnelClassVersionPatch
	remove: PersonnelClassVersionPatch
}

input UpdatePersonnelRequirementInput {
	filter: PersonnelRequirementFilter!
	set: PersonnelRequirementPatch
	remove: PersonnelRequirementPatch
}

input UpdatePersonnelRequirementPropertyInput {
	filter: PersonnelRequirementPropertyFilter!
	set: PersonnelRequirementPropertyPatch
	remove: PersonnelRequirementPropertyPatch
}

input UpdatePersonnelSpecificationInput {
	filter: PersonnelSpecificationFilter!
	set: PersonnelSpecificationPatch
	remove: PersonnelSpecificationPatch
}

input UpdatePersonnelSpecificationPropertyInput {
	filter: PersonnelSpecificationPropertyFilter!
	set: PersonnelSpecificationPropertyPatch
	remove: PersonnelSpecificationPropertyPatch
}

input UpdatePhysicalAssetActualInput {
	filter: PhysicalAssetActualFilter!
	set: PhysicalAssetActualPatch
	remove: PhysicalAssetActualPatch
}

input UpdatePhysicalAssetActualPropertyInput {
	filter: PhysicalAssetActualPropertyFilter!
	set: PhysicalAssetActualPropertyPatch
	remove: PhysicalAssetActualPropertyPatch
}

input UpdatePhysicalAssetClassInput {
	filter: PhysicalAssetClassFilter!
	set: PhysicalAssetClassPatch
	remove: PhysicalAssetClassPatch
}

input UpdatePhysicalAssetClassPropertyInput {
	filter: PhysicalAssetClassPropertyFilter!
	set: PhysicalAssetClassPropertyPatch
	remove: PhysicalAssetClassPropertyPatch
}

input UpdatePhysicalAssetClassVersionInput {
	filter: PhysicalAssetClassVersionFilter!
	set: PhysicalAssetClassVersionPatch
	remove: PhysicalAssetClassVersionPatch
}

input UpdatePhysicalAssetDataSourceInput {
	filter: PhysicalAssetDataSourceFilter!
	set: PhysicalAssetDataSourcePatch
	remove: PhysicalAssetDataSourcePatch
}

input UpdatePhysicalAssetInput {
	filter: PhysicalAssetFilter!
	set: PhysicalAssetPatch
	remove: PhysicalAssetPatch
}

input UpdatePhysicalAssetPropertyInput {
	filter: PhysicalAssetPropertyFilter!
	set: PhysicalAssetPropertyPatch
	remove: PhysicalAssetPropertyPatch
}

input UpdatePhysicalAssetRequirementInput {
	filter: PhysicalAssetRequirementFilter!
	set: PhysicalAssetRequirementPatch
	remove: PhysicalAssetRequirementPatch
}

input UpdatePhysicalAssetRequirementPropertyInput {
	filter: PhysicalAssetRequirementPropertyFilter!
	set: PhysicalAssetRequirementPropertyPatch
	remove: PhysicalAssetRequirementPropertyPatch
}

input UpdatePhysicalAssetSpecificationInput {
	filter: PhysicalAssetSpecificationFilter!
	set: PhysicalAssetSpecificationPatch
	remove: PhysicalAssetSpecificationPatch
}

input UpdatePhysicalAssetSpecificationPropertyInput {
	filter: PhysicalAssetSpecificationPropertyFilter!
	set: PhysicalAssetSpecificationPropertyPatch
	remove: PhysicalAssetSpecificationPropertyPatch
}

input UpdatePhysicalAssetVersionInput {
	filter: PhysicalAssetVersionFilter!
	set: PhysicalAssetVersionPatch
	remove: PhysicalAssetVersionPatch
}

input UpdateProcessSegmentDependencyInput {
	filter: ProcessSegmentDependencyFilter!
	set: ProcessSegmentDependencyPatch
	remove: ProcessSegmentDependencyPatch
}

input UpdateProcessSegmentInput {
	filter: ProcessSegmentFilter!
	set: ProcessSegmentPatch
	remove: ProcessSegmentPatch
}

input UpdateProcessSegmentParameterInput {
	filter: ProcessSegmentParameterFilter!
	set: ProcessSegmentParameterPatch
	remove: ProcessSegmentParameterPatch
}

input UpdateProcessSegmentVersionInput {
	filter: ProcessSegmentVersionFilter!
	set: ProcessSegmentVersionPatch
	remove: ProcessSegmentVersionPatch
}

input UpdatePropertyMeasurementInput {
	filter: PropertyMeasurementFilter!
	set: PropertyMeasurementPatch
	remove: PropertyMeasurementPatch
}

input UpdatePropertyNameAliasInput {
	filter: PropertyNameAliasFilter!
	set: PropertyNameAliasPatch
	remove: PropertyNameAliasPatch
}

input UpdatePropertyValueAliasInput {
	filter: PropertyValueAliasFilter!
	set: PropertyValueAliasPatch
	remove: PropertyValueAliasPatch
}

input UpdateRuleInput {
	filter: RuleFilter!
	set: RulePatch
	remove: RulePatch
}

input UpdateSecretInput {
	filter: SecretFilter!
	set: SecretPatch
	remove: SecretPatch
}

input UpdateSecretVersionInput {
	filter: SecretVersionFilter!
	set: SecretVersionPatch
	remove: SecretVersionPatch
}

input UpdateSegmentDataInput {
	filter: SegmentDataFilter!
	set: SegmentDataPatch
	remove: SegmentDataPatch
}

input UpdateSegmentParameterInput {
	filter: SegmentParameterFilter!
	set: SegmentParameterPatch
	remove: SegmentParameterPatch
}

input UpdateSegmentRequirementInput {
	filter: SegmentRequirementFilter!
	set: SegmentRequirementPatch
	remove: SegmentRequirementPatch
}

input UpdateSegmentResponseInput {
	filter: SegmentResponseFilter!
	set: SegmentResponsePatch
	remove: SegmentResponsePatch
}

input UpdateSignatureInput {
	filter: SignatureFilter!
	set: SignaturePatch
	remove: SignaturePatch
}

input UpdateSignatureReasonInput {
	filter: SignatureReasonFilter!
	set: SignatureReasonPatch
	remove: SignatureReasonPatch
}

input UpdateSpatialDefinitionInput {
	filter: SpatialDefinitionFilter!
	set: SpatialDefinitionPatch
	remove: SpatialDefinitionPatch
}

input UpdateStateModelActionInput {
	filter: StateModelActionFilter!
	set: StateModelActionPatch
	remove: StateModelActionPatch
}

input UpdateStateModelDefinitionInput {
	filter: StateModelDefinitionFilter!
	set: StateModelDefinitionPatch
	remove: StateModelDefinitionPatch
}

input UpdateStateModelEventInput {
	filter: StateModelEventFilter!
	set: StateModelEventPatch
	remove: StateModelEventPatch
}

input UpdateStateModelInstanceInput {
	filter: StateModelInstanceFilter!
	set: StateModelInstancePatch
	remove: StateModelInstancePatch
}

input UpdateStateModelPropertyInput {
	filter: StateModelPropertyFilter!
	set: StateModelPropertyPatch
	remove: StateModelPropertyPatch
}

input UpdateStateModelStateInput {
	filter: StateModelStateFilter!
	set: StateModelStatePatch
	remove: StateModelStatePatch
}

input UpdateStateModelTransitionInput {
	filter: StateModelTransitionFilter!
	set: StateModelTransitionPatch
	remove: StateModelTransitionPatch
}

input UpdateStateTransitionInstanceInput {
	filter: StateTransitionInstanceFilter!
	set: StateTransitionInstancePatch
	remove: StateTransitionInstancePatch
}

input UpdateTestResultInput {
	filter: TestResultFilter!
	set: TestResultPatch
	remove: TestResultPatch
}

input UpdateTestSpecificationCriteriaInput {
	filter: TestSpecificationCriteriaFilter!
	set: TestSpecificationCriteriaPatch
	remove: TestSpecificationCriteriaPatch
}

input UpdateTestSpecificationInput {
	filter: TestSpecificationFilter!
	set: TestSpecificationPatch
	remove: TestSpecificationPatch
}

input UpdateTestSpecificationPropertyInput {
	filter: TestSpecificationPropertyFilter!
	set: TestSpecificationPropertyPatch
	remove: TestSpecificationPropertyPatch
}

input UpdateUnitOfMeasureConversionInput {
	filter: UnitOfMeasureConversionFilter!
	set: UnitOfMeasureConversionPatch
	remove: UnitOfMeasureConversionPatch
}

input UpdateUnitOfMeasureInput {
	filter: UnitOfMeasureFilter!
	set: UnitOfMeasurePatch
	remove: UnitOfMeasurePatch
}

input UpdateWorkCalendarDefinitionEntryInput {
	filter: WorkCalendarDefinitionEntryFilter!
	set: WorkCalendarDefinitionEntryPatch
	remove: WorkCalendarDefinitionEntryPatch
}

input UpdateWorkCalendarDefinitionEntryPropertyInput {
	filter: WorkCalendarDefinitionEntryPropertyFilter!
	set: WorkCalendarDefinitionEntryPropertyPatch
	remove: WorkCalendarDefinitionEntryPropertyPatch
}

input UpdateWorkCalendarEntryInput {
	filter: WorkCalendarEntryFilter!
	set: WorkCalendarEntryPatch
	remove: WorkCalendarEntryPatch
}

input UpdateWorkCalendarEntryPropertyInput {
	filter: WorkCalendarEntryPropertyFilter!
	set: WorkCalendarEntryPropertyPatch
	remove: WorkCalendarEntryPropertyPatch
}

input UpdateWorkCalendarInput {
	filter: WorkCalendarFilter!
	set: WorkCalendarPatch
	remove: WorkCalendarPatch
}

input UpdateWorkDirectiveInput {
	filter: WorkDirectiveFilter!
	set: WorkDirectivePatch
	remove: WorkDirectivePatch
}

input UpdateWorkMasterInput {
	filter: WorkMasterFilter!
	set: WorkMasterPatch
	remove: WorkMasterPatch
}

input UpdateWorkPerformanceInput {
	filter: WorkPerformanceFilter!
	set: WorkPerformancePatch
	remove: WorkPerformancePatch
}

input UpdateWorkRequestInput {
	filter: WorkRequestFilter!
	set: WorkRequestPatch
	remove: WorkRequestPatch
}

input UpdateWorkResponseInput {
	filter: WorkResponseFilter!
	set: WorkResponsePatch
	remove: WorkResponsePatch
}

input UpdateWorkScheduleInput {
	filter: WorkScheduleFilter!
	set: WorkSchedulePatch
	remove: WorkSchedulePatch
}

input UpdateWorkflowErrorInput {
	filter: WorkflowErrorFilter!
	set: WorkflowErrorPatch
	remove: WorkflowErrorPatch
}

input UpdateWorkflowMessageInput {
	filter: WorkflowMessageFilter!
	set: WorkflowMessagePatch
	remove: WorkflowMessagePatch
}

input UpdateWorkflowShapeInput {
	filter: WorkflowShapeFilter!
	set: WorkflowShapePatch
	remove: WorkflowShapePatch
}

input UpdateWorkflowSpecificationConnectionInput {
	filter: WorkflowSpecificationConnectionFilter!
	set: WorkflowSpecificationConnectionPatch
	remove: WorkflowSpecificationConnectionPatch
}

input UpdateWorkflowSpecificationConnectionPropertyInput {
	filter: WorkflowSpecificationConnectionPropertyFilter!
	set: WorkflowSpecificationConnectionPropertyPatch
	remove: WorkflowSpecificationConnectionPropertyPatch
}

input UpdateWorkflowSpecificationConnectionTypeInput {
	filter: WorkflowSpecificationConnectionTypeFilter!
	set: WorkflowSpecificationConnectionTypePatch
	remove: WorkflowSpecificationConnectionTypePatch
}

input UpdateWorkflowSpecificationConnectionTypePropertyInput {
	filter: WorkflowSpecificationConnectionTypePropertyFilter!
	set: WorkflowSpecificationConnectionTypePropertyPatch
	remove: WorkflowSpecificationConnectionTypePropertyPatch
}

input UpdateWorkflowSpecificationInput {
	filter: WorkflowSpecificationFilter!
	set: WorkflowSpecificationPatch
	remove: WorkflowSpecificationPatch
}

input UpdateWorkflowSpecificationNodeInput {
	filter: WorkflowSpecificationNodeFilter!
	set: WorkflowSpecificationNodePatch
	remove: WorkflowSpecificationNodePatch
}

input UpdateWorkflowSpecificationNodePropertyInput {
	filter: WorkflowSpecificationNodePropertyFilter!
	set: WorkflowSpecificationNodePropertyPatch
	remove: WorkflowSpecificationNodePropertyPatch
}

input UpdateWorkflowSpecificationNodeTestCaseInput {
	filter: WorkflowSpecificationNodeTestCaseFilter!
	set: WorkflowSpecificationNodeTestCasePatch
	remove: WorkflowSpecificationNodeTestCasePatch
}

input UpdateWorkflowSpecificationNodeTypeInput {
	filter: WorkflowSpecificationNodeTypeFilter!
	set: WorkflowSpecificationNodeTypePatch
	remove: WorkflowSpecificationNodeTypePatch
}

input UpdateWorkflowSpecificationNodeTypePropertyInput {
	filter: WorkflowSpecificationNodeTypePropertyFilter!
	set: WorkflowSpecificationNodeTypePropertyPatch
	remove: WorkflowSpecificationNodeTypePropertyPatch
}

input UpdateWorkflowSpecificationNodeVariableInput {
	filter: WorkflowSpecificationNodeVariableFilter!
	set: WorkflowSpecificationNodeVariablePatch
	remove: WorkflowSpecificationNodeVariablePatch
}

input UpdateWorkflowSpecificationPropertyInput {
	filter: WorkflowSpecificationPropertyFilter!
	set: WorkflowSpecificationPropertyPatch
	remove: WorkflowSpecificationPropertyPatch
}

input UpdateWorkflowSpecificationVersionInput {
	filter: WorkflowSpecificationVersionFilter!
	set: WorkflowSpecificationVersionPatch
	remove: WorkflowSpecificationVersionPatch
}

input UpdateWorkflowTimerInput {
	filter: WorkflowTimerFilter!
	set: WorkflowTimerPatch
	remove: WorkflowTimerPatch
}

input UpdateWorkflowWaypointInput {
	filter: WorkflowWaypointFilter!
	set: WorkflowWaypointPatch
	remove: WorkflowWaypointPatch
}

input VersionState_hash {
	eq: VersionState
	in: [VersionState]
}

input WorkCalendarDefinitionEntryFilter {
	iid: [ID!]
	isActive: Boolean
	has: [WorkCalendarDefinitionEntryHasFilter]
	and: [WorkCalendarDefinitionEntryFilter]
	or: [WorkCalendarDefinitionEntryFilter]
	not: WorkCalendarDefinitionEntryFilter
}

input WorkCalendarDefinitionEntryOrder {
	asc: WorkCalendarDefinitionEntryOrderable
	desc: WorkCalendarDefinitionEntryOrderable
	then: WorkCalendarDefinitionEntryOrder
}

input WorkCalendarDefinitionEntryPatch {
	isActive: Boolean
	description: String
	hierarchyScope: EquipmentRef
	freq: Frequency
	startDateTime: DateTime
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType
	properties: [WorkCalendarDefinitionEntryPropertyRef]
	calendarEntries: [WorkCalendarEntryRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarDefinitionEntryPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [WorkCalendarDefinitionEntryPropertyHasFilter]
	and: [WorkCalendarDefinitionEntryPropertyFilter]
	or: [WorkCalendarDefinitionEntryPropertyFilter]
	not: WorkCalendarDefinitionEntryPropertyFilter
}

input WorkCalendarDefinitionEntryPropertyOrder {
	asc: WorkCalendarDefinitionEntryPropertyOrderable
	desc: WorkCalendarDefinitionEntryPropertyOrderable
	then: WorkCalendarDefinitionEntryPropertyOrder
}

input WorkCalendarDefinitionEntryPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	workCalendarDefinitionEntry: WorkCalendarDefinitionEntryRef
	children: [WorkCalendarDefinitionEntryPropertyRef]
	parent: WorkCalendarDefinitionEntryPropertyRef
}

input WorkCalendarDefinitionEntryPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	workCalendarDefinitionEntry: WorkCalendarDefinitionEntryRef
	children: [WorkCalendarDefinitionEntryPropertyRef]
	parent: WorkCalendarDefinitionEntryPropertyRef
}

input WorkCalendarDefinitionEntryRef {
	iid: ID
	isActive: Boolean
	description: String
	hierarchyScope: EquipmentRef
	freq: Frequency
	startDateTime: DateTime
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType
	properties: [WorkCalendarDefinitionEntryPropertyRef]
	calendarEntries: [WorkCalendarEntryRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarEntryFilter {
	iid: [ID!]
	isActive: Boolean
	startDateTime: DateTimeFilter
	finishDateTime: DateTimeFilter
	entryType: WorkCalendarEntryType_hash
	has: [WorkCalendarEntryHasFilter]
	and: [WorkCalendarEntryFilter]
	or: [WorkCalendarEntryFilter]
	not: WorkCalendarEntryFilter
}

input WorkCalendarEntryOrder {
	asc: WorkCalendarEntryOrderable
	desc: WorkCalendarEntryOrderable
	then: WorkCalendarEntryOrder
}

input WorkCalendarEntryPatch {
	isActive: Boolean
	description: String
	definition: WorkCalendarDefinitionEntryRef
	hierarchyScope: EquipmentRef
	startDateTime: DateTime
	finishDateTime: DateTime
	entryType: WorkCalendarEntryType
	properties: [WorkCalendarEntryPropertyRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarEntryPropertyFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	use: StringExactFilter_StringFullTextFilter
	has: [WorkCalendarEntryPropertyHasFilter]
	and: [WorkCalendarEntryPropertyFilter]
	or: [WorkCalendarEntryPropertyFilter]
	not: WorkCalendarEntryPropertyFilter
}

input WorkCalendarEntryPropertyOrder {
	asc: WorkCalendarEntryPropertyOrderable
	desc: WorkCalendarEntryPropertyOrderable
	then: WorkCalendarEntryPropertyOrder
}

input WorkCalendarEntryPropertyPatch {
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	workCalendarEntry: WorkCalendarEntryRef
	children: [WorkCalendarEntryPropertyRef]
	parent: WorkCalendarEntryPropertyRef
}

input WorkCalendarEntryPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	spatialDefinition: SpatialDefinitionRef
	operationalLocation: OperationalLocationRef
	use: String
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	workCalendarEntry: WorkCalendarEntryRef
	children: [WorkCalendarEntryPropertyRef]
	parent: WorkCalendarEntryPropertyRef
}

input WorkCalendarEntryRef {
	iid: ID
	isActive: Boolean
	description: String
	definition: WorkCalendarDefinitionEntryRef
	hierarchyScope: EquipmentRef
	startDateTime: DateTime
	finishDateTime: DateTime
	entryType: WorkCalendarEntryType
	properties: [WorkCalendarEntryPropertyRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarEntryType_hash {
	eq: WorkCalendarEntryType
	in: [WorkCalendarEntryType]
}

input WorkCalendarFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	name: StringHashFilter
	has: [WorkCalendarHasFilter]
	and: [WorkCalendarFilter]
	or: [WorkCalendarFilter]
	not: WorkCalendarFilter
}

input WorkCalendarOrder {
	asc: WorkCalendarOrderable
	desc: WorkCalendarOrderable
	then: WorkCalendarOrder
}

input WorkCalendarPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	name: String
	description: String
	definition: [WorkCalendarDefinitionEntryRef]
	entries: [WorkCalendarEntryRef]
	equipmentVersions: [EquipmentVersionRef]
}

input WorkCalendarRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	name: String
	description: String
	definition: [WorkCalendarDefinitionEntryRef]
	entries: [WorkCalendarEntryRef]
	equipmentVersions: [EquipmentVersionRef]
}

input WorkDirectiveFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	version: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	publishedDate: DateTimeFilter
	has: [WorkDirectiveHasFilter]
	and: [WorkDirectiveFilter]
	or: [WorkDirectiveFilter]
	not: WorkDirectiveFilter
}

input WorkDirectiveOrder {
	asc: WorkDirectiveOrderable
	desc: WorkDirectiveOrderable
	then: WorkDirectiveOrder
}

input WorkDirectivePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	version: String
	description: String
	hierarchyScope: HierarchyScopeRef
	workType: WorkType
	duration: Float
	durationUnitOfMeasure: UnitOfMeasureRef
	publishedDate: DateTime
	state: WorkDirectiveState
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	propertyMeasurements: [PropertyMeasurementRef]
	workMaster: WorkMasterRef
	children: [WorkDirectiveRef]
	parent: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkDirectiveRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	version: String
	description: String
	hierarchyScope: HierarchyScopeRef
	workType: WorkType
	duration: Float
	durationUnitOfMeasure: UnitOfMeasureRef
	publishedDate: DateTime
	state: WorkDirectiveState
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	propertyMeasurements: [PropertyMeasurementRef]
	workMaster: WorkMasterRef
	children: [WorkDirectiveRef]
	parent: WorkDirectiveRef
	workflowSpecification: WorkflowSpecificationRef
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkMasterFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	version: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	publishedDate: DateTimeFilter
	definitionType: DefinitionType_hash
	has: [WorkMasterHasFilter]
	and: [WorkMasterFilter]
	or: [WorkMasterFilter]
	not: WorkMasterFilter
}

input WorkMasterOrder {
	asc: WorkMasterOrderable
	desc: WorkMasterOrderable
	then: WorkMasterOrder
}

input WorkMasterPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	version: String
	description: String
	hierarchyScope: HierarchyScopeRef
	workType: WorkType
	duration: Float
	durationUnitOfMeasure: UnitOfMeasureRef
	publishedDate: DateTime
	definitionType: DefinitionType
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	propertyMeasurements: [PropertyMeasurementRef]
	parent: WorkMasterRef
	children: [WorkMasterRef]
	workDirectives: [WorkDirectiveRef]
	jobOrders: [JobOrderRef]
	defines: WorkMasterRef
	definedBy: [WorkMasterRef]
	processSegment: ProcessSegmentRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	workflowSpecification: WorkflowSpecificationRef
	jobResponses: [JobResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkMasterRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	version: String
	description: String
	hierarchyScope: HierarchyScopeRef
	workType: WorkType
	duration: Float
	durationUnitOfMeasure: UnitOfMeasureRef
	publishedDate: DateTime
	definitionType: DefinitionType
	parameterSpecifications: [ParameterSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	physicalAssetSpecifications: [PhysicalAssetSpecificationRef]
	materialSpecifications: [MaterialSpecificationRef]
	evaluatedProperties: [EvaluatedPropertyRef]
	propertyMeasurements: [PropertyMeasurementRef]
	parent: WorkMasterRef
	children: [WorkMasterRef]
	workDirectives: [WorkDirectiveRef]
	jobOrders: [JobOrderRef]
	defines: WorkMasterRef
	definedBy: [WorkMasterRef]
	processSegment: ProcessSegmentRef
	operationsDefinition: OperationsDefinitionRef
	operationsSegment: OperationsSegmentRef
	workflowSpecification: WorkflowSpecificationRef
	jobResponses: [JobResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkPerformanceFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	workType: WorkType_hash
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	publishedDate: DateTimeFilter
	has: [WorkPerformanceHasFilter]
	and: [WorkPerformanceFilter]
	or: [WorkPerformanceFilter]
	not: WorkPerformanceFilter
}

input WorkPerformanceOrder {
	asc: WorkPerformanceOrderable
	desc: WorkPerformanceOrderable
	then: WorkPerformanceOrder
}

input WorkPerformancePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	workState: JobState
	workResponses: [WorkResponseRef!]
	children: [WorkPerformanceRef]
	parent: WorkPerformanceRef
	workSchedule: WorkScheduleRef
}

input WorkPerformanceRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	workState: JobState
	workResponses: [WorkResponseRef!]
	children: [WorkPerformanceRef]
	parent: WorkPerformanceRef
	workSchedule: WorkScheduleRef
}

input WorkRequestFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	workType: WorkType_hash
	description: StringExactFilter_StringFullTextFilter
	plannedStartDateTime: DateTimeFilter
	plannedEndDateTime: DateTimeFilter
	has: [WorkRequestHasFilter]
	and: [WorkRequestFilter]
	or: [WorkRequestFilter]
	not: WorkRequestFilter
}

input WorkRequestOrder {
	asc: WorkRequestOrderable
	desc: WorkRequestOrderable
	then: WorkRequestOrder
}

input WorkRequestPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	workType: WorkType
	description: String
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	priority: String
	hierarchyScope: HierarchyScopeRef
	requestState: ScheduleState
	children: [WorkRequestRef]
	parent: WorkRequestRef
	workSchedule: WorkScheduleRef
	jobOrders: [JobOrderRef!]
	operationsRequest: OperationsRequestRef
	segmentRequirement: SegmentRequirementRef
	workResponses: [WorkResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkRequestRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	workType: WorkType
	description: String
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	priority: String
	hierarchyScope: HierarchyScopeRef
	requestState: ScheduleState
	children: [WorkRequestRef]
	parent: WorkRequestRef
	workSchedule: WorkScheduleRef
	jobOrders: [JobOrderRef!]
	operationsRequest: OperationsRequestRef
	segmentRequirement: SegmentRequirementRef
	workResponses: [WorkResponseRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkResponseFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	description: StringExactFilter_StringFullTextFilter
	workType: WorkType_hash
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	responseState: JobState_hash
	has: [WorkResponseHasFilter]
	and: [WorkResponseFilter]
	or: [WorkResponseFilter]
	not: WorkResponseFilter
}

input WorkResponseOrder {
	asc: WorkResponseOrderable
	desc: WorkResponseOrderable
	then: WorkResponseOrder
}

input WorkResponsePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	responseState: JobState
	workPerformance: WorkPerformanceRef
	children: [WorkResponseRef]
	parent: WorkResponseRef
	workRequest: WorkRequestRef
	jobResponses: [JobResponseRef!]
	segmentResponse: SegmentResponseRef
	events: [EventRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkResponseRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	description: String
	workType: WorkType
	startDateTime: DateTime
	endDateTime: DateTime
	hierarchyScope: HierarchyScopeRef
	responseState: JobState
	workPerformance: WorkPerformanceRef
	children: [WorkResponseRef]
	parent: WorkResponseRef
	workRequest: WorkRequestRef
	jobResponses: [JobResponseRef!]
	segmentResponse: SegmentResponseRef
	events: [EventRef]
	signatures: [SignatureRef]
	comments: [CommentRef]
}

input WorkScheduleFilter {
	iid: [ID!]
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	workType: WorkType_hash
	description: StringExactFilter_StringFullTextFilter
	scheduledStartDate: DateTimeFilter
	scheduledEndDate: DateTimeFilter
	publishedDate: DateTimeFilter
	scheduleState: ScheduleState_hash
	has: [WorkScheduleHasFilter]
	and: [WorkScheduleFilter]
	or: [WorkScheduleFilter]
	not: WorkScheduleFilter
}

input WorkScheduleOrder {
	asc: WorkScheduleOrderable
	desc: WorkScheduleOrderable
	then: WorkScheduleOrder
}

input WorkSchedulePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	workType: WorkType
	description: String
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	scheduleState: ScheduleState
	workRequests: [WorkRequestRef]
	children: [WorkScheduleRef]
	parent: WorkScheduleRef
	workPerformances: [WorkPerformanceRef]
}

input WorkScheduleRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	effectiveStart: DateTime
	effectiveEnd: DateTime
	id: String
	workType: WorkType
	description: String
	scheduledStartDate: DateTime
	scheduledEndDate: DateTime
	publishedDate: DateTime
	hierarchyScope: HierarchyScopeRef
	scheduleState: ScheduleState
	workRequests: [WorkRequestRef]
	children: [WorkScheduleRef]
	parent: WorkScheduleRef
	workPerformances: [WorkPerformanceRef]
}

input WorkType_hash {
	eq: WorkType
	in: [WorkType]
}

input WorkflowErrorFilter {
	iid: [ID!]
	id: StringHashFilter
	reference: StringExactFilter_StringFullTextFilter
	has: [WorkflowErrorHasFilter]
	and: [WorkflowErrorFilter]
	or: [WorkflowErrorFilter]
	not: WorkflowErrorFilter
}

input WorkflowErrorOrder {
	asc: WorkflowErrorOrderable
	desc: WorkflowErrorOrderable
	then: WorkflowErrorOrder
}

input WorkflowErrorPatch {
	id: String
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	code: String
}

input WorkflowErrorRef {
	iid: ID
	id: String
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	code: String
}

input WorkflowMessageFilter {
	iid: [ID!]
	id: StringHashFilter
	reference: StringExactFilter_StringFullTextFilter
	has: [WorkflowMessageHasFilter]
	and: [WorkflowMessageFilter]
	or: [WorkflowMessageFilter]
	not: WorkflowMessageFilter
}

input WorkflowMessageOrder {
	asc: WorkflowMessageOrderable
	desc: WorkflowMessageOrderable
	then: WorkflowMessageOrder
}

input WorkflowMessagePatch {
	id: String
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	enabled: Boolean
}

input WorkflowMessageRef {
	iid: ID
	id: String
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	enabled: Boolean
}

input WorkflowShapeFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [WorkflowShapeHasFilter]
	and: [WorkflowShapeFilter]
	or: [WorkflowShapeFilter]
	not: WorkflowShapeFilter
}

input WorkflowShapeOrder {
	asc: WorkflowShapeOrderable
	desc: WorkflowShapeOrderable
	then: WorkflowShapeOrder
}

input WorkflowShapePatch {
	acl: [AccessPermissionRef]
	id: String
	node: WorkflowSpecificationNodeRef
	x: String
	y: String
	width: String
	height: String
	icon: String
}

input WorkflowShapeRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	node: WorkflowSpecificationNodeRef
	x: String
	y: String
	width: String
	height: String
	icon: String
}

input WorkflowSpecificationConnectionFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	description: StringHashFilter
	_createdDateTime: DateTimeFilter
	_modifiedDateTime: DateTimeFilter
	has: [WorkflowSpecificationConnectionHasFilter]
	and: [WorkflowSpecificationConnectionFilter]
	or: [WorkflowSpecificationConnectionFilter]
	not: WorkflowSpecificationConnectionFilter
}

input WorkflowSpecificationConnectionOrder {
	asc: WorkflowSpecificationConnectionOrderable
	desc: WorkflowSpecificationConnectionOrderable
	then: WorkflowSpecificationConnectionOrder
}

input WorkflowSpecificationConnectionPatch {
	acl: [AccessPermissionRef]
	condition: String
	id: String
	name: String
	waypoints: [WorkflowWaypointRef]
	description: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	connectionType: WorkflowSpecificationConnectionTypeRef
	properties: [WorkflowSpecificationConnectionPropertyRef]
	to: WorkflowSpecificationNodeRef
	from: WorkflowSpecificationNodeRef
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input WorkflowSpecificationConnectionPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [WorkflowSpecificationConnectionPropertyHasFilter]
	and: [WorkflowSpecificationConnectionPropertyFilter]
	or: [WorkflowSpecificationConnectionPropertyFilter]
	not: WorkflowSpecificationConnectionPropertyFilter
}

input WorkflowSpecificationConnectionPropertyOrder {
	asc: WorkflowSpecificationConnectionPropertyOrderable
	desc: WorkflowSpecificationConnectionPropertyOrderable
	then: WorkflowSpecificationConnectionPropertyOrder
}

input WorkflowSpecificationConnectionPropertyPatch {
	acl: [AccessPermissionRef]
	connection: WorkflowSpecificationConnectionRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationConnectionPropertyRef]
	parent: WorkflowSpecificationConnectionPropertyRef
}

input WorkflowSpecificationConnectionPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	connection: WorkflowSpecificationConnectionRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationConnectionPropertyRef]
	parent: WorkflowSpecificationConnectionPropertyRef
}

input WorkflowSpecificationConnectionRef {
	iid: ID
	acl: [AccessPermissionRef]
	condition: String
	id: String
	name: String
	waypoints: [WorkflowWaypointRef]
	description: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	connectionType: WorkflowSpecificationConnectionTypeRef
	properties: [WorkflowSpecificationConnectionPropertyRef]
	to: WorkflowSpecificationNodeRef
	from: WorkflowSpecificationNodeRef
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input WorkflowSpecificationConnectionTypeFilter {
	iid: [ID!]
	id: StringHashFilter
	_createdDateTime: DateTimeFilter
	_modifiedDateTime: DateTimeFilter
	has: [WorkflowSpecificationConnectionTypeHasFilter]
	and: [WorkflowSpecificationConnectionTypeFilter]
	or: [WorkflowSpecificationConnectionTypeFilter]
	not: WorkflowSpecificationConnectionTypeFilter
}

input WorkflowSpecificationConnectionTypeOrder {
	asc: WorkflowSpecificationConnectionTypeOrderable
	desc: WorkflowSpecificationConnectionTypeOrderable
	then: WorkflowSpecificationConnectionTypeOrder
}

input WorkflowSpecificationConnectionTypePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	connections: [WorkflowSpecificationConnectionRef]
	properties: [WorkflowSpecificationConnectionTypePropertyRef]
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input WorkflowSpecificationConnectionTypePropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [WorkflowSpecificationConnectionTypePropertyHasFilter]
	and: [WorkflowSpecificationConnectionTypePropertyFilter]
	or: [WorkflowSpecificationConnectionTypePropertyFilter]
	not: WorkflowSpecificationConnectionTypePropertyFilter
}

input WorkflowSpecificationConnectionTypePropertyOrder {
	asc: WorkflowSpecificationConnectionTypePropertyOrderable
	desc: WorkflowSpecificationConnectionTypePropertyOrderable
	then: WorkflowSpecificationConnectionTypePropertyOrder
}

input WorkflowSpecificationConnectionTypePropertyPatch {
	acl: [AccessPermissionRef]
	connectionType: WorkflowSpecificationConnectionTypeRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationConnectionTypePropertyRef]
	parent: WorkflowSpecificationConnectionTypePropertyRef
}

input WorkflowSpecificationConnectionTypePropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	connectionType: WorkflowSpecificationConnectionTypeRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationConnectionTypePropertyRef]
	parent: WorkflowSpecificationConnectionTypePropertyRef
}

input WorkflowSpecificationConnectionTypeRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	connections: [WorkflowSpecificationConnectionRef]
	properties: [WorkflowSpecificationConnectionTypePropertyRef]
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input WorkflowSpecificationFilter {
	iid: [ID!]
	_createdDateTime: DateTimeFilter
	_modifiedDateTime: DateTimeFilter
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [WorkflowSpecificationHasFilter]
	and: [WorkflowSpecificationFilter]
	or: [WorkflowSpecificationFilter]
	not: WorkflowSpecificationFilter
}

input WorkflowSpecificationNodeFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_createdDateTime: DateTimeFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	_modifiedDateTime: DateTimeFilter
	role: StringExactFilter_StringFullTextFilter
	uiComponent: StringExactFilter_StringFullTextFilter
	has: [WorkflowSpecificationNodeHasFilter]
	and: [WorkflowSpecificationNodeFilter]
	or: [WorkflowSpecificationNodeFilter]
	not: WorkflowSpecificationNodeFilter
}

input WorkflowSpecificationNodeOrder {
	asc: WorkflowSpecificationNodeOrderable
	desc: WorkflowSpecificationNodeOrderable
	then: WorkflowSpecificationNodeOrder
}

input WorkflowSpecificationNodePatch {
	acl: [AccessPermissionRef]
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	properties: [WorkflowSpecificationNodePropertyRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	outflows: [WorkflowSpecificationConnectionRef]
	inflows: [WorkflowSpecificationConnectionRef]
	containsWorkflowSpecification: WorkflowSpecificationRef
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	form: FormRef
	inputs: [WorkflowSpecificationNodeVariableRef]
	outputs: [WorkflowSpecificationNodeVariableRef]
	message: WorkflowMessageRef
	error: WorkflowErrorRef
	timer: WorkflowTimerRef
	nodeType: WorkflowSpecificationNodeTypeRef
	role: String
	shape: WorkflowShapeRef
	uiComponent: String
	testCases: [WorkflowSpecificationNodeTestCaseRef]
	boundaryEvents: [WorkflowSpecificationNodeRef]
	attachedTo: WorkflowSpecificationNodeRef
}

input WorkflowSpecificationNodePropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [WorkflowSpecificationNodePropertyHasFilter]
	and: [WorkflowSpecificationNodePropertyFilter]
	or: [WorkflowSpecificationNodePropertyFilter]
	not: WorkflowSpecificationNodePropertyFilter
}

input WorkflowSpecificationNodePropertyOrder {
	asc: WorkflowSpecificationNodePropertyOrderable
	desc: WorkflowSpecificationNodePropertyOrderable
	then: WorkflowSpecificationNodePropertyOrder
}

input WorkflowSpecificationNodePropertyPatch {
	acl: [AccessPermissionRef]
	node: WorkflowSpecificationNodeRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationNodePropertyRef]
	parent: WorkflowSpecificationNodePropertyRef
}

input WorkflowSpecificationNodePropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	node: WorkflowSpecificationNodeRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationNodePropertyRef]
	parent: WorkflowSpecificationNodePropertyRef
}

input WorkflowSpecificationNodeRef {
	iid: ID
	acl: [AccessPermissionRef]
	id: String
	description: String
	hierarchyScope: HierarchyScopeRef
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	properties: [WorkflowSpecificationNodePropertyRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	outflows: [WorkflowSpecificationConnectionRef]
	inflows: [WorkflowSpecificationConnectionRef]
	containsWorkflowSpecification: WorkflowSpecificationRef
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	form: FormRef
	inputs: [WorkflowSpecificationNodeVariableRef]
	outputs: [WorkflowSpecificationNodeVariableRef]
	message: WorkflowMessageRef
	error: WorkflowErrorRef
	timer: WorkflowTimerRef
	nodeType: WorkflowSpecificationNodeTypeRef
	role: String
	shape: WorkflowShapeRef
	uiComponent: String
	testCases: [WorkflowSpecificationNodeTestCaseRef]
	boundaryEvents: [WorkflowSpecificationNodeRef]
	attachedTo: WorkflowSpecificationNodeRef
}

input WorkflowSpecificationNodeTestCaseFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	has: [WorkflowSpecificationNodeTestCaseHasFilter]
	and: [WorkflowSpecificationNodeTestCaseFilter]
	or: [WorkflowSpecificationNodeTestCaseFilter]
	not: WorkflowSpecificationNodeTestCaseFilter
}

input WorkflowSpecificationNodeTestCaseOrder {
	asc: WorkflowSpecificationNodeTestCaseOrderable
	desc: WorkflowSpecificationNodeTestCaseOrderable
	then: WorkflowSpecificationNodeTestCaseOrder
}

input WorkflowSpecificationNodeTestCasePatch {
	node: WorkflowSpecificationNodeRef
	id: String
	inputJson: String
	expectedResult: String
}

input WorkflowSpecificationNodeTestCaseRef {
	iid: ID
	node: WorkflowSpecificationNodeRef
	id: String
	inputJson: String
	expectedResult: String
}

input WorkflowSpecificationNodeTypeFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	_createdDateTime: DateTimeFilter
	_modifiedDateTime: DateTimeFilter
	has: [WorkflowSpecificationNodeTypeHasFilter]
	and: [WorkflowSpecificationNodeTypeFilter]
	or: [WorkflowSpecificationNodeTypeFilter]
	not: WorkflowSpecificationNodeTypeFilter
}

input WorkflowSpecificationNodeTypeOrder {
	asc: WorkflowSpecificationNodeTypeOrderable
	desc: WorkflowSpecificationNodeTypeOrderable
	then: WorkflowSpecificationNodeTypeOrder
}

input WorkflowSpecificationNodeTypePatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	name: String
	description: String
	hierarchyScope: HierarchyScopeRef
	properties: [WorkflowSpecificationNodeTypePropertyRef]
	nodes: [WorkflowSpecificationNodeRef]
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input WorkflowSpecificationNodeTypePropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [WorkflowSpecificationNodeTypePropertyHasFilter]
	and: [WorkflowSpecificationNodeTypePropertyFilter]
	or: [WorkflowSpecificationNodeTypePropertyFilter]
	not: WorkflowSpecificationNodeTypePropertyFilter
}

input WorkflowSpecificationNodeTypePropertyOrder {
	asc: WorkflowSpecificationNodeTypePropertyOrderable
	desc: WorkflowSpecificationNodeTypePropertyOrderable
	then: WorkflowSpecificationNodeTypePropertyOrder
}

input WorkflowSpecificationNodeTypePropertyPatch {
	acl: [AccessPermissionRef]
	nodeType: WorkflowSpecificationNodeTypeRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationNodeTypePropertyRef]
	parent: WorkflowSpecificationNodeTypePropertyRef
}

input WorkflowSpecificationNodeTypePropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	nodeType: WorkflowSpecificationNodeTypeRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationNodeTypePropertyRef]
	parent: WorkflowSpecificationNodeTypePropertyRef
}

input WorkflowSpecificationNodeTypeRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	name: String
	description: String
	hierarchyScope: HierarchyScopeRef
	properties: [WorkflowSpecificationNodeTypePropertyRef]
	nodes: [WorkflowSpecificationNodeRef]
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
}

input WorkflowSpecificationNodeVariableFilter {
	iid: [ID!]
	has: [WorkflowSpecificationNodeVariableHasFilter]
	and: [WorkflowSpecificationNodeVariableFilter]
	or: [WorkflowSpecificationNodeVariableFilter]
	not: WorkflowSpecificationNodeVariableFilter
}

input WorkflowSpecificationNodeVariableOrder {
	asc: WorkflowSpecificationNodeVariableOrderable
	desc: WorkflowSpecificationNodeVariableOrderable
	then: WorkflowSpecificationNodeVariableOrder
}

input WorkflowSpecificationNodeVariablePatch {
	source: String
	target: String
}

input WorkflowSpecificationNodeVariableRef {
	iid: ID
	source: String
	target: String
}

input WorkflowSpecificationOrder {
	asc: WorkflowSpecificationOrderable
	desc: WorkflowSpecificationOrderable
	then: WorkflowSpecificationOrder
}

input WorkflowSpecificationPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	versions: [WorkflowSpecificationVersionRef]
	activeVersion: WorkflowSpecificationVersionRef
	nextVersion: String
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	id: String
	includedIn: [WorkflowSpecificationVersionRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	workMasters: [WorkMasterRef]
	workDirectives: [WorkDirectiveRef]
	stateModelActions: [StateModelActionRef]
	rules: [RuleRef]
	calledByNodes: [WorkflowSpecificationNodeRef]
}

input WorkflowSpecificationPropertyFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	name: StringExactFilter_StringFullTextFilter
	description: StringExactFilter_StringFullTextFilter
	value: StringExactFilter_StringFullTextFilter
	_createdBy: StringExactFilter_StringFullTextFilter
	_modifiedBy: StringExactFilter_StringFullTextFilter
	has: [WorkflowSpecificationPropertyHasFilter]
	and: [WorkflowSpecificationPropertyFilter]
	or: [WorkflowSpecificationPropertyFilter]
	not: WorkflowSpecificationPropertyFilter
}

input WorkflowSpecificationPropertyOrder {
	asc: WorkflowSpecificationPropertyOrderable
	desc: WorkflowSpecificationPropertyOrderable
	then: WorkflowSpecificationPropertyOrder
}

input WorkflowSpecificationPropertyPatch {
	acl: [AccessPermissionRef]
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationPropertyRef]
	parent: WorkflowSpecificationPropertyRef
}

input WorkflowSpecificationPropertyRef {
	iid: ID
	acl: [AccessPermissionRef]
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	id: String
	name: String
	dataType: DataType
	definitionType: DefinitionType
	description: String
	value: String
	valueUnitOfMeasure: UnitOfMeasureRef
	_createdOn: DateTime
	_modifiedOn: DateTime
	_createdBy: String
	_modifiedBy: String
	children: [WorkflowSpecificationPropertyRef]
	parent: WorkflowSpecificationPropertyRef
}

input WorkflowSpecificationRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	versions: [WorkflowSpecificationVersionRef]
	activeVersion: WorkflowSpecificationVersionRef
	nextVersion: String
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	id: String
	includedIn: [WorkflowSpecificationVersionRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
	workMasters: [WorkMasterRef]
	workDirectives: [WorkDirectiveRef]
	stateModelActions: [StateModelActionRef]
	rules: [RuleRef]
	calledByNodes: [WorkflowSpecificationNodeRef]
}

input WorkflowSpecificationVersionFilter {
	iid: [ID!]
	id: StringExactFilter_StringFullTextFilter_StringRegExpFilter
	version: StringExactFilter_StringFullTextFilter
	versionStatus: VersionState_hash
	effectiveStart: DateTimeFilter
	effectiveEnd: DateTimeFilter
	_createdDateTime: DateTimeFilter
	_modifiedDateTime: DateTimeFilter
	has: [WorkflowSpecificationVersionHasFilter]
	and: [WorkflowSpecificationVersionFilter]
	or: [WorkflowSpecificationVersionFilter]
	not: WorkflowSpecificationVersionFilter
}

input WorkflowSpecificationVersionOrder {
	asc: WorkflowSpecificationVersionOrderable
	desc: WorkflowSpecificationVersionOrderable
	then: WorkflowSpecificationVersionOrder
}

input WorkflowSpecificationVersionPatch {
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	version: String
	workflowSpecification: WorkflowSpecificationRef
	isActiveVersionOf: WorkflowSpecificationRef
	versionStatus: VersionState
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	bpmnXMLEncoded: String
	schemaDefinition: String
	isExecutable: Boolean
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	includePropertiesOf: [WorkflowSpecificationRef]
	messages: [WorkflowMessageRef]
	timers: [WorkflowTimerRef]
	errors: [WorkflowErrorRef]
	nodes: [WorkflowSpecificationNodeRef]
	connections: [WorkflowSpecificationConnectionRef]
	properties: [WorkflowSpecificationPropertyRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
}

input WorkflowSpecificationVersionRef {
	iid: ID
	acl: [AccessPermissionRef]
	recordEntries: [InformationObjectRef]
	id: String
	version: String
	workflowSpecification: WorkflowSpecificationRef
	isActiveVersionOf: WorkflowSpecificationRef
	versionStatus: VersionState
	effectiveStart: DateTime
	effectiveEnd: DateTime
	description: String
	hierarchyScope: HierarchyScopeRef
	definitionType: DefinitionType
	bpmnXMLEncoded: String
	schemaDefinition: String
	isExecutable: Boolean
	_createdBy: String
	_createdDateTime: DateTime
	_modifiedBy: String
	_modifiedDateTime: DateTime
	includePropertiesOf: [WorkflowSpecificationRef]
	messages: [WorkflowMessageRef]
	timers: [WorkflowTimerRef]
	errors: [WorkflowErrorRef]
	nodes: [WorkflowSpecificationNodeRef]
	connections: [WorkflowSpecificationConnectionRef]
	properties: [WorkflowSpecificationPropertyRef]
	jobOrders: [JobOrderRef]
	jobResponses: [JobResponseRef]
}

input WorkflowTimerFilter {
	iid: [ID!]
	id: StringHashFilter
	reference: StringExactFilter_StringFullTextFilter
	has: [WorkflowTimerHasFilter]
	and: [WorkflowTimerFilter]
	or: [WorkflowTimerFilter]
	not: WorkflowTimerFilter
}

input WorkflowTimerOrder {
	asc: WorkflowTimerOrderable
	desc: WorkflowTimerOrderable
	then: WorkflowTimerOrder
}

input WorkflowTimerPatch {
	id: String
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	enabled: Boolean
}

input WorkflowTimerRef {
	iid: ID
	id: String
	reference: String
	workflowSpecificationVersion: WorkflowSpecificationVersionRef
	node: WorkflowSpecificationNodeRef
	enabled: Boolean
}

input WorkflowWaypointFilter {
	iid: [ID!]
	has: [WorkflowWaypointHasFilter]
	and: [WorkflowWaypointFilter]
	or: [WorkflowWaypointFilter]
	not: WorkflowWaypointFilter
}

input WorkflowWaypointOrder {
	asc: WorkflowWaypointOrderable
	desc: WorkflowWaypointOrderable
	then: WorkflowWaypointOrder
}

input WorkflowWaypointPatch {
	connection: WorkflowSpecificationConnectionRef
	x: String
	y: String
}

input WorkflowWaypointRef {
	iid: ID
	connection: WorkflowSpecificationConnectionRef
	x: String
	y: String
}

#######################
# Generated Query
#######################

type Query {
	getEvent(iid: ID!): Event
	queryEvent(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
	aggregateEvent(filter: EventFilter): EventAggregateResult
	getAlarmEvent(iid: ID!): AlarmEvent
	queryAlarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
	aggregateAlarmEvent(filter: AlarmEventFilter): AlarmEventAggregateResult
	getEventType(iid: ID, id: String): EventType
	queryEventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
	aggregateEventType(filter: EventTypeFilter): EventTypeAggregateResult
	getEventSubtype(iid: ID, id: String): EventSubtype
	queryEventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
	aggregateEventSubtype(filter: EventSubtypeFilter): EventSubtypeAggregateResult
	getEventProperty(iid: ID, id: String): EventProperty
	queryEventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
	aggregateEventProperty(filter: EventPropertyFilter): EventPropertyAggregateResult
	getEventAssociation(iid: ID, id: String): EventAssociation
	queryEventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
	aggregateEventAssociation(filter: EventAssociationFilter): EventAssociationAggregateResult
	getHierarchyScope(iid: ID, id: String): HierarchyScope
	queryHierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
	aggregateHierarchyScope(filter: HierarchyScopeFilter): HierarchyScopeAggregateResult
	getSpatialDefinition(iid: ID, id: String): SpatialDefinition
	querySpatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
	aggregateSpatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinitionAggregateResult
	getOperationalLocationClass(iid: ID, id: String): OperationalLocationClass
	queryOperationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
	aggregateOperationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult
	getOperationalLocationClassVersion(iid: ID, id: String, version: String): OperationalLocationClassVersion
	queryOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
	aggregateOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult
	getOperationalLocationClassProperty(iid: ID, id: String): OperationalLocationClassProperty
	queryOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
	aggregateOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult
	getOperationalLocation(iid: ID, id: String): OperationalLocation
	queryOperationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
	aggregateOperationalLocation(filter: OperationalLocationFilter): OperationalLocationAggregateResult
	getOperationalLocationVersion(iid: ID, id: String, version: String): OperationalLocationVersion
	queryOperationalLocationVersion(filter: OperationalLocationVersionFilter, order: OperationalLocationVersionOrder, first: Int, offset: Int): [OperationalLocationVersion]
	aggregateOperationalLocationVersion(filter: OperationalLocationVersionFilter): OperationalLocationVersionAggregateResult
	getOperationalLocationProperty(iid: ID, id: String): OperationalLocationProperty
	queryOperationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
	aggregateOperationalLocationProperty(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult
	getPersonnelClass(iid: ID, id: String): PersonnelClass
	queryPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	aggregatePersonnelClass(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	getPersonnelClassVersion(iid: ID, id: String, version: String): PersonnelClassVersion
	queryPersonnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
	aggregatePersonnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult
	getPersonnelClassProperty(iid: ID, id: String): PersonnelClassProperty
	queryPersonnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
	aggregatePersonnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult
	getPerson(iid: ID, id: String): Person
	queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	aggregatePerson(filter: PersonFilter): PersonAggregateResult
	getPersonVersion(iid: ID, id: String, version: String): PersonVersion
	queryPersonVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
	aggregatePersonVersion(filter: PersonVersionFilter): PersonVersionAggregateResult
	getPersonProperty(iid: ID, id: String): PersonProperty
	queryPersonProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
	aggregatePersonProperty(filter: PersonPropertyFilter): PersonPropertyAggregateResult
	getEquipmentClass(iid: ID, id: String): EquipmentClass
	queryEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	aggregateEquipmentClass(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	getEquipmentClassVersion(iid: ID, id: String, version: String): EquipmentClassVersion
	queryEquipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
	aggregateEquipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult
	getEquipmentClassProperty(iid: ID, id: String): EquipmentClassProperty
	queryEquipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
	aggregateEquipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult
	getEquipment(iid: ID, id: String): Equipment
	queryEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	aggregateEquipment(filter: EquipmentFilter): EquipmentAggregateResult
	getEquipmentVersion(iid: ID, id: String, version: String): EquipmentVersion
	queryEquipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
	aggregateEquipmentVersion(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
	getEquipmentDataSource(iid: ID!): EquipmentDataSource
	queryEquipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
	aggregateEquipmentDataSource(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult
	getEquipmentProperty(iid: ID, id: String): EquipmentProperty
	queryEquipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
	aggregateEquipmentProperty(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult
	getPhysicalAssetClass(iid: ID, id: String): PhysicalAssetClass
	queryPhysicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
	aggregatePhysicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
	getPhysicalAssetClassVersion(iid: ID, id: String, version: String): PhysicalAssetClassVersion
	queryPhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
	aggregatePhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult
	getPhysicalAssetClassProperty(iid: ID, id: String): PhysicalAssetClassProperty
	queryPhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
	aggregatePhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult
	getPhysicalAsset(iid: ID, id: String): PhysicalAsset
	queryPhysicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
	aggregatePhysicalAsset(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult
	getPhysicalAssetVersion(iid: ID, id: String, version: String): PhysicalAssetVersion
	queryPhysicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
	aggregatePhysicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult
	getPhysicalAssetProperty(iid: ID, id: String): PhysicalAssetProperty
	queryPhysicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
	aggregatePhysicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult
	getEquipmentAssetMapping(iid: ID, id: String): EquipmentAssetMapping
	queryEquipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
	aggregateEquipmentAssetMapping(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult
	getPhysicalAssetDataSource(iid: ID!): PhysicalAssetDataSource
	queryPhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
	aggregatePhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult
	getMaterialClass(iid: ID, id: String): MaterialClass
	queryMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	aggregateMaterialClass(filter: MaterialClassFilter): MaterialClassAggregateResult
	getMaterialClassVersion(iid: ID, id: String, version: String): MaterialClassVersion
	queryMaterialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
	aggregateMaterialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult
	getMaterialClassProperty(iid: ID, id: String): MaterialClassProperty
	queryMaterialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
	aggregateMaterialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult
	getMaterialDefinition(iid: ID, id: String): MaterialDefinition
	queryMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	aggregateMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult
	getMaterialDefinitionVersion(iid: ID, id: String, version: String): MaterialDefinitionVersion
	queryMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
	aggregateMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult
	getMaterialDefinitionProperty(iid: ID, id: String): MaterialDefinitionProperty
	queryMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
	aggregateMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult
	getMaterialLot(iid: ID, id: String): MaterialLot
	queryMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	aggregateMaterialLot(filter: MaterialLotFilter): MaterialLotAggregateResult
	getMaterialLotProperty(iid: ID, id: String): MaterialLotProperty
	queryMaterialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
	aggregateMaterialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
	getMaterialSubLot(iid: ID, id: String): MaterialSubLot
	queryMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	aggregateMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	getMaterialAlternate(iid: ID!): MaterialAlternate
	queryMaterialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	aggregateMaterialAlternate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult
	getUnitOfMeasure(iid: ID, id: String): UnitOfMeasure
	queryUnitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	aggregateUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasureAggregateResult
	getUnitOfMeasureConversion(iid: ID!): UnitOfMeasureConversion
	queryUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	aggregateUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult
	getProcessSegment(iid: ID, id: String): ProcessSegment
	queryProcessSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
	aggregateProcessSegment(filter: ProcessSegmentFilter): ProcessSegmentAggregateResult
	getProcessSegmentVersion(iid: ID, id: String, version: String): ProcessSegmentVersion
	queryProcessSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
	aggregateProcessSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersionAggregateResult
	getProcessSegmentDependency(iid: ID, id: String): ProcessSegmentDependency
	queryProcessSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
	aggregateProcessSegmentDependency(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult
	getProcessSegmentParameter(iid: ID, id: String): ProcessSegmentParameter
	queryProcessSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
	aggregateProcessSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult
	getTestSpecification(iid: ID, id: String, key: String): TestSpecification
	queryTestSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	aggregateTestSpecification(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	getTestSpecificationProperty(iid: ID, id: String): TestSpecificationProperty
	queryTestSpecificationProperty(filter: TestSpecificationPropertyFilter, order: TestSpecificationPropertyOrder, first: Int, offset: Int): [TestSpecificationProperty]
	aggregateTestSpecificationProperty(filter: TestSpecificationPropertyFilter): TestSpecificationPropertyAggregateResult
	getTestSpecificationCriteria(iid: ID, id: String): TestSpecificationCriteria
	queryTestSpecificationCriteria(filter: TestSpecificationCriteriaFilter, order: TestSpecificationCriteriaOrder, first: Int, offset: Int): [TestSpecificationCriteria]
	aggregateTestSpecificationCriteria(filter: TestSpecificationCriteriaFilter): TestSpecificationCriteriaAggregateResult
	getEvaluatedProperty(iid: ID, id: String): EvaluatedProperty
	queryEvaluatedProperty(filter: EvaluatedPropertyFilter, order: EvaluatedPropertyOrder, first: Int, offset: Int): [EvaluatedProperty]
	aggregateEvaluatedProperty(filter: EvaluatedPropertyFilter): EvaluatedPropertyAggregateResult
	getTestResult(iid: ID, id: String): TestResult
	queryTestResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	aggregateTestResult(filter: TestResultFilter): TestResultAggregateResult
	getPropertyMeasurement(iid: ID, id: String): PropertyMeasurement
	queryPropertyMeasurement(filter: PropertyMeasurementFilter, order: PropertyMeasurementOrder, first: Int, offset: Int): [PropertyMeasurement]
	aggregatePropertyMeasurement(filter: PropertyMeasurementFilter): PropertyMeasurementAggregateResult
	getOperationsEventClass(iid: ID, id: String): OperationsEventClass
	queryOperationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
	aggregateOperationsEventClass(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
	getOperationsEventClassVersion(iid: ID, id: String, version: String): OperationsEventClassVersion
	queryOperationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
	aggregateOperationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersionAggregateResult
	getOperationsEventClassRecordSpecification(iid: ID!): OperationsEventClassRecordSpecification
	queryOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
	aggregateOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter): OperationsEventClassRecordSpecificationAggregateResult
	queryMultiplicity(filter: MultiplicityFilter, order: MultiplicityOrder, first: Int, offset: Int): [Multiplicity]
	aggregateMultiplicity(filter: MultiplicityFilter): MultiplicityAggregateResult
	getOperationsEventClassProperty(iid: ID, id: String): OperationsEventClassProperty
	queryOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
	aggregateOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult
	getOperationsEventDefinition(iid: ID, id: String): OperationsEventDefinition
	queryOperationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
	aggregateOperationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult
	getOperationsEventDefinitionVersion(iid: ID, id: String, version: String): OperationsEventDefinitionVersion
	queryOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
	aggregateOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult
	getOperationsEventDefinitionRecordSpecification(iid: ID!): OperationsEventDefinitionRecordSpecification
	queryOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
	aggregateOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecificationAggregateResult
	getOperationsEventDefinitionProperty(iid: ID!): OperationsEventDefinitionProperty
	queryOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
	aggregateOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult
	getOperationsEvent(iid: ID, id: String): OperationsEvent
	queryOperationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
	aggregateOperationsEvent(filter: OperationsEventFilter): OperationsEventAggregateResult
	getOperationsEventProperty(iid: ID, id: String): OperationsEventProperty
	queryOperationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
	aggregateOperationsEventProperty(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult
	getOperationsEventRecord(iid: ID, id: String): OperationsEventRecord
	queryOperationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
	aggregateOperationsEventRecord(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
	getOperationsEventRecordEntry(iid: ID, id: String, recordId: String): OperationsEventRecordEntry
	queryOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
	aggregateOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult
	getOperationsDefinition(iid: ID, id: String): OperationsDefinition
	queryOperationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	aggregateOperationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
	getOperationsDefinitionVersion(iid: ID, id: String, version: String): OperationsDefinitionVersion
	queryOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
	aggregateOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersionAggregateResult
	getOperationsMaterialBill(iid: ID, id: String): OperationsMaterialBill
	queryOperationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
	aggregateOperationsMaterialBill(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult
	getOperationsSegment(iid: ID, id: String): OperationsSegment
	queryOperationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	aggregateOperationsSegment(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	getOperationsSegmentDependency(iid: ID, id: String): OperationsSegmentDependency
	queryOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
	aggregateOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult
	getParameterSpecification(iid: ID, id: String): ParameterSpecification
	queryParameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	aggregateParameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	getPersonnelSpecification(iid: ID, id: String): PersonnelSpecification
	queryPersonnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	aggregatePersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	getPersonnelSpecificationProperty(iid: ID, id: String): PersonnelSpecificationProperty
	queryPersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
	aggregatePersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
	getEquipmentSpecification(iid: ID, id: String): EquipmentSpecification
	queryEquipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	aggregateEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	getEquipmentSpecificationProperty(iid: ID, id: String): EquipmentSpecificationProperty
	queryEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
	aggregateEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
	getPhysicalAssetSpecification(iid: ID, id: String): PhysicalAssetSpecification
	queryPhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
	aggregatePhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	getPhysicalAssetSpecificationProperty(iid: ID, id: String): PhysicalAssetSpecificationProperty
	queryPhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
	aggregatePhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
	getMaterialSpecification(iid: ID, id: String): MaterialSpecification
	queryMaterialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	aggregateMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	getMaterialSpecificationProperty(iid: ID, id: String): MaterialSpecificationProperty
	queryMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
	aggregateMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
	getOperationsSchedule(iid: ID, id: String): OperationsSchedule
	queryOperationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
	aggregateOperationsSchedule(filter: OperationsScheduleFilter): OperationsScheduleAggregateResult
	getOperationsRequest(iid: ID, id: String): OperationsRequest
	queryOperationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	aggregateOperationsRequest(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	getSegmentRequirement(iid: ID, id: String): SegmentRequirement
	querySegmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
	aggregateSegmentRequirement(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	getSegmentParameter(iid: ID, id: String): SegmentParameter
	querySegmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
	aggregateSegmentParameter(filter: SegmentParameterFilter): SegmentParameterAggregateResult
	getPersonnelRequirement(iid: ID, id: String): PersonnelRequirement
	queryPersonnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
	aggregatePersonnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	getPersonnelRequirementProperty(iid: ID, id: String): PersonnelRequirementProperty
	queryPersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
	aggregatePersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
	getEquipmentRequirement(iid: ID, id: String): EquipmentRequirement
	queryEquipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
	aggregateEquipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	getEquipmentRequirementProperty(iid: ID, id: String): EquipmentRequirementProperty
	queryEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
	aggregateEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
	getPhysicalAssetRequirement(iid: ID, id: String): PhysicalAssetRequirement
	queryPhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
	aggregatePhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	getPhysicalAssetRequirementProperty(iid: ID, id: String): PhysicalAssetRequirementProperty
	queryPhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
	aggregatePhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
	getMaterialRequirement(iid: ID, id: String): MaterialRequirement
	queryMaterialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
	aggregateMaterialRequirement(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	getMaterialRequirementProperty(iid: ID, id: String): MaterialRequirementProperty
	queryMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
	aggregateMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
	getOperationsPerformance(iid: ID, id: String): OperationsPerformance
	queryOperationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
	aggregateOperationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformanceAggregateResult
	getOperationsResponse(iid: ID, id: String): OperationsResponse
	queryOperationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
	aggregateOperationsResponse(filter: OperationsResponseFilter): OperationsResponseAggregateResult
	getSegmentResponse(iid: ID, id: String): SegmentResponse
	querySegmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
	aggregateSegmentResponse(filter: SegmentResponseFilter): SegmentResponseAggregateResult
	getSegmentData(iid: ID, id: String): SegmentData
	querySegmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
	aggregateSegmentData(filter: SegmentDataFilter): SegmentDataAggregateResult
	getPersonnelActual(iid: ID, id: String): PersonnelActual
	queryPersonnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	aggregatePersonnelActual(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	getPersonnelActualProperty(iid: ID, id: String): PersonnelActualProperty
	queryPersonnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
	aggregatePersonnelActualProperty(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
	getEquipmentActual(iid: ID, id: String): EquipmentActual
	queryEquipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	aggregateEquipmentActual(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	getEquipmentActualProperty(iid: ID, id: String): EquipmentActualProperty
	queryEquipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
	aggregateEquipmentActualProperty(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
	getPhysicalAssetActual(iid: ID, id: String): PhysicalAssetActual
	queryPhysicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
	aggregatePhysicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	getPhysicalAssetActualProperty(iid: ID, id: String): PhysicalAssetActualProperty
	queryPhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
	aggregatePhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
	getMaterialActual(iid: ID, id: String): MaterialActual
	queryMaterialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	aggregateMaterialActual(filter: MaterialActualFilter): MaterialActualAggregateResult
	getMaterialActualProperty(iid: ID, id: String): MaterialActualProperty
	queryMaterialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
	aggregateMaterialActualProperty(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
	getOperationsResponseProperty(iid: ID, id: String): OperationsResponseProperty
	queryOperationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
	aggregateOperationsResponseProperty(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult
	getWorkMaster(iid: ID, id: String, version: String): WorkMaster
	queryWorkMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
	aggregateWorkMaster(filter: WorkMasterFilter): WorkMasterAggregateResult
	getWorkDirective(iid: ID, id: String, version: String): WorkDirective
	queryWorkDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
	aggregateWorkDirective(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult
	getWorkflowSpecification(iid: ID, id: String): WorkflowSpecification
	queryWorkflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	aggregateWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult
	getWorkflowSpecificationVersion(iid: ID, id: String, version: String): WorkflowSpecificationVersion
	queryWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
	aggregateWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult
	getWorkflowSpecificationProperty(iid: ID, id: String): WorkflowSpecificationProperty
	queryWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
	aggregateWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult
	getWorkflowTimer(iid: ID, id: String): WorkflowTimer
	queryWorkflowTimer(filter: WorkflowTimerFilter, order: WorkflowTimerOrder, first: Int, offset: Int): [WorkflowTimer]
	aggregateWorkflowTimer(filter: WorkflowTimerFilter): WorkflowTimerAggregateResult
	getWorkflowMessage(iid: ID, id: String): WorkflowMessage
	queryWorkflowMessage(filter: WorkflowMessageFilter, order: WorkflowMessageOrder, first: Int, offset: Int): [WorkflowMessage]
	aggregateWorkflowMessage(filter: WorkflowMessageFilter): WorkflowMessageAggregateResult
	getWorkflowError(iid: ID, id: String): WorkflowError
	queryWorkflowError(filter: WorkflowErrorFilter, order: WorkflowErrorOrder, first: Int, offset: Int): [WorkflowError]
	aggregateWorkflowError(filter: WorkflowErrorFilter): WorkflowErrorAggregateResult
	getWorkflowSpecificationNode(iid: ID, id: String): WorkflowSpecificationNode
	queryWorkflowSpecificationNode(filter: WorkflowSpecificationNodeFilter, order: WorkflowSpecificationNodeOrder, first: Int, offset: Int): [WorkflowSpecificationNode]
	aggregateWorkflowSpecificationNode(filter: WorkflowSpecificationNodeFilter): WorkflowSpecificationNodeAggregateResult
	getWorkflowSpecificationNodeTestCase(iid: ID, id: String): WorkflowSpecificationNodeTestCase
	queryWorkflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter, order: WorkflowSpecificationNodeTestCaseOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTestCase]
	aggregateWorkflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter): WorkflowSpecificationNodeTestCaseAggregateResult
	getWorkflowShape(iid: ID, id: String): WorkflowShape
	queryWorkflowShape(filter: WorkflowShapeFilter, order: WorkflowShapeOrder, first: Int, offset: Int): [WorkflowShape]
	aggregateWorkflowShape(filter: WorkflowShapeFilter): WorkflowShapeAggregateResult
	getWorkflowSpecificationNodeVariable(iid: ID!): WorkflowSpecificationNodeVariable
	queryWorkflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter, order: WorkflowSpecificationNodeVariableOrder, first: Int, offset: Int): [WorkflowSpecificationNodeVariable]
	aggregateWorkflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter): WorkflowSpecificationNodeVariableAggregateResult
	getWorkflowSpecificationNodeProperty(iid: ID, id: String): WorkflowSpecificationNodeProperty
	queryWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
	aggregateWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult
	getWorkflowSpecificationNodeType(iid: ID, id: String): WorkflowSpecificationNodeType
	queryWorkflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter, order: WorkflowSpecificationNodeTypeOrder, first: Int, offset: Int): [WorkflowSpecificationNodeType]
	aggregateWorkflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter): WorkflowSpecificationNodeTypeAggregateResult
	getWorkflowSpecificationNodeTypeProperty(iid: ID, id: String): WorkflowSpecificationNodeTypeProperty
	queryWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
	aggregateWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult
	getWorkflowSpecificationConnection(iid: ID, id: String): WorkflowSpecificationConnection
	queryWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
	aggregateWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
	getWorkflowWaypoint(iid: ID!): WorkflowWaypoint
	queryWorkflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
	aggregateWorkflowWaypoint(filter: WorkflowWaypointFilter): WorkflowWaypointAggregateResult
	getWorkflowSpecificationConnectionProperty(iid: ID, id: String): WorkflowSpecificationConnectionProperty
	queryWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
	aggregateWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult
	getWorkflowSpecificationConnectionType(iid: ID, id: String): WorkflowSpecificationConnectionType
	queryWorkflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter, order: WorkflowSpecificationConnectionTypeOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionType]
	aggregateWorkflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter): WorkflowSpecificationConnectionTypeAggregateResult
	getWorkflowSpecificationConnectionTypeProperty(iid: ID, id: String): WorkflowSpecificationConnectionTypeProperty
	queryWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
	aggregateWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult
	getForm(iid: ID, id: String): Form
	queryForm(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	aggregateForm(filter: FormFilter): FormAggregateResult
	getWorkSchedule(iid: ID, id: String): WorkSchedule
	queryWorkSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
	aggregateWorkSchedule(filter: WorkScheduleFilter): WorkScheduleAggregateResult
	getWorkRequest(iid: ID, id: String): WorkRequest
	queryWorkRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
	aggregateWorkRequest(filter: WorkRequestFilter): WorkRequestAggregateResult
	getJobList(iid: ID, id: String): JobList
	queryJobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
	aggregateJobList(filter: JobListFilter): JobListAggregateResult
	getJobOrder(iid: ID, id: String): JobOrder
	queryJobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	aggregateJobOrder(filter: JobOrderFilter): JobOrderAggregateResult
	getJobOrderParameter(iid: ID, id: String): JobOrderParameter
	queryJobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
	aggregateJobOrderParameter(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
	getWorkPerformance(iid: ID, id: String): WorkPerformance
	queryWorkPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
	aggregateWorkPerformance(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult
	getWorkResponse(iid: ID, id: String): WorkResponse
	queryWorkResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
	aggregateWorkResponse(filter: WorkResponseFilter): WorkResponseAggregateResult
	getJobResponseList(iid: ID, id: String): JobResponseList
	queryJobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
	aggregateJobResponseList(filter: JobResponseListFilter): JobResponseListAggregateResult
	getJobResponse(iid: ID, id: String): JobResponse
	queryJobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	aggregateJobResponse(filter: JobResponseFilter): JobResponseAggregateResult
	getJobResponseData(iid: ID, id: String): JobResponseData
	queryJobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
	aggregateJobResponseData(filter: JobResponseDataFilter): JobResponseDataAggregateResult
	getWorkCalendarDefinitionEntry(iid: ID!): WorkCalendarDefinitionEntry
	queryWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	aggregateWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult
	getWorkCalendarDefinitionEntryProperty(iid: ID, id: String): WorkCalendarDefinitionEntryProperty
	queryWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
	aggregateWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult
	getWorkCalendarEntry(iid: ID!): WorkCalendarEntry
	queryWorkCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	aggregateWorkCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
	getWorkCalendarEntryProperty(iid: ID, id: String): WorkCalendarEntryProperty
	queryWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
	aggregateWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult
	getWorkCalendar(iid: ID, name: String): WorkCalendar
	queryWorkCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	aggregateWorkCalendar(filter: WorkCalendarFilter): WorkCalendarAggregateResult
	getInformationObject(iid: ID!): InformationObject
	queryInformationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
	aggregateInformationObject(filter: InformationObjectFilter): InformationObjectAggregateResult
	getStateModelDefinition(iid: ID, id: String): StateModelDefinition
	queryStateModelDefinition(filter: StateModelDefinitionFilter, order: StateModelDefinitionOrder, first: Int, offset: Int): [StateModelDefinition]
	aggregateStateModelDefinition(filter: StateModelDefinitionFilter): StateModelDefinitionAggregateResult
	getStateModelState(iid: ID, id: String): StateModelState
	queryStateModelState(filter: StateModelStateFilter, order: StateModelStateOrder, first: Int, offset: Int): [StateModelState]
	aggregateStateModelState(filter: StateModelStateFilter): StateModelStateAggregateResult
	getStateModelTransition(iid: ID, id: String): StateModelTransition
	queryStateModelTransition(filter: StateModelTransitionFilter, order: StateModelTransitionOrder, first: Int, offset: Int): [StateModelTransition]
	aggregateStateModelTransition(filter: StateModelTransitionFilter): StateModelTransitionAggregateResult
	getStateModelEvent(iid: ID, id: String): StateModelEvent
	queryStateModelEvent(filter: StateModelEventFilter, order: StateModelEventOrder, first: Int, offset: Int): [StateModelEvent]
	aggregateStateModelEvent(filter: StateModelEventFilter): StateModelEventAggregateResult
	getStateModelAction(iid: ID, id: String): StateModelAction
	queryStateModelAction(filter: StateModelActionFilter, order: StateModelActionOrder, first: Int, offset: Int): [StateModelAction]
	aggregateStateModelAction(filter: StateModelActionFilter): StateModelActionAggregateResult
	getStateModelInstance(iid: ID, id: String): StateModelInstance
	queryStateModelInstance(filter: StateModelInstanceFilter, order: StateModelInstanceOrder, first: Int, offset: Int): [StateModelInstance]
	aggregateStateModelInstance(filter: StateModelInstanceFilter): StateModelInstanceAggregateResult
	getStateTransitionInstance(iid: ID!): StateTransitionInstance
	queryStateTransitionInstance(filter: StateTransitionInstanceFilter, order: StateTransitionInstanceOrder, first: Int, offset: Int): [StateTransitionInstance]
	aggregateStateTransitionInstance(filter: StateTransitionInstanceFilter): StateTransitionInstanceAggregateResult
	getStateModelProperty(iid: ID, id: String): StateModelProperty
	queryStateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
	aggregateStateModelProperty(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult
	getAccessPermission(iid: ID!): AccessPermission
	queryAccessPermission(filter: AccessPermissionFilter, order: AccessPermissionOrder, first: Int, offset: Int): [AccessPermission]
	aggregateAccessPermission(filter: AccessPermissionFilter): AccessPermissionAggregateResult
	getLibreService(id: ID, name: String): LibreService
	queryLibreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	aggregateLibreService(filter: LibreServiceFilter): LibreServiceAggregateResult
	getDataSubscription(id: ID, name: String): DataSubscription
	queryDataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
	aggregateDataSubscription(filter: DataSubscriptionFilter): DataSubscriptionAggregateResult
	getMenu(iid: ID!): Menu
	queryMenu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	aggregateMenu(filter: MenuFilter): MenuAggregateResult
	getEquipmentPropertyOverride(iid: ID, id: String): EquipmentPropertyOverride
	queryEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	aggregateEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult
	getEquipmentNameAlias(iid: ID!): EquipmentNameAlias
	queryEquipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	aggregateEquipmentNameAlias(filter: EquipmentNameAliasFilter): EquipmentNameAliasAggregateResult
	getPropertyNameAlias(iid: ID!): PropertyNameAlias
	queryPropertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	aggregatePropertyNameAlias(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
	getPropertyValueAlias(iid: ID!): PropertyValueAlias
	queryPropertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	aggregatePropertyValueAlias(filter: PropertyValueAliasFilter): PropertyValueAliasAggregateResult
	getDataSource(iid: ID, id: String): DataSource
	queryDataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
	aggregateDataSource(filter: DataSourceFilter): DataSourceAggregateResult
	getDataSourceVersion(iid: ID, id: String, version: String): DataSourceVersion
	queryDataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
	aggregateDataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersionAggregateResult
	getDataSourceTopic(iid: ID, id: String): DataSourceTopic
	queryDataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
	aggregateDataSourceTopic(filter: DataSourceTopicFilter): DataSourceTopicAggregateResult
	getDataSourceMethod(iid: ID, id: String): DataSourceMethod
	queryDataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
	aggregateDataSourceMethod(filter: DataSourceMethodFilter): DataSourceMethodAggregateResult
	getDataSourceMethodArgument(iid: ID, id: String): DataSourceMethodArgument
	queryDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
	aggregateDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter): DataSourceMethodArgumentAggregateResult
	getRule(iid: ID, id: String): Rule
	queryRule(filter: RuleFilter, order: RuleOrder, first: Int, offset: Int): [Rule]
	aggregateRule(filter: RuleFilter): RuleAggregateResult
	getPayloadFieldDefinition(iid: ID!): PayloadFieldDefinition
	queryPayloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	aggregatePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult
	getEnvironmentalVariable(iid: ID, id: String): EnvironmentalVariable
	queryEnvironmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
	aggregateEnvironmentalVariable(filter: EnvironmentalVariableFilter): EnvironmentalVariableAggregateResult
	getEnvironmentalVariableVersion(iid: ID, id: String, version: String): EnvironmentalVariableVersion
	queryEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
	aggregateEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersionAggregateResult
	getSecret(iid: ID, id: String): Secret
	querySecret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
	aggregateSecret(filter: SecretFilter): SecretAggregateResult
	getSecretVersion(iid: ID, id: String, version: String): SecretVersion
	querySecretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
	aggregateSecretVersion(filter: SecretVersionFilter): SecretVersionAggregateResult
	getSignature(iid: ID!): Signature
	querySignature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
	aggregateSignature(filter: SignatureFilter): SignatureAggregateResult
	getSignatureReason(iid: ID, id: String): SignatureReason
	querySignatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
	aggregateSignatureReason(filter: SignatureReasonFilter): SignatureReasonAggregateResult
	getComment(iid: ID, id: String): Comment
	queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	aggregateComment(filter: CommentFilter): CommentAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addEvent(input: [AddEventInput!]!): AddEventPayload
	updateEvent(input: UpdateEventInput!): UpdateEventPayload
	deleteEvent(filter: EventFilter!): DeleteEventPayload
	addAlarmEvent(input: [AddAlarmEventInput!]!): AddAlarmEventPayload
	updateAlarmEvent(input: UpdateAlarmEventInput!): UpdateAlarmEventPayload
	deleteAlarmEvent(filter: AlarmEventFilter!): DeleteAlarmEventPayload
	addEventType(input: [AddEventTypeInput!]!, upsert: Boolean): AddEventTypePayload
	updateEventType(input: UpdateEventTypeInput!): UpdateEventTypePayload
	deleteEventType(filter: EventTypeFilter!): DeleteEventTypePayload
	addEventSubtype(input: [AddEventSubtypeInput!]!, upsert: Boolean): AddEventSubtypePayload
	updateEventSubtype(input: UpdateEventSubtypeInput!): UpdateEventSubtypePayload
	deleteEventSubtype(filter: EventSubtypeFilter!): DeleteEventSubtypePayload
	addEventProperty(input: [AddEventPropertyInput!]!, upsert: Boolean): AddEventPropertyPayload
	updateEventProperty(input: UpdateEventPropertyInput!): UpdateEventPropertyPayload
	deleteEventProperty(filter: EventPropertyFilter!): DeleteEventPropertyPayload
	addEventAssociation(input: [AddEventAssociationInput!]!, upsert: Boolean): AddEventAssociationPayload
	updateEventAssociation(input: UpdateEventAssociationInput!): UpdateEventAssociationPayload
	deleteEventAssociation(filter: EventAssociationFilter!): DeleteEventAssociationPayload
	addHierarchyScope(input: [AddHierarchyScopeInput!]!, upsert: Boolean): AddHierarchyScopePayload
	updateHierarchyScope(input: UpdateHierarchyScopeInput!): UpdateHierarchyScopePayload
	deleteHierarchyScope(filter: HierarchyScopeFilter!): DeleteHierarchyScopePayload
	addSpatialDefinition(input: [AddSpatialDefinitionInput!]!, upsert: Boolean): AddSpatialDefinitionPayload
	updateSpatialDefinition(input: UpdateSpatialDefinitionInput!): UpdateSpatialDefinitionPayload
	deleteSpatialDefinition(filter: SpatialDefinitionFilter!): DeleteSpatialDefinitionPayload
	addOperationalLocationClass(input: [AddOperationalLocationClassInput!]!, upsert: Boolean): AddOperationalLocationClassPayload
	updateOperationalLocationClass(input: UpdateOperationalLocationClassInput!): UpdateOperationalLocationClassPayload
	deleteOperationalLocationClass(filter: OperationalLocationClassFilter!): DeleteOperationalLocationClassPayload
	addOperationalLocationClassVersion(input: [AddOperationalLocationClassVersionInput!]!): AddOperationalLocationClassVersionPayload
	updateOperationalLocationClassVersion(input: UpdateOperationalLocationClassVersionInput!): UpdateOperationalLocationClassVersionPayload
	deleteOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter!): DeleteOperationalLocationClassVersionPayload
	addOperationalLocationClassProperty(input: [AddOperationalLocationClassPropertyInput!]!, upsert: Boolean): AddOperationalLocationClassPropertyPayload
	updateOperationalLocationClassProperty(input: UpdateOperationalLocationClassPropertyInput!): UpdateOperationalLocationClassPropertyPayload
	deleteOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter!): DeleteOperationalLocationClassPropertyPayload
	addOperationalLocation(input: [AddOperationalLocationInput!]!, upsert: Boolean): AddOperationalLocationPayload
	updateOperationalLocation(input: UpdateOperationalLocationInput!): UpdateOperationalLocationPayload
	deleteOperationalLocation(filter: OperationalLocationFilter!): DeleteOperationalLocationPayload
	addOperationalLocationVersion(input: [AddOperationalLocationVersionInput!]!): AddOperationalLocationVersionPayload
	updateOperationalLocationVersion(input: UpdateOperationalLocationVersionInput!): UpdateOperationalLocationVersionPayload
	deleteOperationalLocationVersion(filter: OperationalLocationVersionFilter!): DeleteOperationalLocationVersionPayload
	addOperationalLocationProperty(input: [AddOperationalLocationPropertyInput!]!, upsert: Boolean): AddOperationalLocationPropertyPayload
	updateOperationalLocationProperty(input: UpdateOperationalLocationPropertyInput!): UpdateOperationalLocationPropertyPayload
	deleteOperationalLocationProperty(filter: OperationalLocationPropertyFilter!): DeleteOperationalLocationPropertyPayload
	addPersonnelClass(input: [AddPersonnelClassInput!]!, upsert: Boolean): AddPersonnelClassPayload
	updatePersonnelClass(input: UpdatePersonnelClassInput!): UpdatePersonnelClassPayload
	deletePersonnelClass(filter: PersonnelClassFilter!): DeletePersonnelClassPayload
	addPersonnelClassVersion(input: [AddPersonnelClassVersionInput!]!): AddPersonnelClassVersionPayload
	updatePersonnelClassVersion(input: UpdatePersonnelClassVersionInput!): UpdatePersonnelClassVersionPayload
	deletePersonnelClassVersion(filter: PersonnelClassVersionFilter!): DeletePersonnelClassVersionPayload
	addPersonnelClassProperty(input: [AddPersonnelClassPropertyInput!]!, upsert: Boolean): AddPersonnelClassPropertyPayload
	updatePersonnelClassProperty(input: UpdatePersonnelClassPropertyInput!): UpdatePersonnelClassPropertyPayload
	deletePersonnelClassProperty(filter: PersonnelClassPropertyFilter!): DeletePersonnelClassPropertyPayload
	addPerson(input: [AddPersonInput!]!, upsert: Boolean): AddPersonPayload
	updatePerson(input: UpdatePersonInput!): UpdatePersonPayload
	deletePerson(filter: PersonFilter!): DeletePersonPayload
	addPersonVersion(input: [AddPersonVersionInput!]!): AddPersonVersionPayload
	updatePersonVersion(input: UpdatePersonVersionInput!): UpdatePersonVersionPayload
	deletePersonVersion(filter: PersonVersionFilter!): DeletePersonVersionPayload
	addPersonProperty(input: [AddPersonPropertyInput!]!, upsert: Boolean): AddPersonPropertyPayload
	updatePersonProperty(input: UpdatePersonPropertyInput!): UpdatePersonPropertyPayload
	deletePersonProperty(filter: PersonPropertyFilter!): DeletePersonPropertyPayload
	addEquipmentClass(input: [AddEquipmentClassInput!]!, upsert: Boolean): AddEquipmentClassPayload
	updateEquipmentClass(input: UpdateEquipmentClassInput!): UpdateEquipmentClassPayload
	deleteEquipmentClass(filter: EquipmentClassFilter!): DeleteEquipmentClassPayload
	addEquipmentClassVersion(input: [AddEquipmentClassVersionInput!]!): AddEquipmentClassVersionPayload
	updateEquipmentClassVersion(input: UpdateEquipmentClassVersionInput!): UpdateEquipmentClassVersionPayload
	deleteEquipmentClassVersion(filter: EquipmentClassVersionFilter!): DeleteEquipmentClassVersionPayload
	addEquipmentClassProperty(input: [AddEquipmentClassPropertyInput!]!, upsert: Boolean): AddEquipmentClassPropertyPayload
	updateEquipmentClassProperty(input: UpdateEquipmentClassPropertyInput!): UpdateEquipmentClassPropertyPayload
	deleteEquipmentClassProperty(filter: EquipmentClassPropertyFilter!): DeleteEquipmentClassPropertyPayload
	addEquipment(input: [AddEquipmentInput!]!, upsert: Boolean): AddEquipmentPayload
	updateEquipment(input: UpdateEquipmentInput!): UpdateEquipmentPayload
	deleteEquipment(filter: EquipmentFilter!): DeleteEquipmentPayload
	addEquipmentVersion(input: [AddEquipmentVersionInput!]!): AddEquipmentVersionPayload
	updateEquipmentVersion(input: UpdateEquipmentVersionInput!): UpdateEquipmentVersionPayload
	deleteEquipmentVersion(filter: EquipmentVersionFilter!): DeleteEquipmentVersionPayload
	addEquipmentDataSource(input: [AddEquipmentDataSourceInput!]!): AddEquipmentDataSourcePayload
	updateEquipmentDataSource(input: UpdateEquipmentDataSourceInput!): UpdateEquipmentDataSourcePayload
	deleteEquipmentDataSource(filter: EquipmentDataSourceFilter!): DeleteEquipmentDataSourcePayload
	addEquipmentProperty(input: [AddEquipmentPropertyInput!]!, upsert: Boolean): AddEquipmentPropertyPayload
	updateEquipmentProperty(input: UpdateEquipmentPropertyInput!): UpdateEquipmentPropertyPayload
	deleteEquipmentProperty(filter: EquipmentPropertyFilter!): DeleteEquipmentPropertyPayload
	addPhysicalAssetClass(input: [AddPhysicalAssetClassInput!]!, upsert: Boolean): AddPhysicalAssetClassPayload
	updatePhysicalAssetClass(input: UpdatePhysicalAssetClassInput!): UpdatePhysicalAssetClassPayload
	deletePhysicalAssetClass(filter: PhysicalAssetClassFilter!): DeletePhysicalAssetClassPayload
	addPhysicalAssetClassVersion(input: [AddPhysicalAssetClassVersionInput!]!): AddPhysicalAssetClassVersionPayload
	updatePhysicalAssetClassVersion(input: UpdatePhysicalAssetClassVersionInput!): UpdatePhysicalAssetClassVersionPayload
	deletePhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter!): DeletePhysicalAssetClassVersionPayload
	addPhysicalAssetClassProperty(input: [AddPhysicalAssetClassPropertyInput!]!, upsert: Boolean): AddPhysicalAssetClassPropertyPayload
	updatePhysicalAssetClassProperty(input: UpdatePhysicalAssetClassPropertyInput!): UpdatePhysicalAssetClassPropertyPayload
	deletePhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter!): DeletePhysicalAssetClassPropertyPayload
	addPhysicalAsset(input: [AddPhysicalAssetInput!]!, upsert: Boolean): AddPhysicalAssetPayload
	updatePhysicalAsset(input: UpdatePhysicalAssetInput!): UpdatePhysicalAssetPayload
	deletePhysicalAsset(filter: PhysicalAssetFilter!): DeletePhysicalAssetPayload
	addPhysicalAssetVersion(input: [AddPhysicalAssetVersionInput!]!): AddPhysicalAssetVersionPayload
	updatePhysicalAssetVersion(input: UpdatePhysicalAssetVersionInput!): UpdatePhysicalAssetVersionPayload
	deletePhysicalAssetVersion(filter: PhysicalAssetVersionFilter!): DeletePhysicalAssetVersionPayload
	addPhysicalAssetProperty(input: [AddPhysicalAssetPropertyInput!]!, upsert: Boolean): AddPhysicalAssetPropertyPayload
	updatePhysicalAssetProperty(input: UpdatePhysicalAssetPropertyInput!): UpdatePhysicalAssetPropertyPayload
	deletePhysicalAssetProperty(filter: PhysicalAssetPropertyFilter!): DeletePhysicalAssetPropertyPayload
	addEquipmentAssetMapping(input: [AddEquipmentAssetMappingInput!]!, upsert: Boolean): AddEquipmentAssetMappingPayload
	updateEquipmentAssetMapping(input: UpdateEquipmentAssetMappingInput!): UpdateEquipmentAssetMappingPayload
	deleteEquipmentAssetMapping(filter: EquipmentAssetMappingFilter!): DeleteEquipmentAssetMappingPayload
	addPhysicalAssetDataSource(input: [AddPhysicalAssetDataSourceInput!]!): AddPhysicalAssetDataSourcePayload
	updatePhysicalAssetDataSource(input: UpdatePhysicalAssetDataSourceInput!): UpdatePhysicalAssetDataSourcePayload
	deletePhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter!): DeletePhysicalAssetDataSourcePayload
	addMaterialClass(input: [AddMaterialClassInput!]!, upsert: Boolean): AddMaterialClassPayload
	updateMaterialClass(input: UpdateMaterialClassInput!): UpdateMaterialClassPayload
	deleteMaterialClass(filter: MaterialClassFilter!): DeleteMaterialClassPayload
	addMaterialClassVersion(input: [AddMaterialClassVersionInput!]!): AddMaterialClassVersionPayload
	updateMaterialClassVersion(input: UpdateMaterialClassVersionInput!): UpdateMaterialClassVersionPayload
	deleteMaterialClassVersion(filter: MaterialClassVersionFilter!): DeleteMaterialClassVersionPayload
	addMaterialClassProperty(input: [AddMaterialClassPropertyInput!]!, upsert: Boolean): AddMaterialClassPropertyPayload
	updateMaterialClassProperty(input: UpdateMaterialClassPropertyInput!): UpdateMaterialClassPropertyPayload
	deleteMaterialClassProperty(filter: MaterialClassPropertyFilter!): DeleteMaterialClassPropertyPayload
	addMaterialDefinition(input: [AddMaterialDefinitionInput!]!, upsert: Boolean): AddMaterialDefinitionPayload
	updateMaterialDefinition(input: UpdateMaterialDefinitionInput!): UpdateMaterialDefinitionPayload
	deleteMaterialDefinition(filter: MaterialDefinitionFilter!): DeleteMaterialDefinitionPayload
	addMaterialDefinitionVersion(input: [AddMaterialDefinitionVersionInput!]!): AddMaterialDefinitionVersionPayload
	updateMaterialDefinitionVersion(input: UpdateMaterialDefinitionVersionInput!): UpdateMaterialDefinitionVersionPayload
	deleteMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter!): DeleteMaterialDefinitionVersionPayload
	addMaterialDefinitionProperty(input: [AddMaterialDefinitionPropertyInput!]!, upsert: Boolean): AddMaterialDefinitionPropertyPayload
	updateMaterialDefinitionProperty(input: UpdateMaterialDefinitionPropertyInput!): UpdateMaterialDefinitionPropertyPayload
	deleteMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter!): DeleteMaterialDefinitionPropertyPayload
	addMaterialLot(input: [AddMaterialLotInput!]!, upsert: Boolean): AddMaterialLotPayload
	updateMaterialLot(input: UpdateMaterialLotInput!): UpdateMaterialLotPayload
	deleteMaterialLot(filter: MaterialLotFilter!): DeleteMaterialLotPayload
	addMaterialLotProperty(input: [AddMaterialLotPropertyInput!]!, upsert: Boolean): AddMaterialLotPropertyPayload
	updateMaterialLotProperty(input: UpdateMaterialLotPropertyInput!): UpdateMaterialLotPropertyPayload
	deleteMaterialLotProperty(filter: MaterialLotPropertyFilter!): DeleteMaterialLotPropertyPayload
	addMaterialSubLot(input: [AddMaterialSubLotInput!]!, upsert: Boolean): AddMaterialSubLotPayload
	updateMaterialSubLot(input: UpdateMaterialSubLotInput!): UpdateMaterialSubLotPayload
	deleteMaterialSubLot(filter: MaterialSubLotFilter!): DeleteMaterialSubLotPayload
	addMaterialAlternate(input: [AddMaterialAlternateInput!]!): AddMaterialAlternatePayload
	updateMaterialAlternate(input: UpdateMaterialAlternateInput!): UpdateMaterialAlternatePayload
	deleteMaterialAlternate(filter: MaterialAlternateFilter!): DeleteMaterialAlternatePayload
	addUnitOfMeasure(input: [AddUnitOfMeasureInput!]!, upsert: Boolean): AddUnitOfMeasurePayload
	updateUnitOfMeasure(input: UpdateUnitOfMeasureInput!): UpdateUnitOfMeasurePayload
	deleteUnitOfMeasure(filter: UnitOfMeasureFilter!): DeleteUnitOfMeasurePayload
	addUnitOfMeasureConversion(input: [AddUnitOfMeasureConversionInput!]!): AddUnitOfMeasureConversionPayload
	updateUnitOfMeasureConversion(input: UpdateUnitOfMeasureConversionInput!): UpdateUnitOfMeasureConversionPayload
	deleteUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter!): DeleteUnitOfMeasureConversionPayload
	addProcessSegment(input: [AddProcessSegmentInput!]!, upsert: Boolean): AddProcessSegmentPayload
	updateProcessSegment(input: UpdateProcessSegmentInput!): UpdateProcessSegmentPayload
	deleteProcessSegment(filter: ProcessSegmentFilter!): DeleteProcessSegmentPayload
	addProcessSegmentVersion(input: [AddProcessSegmentVersionInput!]!): AddProcessSegmentVersionPayload
	updateProcessSegmentVersion(input: UpdateProcessSegmentVersionInput!): UpdateProcessSegmentVersionPayload
	deleteProcessSegmentVersion(filter: ProcessSegmentVersionFilter!): DeleteProcessSegmentVersionPayload
	addProcessSegmentDependency(input: [AddProcessSegmentDependencyInput!]!, upsert: Boolean): AddProcessSegmentDependencyPayload
	updateProcessSegmentDependency(input: UpdateProcessSegmentDependencyInput!): UpdateProcessSegmentDependencyPayload
	deleteProcessSegmentDependency(filter: ProcessSegmentDependencyFilter!): DeleteProcessSegmentDependencyPayload
	addProcessSegmentParameter(input: [AddProcessSegmentParameterInput!]!, upsert: Boolean): AddProcessSegmentParameterPayload
	updateProcessSegmentParameter(input: UpdateProcessSegmentParameterInput!): UpdateProcessSegmentParameterPayload
	deleteProcessSegmentParameter(filter: ProcessSegmentParameterFilter!): DeleteProcessSegmentParameterPayload
	addTestSpecification(input: [AddTestSpecificationInput!]!, upsert: Boolean): AddTestSpecificationPayload
	updateTestSpecification(input: UpdateTestSpecificationInput!): UpdateTestSpecificationPayload
	deleteTestSpecification(filter: TestSpecificationFilter!): DeleteTestSpecificationPayload
	addTestSpecificationProperty(input: [AddTestSpecificationPropertyInput!]!, upsert: Boolean): AddTestSpecificationPropertyPayload
	updateTestSpecificationProperty(input: UpdateTestSpecificationPropertyInput!): UpdateTestSpecificationPropertyPayload
	deleteTestSpecificationProperty(filter: TestSpecificationPropertyFilter!): DeleteTestSpecificationPropertyPayload
	addTestSpecificationCriteria(input: [AddTestSpecificationCriteriaInput!]!, upsert: Boolean): AddTestSpecificationCriteriaPayload
	updateTestSpecificationCriteria(input: UpdateTestSpecificationCriteriaInput!): UpdateTestSpecificationCriteriaPayload
	deleteTestSpecificationCriteria(filter: TestSpecificationCriteriaFilter!): DeleteTestSpecificationCriteriaPayload
	addEvaluatedProperty(input: [AddEvaluatedPropertyInput!]!, upsert: Boolean): AddEvaluatedPropertyPayload
	updateEvaluatedProperty(input: UpdateEvaluatedPropertyInput!): UpdateEvaluatedPropertyPayload
	deleteEvaluatedProperty(filter: EvaluatedPropertyFilter!): DeleteEvaluatedPropertyPayload
	addTestResult(input: [AddTestResultInput!]!, upsert: Boolean): AddTestResultPayload
	updateTestResult(input: UpdateTestResultInput!): UpdateTestResultPayload
	deleteTestResult(filter: TestResultFilter!): DeleteTestResultPayload
	addPropertyMeasurement(input: [AddPropertyMeasurementInput!]!, upsert: Boolean): AddPropertyMeasurementPayload
	updatePropertyMeasurement(input: UpdatePropertyMeasurementInput!): UpdatePropertyMeasurementPayload
	deletePropertyMeasurement(filter: PropertyMeasurementFilter!): DeletePropertyMeasurementPayload
	addOperationsEventClass(input: [AddOperationsEventClassInput!]!, upsert: Boolean): AddOperationsEventClassPayload
	updateOperationsEventClass(input: UpdateOperationsEventClassInput!): UpdateOperationsEventClassPayload
	deleteOperationsEventClass(filter: OperationsEventClassFilter!): DeleteOperationsEventClassPayload
	addOperationsEventClassVersion(input: [AddOperationsEventClassVersionInput!]!): AddOperationsEventClassVersionPayload
	updateOperationsEventClassVersion(input: UpdateOperationsEventClassVersionInput!): UpdateOperationsEventClassVersionPayload
	deleteOperationsEventClassVersion(filter: OperationsEventClassVersionFilter!): DeleteOperationsEventClassVersionPayload
	addOperationsEventClassRecordSpecification(input: [AddOperationsEventClassRecordSpecificationInput!]!): AddOperationsEventClassRecordSpecificationPayload
	updateOperationsEventClassRecordSpecification(input: UpdateOperationsEventClassRecordSpecificationInput!): UpdateOperationsEventClassRecordSpecificationPayload
	deleteOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter!): DeleteOperationsEventClassRecordSpecificationPayload
	addMultiplicity(input: [AddMultiplicityInput!]!): AddMultiplicityPayload
	updateMultiplicity(input: UpdateMultiplicityInput!): UpdateMultiplicityPayload
	deleteMultiplicity(filter: MultiplicityFilter!): DeleteMultiplicityPayload
	addOperationsEventClassProperty(input: [AddOperationsEventClassPropertyInput!]!, upsert: Boolean): AddOperationsEventClassPropertyPayload
	updateOperationsEventClassProperty(input: UpdateOperationsEventClassPropertyInput!): UpdateOperationsEventClassPropertyPayload
	deleteOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter!): DeleteOperationsEventClassPropertyPayload
	addOperationsEventDefinition(input: [AddOperationsEventDefinitionInput!]!, upsert: Boolean): AddOperationsEventDefinitionPayload
	updateOperationsEventDefinition(input: UpdateOperationsEventDefinitionInput!): UpdateOperationsEventDefinitionPayload
	deleteOperationsEventDefinition(filter: OperationsEventDefinitionFilter!): DeleteOperationsEventDefinitionPayload
	addOperationsEventDefinitionVersion(input: [AddOperationsEventDefinitionVersionInput!]!): AddOperationsEventDefinitionVersionPayload
	updateOperationsEventDefinitionVersion(input: UpdateOperationsEventDefinitionVersionInput!): UpdateOperationsEventDefinitionVersionPayload
	deleteOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter!): DeleteOperationsEventDefinitionVersionPayload
	addOperationsEventDefinitionRecordSpecification(input: [AddOperationsEventDefinitionRecordSpecificationInput!]!): AddOperationsEventDefinitionRecordSpecificationPayload
	updateOperationsEventDefinitionRecordSpecification(input: UpdateOperationsEventDefinitionRecordSpecificationInput!): UpdateOperationsEventDefinitionRecordSpecificationPayload
	deleteOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter!): DeleteOperationsEventDefinitionRecordSpecificationPayload
	addOperationsEventDefinitionProperty(input: [AddOperationsEventDefinitionPropertyInput!]!): AddOperationsEventDefinitionPropertyPayload
	updateOperationsEventDefinitionProperty(input: UpdateOperationsEventDefinitionPropertyInput!): UpdateOperationsEventDefinitionPropertyPayload
	deleteOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter!): DeleteOperationsEventDefinitionPropertyPayload
	addOperationsEvent(input: [AddOperationsEventInput!]!, upsert: Boolean): AddOperationsEventPayload
	updateOperationsEvent(input: UpdateOperationsEventInput!): UpdateOperationsEventPayload
	deleteOperationsEvent(filter: OperationsEventFilter!): DeleteOperationsEventPayload
	addOperationsEventProperty(input: [AddOperationsEventPropertyInput!]!, upsert: Boolean): AddOperationsEventPropertyPayload
	updateOperationsEventProperty(input: UpdateOperationsEventPropertyInput!): UpdateOperationsEventPropertyPayload
	deleteOperationsEventProperty(filter: OperationsEventPropertyFilter!): DeleteOperationsEventPropertyPayload
	addOperationsEventRecord(input: [AddOperationsEventRecordInput!]!, upsert: Boolean): AddOperationsEventRecordPayload
	updateOperationsEventRecord(input: UpdateOperationsEventRecordInput!): UpdateOperationsEventRecordPayload
	deleteOperationsEventRecord(filter: OperationsEventRecordFilter!): DeleteOperationsEventRecordPayload
	addOperationsEventRecordEntry(input: [AddOperationsEventRecordEntryInput!]!): AddOperationsEventRecordEntryPayload
	updateOperationsEventRecordEntry(input: UpdateOperationsEventRecordEntryInput!): UpdateOperationsEventRecordEntryPayload
	deleteOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter!): DeleteOperationsEventRecordEntryPayload
	addOperationsDefinition(input: [AddOperationsDefinitionInput!]!, upsert: Boolean): AddOperationsDefinitionPayload
	updateOperationsDefinition(input: UpdateOperationsDefinitionInput!): UpdateOperationsDefinitionPayload
	deleteOperationsDefinition(filter: OperationsDefinitionFilter!): DeleteOperationsDefinitionPayload
	addOperationsDefinitionVersion(input: [AddOperationsDefinitionVersionInput!]!): AddOperationsDefinitionVersionPayload
	updateOperationsDefinitionVersion(input: UpdateOperationsDefinitionVersionInput!): UpdateOperationsDefinitionVersionPayload
	deleteOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter!): DeleteOperationsDefinitionVersionPayload
	addOperationsMaterialBill(input: [AddOperationsMaterialBillInput!]!, upsert: Boolean): AddOperationsMaterialBillPayload
	updateOperationsMaterialBill(input: UpdateOperationsMaterialBillInput!): UpdateOperationsMaterialBillPayload
	deleteOperationsMaterialBill(filter: OperationsMaterialBillFilter!): DeleteOperationsMaterialBillPayload
	addOperationsSegment(input: [AddOperationsSegmentInput!]!, upsert: Boolean): AddOperationsSegmentPayload
	updateOperationsSegment(input: UpdateOperationsSegmentInput!): UpdateOperationsSegmentPayload
	deleteOperationsSegment(filter: OperationsSegmentFilter!): DeleteOperationsSegmentPayload
	addOperationsSegmentDependency(input: [AddOperationsSegmentDependencyInput!]!, upsert: Boolean): AddOperationsSegmentDependencyPayload
	updateOperationsSegmentDependency(input: UpdateOperationsSegmentDependencyInput!): UpdateOperationsSegmentDependencyPayload
	deleteOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter!): DeleteOperationsSegmentDependencyPayload
	addParameterSpecification(input: [AddParameterSpecificationInput!]!, upsert: Boolean): AddParameterSpecificationPayload
	updateParameterSpecification(input: UpdateParameterSpecificationInput!): UpdateParameterSpecificationPayload
	deleteParameterSpecification(filter: ParameterSpecificationFilter!): DeleteParameterSpecificationPayload
	addPersonnelSpecification(input: [AddPersonnelSpecificationInput!]!, upsert: Boolean): AddPersonnelSpecificationPayload
	updatePersonnelSpecification(input: UpdatePersonnelSpecificationInput!): UpdatePersonnelSpecificationPayload
	deletePersonnelSpecification(filter: PersonnelSpecificationFilter!): DeletePersonnelSpecificationPayload
	addPersonnelSpecificationProperty(input: [AddPersonnelSpecificationPropertyInput!]!, upsert: Boolean): AddPersonnelSpecificationPropertyPayload
	updatePersonnelSpecificationProperty(input: UpdatePersonnelSpecificationPropertyInput!): UpdatePersonnelSpecificationPropertyPayload
	deletePersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter!): DeletePersonnelSpecificationPropertyPayload
	addEquipmentSpecification(input: [AddEquipmentSpecificationInput!]!, upsert: Boolean): AddEquipmentSpecificationPayload
	updateEquipmentSpecification(input: UpdateEquipmentSpecificationInput!): UpdateEquipmentSpecificationPayload
	deleteEquipmentSpecification(filter: EquipmentSpecificationFilter!): DeleteEquipmentSpecificationPayload
	addEquipmentSpecificationProperty(input: [AddEquipmentSpecificationPropertyInput!]!, upsert: Boolean): AddEquipmentSpecificationPropertyPayload
	updateEquipmentSpecificationProperty(input: UpdateEquipmentSpecificationPropertyInput!): UpdateEquipmentSpecificationPropertyPayload
	deleteEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter!): DeleteEquipmentSpecificationPropertyPayload
	addPhysicalAssetSpecification(input: [AddPhysicalAssetSpecificationInput!]!, upsert: Boolean): AddPhysicalAssetSpecificationPayload
	updatePhysicalAssetSpecification(input: UpdatePhysicalAssetSpecificationInput!): UpdatePhysicalAssetSpecificationPayload
	deletePhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter!): DeletePhysicalAssetSpecificationPayload
	addPhysicalAssetSpecificationProperty(input: [AddPhysicalAssetSpecificationPropertyInput!]!, upsert: Boolean): AddPhysicalAssetSpecificationPropertyPayload
	updatePhysicalAssetSpecificationProperty(input: UpdatePhysicalAssetSpecificationPropertyInput!): UpdatePhysicalAssetSpecificationPropertyPayload
	deletePhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter!): DeletePhysicalAssetSpecificationPropertyPayload
	addMaterialSpecification(input: [AddMaterialSpecificationInput!]!, upsert: Boolean): AddMaterialSpecificationPayload
	updateMaterialSpecification(input: UpdateMaterialSpecificationInput!): UpdateMaterialSpecificationPayload
	deleteMaterialSpecification(filter: MaterialSpecificationFilter!): DeleteMaterialSpecificationPayload
	addMaterialSpecificationProperty(input: [AddMaterialSpecificationPropertyInput!]!, upsert: Boolean): AddMaterialSpecificationPropertyPayload
	updateMaterialSpecificationProperty(input: UpdateMaterialSpecificationPropertyInput!): UpdateMaterialSpecificationPropertyPayload
	deleteMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter!): DeleteMaterialSpecificationPropertyPayload
	addOperationsSchedule(input: [AddOperationsScheduleInput!]!, upsert: Boolean): AddOperationsSchedulePayload
	updateOperationsSchedule(input: UpdateOperationsScheduleInput!): UpdateOperationsSchedulePayload
	deleteOperationsSchedule(filter: OperationsScheduleFilter!): DeleteOperationsSchedulePayload
	addOperationsRequest(input: [AddOperationsRequestInput!]!, upsert: Boolean): AddOperationsRequestPayload
	updateOperationsRequest(input: UpdateOperationsRequestInput!): UpdateOperationsRequestPayload
	deleteOperationsRequest(filter: OperationsRequestFilter!): DeleteOperationsRequestPayload
	addSegmentRequirement(input: [AddSegmentRequirementInput!]!, upsert: Boolean): AddSegmentRequirementPayload
	updateSegmentRequirement(input: UpdateSegmentRequirementInput!): UpdateSegmentRequirementPayload
	deleteSegmentRequirement(filter: SegmentRequirementFilter!): DeleteSegmentRequirementPayload
	addSegmentParameter(input: [AddSegmentParameterInput!]!, upsert: Boolean): AddSegmentParameterPayload
	updateSegmentParameter(input: UpdateSegmentParameterInput!): UpdateSegmentParameterPayload
	deleteSegmentParameter(filter: SegmentParameterFilter!): DeleteSegmentParameterPayload
	addPersonnelRequirement(input: [AddPersonnelRequirementInput!]!, upsert: Boolean): AddPersonnelRequirementPayload
	updatePersonnelRequirement(input: UpdatePersonnelRequirementInput!): UpdatePersonnelRequirementPayload
	deletePersonnelRequirement(filter: PersonnelRequirementFilter!): DeletePersonnelRequirementPayload
	addPersonnelRequirementProperty(input: [AddPersonnelRequirementPropertyInput!]!, upsert: Boolean): AddPersonnelRequirementPropertyPayload
	updatePersonnelRequirementProperty(input: UpdatePersonnelRequirementPropertyInput!): UpdatePersonnelRequirementPropertyPayload
	deletePersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter!): DeletePersonnelRequirementPropertyPayload
	addEquipmentRequirement(input: [AddEquipmentRequirementInput!]!, upsert: Boolean): AddEquipmentRequirementPayload
	updateEquipmentRequirement(input: UpdateEquipmentRequirementInput!): UpdateEquipmentRequirementPayload
	deleteEquipmentRequirement(filter: EquipmentRequirementFilter!): DeleteEquipmentRequirementPayload
	addEquipmentRequirementProperty(input: [AddEquipmentRequirementPropertyInput!]!, upsert: Boolean): AddEquipmentRequirementPropertyPayload
	updateEquipmentRequirementProperty(input: UpdateEquipmentRequirementPropertyInput!): UpdateEquipmentRequirementPropertyPayload
	deleteEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter!): DeleteEquipmentRequirementPropertyPayload
	addPhysicalAssetRequirement(input: [AddPhysicalAssetRequirementInput!]!, upsert: Boolean): AddPhysicalAssetRequirementPayload
	updatePhysicalAssetRequirement(input: UpdatePhysicalAssetRequirementInput!): UpdatePhysicalAssetRequirementPayload
	deletePhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter!): DeletePhysicalAssetRequirementPayload
	addPhysicalAssetRequirementProperty(input: [AddPhysicalAssetRequirementPropertyInput!]!, upsert: Boolean): AddPhysicalAssetRequirementPropertyPayload
	updatePhysicalAssetRequirementProperty(input: UpdatePhysicalAssetRequirementPropertyInput!): UpdatePhysicalAssetRequirementPropertyPayload
	deletePhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter!): DeletePhysicalAssetRequirementPropertyPayload
	addMaterialRequirement(input: [AddMaterialRequirementInput!]!, upsert: Boolean): AddMaterialRequirementPayload
	updateMaterialRequirement(input: UpdateMaterialRequirementInput!): UpdateMaterialRequirementPayload
	deleteMaterialRequirement(filter: MaterialRequirementFilter!): DeleteMaterialRequirementPayload
	addMaterialRequirementProperty(input: [AddMaterialRequirementPropertyInput!]!, upsert: Boolean): AddMaterialRequirementPropertyPayload
	updateMaterialRequirementProperty(input: UpdateMaterialRequirementPropertyInput!): UpdateMaterialRequirementPropertyPayload
	deleteMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter!): DeleteMaterialRequirementPropertyPayload
	addOperationsPerformance(input: [AddOperationsPerformanceInput!]!, upsert: Boolean): AddOperationsPerformancePayload
	updateOperationsPerformance(input: UpdateOperationsPerformanceInput!): UpdateOperationsPerformancePayload
	deleteOperationsPerformance(filter: OperationsPerformanceFilter!): DeleteOperationsPerformancePayload
	addOperationsResponse(input: [AddOperationsResponseInput!]!, upsert: Boolean): AddOperationsResponsePayload
	updateOperationsResponse(input: UpdateOperationsResponseInput!): UpdateOperationsResponsePayload
	deleteOperationsResponse(filter: OperationsResponseFilter!): DeleteOperationsResponsePayload
	addSegmentResponse(input: [AddSegmentResponseInput!]!, upsert: Boolean): AddSegmentResponsePayload
	updateSegmentResponse(input: UpdateSegmentResponseInput!): UpdateSegmentResponsePayload
	deleteSegmentResponse(filter: SegmentResponseFilter!): DeleteSegmentResponsePayload
	addSegmentData(input: [AddSegmentDataInput!]!, upsert: Boolean): AddSegmentDataPayload
	updateSegmentData(input: UpdateSegmentDataInput!): UpdateSegmentDataPayload
	deleteSegmentData(filter: SegmentDataFilter!): DeleteSegmentDataPayload
	addPersonnelActual(input: [AddPersonnelActualInput!]!, upsert: Boolean): AddPersonnelActualPayload
	updatePersonnelActual(input: UpdatePersonnelActualInput!): UpdatePersonnelActualPayload
	deletePersonnelActual(filter: PersonnelActualFilter!): DeletePersonnelActualPayload
	addPersonnelActualProperty(input: [AddPersonnelActualPropertyInput!]!, upsert: Boolean): AddPersonnelActualPropertyPayload
	updatePersonnelActualProperty(input: UpdatePersonnelActualPropertyInput!): UpdatePersonnelActualPropertyPayload
	deletePersonnelActualProperty(filter: PersonnelActualPropertyFilter!): DeletePersonnelActualPropertyPayload
	addEquipmentActual(input: [AddEquipmentActualInput!]!, upsert: Boolean): AddEquipmentActualPayload
	updateEquipmentActual(input: UpdateEquipmentActualInput!): UpdateEquipmentActualPayload
	deleteEquipmentActual(filter: EquipmentActualFilter!): DeleteEquipmentActualPayload
	addEquipmentActualProperty(input: [AddEquipmentActualPropertyInput!]!, upsert: Boolean): AddEquipmentActualPropertyPayload
	updateEquipmentActualProperty(input: UpdateEquipmentActualPropertyInput!): UpdateEquipmentActualPropertyPayload
	deleteEquipmentActualProperty(filter: EquipmentActualPropertyFilter!): DeleteEquipmentActualPropertyPayload
	addPhysicalAssetActual(input: [AddPhysicalAssetActualInput!]!, upsert: Boolean): AddPhysicalAssetActualPayload
	updatePhysicalAssetActual(input: UpdatePhysicalAssetActualInput!): UpdatePhysicalAssetActualPayload
	deletePhysicalAssetActual(filter: PhysicalAssetActualFilter!): DeletePhysicalAssetActualPayload
	addPhysicalAssetActualProperty(input: [AddPhysicalAssetActualPropertyInput!]!, upsert: Boolean): AddPhysicalAssetActualPropertyPayload
	updatePhysicalAssetActualProperty(input: UpdatePhysicalAssetActualPropertyInput!): UpdatePhysicalAssetActualPropertyPayload
	deletePhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter!): DeletePhysicalAssetActualPropertyPayload
	addMaterialActual(input: [AddMaterialActualInput!]!, upsert: Boolean): AddMaterialActualPayload
	updateMaterialActual(input: UpdateMaterialActualInput!): UpdateMaterialActualPayload
	deleteMaterialActual(filter: MaterialActualFilter!): DeleteMaterialActualPayload
	addMaterialActualProperty(input: [AddMaterialActualPropertyInput!]!, upsert: Boolean): AddMaterialActualPropertyPayload
	updateMaterialActualProperty(input: UpdateMaterialActualPropertyInput!): UpdateMaterialActualPropertyPayload
	deleteMaterialActualProperty(filter: MaterialActualPropertyFilter!): DeleteMaterialActualPropertyPayload
	addOperationsResponseProperty(input: [AddOperationsResponsePropertyInput!]!, upsert: Boolean): AddOperationsResponsePropertyPayload
	updateOperationsResponseProperty(input: UpdateOperationsResponsePropertyInput!): UpdateOperationsResponsePropertyPayload
	deleteOperationsResponseProperty(filter: OperationsResponsePropertyFilter!): DeleteOperationsResponsePropertyPayload
	addWorkMaster(input: [AddWorkMasterInput!]!): AddWorkMasterPayload
	updateWorkMaster(input: UpdateWorkMasterInput!): UpdateWorkMasterPayload
	deleteWorkMaster(filter: WorkMasterFilter!): DeleteWorkMasterPayload
	addWorkDirective(input: [AddWorkDirectiveInput!]!): AddWorkDirectivePayload
	updateWorkDirective(input: UpdateWorkDirectiveInput!): UpdateWorkDirectivePayload
	deleteWorkDirective(filter: WorkDirectiveFilter!): DeleteWorkDirectivePayload
	addWorkflowSpecification(input: [AddWorkflowSpecificationInput!]!, upsert: Boolean): AddWorkflowSpecificationPayload
	updateWorkflowSpecification(input: UpdateWorkflowSpecificationInput!): UpdateWorkflowSpecificationPayload
	deleteWorkflowSpecification(filter: WorkflowSpecificationFilter!): DeleteWorkflowSpecificationPayload
	addWorkflowSpecificationVersion(input: [AddWorkflowSpecificationVersionInput!]!): AddWorkflowSpecificationVersionPayload
	updateWorkflowSpecificationVersion(input: UpdateWorkflowSpecificationVersionInput!): UpdateWorkflowSpecificationVersionPayload
	deleteWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter!): DeleteWorkflowSpecificationVersionPayload
	addWorkflowSpecificationProperty(input: [AddWorkflowSpecificationPropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationPropertyPayload
	updateWorkflowSpecificationProperty(input: UpdateWorkflowSpecificationPropertyInput!): UpdateWorkflowSpecificationPropertyPayload
	deleteWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter!): DeleteWorkflowSpecificationPropertyPayload
	addWorkflowTimer(input: [AddWorkflowTimerInput!]!, upsert: Boolean): AddWorkflowTimerPayload
	updateWorkflowTimer(input: UpdateWorkflowTimerInput!): UpdateWorkflowTimerPayload
	deleteWorkflowTimer(filter: WorkflowTimerFilter!): DeleteWorkflowTimerPayload
	addWorkflowMessage(input: [AddWorkflowMessageInput!]!, upsert: Boolean): AddWorkflowMessagePayload
	updateWorkflowMessage(input: UpdateWorkflowMessageInput!): UpdateWorkflowMessagePayload
	deleteWorkflowMessage(filter: WorkflowMessageFilter!): DeleteWorkflowMessagePayload
	addWorkflowError(input: [AddWorkflowErrorInput!]!, upsert: Boolean): AddWorkflowErrorPayload
	updateWorkflowError(input: UpdateWorkflowErrorInput!): UpdateWorkflowErrorPayload
	deleteWorkflowError(filter: WorkflowErrorFilter!): DeleteWorkflowErrorPayload
	addWorkflowSpecificationNode(input: [AddWorkflowSpecificationNodeInput!]!, upsert: Boolean): AddWorkflowSpecificationNodePayload
	updateWorkflowSpecificationNode(input: UpdateWorkflowSpecificationNodeInput!): UpdateWorkflowSpecificationNodePayload
	deleteWorkflowSpecificationNode(filter: WorkflowSpecificationNodeFilter!): DeleteWorkflowSpecificationNodePayload
	addWorkflowSpecificationNodeTestCase(input: [AddWorkflowSpecificationNodeTestCaseInput!]!, upsert: Boolean): AddWorkflowSpecificationNodeTestCasePayload
	updateWorkflowSpecificationNodeTestCase(input: UpdateWorkflowSpecificationNodeTestCaseInput!): UpdateWorkflowSpecificationNodeTestCasePayload
	deleteWorkflowSpecificationNodeTestCase(filter: WorkflowSpecificationNodeTestCaseFilter!): DeleteWorkflowSpecificationNodeTestCasePayload
	addWorkflowShape(input: [AddWorkflowShapeInput!]!, upsert: Boolean): AddWorkflowShapePayload
	updateWorkflowShape(input: UpdateWorkflowShapeInput!): UpdateWorkflowShapePayload
	deleteWorkflowShape(filter: WorkflowShapeFilter!): DeleteWorkflowShapePayload
	addWorkflowSpecificationNodeVariable(input: [AddWorkflowSpecificationNodeVariableInput!]!): AddWorkflowSpecificationNodeVariablePayload
	updateWorkflowSpecificationNodeVariable(input: UpdateWorkflowSpecificationNodeVariableInput!): UpdateWorkflowSpecificationNodeVariablePayload
	deleteWorkflowSpecificationNodeVariable(filter: WorkflowSpecificationNodeVariableFilter!): DeleteWorkflowSpecificationNodeVariablePayload
	addWorkflowSpecificationNodeProperty(input: [AddWorkflowSpecificationNodePropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationNodePropertyPayload
	updateWorkflowSpecificationNodeProperty(input: UpdateWorkflowSpecificationNodePropertyInput!): UpdateWorkflowSpecificationNodePropertyPayload
	deleteWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter!): DeleteWorkflowSpecificationNodePropertyPayload
	addWorkflowSpecificationNodeType(input: [AddWorkflowSpecificationNodeTypeInput!]!, upsert: Boolean): AddWorkflowSpecificationNodeTypePayload
	updateWorkflowSpecificationNodeType(input: UpdateWorkflowSpecificationNodeTypeInput!): UpdateWorkflowSpecificationNodeTypePayload
	deleteWorkflowSpecificationNodeType(filter: WorkflowSpecificationNodeTypeFilter!): DeleteWorkflowSpecificationNodeTypePayload
	addWorkflowSpecificationNodeTypeProperty(input: [AddWorkflowSpecificationNodeTypePropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationNodeTypePropertyPayload
	updateWorkflowSpecificationNodeTypeProperty(input: UpdateWorkflowSpecificationNodeTypePropertyInput!): UpdateWorkflowSpecificationNodeTypePropertyPayload
	deleteWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter!): DeleteWorkflowSpecificationNodeTypePropertyPayload
	addWorkflowSpecificationConnection(input: [AddWorkflowSpecificationConnectionInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionPayload
	updateWorkflowSpecificationConnection(input: UpdateWorkflowSpecificationConnectionInput!): UpdateWorkflowSpecificationConnectionPayload
	deleteWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter!): DeleteWorkflowSpecificationConnectionPayload
	addWorkflowWaypoint(input: [AddWorkflowWaypointInput!]!): AddWorkflowWaypointPayload
	updateWorkflowWaypoint(input: UpdateWorkflowWaypointInput!): UpdateWorkflowWaypointPayload
	deleteWorkflowWaypoint(filter: WorkflowWaypointFilter!): DeleteWorkflowWaypointPayload
	addWorkflowSpecificationConnectionProperty(input: [AddWorkflowSpecificationConnectionPropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionPropertyPayload
	updateWorkflowSpecificationConnectionProperty(input: UpdateWorkflowSpecificationConnectionPropertyInput!): UpdateWorkflowSpecificationConnectionPropertyPayload
	deleteWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter!): DeleteWorkflowSpecificationConnectionPropertyPayload
	addWorkflowSpecificationConnectionType(input: [AddWorkflowSpecificationConnectionTypeInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionTypePayload
	updateWorkflowSpecificationConnectionType(input: UpdateWorkflowSpecificationConnectionTypeInput!): UpdateWorkflowSpecificationConnectionTypePayload
	deleteWorkflowSpecificationConnectionType(filter: WorkflowSpecificationConnectionTypeFilter!): DeleteWorkflowSpecificationConnectionTypePayload
	addWorkflowSpecificationConnectionTypeProperty(input: [AddWorkflowSpecificationConnectionTypePropertyInput!]!, upsert: Boolean): AddWorkflowSpecificationConnectionTypePropertyPayload
	updateWorkflowSpecificationConnectionTypeProperty(input: UpdateWorkflowSpecificationConnectionTypePropertyInput!): UpdateWorkflowSpecificationConnectionTypePropertyPayload
	deleteWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter!): DeleteWorkflowSpecificationConnectionTypePropertyPayload
	addForm(input: [AddFormInput!]!, upsert: Boolean): AddFormPayload
	updateForm(input: UpdateFormInput!): UpdateFormPayload
	deleteForm(filter: FormFilter!): DeleteFormPayload
	addWorkSchedule(input: [AddWorkScheduleInput!]!, upsert: Boolean): AddWorkSchedulePayload
	updateWorkSchedule(input: UpdateWorkScheduleInput!): UpdateWorkSchedulePayload
	deleteWorkSchedule(filter: WorkScheduleFilter!): DeleteWorkSchedulePayload
	addWorkRequest(input: [AddWorkRequestInput!]!, upsert: Boolean): AddWorkRequestPayload
	updateWorkRequest(input: UpdateWorkRequestInput!): UpdateWorkRequestPayload
	deleteWorkRequest(filter: WorkRequestFilter!): DeleteWorkRequestPayload
	addJobList(input: [AddJobListInput!]!, upsert: Boolean): AddJobListPayload
	updateJobList(input: UpdateJobListInput!): UpdateJobListPayload
	deleteJobList(filter: JobListFilter!): DeleteJobListPayload
	addJobOrder(input: [AddJobOrderInput!]!, upsert: Boolean): AddJobOrderPayload
	updateJobOrder(input: UpdateJobOrderInput!): UpdateJobOrderPayload
	deleteJobOrder(filter: JobOrderFilter!): DeleteJobOrderPayload
	addJobOrderParameter(input: [AddJobOrderParameterInput!]!, upsert: Boolean): AddJobOrderParameterPayload
	updateJobOrderParameter(input: UpdateJobOrderParameterInput!): UpdateJobOrderParameterPayload
	deleteJobOrderParameter(filter: JobOrderParameterFilter!): DeleteJobOrderParameterPayload
	addWorkPerformance(input: [AddWorkPerformanceInput!]!, upsert: Boolean): AddWorkPerformancePayload
	updateWorkPerformance(input: UpdateWorkPerformanceInput!): UpdateWorkPerformancePayload
	deleteWorkPerformance(filter: WorkPerformanceFilter!): DeleteWorkPerformancePayload
	addWorkResponse(input: [AddWorkResponseInput!]!, upsert: Boolean): AddWorkResponsePayload
	updateWorkResponse(input: UpdateWorkResponseInput!): UpdateWorkResponsePayload
	deleteWorkResponse(filter: WorkResponseFilter!): DeleteWorkResponsePayload
	addJobResponseList(input: [AddJobResponseListInput!]!, upsert: Boolean): AddJobResponseListPayload
	updateJobResponseList(input: UpdateJobResponseListInput!): UpdateJobResponseListPayload
	deleteJobResponseList(filter: JobResponseListFilter!): DeleteJobResponseListPayload
	addJobResponse(input: [AddJobResponseInput!]!, upsert: Boolean): AddJobResponsePayload
	updateJobResponse(input: UpdateJobResponseInput!): UpdateJobResponsePayload
	deleteJobResponse(filter: JobResponseFilter!): DeleteJobResponsePayload
	addJobResponseData(input: [AddJobResponseDataInput!]!, upsert: Boolean): AddJobResponseDataPayload
	updateJobResponseData(input: UpdateJobResponseDataInput!): UpdateJobResponseDataPayload
	deleteJobResponseData(filter: JobResponseDataFilter!): DeleteJobResponseDataPayload
	addWorkCalendarDefinitionEntry(input: [AddWorkCalendarDefinitionEntryInput!]!): AddWorkCalendarDefinitionEntryPayload
	updateWorkCalendarDefinitionEntry(input: UpdateWorkCalendarDefinitionEntryInput!): UpdateWorkCalendarDefinitionEntryPayload
	deleteWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter!): DeleteWorkCalendarDefinitionEntryPayload
	addWorkCalendarDefinitionEntryProperty(input: [AddWorkCalendarDefinitionEntryPropertyInput!]!, upsert: Boolean): AddWorkCalendarDefinitionEntryPropertyPayload
	updateWorkCalendarDefinitionEntryProperty(input: UpdateWorkCalendarDefinitionEntryPropertyInput!): UpdateWorkCalendarDefinitionEntryPropertyPayload
	deleteWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter!): DeleteWorkCalendarDefinitionEntryPropertyPayload
	addWorkCalendarEntry(input: [AddWorkCalendarEntryInput!]!): AddWorkCalendarEntryPayload
	updateWorkCalendarEntry(input: UpdateWorkCalendarEntryInput!): UpdateWorkCalendarEntryPayload
	deleteWorkCalendarEntry(filter: WorkCalendarEntryFilter!): DeleteWorkCalendarEntryPayload
	addWorkCalendarEntryProperty(input: [AddWorkCalendarEntryPropertyInput!]!, upsert: Boolean): AddWorkCalendarEntryPropertyPayload
	updateWorkCalendarEntryProperty(input: UpdateWorkCalendarEntryPropertyInput!): UpdateWorkCalendarEntryPropertyPayload
	deleteWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter!): DeleteWorkCalendarEntryPropertyPayload
	addWorkCalendar(input: [AddWorkCalendarInput!]!, upsert: Boolean): AddWorkCalendarPayload
	updateWorkCalendar(input: UpdateWorkCalendarInput!): UpdateWorkCalendarPayload
	deleteWorkCalendar(filter: WorkCalendarFilter!): DeleteWorkCalendarPayload
	addInformationObject(input: [AddInformationObjectInput!]!): AddInformationObjectPayload
	updateInformationObject(input: UpdateInformationObjectInput!): UpdateInformationObjectPayload
	deleteInformationObject(filter: InformationObjectFilter!): DeleteInformationObjectPayload
	addStateModelDefinition(input: [AddStateModelDefinitionInput!]!, upsert: Boolean): AddStateModelDefinitionPayload
	updateStateModelDefinition(input: UpdateStateModelDefinitionInput!): UpdateStateModelDefinitionPayload
	deleteStateModelDefinition(filter: StateModelDefinitionFilter!): DeleteStateModelDefinitionPayload
	addStateModelState(input: [AddStateModelStateInput!]!, upsert: Boolean): AddStateModelStatePayload
	updateStateModelState(input: UpdateStateModelStateInput!): UpdateStateModelStatePayload
	deleteStateModelState(filter: StateModelStateFilter!): DeleteStateModelStatePayload
	addStateModelTransition(input: [AddStateModelTransitionInput!]!, upsert: Boolean): AddStateModelTransitionPayload
	updateStateModelTransition(input: UpdateStateModelTransitionInput!): UpdateStateModelTransitionPayload
	deleteStateModelTransition(filter: StateModelTransitionFilter!): DeleteStateModelTransitionPayload
	addStateModelEvent(input: [AddStateModelEventInput!]!, upsert: Boolean): AddStateModelEventPayload
	updateStateModelEvent(input: UpdateStateModelEventInput!): UpdateStateModelEventPayload
	deleteStateModelEvent(filter: StateModelEventFilter!): DeleteStateModelEventPayload
	addStateModelAction(input: [AddStateModelActionInput!]!, upsert: Boolean): AddStateModelActionPayload
	updateStateModelAction(input: UpdateStateModelActionInput!): UpdateStateModelActionPayload
	deleteStateModelAction(filter: StateModelActionFilter!): DeleteStateModelActionPayload
	addStateModelInstance(input: [AddStateModelInstanceInput!]!, upsert: Boolean): AddStateModelInstancePayload
	updateStateModelInstance(input: UpdateStateModelInstanceInput!): UpdateStateModelInstancePayload
	deleteStateModelInstance(filter: StateModelInstanceFilter!): DeleteStateModelInstancePayload
	addStateTransitionInstance(input: [AddStateTransitionInstanceInput!]!): AddStateTransitionInstancePayload
	updateStateTransitionInstance(input: UpdateStateTransitionInstanceInput!): UpdateStateTransitionInstancePayload
	deleteStateTransitionInstance(filter: StateTransitionInstanceFilter!): DeleteStateTransitionInstancePayload
	addStateModelProperty(input: [AddStateModelPropertyInput!]!, upsert: Boolean): AddStateModelPropertyPayload
	updateStateModelProperty(input: UpdateStateModelPropertyInput!): UpdateStateModelPropertyPayload
	deleteStateModelProperty(filter: StateModelPropertyFilter!): DeleteStateModelPropertyPayload
	addAccessPermission(input: [AddAccessPermissionInput!]!): AddAccessPermissionPayload
	updateAccessPermission(input: UpdateAccessPermissionInput!): UpdateAccessPermissionPayload
	deleteAccessPermission(filter: AccessPermissionFilter!): DeleteAccessPermissionPayload
	addLibreService(input: [AddLibreServiceInput!]!, upsert: Boolean): AddLibreServicePayload
	updateLibreService(input: UpdateLibreServiceInput!): UpdateLibreServicePayload
	deleteLibreService(filter: LibreServiceFilter!): DeleteLibreServicePayload
	addDataSubscription(input: [AddDataSubscriptionInput!]!, upsert: Boolean): AddDataSubscriptionPayload
	updateDataSubscription(input: UpdateDataSubscriptionInput!): UpdateDataSubscriptionPayload
	deleteDataSubscription(filter: DataSubscriptionFilter!): DeleteDataSubscriptionPayload
	addMenu(input: [AddMenuInput!]!): AddMenuPayload
	updateMenu(input: UpdateMenuInput!): UpdateMenuPayload
	deleteMenu(filter: MenuFilter!): DeleteMenuPayload
	addEquipmentPropertyOverride(input: [AddEquipmentPropertyOverrideInput!]!, upsert: Boolean): AddEquipmentPropertyOverridePayload
	updateEquipmentPropertyOverride(input: UpdateEquipmentPropertyOverrideInput!): UpdateEquipmentPropertyOverridePayload
	deleteEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter!): DeleteEquipmentPropertyOverridePayload
	addEquipmentNameAlias(input: [AddEquipmentNameAliasInput!]!): AddEquipmentNameAliasPayload
	updateEquipmentNameAlias(input: UpdateEquipmentNameAliasInput!): UpdateEquipmentNameAliasPayload
	deleteEquipmentNameAlias(filter: EquipmentNameAliasFilter!): DeleteEquipmentNameAliasPayload
	addPropertyNameAlias(input: [AddPropertyNameAliasInput!]!): AddPropertyNameAliasPayload
	updatePropertyNameAlias(input: UpdatePropertyNameAliasInput!): UpdatePropertyNameAliasPayload
	deletePropertyNameAlias(filter: PropertyNameAliasFilter!): DeletePropertyNameAliasPayload
	addPropertyValueAlias(input: [AddPropertyValueAliasInput!]!): AddPropertyValueAliasPayload
	updatePropertyValueAlias(input: UpdatePropertyValueAliasInput!): UpdatePropertyValueAliasPayload
	deletePropertyValueAlias(filter: PropertyValueAliasFilter!): DeletePropertyValueAliasPayload
	addDataSource(input: [AddDataSourceInput!]!, upsert: Boolean): AddDataSourcePayload
	updateDataSource(input: UpdateDataSourceInput!): UpdateDataSourcePayload
	deleteDataSource(filter: DataSourceFilter!): DeleteDataSourcePayload
	addDataSourceVersion(input: [AddDataSourceVersionInput!]!): AddDataSourceVersionPayload
	updateDataSourceVersion(input: UpdateDataSourceVersionInput!): UpdateDataSourceVersionPayload
	deleteDataSourceVersion(filter: DataSourceVersionFilter!): DeleteDataSourceVersionPayload
	addDataSourceTopic(input: [AddDataSourceTopicInput!]!, upsert: Boolean): AddDataSourceTopicPayload
	updateDataSourceTopic(input: UpdateDataSourceTopicInput!): UpdateDataSourceTopicPayload
	deleteDataSourceTopic(filter: DataSourceTopicFilter!): DeleteDataSourceTopicPayload
	addDataSourceMethod(input: [AddDataSourceMethodInput!]!, upsert: Boolean): AddDataSourceMethodPayload
	updateDataSourceMethod(input: UpdateDataSourceMethodInput!): UpdateDataSourceMethodPayload
	deleteDataSourceMethod(filter: DataSourceMethodFilter!): DeleteDataSourceMethodPayload
	addDataSourceMethodArgument(input: [AddDataSourceMethodArgumentInput!]!, upsert: Boolean): AddDataSourceMethodArgumentPayload
	updateDataSourceMethodArgument(input: UpdateDataSourceMethodArgumentInput!): UpdateDataSourceMethodArgumentPayload
	deleteDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter!): DeleteDataSourceMethodArgumentPayload
	addRule(input: [AddRuleInput!]!, upsert: Boolean): AddRulePayload
	updateRule(input: UpdateRuleInput!): UpdateRulePayload
	deleteRule(filter: RuleFilter!): DeleteRulePayload
	addPayloadFieldDefinition(input: [AddPayloadFieldDefinitionInput!]!): AddPayloadFieldDefinitionPayload
	updatePayloadFieldDefinition(input: UpdatePayloadFieldDefinitionInput!): UpdatePayloadFieldDefinitionPayload
	deletePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter!): DeletePayloadFieldDefinitionPayload
	addEnvironmentalVariable(input: [AddEnvironmentalVariableInput!]!, upsert: Boolean): AddEnvironmentalVariablePayload
	updateEnvironmentalVariable(input: UpdateEnvironmentalVariableInput!): UpdateEnvironmentalVariablePayload
	deleteEnvironmentalVariable(filter: EnvironmentalVariableFilter!): DeleteEnvironmentalVariablePayload
	addEnvironmentalVariableVersion(input: [AddEnvironmentalVariableVersionInput!]!): AddEnvironmentalVariableVersionPayload
	updateEnvironmentalVariableVersion(input: UpdateEnvironmentalVariableVersionInput!): UpdateEnvironmentalVariableVersionPayload
	deleteEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter!): DeleteEnvironmentalVariableVersionPayload
	addSecret(input: [AddSecretInput!]!, upsert: Boolean): AddSecretPayload
	updateSecret(input: UpdateSecretInput!): UpdateSecretPayload
	deleteSecret(filter: SecretFilter!): DeleteSecretPayload
	addSecretVersion(input: [AddSecretVersionInput!]!): AddSecretVersionPayload
	updateSecretVersion(input: UpdateSecretVersionInput!): UpdateSecretVersionPayload
	deleteSecretVersion(filter: SecretVersionFilter!): DeleteSecretVersionPayload
	addSignature(input: [AddSignatureInput!]!): AddSignaturePayload
	updateSignature(input: UpdateSignatureInput!): UpdateSignaturePayload
	deleteSignature(filter: SignatureFilter!): DeleteSignaturePayload
	addSignatureReason(input: [AddSignatureReasonInput!]!, upsert: Boolean): AddSignatureReasonPayload
	updateSignatureReason(input: UpdateSignatureReasonInput!): UpdateSignatureReasonPayload
	deleteSignatureReason(filter: SignatureReasonFilter!): DeleteSignatureReasonPayload
	addComment(input: [AddCommentInput!]!, upsert: Boolean): AddCommentPayload
	updateComment(input: UpdateCommentInput!): UpdateCommentPayload
	deleteComment(filter: CommentFilter!): DeleteCommentPayload
}

#######################
# Generated Subscriptions
#######################

type Subscription {
	getEvent(iid: ID!): Event
	queryEvent(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
	aggregateEvent(filter: EventFilter): EventAggregateResult
	getAlarmEvent(iid: ID!): AlarmEvent
	queryAlarmEvent(filter: AlarmEventFilter, order: AlarmEventOrder, first: Int, offset: Int): [AlarmEvent]
	aggregateAlarmEvent(filter: AlarmEventFilter): AlarmEventAggregateResult
	getEventType(iid: ID, id: String): EventType
	queryEventType(filter: EventTypeFilter, order: EventTypeOrder, first: Int, offset: Int): [EventType]
	aggregateEventType(filter: EventTypeFilter): EventTypeAggregateResult
	getEventSubtype(iid: ID, id: String): EventSubtype
	queryEventSubtype(filter: EventSubtypeFilter, order: EventSubtypeOrder, first: Int, offset: Int): [EventSubtype]
	aggregateEventSubtype(filter: EventSubtypeFilter): EventSubtypeAggregateResult
	getEventProperty(iid: ID, id: String): EventProperty
	queryEventProperty(filter: EventPropertyFilter, order: EventPropertyOrder, first: Int, offset: Int): [EventProperty]
	aggregateEventProperty(filter: EventPropertyFilter): EventPropertyAggregateResult
	getEventAssociation(iid: ID, id: String): EventAssociation
	queryEventAssociation(filter: EventAssociationFilter, order: EventAssociationOrder, first: Int, offset: Int): [EventAssociation]
	aggregateEventAssociation(filter: EventAssociationFilter): EventAssociationAggregateResult
	getHierarchyScope(iid: ID, id: String): HierarchyScope
	queryHierarchyScope(filter: HierarchyScopeFilter, order: HierarchyScopeOrder, first: Int, offset: Int): [HierarchyScope]
	aggregateHierarchyScope(filter: HierarchyScopeFilter): HierarchyScopeAggregateResult
	getSpatialDefinition(iid: ID, id: String): SpatialDefinition
	querySpatialDefinition(filter: SpatialDefinitionFilter, order: SpatialDefinitionOrder, first: Int, offset: Int): [SpatialDefinition]
	aggregateSpatialDefinition(filter: SpatialDefinitionFilter): SpatialDefinitionAggregateResult
	getOperationalLocationClass(iid: ID, id: String): OperationalLocationClass
	queryOperationalLocationClass(filter: OperationalLocationClassFilter, order: OperationalLocationClassOrder, first: Int, offset: Int): [OperationalLocationClass]
	aggregateOperationalLocationClass(filter: OperationalLocationClassFilter): OperationalLocationClassAggregateResult
	getOperationalLocationClassVersion(iid: ID, id: String, version: String): OperationalLocationClassVersion
	queryOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter, order: OperationalLocationClassVersionOrder, first: Int, offset: Int): [OperationalLocationClassVersion]
	aggregateOperationalLocationClassVersion(filter: OperationalLocationClassVersionFilter): OperationalLocationClassVersionAggregateResult
	getOperationalLocationClassProperty(iid: ID, id: String): OperationalLocationClassProperty
	queryOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter, order: OperationalLocationClassPropertyOrder, first: Int, offset: Int): [OperationalLocationClassProperty]
	aggregateOperationalLocationClassProperty(filter: OperationalLocationClassPropertyFilter): OperationalLocationClassPropertyAggregateResult
	getOperationalLocation(iid: ID, id: String): OperationalLocation
	queryOperationalLocation(filter: OperationalLocationFilter, order: OperationalLocationOrder, first: Int, offset: Int): [OperationalLocation]
	aggregateOperationalLocation(filter: OperationalLocationFilter): OperationalLocationAggregateResult
	getOperationalLocationProperty(iid: ID, id: String): OperationalLocationProperty
	queryOperationalLocationProperty(filter: OperationalLocationPropertyFilter, order: OperationalLocationPropertyOrder, first: Int, offset: Int): [OperationalLocationProperty]
	aggregateOperationalLocationProperty(filter: OperationalLocationPropertyFilter): OperationalLocationPropertyAggregateResult
	getPersonnelClass(iid: ID, id: String): PersonnelClass
	queryPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	aggregatePersonnelClass(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	getPersonnelClassVersion(iid: ID, id: String, version: String): PersonnelClassVersion
	queryPersonnelClassVersion(filter: PersonnelClassVersionFilter, order: PersonnelClassVersionOrder, first: Int, offset: Int): [PersonnelClassVersion]
	aggregatePersonnelClassVersion(filter: PersonnelClassVersionFilter): PersonnelClassVersionAggregateResult
	getPersonnelClassProperty(iid: ID, id: String): PersonnelClassProperty
	queryPersonnelClassProperty(filter: PersonnelClassPropertyFilter, order: PersonnelClassPropertyOrder, first: Int, offset: Int): [PersonnelClassProperty]
	aggregatePersonnelClassProperty(filter: PersonnelClassPropertyFilter): PersonnelClassPropertyAggregateResult
	getPerson(iid: ID, id: String): Person
	queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	aggregatePerson(filter: PersonFilter): PersonAggregateResult
	getPersonVersion(iid: ID, id: String, version: String): PersonVersion
	queryPersonVersion(filter: PersonVersionFilter, order: PersonVersionOrder, first: Int, offset: Int): [PersonVersion]
	aggregatePersonVersion(filter: PersonVersionFilter): PersonVersionAggregateResult
	getPersonProperty(iid: ID, id: String): PersonProperty
	queryPersonProperty(filter: PersonPropertyFilter, order: PersonPropertyOrder, first: Int, offset: Int): [PersonProperty]
	aggregatePersonProperty(filter: PersonPropertyFilter): PersonPropertyAggregateResult
	getEquipmentClass(iid: ID, id: String): EquipmentClass
	queryEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	aggregateEquipmentClass(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	getEquipmentClassVersion(iid: ID, id: String, version: String): EquipmentClassVersion
	queryEquipmentClassVersion(filter: EquipmentClassVersionFilter, order: EquipmentClassVersionOrder, first: Int, offset: Int): [EquipmentClassVersion]
	aggregateEquipmentClassVersion(filter: EquipmentClassVersionFilter): EquipmentClassVersionAggregateResult
	getEquipmentClassProperty(iid: ID, id: String): EquipmentClassProperty
	queryEquipmentClassProperty(filter: EquipmentClassPropertyFilter, order: EquipmentClassPropertyOrder, first: Int, offset: Int): [EquipmentClassProperty]
	aggregateEquipmentClassProperty(filter: EquipmentClassPropertyFilter): EquipmentClassPropertyAggregateResult
	getEquipment(iid: ID, id: String): Equipment
	queryEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	aggregateEquipment(filter: EquipmentFilter): EquipmentAggregateResult
	getEquipmentVersion(iid: ID, id: String, version: String): EquipmentVersion
	queryEquipmentVersion(filter: EquipmentVersionFilter, order: EquipmentVersionOrder, first: Int, offset: Int): [EquipmentVersion]
	aggregateEquipmentVersion(filter: EquipmentVersionFilter): EquipmentVersionAggregateResult
	getEquipmentDataSource(iid: ID!): EquipmentDataSource
	queryEquipmentDataSource(filter: EquipmentDataSourceFilter, order: EquipmentDataSourceOrder, first: Int, offset: Int): [EquipmentDataSource]
	aggregateEquipmentDataSource(filter: EquipmentDataSourceFilter): EquipmentDataSourceAggregateResult
	getEquipmentProperty(iid: ID, id: String): EquipmentProperty
	queryEquipmentProperty(filter: EquipmentPropertyFilter, order: EquipmentPropertyOrder, first: Int, offset: Int): [EquipmentProperty]
	aggregateEquipmentProperty(filter: EquipmentPropertyFilter): EquipmentPropertyAggregateResult
	getPhysicalAssetClass(iid: ID, id: String): PhysicalAssetClass
	queryPhysicalAssetClass(filter: PhysicalAssetClassFilter, order: PhysicalAssetClassOrder, first: Int, offset: Int): [PhysicalAssetClass]
	aggregatePhysicalAssetClass(filter: PhysicalAssetClassFilter): PhysicalAssetClassAggregateResult
	getPhysicalAssetClassVersion(iid: ID, id: String, version: String): PhysicalAssetClassVersion
	queryPhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter, order: PhysicalAssetClassVersionOrder, first: Int, offset: Int): [PhysicalAssetClassVersion]
	aggregatePhysicalAssetClassVersion(filter: PhysicalAssetClassVersionFilter): PhysicalAssetClassVersionAggregateResult
	getPhysicalAssetClassProperty(iid: ID, id: String): PhysicalAssetClassProperty
	queryPhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter, order: PhysicalAssetClassPropertyOrder, first: Int, offset: Int): [PhysicalAssetClassProperty]
	aggregatePhysicalAssetClassProperty(filter: PhysicalAssetClassPropertyFilter): PhysicalAssetClassPropertyAggregateResult
	getPhysicalAsset(iid: ID, id: String): PhysicalAsset
	queryPhysicalAsset(filter: PhysicalAssetFilter, order: PhysicalAssetOrder, first: Int, offset: Int): [PhysicalAsset]
	aggregatePhysicalAsset(filter: PhysicalAssetFilter): PhysicalAssetAggregateResult
	getPhysicalAssetVersion(iid: ID, id: String, version: String): PhysicalAssetVersion
	queryPhysicalAssetVersion(filter: PhysicalAssetVersionFilter, order: PhysicalAssetVersionOrder, first: Int, offset: Int): [PhysicalAssetVersion]
	aggregatePhysicalAssetVersion(filter: PhysicalAssetVersionFilter): PhysicalAssetVersionAggregateResult
	getPhysicalAssetProperty(iid: ID, id: String): PhysicalAssetProperty
	queryPhysicalAssetProperty(filter: PhysicalAssetPropertyFilter, order: PhysicalAssetPropertyOrder, first: Int, offset: Int): [PhysicalAssetProperty]
	aggregatePhysicalAssetProperty(filter: PhysicalAssetPropertyFilter): PhysicalAssetPropertyAggregateResult
	getEquipmentAssetMapping(iid: ID, id: String): EquipmentAssetMapping
	queryEquipmentAssetMapping(filter: EquipmentAssetMappingFilter, order: EquipmentAssetMappingOrder, first: Int, offset: Int): [EquipmentAssetMapping]
	aggregateEquipmentAssetMapping(filter: EquipmentAssetMappingFilter): EquipmentAssetMappingAggregateResult
	getPhysicalAssetDataSource(iid: ID!): PhysicalAssetDataSource
	queryPhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter, order: PhysicalAssetDataSourceOrder, first: Int, offset: Int): [PhysicalAssetDataSource]
	aggregatePhysicalAssetDataSource(filter: PhysicalAssetDataSourceFilter): PhysicalAssetDataSourceAggregateResult
	getMaterialClass(iid: ID, id: String): MaterialClass
	queryMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	aggregateMaterialClass(filter: MaterialClassFilter): MaterialClassAggregateResult
	getMaterialClassVersion(iid: ID, id: String, version: String): MaterialClassVersion
	queryMaterialClassVersion(filter: MaterialClassVersionFilter, order: MaterialClassVersionOrder, first: Int, offset: Int): [MaterialClassVersion]
	aggregateMaterialClassVersion(filter: MaterialClassVersionFilter): MaterialClassVersionAggregateResult
	getMaterialClassProperty(iid: ID, id: String): MaterialClassProperty
	queryMaterialClassProperty(filter: MaterialClassPropertyFilter, order: MaterialClassPropertyOrder, first: Int, offset: Int): [MaterialClassProperty]
	aggregateMaterialClassProperty(filter: MaterialClassPropertyFilter): MaterialClassPropertyAggregateResult
	getMaterialDefinition(iid: ID, id: String): MaterialDefinition
	queryMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	aggregateMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult
	getMaterialDefinitionVersion(iid: ID, id: String, version: String): MaterialDefinitionVersion
	queryMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter, order: MaterialDefinitionVersionOrder, first: Int, offset: Int): [MaterialDefinitionVersion]
	aggregateMaterialDefinitionVersion(filter: MaterialDefinitionVersionFilter): MaterialDefinitionVersionAggregateResult
	getMaterialDefinitionProperty(iid: ID, id: String): MaterialDefinitionProperty
	queryMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter, order: MaterialDefinitionPropertyOrder, first: Int, offset: Int): [MaterialDefinitionProperty]
	aggregateMaterialDefinitionProperty(filter: MaterialDefinitionPropertyFilter): MaterialDefinitionPropertyAggregateResult
	getMaterialLot(iid: ID, id: String): MaterialLot
	queryMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	aggregateMaterialLot(filter: MaterialLotFilter): MaterialLotAggregateResult
	getMaterialLotProperty(iid: ID, id: String): MaterialLotProperty
	queryMaterialLotProperty(filter: MaterialLotPropertyFilter, order: MaterialLotPropertyOrder, first: Int, offset: Int): [MaterialLotProperty]
	aggregateMaterialLotProperty(filter: MaterialLotPropertyFilter): MaterialLotPropertyAggregateResult
	getMaterialSubLot(iid: ID, id: String): MaterialSubLot
	queryMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	aggregateMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	getUnitOfMeasure(iid: ID, id: String): UnitOfMeasure
	queryUnitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	aggregateUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasureAggregateResult
	getUnitOfMeasureConversion(iid: ID!): UnitOfMeasureConversion
	queryUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	aggregateUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult
	getProcessSegment(iid: ID, id: String): ProcessSegment
	queryProcessSegment(filter: ProcessSegmentFilter, order: ProcessSegmentOrder, first: Int, offset: Int): [ProcessSegment]
	aggregateProcessSegment(filter: ProcessSegmentFilter): ProcessSegmentAggregateResult
	getProcessSegmentVersion(iid: ID, id: String, version: String): ProcessSegmentVersion
	queryProcessSegmentVersion(filter: ProcessSegmentVersionFilter, order: ProcessSegmentVersionOrder, first: Int, offset: Int): [ProcessSegmentVersion]
	aggregateProcessSegmentVersion(filter: ProcessSegmentVersionFilter): ProcessSegmentVersionAggregateResult
	getProcessSegmentDependency(iid: ID, id: String): ProcessSegmentDependency
	queryProcessSegmentDependency(filter: ProcessSegmentDependencyFilter, order: ProcessSegmentDependencyOrder, first: Int, offset: Int): [ProcessSegmentDependency]
	aggregateProcessSegmentDependency(filter: ProcessSegmentDependencyFilter): ProcessSegmentDependencyAggregateResult
	getProcessSegmentParameter(iid: ID, id: String): ProcessSegmentParameter
	queryProcessSegmentParameter(filter: ProcessSegmentParameterFilter, order: ProcessSegmentParameterOrder, first: Int, offset: Int): [ProcessSegmentParameter]
	aggregateProcessSegmentParameter(filter: ProcessSegmentParameterFilter): ProcessSegmentParameterAggregateResult
	getTestSpecification(iid: ID, id: String, key: String): TestSpecification
	queryTestSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	aggregateTestSpecification(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	getOperationsEventClass(iid: ID, id: String): OperationsEventClass
	queryOperationsEventClass(filter: OperationsEventClassFilter, order: OperationsEventClassOrder, first: Int, offset: Int): [OperationsEventClass]
	aggregateOperationsEventClass(filter: OperationsEventClassFilter): OperationsEventClassAggregateResult
	getOperationsEventClassVersion(iid: ID, id: String, version: String): OperationsEventClassVersion
	queryOperationsEventClassVersion(filter: OperationsEventClassVersionFilter, order: OperationsEventClassVersionOrder, first: Int, offset: Int): [OperationsEventClassVersion]
	aggregateOperationsEventClassVersion(filter: OperationsEventClassVersionFilter): OperationsEventClassVersionAggregateResult
	getOperationsEventClassRecordSpecification(iid: ID!): OperationsEventClassRecordSpecification
	queryOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter, order: OperationsEventClassRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventClassRecordSpecification]
	aggregateOperationsEventClassRecordSpecification(filter: OperationsEventClassRecordSpecificationFilter): OperationsEventClassRecordSpecificationAggregateResult
	getOperationsEventClassProperty(iid: ID, id: String): OperationsEventClassProperty
	queryOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter, order: OperationsEventClassPropertyOrder, first: Int, offset: Int): [OperationsEventClassProperty]
	aggregateOperationsEventClassProperty(filter: OperationsEventClassPropertyFilter): OperationsEventClassPropertyAggregateResult
	getOperationsEventDefinition(iid: ID, id: String): OperationsEventDefinition
	queryOperationsEventDefinition(filter: OperationsEventDefinitionFilter, order: OperationsEventDefinitionOrder, first: Int, offset: Int): [OperationsEventDefinition]
	aggregateOperationsEventDefinition(filter: OperationsEventDefinitionFilter): OperationsEventDefinitionAggregateResult
	getOperationsEventDefinitionVersion(iid: ID, id: String, version: String): OperationsEventDefinitionVersion
	queryOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter, order: OperationsEventDefinitionVersionOrder, first: Int, offset: Int): [OperationsEventDefinitionVersion]
	aggregateOperationsEventDefinitionVersion(filter: OperationsEventDefinitionVersionFilter): OperationsEventDefinitionVersionAggregateResult
	getOperationsEventDefinitionRecordSpecification(iid: ID!): OperationsEventDefinitionRecordSpecification
	queryOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter, order: OperationsEventDefinitionRecordSpecificationOrder, first: Int, offset: Int): [OperationsEventDefinitionRecordSpecification]
	aggregateOperationsEventDefinitionRecordSpecification(filter: OperationsEventDefinitionRecordSpecificationFilter): OperationsEventDefinitionRecordSpecificationAggregateResult
	getOperationsEventDefinitionProperty(iid: ID!): OperationsEventDefinitionProperty
	queryOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter, order: OperationsEventDefinitionPropertyOrder, first: Int, offset: Int): [OperationsEventDefinitionProperty]
	aggregateOperationsEventDefinitionProperty(filter: OperationsEventDefinitionPropertyFilter): OperationsEventDefinitionPropertyAggregateResult
	getOperationsEvent(iid: ID, id: String): OperationsEvent
	queryOperationsEvent(filter: OperationsEventFilter, order: OperationsEventOrder, first: Int, offset: Int): [OperationsEvent]
	aggregateOperationsEvent(filter: OperationsEventFilter): OperationsEventAggregateResult
	getOperationsEventProperty(iid: ID, id: String): OperationsEventProperty
	queryOperationsEventProperty(filter: OperationsEventPropertyFilter, order: OperationsEventPropertyOrder, first: Int, offset: Int): [OperationsEventProperty]
	aggregateOperationsEventProperty(filter: OperationsEventPropertyFilter): OperationsEventPropertyAggregateResult
	getOperationsEventRecord(iid: ID, id: String): OperationsEventRecord
	queryOperationsEventRecord(filter: OperationsEventRecordFilter, order: OperationsEventRecordOrder, first: Int, offset: Int): [OperationsEventRecord]
	aggregateOperationsEventRecord(filter: OperationsEventRecordFilter): OperationsEventRecordAggregateResult
	getOperationsEventRecordEntry(iid: ID, id: String, recordId: String): OperationsEventRecordEntry
	queryOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter, order: OperationsEventRecordEntryOrder, first: Int, offset: Int): [OperationsEventRecordEntry]
	aggregateOperationsEventRecordEntry(filter: OperationsEventRecordEntryFilter): OperationsEventRecordEntryAggregateResult
	getOperationsDefinition(iid: ID, id: String): OperationsDefinition
	queryOperationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	aggregateOperationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
	getOperationsDefinitionVersion(iid: ID, id: String, version: String): OperationsDefinitionVersion
	queryOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter, order: OperationsDefinitionVersionOrder, first: Int, offset: Int): [OperationsDefinitionVersion]
	aggregateOperationsDefinitionVersion(filter: OperationsDefinitionVersionFilter): OperationsDefinitionVersionAggregateResult
	getOperationsMaterialBill(iid: ID, id: String): OperationsMaterialBill
	queryOperationsMaterialBill(filter: OperationsMaterialBillFilter, order: OperationsMaterialBillOrder, first: Int, offset: Int): [OperationsMaterialBill]
	aggregateOperationsMaterialBill(filter: OperationsMaterialBillFilter): OperationsMaterialBillAggregateResult
	getOperationsSegment(iid: ID, id: String): OperationsSegment
	queryOperationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	aggregateOperationsSegment(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	getOperationsSegmentDependency(iid: ID, id: String): OperationsSegmentDependency
	queryOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter, order: OperationsSegmentDependencyOrder, first: Int, offset: Int): [OperationsSegmentDependency]
	aggregateOperationsSegmentDependency(filter: OperationsSegmentDependencyFilter): OperationsSegmentDependencyAggregateResult
	getParameterSpecification(iid: ID, id: String): ParameterSpecification
	queryParameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	aggregateParameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	getPersonnelSpecification(iid: ID, id: String): PersonnelSpecification
	queryPersonnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	aggregatePersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	getPersonnelSpecificationProperty(iid: ID, id: String): PersonnelSpecificationProperty
	queryPersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter, order: PersonnelSpecificationPropertyOrder, first: Int, offset: Int): [PersonnelSpecificationProperty]
	aggregatePersonnelSpecificationProperty(filter: PersonnelSpecificationPropertyFilter): PersonnelSpecificationPropertyAggregateResult
	getEquipmentSpecification(iid: ID, id: String): EquipmentSpecification
	queryEquipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	aggregateEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	getEquipmentSpecificationProperty(iid: ID, id: String): EquipmentSpecificationProperty
	queryEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter, order: EquipmentSpecificationPropertyOrder, first: Int, offset: Int): [EquipmentSpecificationProperty]
	aggregateEquipmentSpecificationProperty(filter: EquipmentSpecificationPropertyFilter): EquipmentSpecificationPropertyAggregateResult
	getPhysicalAssetSpecification(iid: ID, id: String): PhysicalAssetSpecification
	queryPhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter, order: PhysicalAssetSpecificationOrder, first: Int, offset: Int): [PhysicalAssetSpecification]
	aggregatePhysicalAssetSpecification(filter: PhysicalAssetSpecificationFilter): PhysicalAssetSpecificationAggregateResult
	getPhysicalAssetSpecificationProperty(iid: ID, id: String): PhysicalAssetSpecificationProperty
	queryPhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter, order: PhysicalAssetSpecificationPropertyOrder, first: Int, offset: Int): [PhysicalAssetSpecificationProperty]
	aggregatePhysicalAssetSpecificationProperty(filter: PhysicalAssetSpecificationPropertyFilter): PhysicalAssetSpecificationPropertyAggregateResult
	getMaterialSpecification(iid: ID, id: String): MaterialSpecification
	queryMaterialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	aggregateMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	getMaterialSpecificationProperty(iid: ID, id: String): MaterialSpecificationProperty
	queryMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter, order: MaterialSpecificationPropertyOrder, first: Int, offset: Int): [MaterialSpecificationProperty]
	aggregateMaterialSpecificationProperty(filter: MaterialSpecificationPropertyFilter): MaterialSpecificationPropertyAggregateResult
	getOperationsSchedule(iid: ID, id: String): OperationsSchedule
	queryOperationsSchedule(filter: OperationsScheduleFilter, order: OperationsScheduleOrder, first: Int, offset: Int): [OperationsSchedule]
	aggregateOperationsSchedule(filter: OperationsScheduleFilter): OperationsScheduleAggregateResult
	getOperationsRequest(iid: ID, id: String): OperationsRequest
	queryOperationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	aggregateOperationsRequest(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	getSegmentRequirement(iid: ID, id: String): SegmentRequirement
	querySegmentRequirement(filter: SegmentRequirementFilter, order: SegmentRequirementOrder, first: Int, offset: Int): [SegmentRequirement]
	aggregateSegmentRequirement(filter: SegmentRequirementFilter): SegmentRequirementAggregateResult
	getSegmentParameter(iid: ID, id: String): SegmentParameter
	querySegmentParameter(filter: SegmentParameterFilter, order: SegmentParameterOrder, first: Int, offset: Int): [SegmentParameter]
	aggregateSegmentParameter(filter: SegmentParameterFilter): SegmentParameterAggregateResult
	getPersonnelRequirement(iid: ID, id: String): PersonnelRequirement
	queryPersonnelRequirement(filter: PersonnelRequirementFilter, order: PersonnelRequirementOrder, first: Int, offset: Int): [PersonnelRequirement]
	aggregatePersonnelRequirement(filter: PersonnelRequirementFilter): PersonnelRequirementAggregateResult
	getPersonnelRequirementProperty(iid: ID, id: String): PersonnelRequirementProperty
	queryPersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter, order: PersonnelRequirementPropertyOrder, first: Int, offset: Int): [PersonnelRequirementProperty]
	aggregatePersonnelRequirementProperty(filter: PersonnelRequirementPropertyFilter): PersonnelRequirementPropertyAggregateResult
	getEquipmentRequirement(iid: ID, id: String): EquipmentRequirement
	queryEquipmentRequirement(filter: EquipmentRequirementFilter, order: EquipmentRequirementOrder, first: Int, offset: Int): [EquipmentRequirement]
	aggregateEquipmentRequirement(filter: EquipmentRequirementFilter): EquipmentRequirementAggregateResult
	getEquipmentRequirementProperty(iid: ID, id: String): EquipmentRequirementProperty
	queryEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter, order: EquipmentRequirementPropertyOrder, first: Int, offset: Int): [EquipmentRequirementProperty]
	aggregateEquipmentRequirementProperty(filter: EquipmentRequirementPropertyFilter): EquipmentRequirementPropertyAggregateResult
	getPhysicalAssetRequirement(iid: ID, id: String): PhysicalAssetRequirement
	queryPhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter, order: PhysicalAssetRequirementOrder, first: Int, offset: Int): [PhysicalAssetRequirement]
	aggregatePhysicalAssetRequirement(filter: PhysicalAssetRequirementFilter): PhysicalAssetRequirementAggregateResult
	getPhysicalAssetRequirementProperty(iid: ID, id: String): PhysicalAssetRequirementProperty
	queryPhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter, order: PhysicalAssetRequirementPropertyOrder, first: Int, offset: Int): [PhysicalAssetRequirementProperty]
	aggregatePhysicalAssetRequirementProperty(filter: PhysicalAssetRequirementPropertyFilter): PhysicalAssetRequirementPropertyAggregateResult
	getMaterialRequirement(iid: ID, id: String): MaterialRequirement
	queryMaterialRequirement(filter: MaterialRequirementFilter, order: MaterialRequirementOrder, first: Int, offset: Int): [MaterialRequirement]
	aggregateMaterialRequirement(filter: MaterialRequirementFilter): MaterialRequirementAggregateResult
	getMaterialRequirementProperty(iid: ID, id: String): MaterialRequirementProperty
	queryMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter, order: MaterialRequirementPropertyOrder, first: Int, offset: Int): [MaterialRequirementProperty]
	aggregateMaterialRequirementProperty(filter: MaterialRequirementPropertyFilter): MaterialRequirementPropertyAggregateResult
	getOperationsPerformance(iid: ID, id: String): OperationsPerformance
	queryOperationsPerformance(filter: OperationsPerformanceFilter, order: OperationsPerformanceOrder, first: Int, offset: Int): [OperationsPerformance]
	aggregateOperationsPerformance(filter: OperationsPerformanceFilter): OperationsPerformanceAggregateResult
	getOperationsResponse(iid: ID, id: String): OperationsResponse
	queryOperationsResponse(filter: OperationsResponseFilter, order: OperationsResponseOrder, first: Int, offset: Int): [OperationsResponse]
	aggregateOperationsResponse(filter: OperationsResponseFilter): OperationsResponseAggregateResult
	getSegmentResponse(iid: ID, id: String): SegmentResponse
	querySegmentResponse(filter: SegmentResponseFilter, order: SegmentResponseOrder, first: Int, offset: Int): [SegmentResponse]
	aggregateSegmentResponse(filter: SegmentResponseFilter): SegmentResponseAggregateResult
	getSegmentData(iid: ID, id: String): SegmentData
	querySegmentData(filter: SegmentDataFilter, order: SegmentDataOrder, first: Int, offset: Int): [SegmentData]
	aggregateSegmentData(filter: SegmentDataFilter): SegmentDataAggregateResult
	getPersonnelActual(iid: ID, id: String): PersonnelActual
	queryPersonnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	aggregatePersonnelActual(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	getPersonnelActualProperty(iid: ID, id: String): PersonnelActualProperty
	queryPersonnelActualProperty(filter: PersonnelActualPropertyFilter, order: PersonnelActualPropertyOrder, first: Int, offset: Int): [PersonnelActualProperty]
	aggregatePersonnelActualProperty(filter: PersonnelActualPropertyFilter): PersonnelActualPropertyAggregateResult
	getEquipmentActual(iid: ID, id: String): EquipmentActual
	queryEquipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	aggregateEquipmentActual(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	getEquipmentActualProperty(iid: ID, id: String): EquipmentActualProperty
	queryEquipmentActualProperty(filter: EquipmentActualPropertyFilter, order: EquipmentActualPropertyOrder, first: Int, offset: Int): [EquipmentActualProperty]
	aggregateEquipmentActualProperty(filter: EquipmentActualPropertyFilter): EquipmentActualPropertyAggregateResult
	getPhysicalAssetActual(iid: ID, id: String): PhysicalAssetActual
	queryPhysicalAssetActual(filter: PhysicalAssetActualFilter, order: PhysicalAssetActualOrder, first: Int, offset: Int): [PhysicalAssetActual]
	aggregatePhysicalAssetActual(filter: PhysicalAssetActualFilter): PhysicalAssetActualAggregateResult
	getPhysicalAssetActualProperty(iid: ID, id: String): PhysicalAssetActualProperty
	queryPhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter, order: PhysicalAssetActualPropertyOrder, first: Int, offset: Int): [PhysicalAssetActualProperty]
	aggregatePhysicalAssetActualProperty(filter: PhysicalAssetActualPropertyFilter): PhysicalAssetActualPropertyAggregateResult
	getMaterialActual(iid: ID, id: String): MaterialActual
	queryMaterialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	aggregateMaterialActual(filter: MaterialActualFilter): MaterialActualAggregateResult
	getMaterialActualProperty(iid: ID, id: String): MaterialActualProperty
	queryMaterialActualProperty(filter: MaterialActualPropertyFilter, order: MaterialActualPropertyOrder, first: Int, offset: Int): [MaterialActualProperty]
	aggregateMaterialActualProperty(filter: MaterialActualPropertyFilter): MaterialActualPropertyAggregateResult
	getOperationsResponseProperty(iid: ID, id: String): OperationsResponseProperty
	queryOperationsResponseProperty(filter: OperationsResponsePropertyFilter, order: OperationsResponsePropertyOrder, first: Int, offset: Int): [OperationsResponseProperty]
	aggregateOperationsResponseProperty(filter: OperationsResponsePropertyFilter): OperationsResponsePropertyAggregateResult
	getWorkMaster(iid: ID, id: String, version: String): WorkMaster
	queryWorkMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
	aggregateWorkMaster(filter: WorkMasterFilter): WorkMasterAggregateResult
	getWorkDirective(iid: ID, id: String, version: String): WorkDirective
	queryWorkDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
	aggregateWorkDirective(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult
	getWorkflowSpecification(iid: ID, id: String): WorkflowSpecification
	queryWorkflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	aggregateWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult
	getWorkflowSpecificationVersion(iid: ID, id: String, version: String): WorkflowSpecificationVersion
	queryWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter, order: WorkflowSpecificationVersionOrder, first: Int, offset: Int): [WorkflowSpecificationVersion]
	aggregateWorkflowSpecificationVersion(filter: WorkflowSpecificationVersionFilter): WorkflowSpecificationVersionAggregateResult
	getWorkflowSpecificationProperty(iid: ID, id: String): WorkflowSpecificationProperty
	queryWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter, order: WorkflowSpecificationPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationProperty]
	aggregateWorkflowSpecificationProperty(filter: WorkflowSpecificationPropertyFilter): WorkflowSpecificationPropertyAggregateResult
	getWorkflowSpecificationNodeProperty(iid: ID, id: String): WorkflowSpecificationNodeProperty
	queryWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter, order: WorkflowSpecificationNodePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeProperty]
	aggregateWorkflowSpecificationNodeProperty(filter: WorkflowSpecificationNodePropertyFilter): WorkflowSpecificationNodePropertyAggregateResult
	getWorkflowSpecificationNodeTypeProperty(iid: ID, id: String): WorkflowSpecificationNodeTypeProperty
	queryWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter, order: WorkflowSpecificationNodeTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationNodeTypeProperty]
	aggregateWorkflowSpecificationNodeTypeProperty(filter: WorkflowSpecificationNodeTypePropertyFilter): WorkflowSpecificationNodeTypePropertyAggregateResult
	getWorkflowSpecificationConnection(iid: ID, id: String): WorkflowSpecificationConnection
	queryWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter, order: WorkflowSpecificationConnectionOrder, first: Int, offset: Int): [WorkflowSpecificationConnection]
	aggregateWorkflowSpecificationConnection(filter: WorkflowSpecificationConnectionFilter): WorkflowSpecificationConnectionAggregateResult
	getWorkflowWaypoint(iid: ID!): WorkflowWaypoint
	queryWorkflowWaypoint(filter: WorkflowWaypointFilter, order: WorkflowWaypointOrder, first: Int, offset: Int): [WorkflowWaypoint]
	aggregateWorkflowWaypoint(filter: WorkflowWaypointFilter): WorkflowWaypointAggregateResult
	getWorkflowSpecificationConnectionProperty(iid: ID, id: String): WorkflowSpecificationConnectionProperty
	queryWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter, order: WorkflowSpecificationConnectionPropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionProperty]
	aggregateWorkflowSpecificationConnectionProperty(filter: WorkflowSpecificationConnectionPropertyFilter): WorkflowSpecificationConnectionPropertyAggregateResult
	getWorkflowSpecificationConnectionTypeProperty(iid: ID, id: String): WorkflowSpecificationConnectionTypeProperty
	queryWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter, order: WorkflowSpecificationConnectionTypePropertyOrder, first: Int, offset: Int): [WorkflowSpecificationConnectionTypeProperty]
	aggregateWorkflowSpecificationConnectionTypeProperty(filter: WorkflowSpecificationConnectionTypePropertyFilter): WorkflowSpecificationConnectionTypePropertyAggregateResult
	getForm(iid: ID, id: String): Form
	queryForm(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	aggregateForm(filter: FormFilter): FormAggregateResult
	getWorkSchedule(iid: ID, id: String): WorkSchedule
	queryWorkSchedule(filter: WorkScheduleFilter, order: WorkScheduleOrder, first: Int, offset: Int): [WorkSchedule]
	aggregateWorkSchedule(filter: WorkScheduleFilter): WorkScheduleAggregateResult
	getWorkRequest(iid: ID, id: String): WorkRequest
	queryWorkRequest(filter: WorkRequestFilter, order: WorkRequestOrder, first: Int, offset: Int): [WorkRequest]
	aggregateWorkRequest(filter: WorkRequestFilter): WorkRequestAggregateResult
	getJobList(iid: ID, id: String): JobList
	queryJobList(filter: JobListFilter, order: JobListOrder, first: Int, offset: Int): [JobList]
	aggregateJobList(filter: JobListFilter): JobListAggregateResult
	getJobOrder(iid: ID, id: String): JobOrder
	queryJobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	aggregateJobOrder(filter: JobOrderFilter): JobOrderAggregateResult
	getJobOrderParameter(iid: ID, id: String): JobOrderParameter
	queryJobOrderParameter(filter: JobOrderParameterFilter, order: JobOrderParameterOrder, first: Int, offset: Int): [JobOrderParameter]
	aggregateJobOrderParameter(filter: JobOrderParameterFilter): JobOrderParameterAggregateResult
	getWorkPerformance(iid: ID, id: String): WorkPerformance
	queryWorkPerformance(filter: WorkPerformanceFilter, order: WorkPerformanceOrder, first: Int, offset: Int): [WorkPerformance]
	aggregateWorkPerformance(filter: WorkPerformanceFilter): WorkPerformanceAggregateResult
	getWorkResponse(iid: ID, id: String): WorkResponse
	queryWorkResponse(filter: WorkResponseFilter, order: WorkResponseOrder, first: Int, offset: Int): [WorkResponse]
	aggregateWorkResponse(filter: WorkResponseFilter): WorkResponseAggregateResult
	getJobResponseList(iid: ID, id: String): JobResponseList
	queryJobResponseList(filter: JobResponseListFilter, order: JobResponseListOrder, first: Int, offset: Int): [JobResponseList]
	aggregateJobResponseList(filter: JobResponseListFilter): JobResponseListAggregateResult
	getJobResponse(iid: ID, id: String): JobResponse
	queryJobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	aggregateJobResponse(filter: JobResponseFilter): JobResponseAggregateResult
	getJobResponseData(iid: ID, id: String): JobResponseData
	queryJobResponseData(filter: JobResponseDataFilter, order: JobResponseDataOrder, first: Int, offset: Int): [JobResponseData]
	aggregateJobResponseData(filter: JobResponseDataFilter): JobResponseDataAggregateResult
	getWorkCalendarDefinitionEntry(iid: ID!): WorkCalendarDefinitionEntry
	queryWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	aggregateWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult
	getWorkCalendarDefinitionEntryProperty(iid: ID, id: String): WorkCalendarDefinitionEntryProperty
	queryWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter, order: WorkCalendarDefinitionEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntryProperty]
	aggregateWorkCalendarDefinitionEntryProperty(filter: WorkCalendarDefinitionEntryPropertyFilter): WorkCalendarDefinitionEntryPropertyAggregateResult
	getWorkCalendarEntry(iid: ID!): WorkCalendarEntry
	queryWorkCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	aggregateWorkCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
	getWorkCalendarEntryProperty(iid: ID, id: String): WorkCalendarEntryProperty
	queryWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter, order: WorkCalendarEntryPropertyOrder, first: Int, offset: Int): [WorkCalendarEntryProperty]
	aggregateWorkCalendarEntryProperty(filter: WorkCalendarEntryPropertyFilter): WorkCalendarEntryPropertyAggregateResult
	getWorkCalendar(iid: ID, name: String): WorkCalendar
	queryWorkCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	aggregateWorkCalendar(filter: WorkCalendarFilter): WorkCalendarAggregateResult
	getInformationObject(iid: ID!): InformationObject
	queryInformationObject(filter: InformationObjectFilter, order: InformationObjectOrder, first: Int, offset: Int): [InformationObject]
	aggregateInformationObject(filter: InformationObjectFilter): InformationObjectAggregateResult
	getStateModelProperty(iid: ID, id: String): StateModelProperty
	queryStateModelProperty(filter: StateModelPropertyFilter, order: StateModelPropertyOrder, first: Int, offset: Int): [StateModelProperty]
	aggregateStateModelProperty(filter: StateModelPropertyFilter): StateModelPropertyAggregateResult
	getLibreService(id: ID, name: String): LibreService
	queryLibreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	aggregateLibreService(filter: LibreServiceFilter): LibreServiceAggregateResult
	getDataSubscription(id: ID, name: String): DataSubscription
	queryDataSubscription(filter: DataSubscriptionFilter, order: DataSubscriptionOrder, first: Int, offset: Int): [DataSubscription]
	aggregateDataSubscription(filter: DataSubscriptionFilter): DataSubscriptionAggregateResult
	getEquipmentPropertyOverride(iid: ID, id: String): EquipmentPropertyOverride
	queryEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	aggregateEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult
	getEquipmentNameAlias(iid: ID!): EquipmentNameAlias
	queryEquipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	aggregateEquipmentNameAlias(filter: EquipmentNameAliasFilter): EquipmentNameAliasAggregateResult
	getPropertyNameAlias(iid: ID!): PropertyNameAlias
	queryPropertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	aggregatePropertyNameAlias(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
	getPropertyValueAlias(iid: ID!): PropertyValueAlias
	queryPropertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	aggregatePropertyValueAlias(filter: PropertyValueAliasFilter): PropertyValueAliasAggregateResult
	getDataSource(iid: ID, id: String): DataSource
	queryDataSource(filter: DataSourceFilter, order: DataSourceOrder, first: Int, offset: Int): [DataSource]
	aggregateDataSource(filter: DataSourceFilter): DataSourceAggregateResult
	getDataSourceVersion(iid: ID, id: String, version: String): DataSourceVersion
	queryDataSourceVersion(filter: DataSourceVersionFilter, order: DataSourceVersionOrder, first: Int, offset: Int): [DataSourceVersion]
	aggregateDataSourceVersion(filter: DataSourceVersionFilter): DataSourceVersionAggregateResult
	getDataSourceTopic(iid: ID, id: String): DataSourceTopic
	queryDataSourceTopic(filter: DataSourceTopicFilter, order: DataSourceTopicOrder, first: Int, offset: Int): [DataSourceTopic]
	aggregateDataSourceTopic(filter: DataSourceTopicFilter): DataSourceTopicAggregateResult
	getDataSourceMethod(iid: ID, id: String): DataSourceMethod
	queryDataSourceMethod(filter: DataSourceMethodFilter, order: DataSourceMethodOrder, first: Int, offset: Int): [DataSourceMethod]
	aggregateDataSourceMethod(filter: DataSourceMethodFilter): DataSourceMethodAggregateResult
	getDataSourceMethodArgument(iid: ID, id: String): DataSourceMethodArgument
	queryDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter, order: DataSourceMethodArgumentOrder, first: Int, offset: Int): [DataSourceMethodArgument]
	aggregateDataSourceMethodArgument(filter: DataSourceMethodArgumentFilter): DataSourceMethodArgumentAggregateResult
	getPayloadFieldDefinition(iid: ID!): PayloadFieldDefinition
	queryPayloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	aggregatePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult
	getEnvironmentalVariable(iid: ID, id: String): EnvironmentalVariable
	queryEnvironmentalVariable(filter: EnvironmentalVariableFilter, order: EnvironmentalVariableOrder, first: Int, offset: Int): [EnvironmentalVariable]
	aggregateEnvironmentalVariable(filter: EnvironmentalVariableFilter): EnvironmentalVariableAggregateResult
	getEnvironmentalVariableVersion(iid: ID, id: String, version: String): EnvironmentalVariableVersion
	queryEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter, order: EnvironmentalVariableVersionOrder, first: Int, offset: Int): [EnvironmentalVariableVersion]
	aggregateEnvironmentalVariableVersion(filter: EnvironmentalVariableVersionFilter): EnvironmentalVariableVersionAggregateResult
	getSecret(iid: ID, id: String): Secret
	querySecret(filter: SecretFilter, order: SecretOrder, first: Int, offset: Int): [Secret]
	aggregateSecret(filter: SecretFilter): SecretAggregateResult
	getSecretVersion(iid: ID, id: String, version: String): SecretVersion
	querySecretVersion(filter: SecretVersionFilter, order: SecretVersionOrder, first: Int, offset: Int): [SecretVersion]
	aggregateSecretVersion(filter: SecretVersionFilter): SecretVersionAggregateResult
	getSignature(iid: ID!): Signature
	querySignature(filter: SignatureFilter, order: SignatureOrder, first: Int, offset: Int): [Signature]
	aggregateSignature(filter: SignatureFilter): SignatureAggregateResult
	getSignatureReason(iid: ID, id: String): SignatureReason
	querySignatureReason(filter: SignatureReasonFilter, order: SignatureReasonOrder, first: Int, offset: Int): [SignatureReason]
	aggregateSignatureReason(filter: SignatureReasonFilter): SignatureReasonAggregateResult
	getComment(iid: ID, id: String): Comment
	queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	aggregateComment(filter: CommentFilter): CommentAggregateResult
}

